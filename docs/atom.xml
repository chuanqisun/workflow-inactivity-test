<?xml version="1.0" encoding="utf-8"?>
   <feed xmlns="http://www.w3.org/2005/Atom">
 
 
   <title>osmosfeed starter test 3</title>
   <link href="https://chuanqisun.github.io/workflow-inactivity-test/"/>
   <updated>2022-10-05T02:15:24.516Z</updated>
   <id>https://chuanqisun.github.io/workflow-inactivity-test/</id>
   <generator uri="https://github.com/osmoscraft/osmosfeed" version="0.0.14">osmosfeed</generator>
 
     <entry>
       <title>State of CSS 2022 Survey Now Open</title>
         <link href="https://css-tricks.com/state-of-css-2022-survey-now-open/"/>
       <updated>2022-10-04T18:35:09.000Z</updated>
       <content type="text">The State of CSS survey recently opened up. Last year, the survey confirmed everyone’s assumptions that TailwindCSS is super popular and CSS variables are mainstream. It also codified what many of us want from CSS, from Container Queries to a parent selector. (Spoiler alert, we now have both of ’em.)
 
 
 
 While I wouldn’t say the results have been super surprising each year, this time I’m excited to start seeing more historical trends reveal themselves. The survey has been running since 2019, so that’s going to be four years (ancient in front-end years!) of data to see if certain frameworks came and went, specific features are gaining momentum, what general learning practices are out there, and just plain more context. It takes time for stuff to build up like this, so kudos to Sacha Greif for keeping this thing going.
 
 
 
 
 
 
 
 And speaking of the team behind the survey, Lea Verou is new to the bunch and lead this year’s edition. Lea made some nice additions, including more open-ended comments, questions about browser inconsistencies, and a question that compares the amount of time you write CSS versus JavaScript.
 
 
 
 Browsers actually use this stuff to help prioritize what features to work on — so definitely add your voice to the mix! The polls close on October 20.
 To Shared Link — Permalink on CSS-Tricks
 State of CSS 2022 Survey Now Open originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Introducing Shoelace, a Framework-Independent Component-Based UX Library</title>
         <link href="https://css-tricks.com/shoelace-component-frameowrk-introduction/"/>
       <updated>2022-10-04T13:01:53.000Z</updated>
       <content type="text">This is a post about Shoelace, a component library by Cory LaViska, but with a twist. It defines all your standard UX components: tabs, modals, accordions, auto-completes, and much, much more. They look beautiful out of the box, are accessible, and fully customizable. But rather than creating these components in React, or Solid, or Svelte, etc., it creates them with Web Components; this means you can use them with any framework.
 
 
 
 
 
 
 Some preliminary things
 
 
 Web Components are great, but there’s currently a few small hitches to be aware of.
 
 
 React
 
 
 I said they work in any JavaScript framework, but as I’ve written before, React’s support for Web Components is currently poor. To address this, Shoelace actually created wrappers just for React.
 
 
 
 Another option, which I personally like, is to create a thin React component that accepts the tag name of a Web Component and all of its attributes and properties, then does the dirty work of handling React’s shortcomings. I talked about this option in a previous post. I like this solution because it’s designed to be deleted. The Web Component interoperability problem is currently fixed in React’s experimental branch, so once that’s shipped, any thin Web Component-interoperable component you’re using could be searched, and removed, leaving you with direct Web Component usages, without any React wrappers.
 
 
 Server-Side Rendering (SSR)
 
 
 Support for SSR is also poor at the time of this writing. In theory, there’s something called Declarative Shadow DOM (DSD) which would enable SSR. But browser support is minimal, and in any event, DSD actually requires server support to work right, which means Next, Remix, or whatever you happen to use on the server will need to become capable of some special handling.
 
 
 
 That said, there are other ways to get Web Components to just work with a web app that’s SSR’d with something like Next. The short version is that the scripts registering your Web Components need to run in a blocking script before your markup is parsed. But that’s a topic for another post.
 
 
 
 Of course, if you’re building any kind of client-rendered SPA, this is a non-issue. This is what we’ll work with in this post.
 
 
 Let’s start
 
 
 Since I want this post to focus on Shoelace and on its Web Component nature, I’ll be using Svelte for everything. I’ll also be using this Stackblitz project for demonstration. We’ll build this demo together, step-by-step, but feel free to open that REPL up anytime to see the end result.
 
 
 
 I’ll show you how to use Shoelace, and more importantly, how to customize it. We’ll talk about Shadow DOMs and which styles they block from the outside world (as well as which ones they don’t). We’ll also talk about the ::part CSS selector — which may be entirely new to you — and we’ll even see how Shoelace allows us to override and customize its various animations.
 
 
 
 If you find you like Shoelace after reading this post and want to try it in a React project, my advice is to use a wrapper like I mentioned in the introduction. This will allow you to use any of Shoelace’s components, and it can be removed altogether once React ships the Web Component fixes they already have (look for that in version 19).
 
 
 Introducing Shoelace
 
 
 Shoelace has fairly detailed installation instructions. At its most simple, you can dump &lt;script&gt; and &lt;style&gt; tags into your HTML doc, and that’s that. For any production app, though, you’ll probably want to selectively import only what you want, and there are instructions for that, too.
 
 
 
 With Shoelace installed, let’s create a Svelte component to render some content, and then go through the steps to fully customize it. To pick something fairly non-trivial, I went with the tabs and a dialog (commonly referred to as a modal) components. Here’s some markup taken largely from the docs:
 
 
 
 &lt;sl-tab-group&gt;
   &lt;sl-tab slot&#x3D;&quot;nav&quot; panel&#x3D;&quot;general&quot;&gt;General&lt;/sl-tab&gt;
   &lt;sl-tab slot&#x3D;&quot;nav&quot; panel&#x3D;&quot;custom&quot;&gt;Custom&lt;/sl-tab&gt;
   &lt;sl-tab slot&#x3D;&quot;nav&quot; panel&#x3D;&quot;advanced&quot;&gt;Advanced&lt;/sl-tab&gt;
   &lt;sl-tab slot&#x3D;&quot;nav&quot; panel&#x3D;&quot;disabled&quot; disabled&gt;Disabled&lt;/sl-tab&gt;
 
   &lt;sl-tab-panel name&#x3D;&quot;general&quot;&gt;This is the general tab panel.&lt;/sl-tab-panel&gt;
   &lt;sl-tab-panel name&#x3D;&quot;custom&quot;&gt;This is the custom tab panel.&lt;/sl-tab-panel&gt;
   &lt;sl-tab-panel name&#x3D;&quot;advanced&quot;&gt;This is the advanced tab panel.&lt;/sl-tab-panel&gt;
   &lt;sl-tab-panel name&#x3D;&quot;disabled&quot;&gt;This is a disabled tab panel.&lt;/sl-tab-panel&gt;
 &lt;/sl-tab-group&gt;
 
 &lt;sl-dialog no-header label&#x3D;&quot;Dialog&quot;&gt;
   Hello World!
   &lt;button slot&#x3D;&quot;footer&quot; variant&#x3D;&quot;primary&quot;&gt;Close&lt;/button&gt;
 &lt;/sl-dialog&gt;
 
 &lt;br /&gt;
 &lt;button&gt;Open Dialog&lt;/button&gt;
 
 
 
 This renders some nice, styled tabs. The underline on the active tab even animates nicely, and slides from one active tab to the next.
 
 
 
 Default tabs in Shoelace
 
 
 
 I won’t waste your time running through every inch of the APIs that are already well-documented on the Shoelace website. Instead, let’s look into how best to interact with, and fully customize these Web Components.
 
 
 Interacting with the API: methods and events
 
 
 Calling methods and subscribing to events on a Web Component might be slightly different than what you’re used to with your normal framework of choice, but it’s not too complicated. Let’s see how.
 
 
 Tabs
 
 
 The tabs component (&lt;sl-tab-group&gt;) has a show method, which manually shows a particular tab. In order to call this, we need to get access to the underlying DOM element of our tabs. In Svelte, that means using bind:this. In React, it’d be a ref. And so on. Since we’re using Svelte, let’s declare a variable for our tabs instance:
 
 
 
 &lt;script&gt;
   let tabs;
 &lt;/script&gt;
 
 
 
 …and bind it:
 
 
 
 &lt;sl-tab-group bind:this&#x3D;&quot;{tabs}&quot;&gt;&lt;/sl-tab-group&gt;
 
 
 
 Now we can add a button to call it:
 
 
 
 &lt;button on:click&#x3D;{() &#x3D;&gt; tabs.show(&quot;custom&quot;)}&gt;Show custom&lt;/button&gt;
 
 
 
 It’s the same idea for events. There’s a sl-tab-show event that fires when a new tab is shown. We could use addEventListener on our tabs variable, or we can use Svelte’s on:event-name shortcut.
 
 
 
 &lt;sl-tab-group bind:this&#x3D;{tabs} on:sl-tab-show&#x3D;{e &#x3D;&gt; console.log(e)}&gt;
 
 
 
 That works and logs the event objects as you show different tabs.
 
 
 
 
 
 
 
 Typically we render tabs and let the user click between them, so this work isn’t usually even necessary, but it’s there if you need it. Now let’s get the dialog component interactive.
 
 
 Dialog
 
 
 The dialog component (&lt;sl-dialog&gt;) takes an open prop which controls whether the dialog is… open. Let’s declare it in our Svelte component:
 
 
 
 &lt;script&gt;
   let tabs;
   let open &#x3D; false;
 &lt;/script&gt;
 
 
 
 It also has an sl-hide event for when the dialog is hidden. Let’s pass our open prop and bind to the hide event so we can reset it when the user clicks outside of the dialog content to close it. And let’s add a click handler to that close button to set our open prop to false, which would also close the dialog.
 
 
 
 &lt;sl-dialog no-header {open} label&#x3D;&quot;Dialog&quot; on:sl-hide&#x3D;{() &#x3D;&gt; open &#x3D; false}&gt;
   Hello World!
   &lt;button slot&#x3D;&quot;footer&quot; variant&#x3D;&quot;primary&quot; on:click&#x3D;{() &#x3D;&gt; open &#x3D; false}&gt;Close&lt;/button&gt;
 &lt;/sl-dialog&gt;
 
 
 
 Lastly, let’s wire up our open dialog button:
 
 
 
 &lt;button on:click&#x3D;{() &#x3D;&gt; (open &#x3D; true)}&gt;Open Dialog&lt;/button&gt;
 
 
 
 And that’s that. Interacting with a component library’s API is more or less straightforward. If that’s all this post did, it would be pretty boring.
 
 
 
 But Shoelace — being built with Web Components — means that some things, particularly styles, will work a bit differently than we might be used to.
 
 
 Customize all the styles!
 
 
 As of this writing, Shoelace is still in beta and the creator is considering changing some default styles, possibly even removing some defaults altogether so they’ll no longer override your host application’s styles. The concepts we’ll cover are relevant either way, but don’t be surprised if some of the Shoelace specifics I mention are different when you go to use it.
 
 
 
 As nice as Shoelace’s default styles are, we might have our own designs in our web app, and we’ll want our UX components to match. Let’s see how we’d go about that in a Web Components world.
 
 
 
 We won’t try to actually improve anything. The Shoelace creator is a far better designer than I’ll ever be. Instead, we’ll just look at how to change things, so you can adapt to your own web apps.
 
 
 A quick tour of Shadow DOMs
 
 
 Take a peek at one of those tab headers in your DevTools; it should look something like this:
 
 
 
 
 
 
 
 Our tab element has created a div container with a .tab and .tab--active class, and a tabindex, while also displaying the text we entered for that tab. But notice that it’s sitting inside of a shadow root. This allows Web Component authors to add their own markup to the Web Component while also providing a place for the content we provide. Notice the &lt;slot&gt; element? That basically means “put whatever content the user rendered between the Web Component tags here.”
 
 
 
 So the &lt;sl-tab&gt; component creates a shadow root, adds some content to it to render the nicely-styled tab header along with a placeholder (&lt;slot&gt;) that renders our content inside.
 
 
 Encapsulated styles
 
 
 One of the classic, more frustrating problems in web development has always been styles cascading to places where we don’t want them. You might worry that any style rules in our application which specify something like div.tab would interfere with these tabs. It turns out this isn’t a problem; shadow roots encapsulate styles. Styles from outside the shadow root do not affect what’s inside the shadow root (with some exceptions which we’ll talk about), and vice versa.
 
 
 
 The exceptions to this are inheritable styles. You, of course, don’t need to apply a font-family style for every element in your web app. Instead, you can specify your font-family once, on :root or html and have it inherit everywhere beneath it. This inheritance will, in fact, pierce the shadow root as well.
 
 
 
 CSS custom properties (often called “css variables”) are a related exception. A shadow root can absolutely read a CSS property that is defined outside the shadow root; this will become relevant in a moment.
 
 
 The ::part selector
 
 
 What about styles that don’t inherit. What if we want to customize something like cursor, which doesn’t inherit, on something inside of the shadow root. Are we out of luck? It turns out we’re not. Take another look at the tab element image above and its shadow root. Notice the part attribute on the div? That allows you to target and style that element from outside the shadow root using the ::part selector. We’ll walk through an example is a bit.
 
 
 Overriding Shoelace styles
 
 
 Let’s see each of these approaches in action. As of now, a lot of Shoelace styles, including fonts, receive default values from CSS custom properties. To align those fonts with your application’s styles, override the custom props in question. See the docs for info on which CSS variables Shoelace is using, or you can simply  inspect the styles in any given element in DevTools.
 
 
 Inheriting styles through the shadow root
 
 
 Open the app.css file in the src directory of the StackBlitz project. In the :root section at the bottom, you should see a letter-spacing: normal; declaration. Since the letter-spacing property is inheritable, try setting a new value, like 2px. On save, all content, including the tab headers defined in the shadow root, will adjust accordingly.
 
 
 
 
 
 
 Overwriting Shoelace CSS variables
 
 
 The &lt;sl-tab-group&gt; component reads an --indicator-color CSS custom property for the active tab’s underline. We can override this with some basic CSS:
 
 
 
 sl-tab-group {
   --indicator-color: green;
 }
 
 
 
 And just like that, we now have a green indicator!
 
 
 
 
 
 
 Querying parts
 
 
 In the version of Shoelace I’m using right now (2.0.0-beta.83), any non-disabled tab has a pointer cursor. Let’s change that to a default cursor for the active (selected) tab. We already saw that the &lt;sl-tab&gt; element adds a part&#x3D;&quot;base&quot; attribute on the container for the tab header. Also, the currently selected tab receives an active attribute. Let’s use these facts to target the active tab, and change the cursor:
 
 
 
 sl-tab[active]::part(base) {
   cursor: default;
 }
 
 
 
 And that’s that!
 
 
 Customizing animations
 
 
 For some icing on the metaphorical cake, let’s see how Shoelace allows us to customize animations. Shoelace uses the Web Animations API, and exposes a setDefaultAnimation API to control how different elements animate their various interactions. See the docs for specifics, but as an example, here’s how you might change Shoelace’s default dialog animation from expanding outward, and shrinking inward, to instead animate in from the top, and drop down while hiding.
 
 
 
 import { setDefaultAnimation } from &quot;@shoelace-style/shoelace/dist/utilities/animation-registry&quot;;
 
 setDefaultAnimation(&quot;dialog.show&quot;, {
   keyframes: [
     { opacity: 0, transform: &quot;translate3d(0px, -20px, 0px)&quot; },
     { opacity: 1, transform: &quot;translate3d(0px, 0px, 0px)&quot; },
   ],
   options: { duration: 250, easing: &quot;cubic-bezier(0.785, 0.135, 0.150, 0.860)&quot; },
 });
 setDefaultAnimation(&quot;dialog.hide&quot;, {
   keyframes: [
     { opacity: 1, transform: &quot;translate3d(0px, 0px, 0px)&quot; },
     { opacity: 0, transform: &quot;translate3d(0px, 20px, 0px)&quot; },
   ],
   options: { duration: 200, easing: &quot;cubic-bezier(0.785, 0.135, 0.150, 0.860)&quot; },
 });
 
 
 
 That code is in the App.svelte file. Comment it out to see the original, default animation.
 
 
 Wrapping up
 
 
 Shoelace is an incredibly ambitious component library that’s built with Web Components. Since Web Components are framework-independent, they can be used in any project, with any framework. With new frameworks starting to come out with both amazing performance characteristics, and also ease of use, the ability to use quality user experience widgets which aren’t tied to any one framework has never been more compelling.
 
 Introducing Shoelace, a Framework-Independent Component-Based UX Library originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Getting Started With WordPress Block Development</title>
         <link href="https://css-tricks.com/getting-started-with-wordpress-block-development/"/>
       <updated>2022-09-30T13:04:56.000Z</updated>
       <content type="text">Let’s acknowledge that developing for WordPress is weird right now. Whether you’re new to WordPress or have worked with it for eons, the introduction of “Full-Site Editing” (FSE) features, including the Block Editor (WordPress 5.0) and the Site Editor (WordPress 5.9), have upended the traditional way we build WordPress themes and plugins.
 
 
 
 Even though it’s been five years since we met the Block Editor for the first time, developing for it is difficult because documentation is either lacking or outdated. That’s more of a statement on how fast FSE features are moving, something Geoff lamented in a recent post.
 
 
 
 Case in point: In 2018, an introductory series about getting into Gutenberg development was published right here on CSS-tricks. Times have changed since then, and, while that style of development does still work, it is not recommended anymore (besides, the create-guten-block project it’s based on is also no longer maintained).
 
 
 
 In this article, I intend to help you get started with WordPress block development in a way that follows the current methodology. So, yes, things could very well change after this is published. But I’m going to try and focus on it in a way that hopefully captures the essence of block development, because even though the tools might evolve over time, the core ideas are likely to remain the same.
 
 
 
 
 
 
 
 The Gutenberg Editor: (1) The block inserter, (2) the content area, and (3) the settings sidebarCredit: WordPress Block Editor Handbook
 
 
 What are WordPress blocks, exactly?
 
 
 Let’s start by airing out some confusion with what we mean by terms like blocks. All of the development that went into these features leading up to WordPress 5.0 was codenamed “Gutenberg” — you know, the inventor of the printing press.
 
 
 
 Since then, “Gutenberg” has been used to describe everything related to blocks, including the Block Editor and Site Editor, so it’s gotten convoluted to the extent that some folks depise the name. To top it all off, there’s a Gutenberg plugin where experimental features are tested for possible inclusion. And if you think calling all of this “Full-Site Editing” would solve the issue, there are concerns with that as well.
 
 
 
 So, when we refer to “blocks” in this article what we mean are components for creating content in the WordPress Block Editor. Blocks are inserted into a page or post and provide the structure for a particular type of content. WordPress ships with a handful of “core” blocks for common content types, like Paragraph, List, Image, Video, and Audio, to name a few.
 
 
 
 Apart from these core blocks, we can create custom blocks too. That is what WordPress block development is about (there’s also filtering core blocks to modify their functionality, but you likely won’t be needing that just yet).
 
 
 What blocks do
 
 
 Before we dive into creating blocks, we must first get some sense of how blocks work internally. That will definitely save us a ton of frustration later on.
 
 
 
 The way I like to think about a block is rather abstract: to me, a block is an entity, with some properties (called attributes), that represents some content. I know this sounds pretty vague, but stay with me. A block basically manifests itself in two ways: as a graphical interface in the block editor or as a chunk of data in the database.
 
 
 
 When you open up the WordPress Block Editor and insert a block, say a Pullquote block, you get a nice interface. You can click into that interface and edit the quoted text. The Settings panel to the right side of the Block Editor UI provides options for adjusting the text and setting the block’s appearance.
 
 
 
 The Pullquote block that is included in WordPress Core
 
 
 
 When you are done creating your fancy pullquote and hit Publish, the entire post gets stored in the database in the wp_posts table. This isn’t anything new because of Gutenberg. That’s how things have always worked — WordPress stores post content in a designated table in the database. But what’s new is that a representation of the Pullquote block is part of the content that gets stored in post_content field of the wp_posts table.
 
 
 
 What does this representation look like? Have a look:
 
 
 
 &lt;!-- wp:pullquote {&quot;textAlign&quot;:&quot;right&quot;} --&gt;
 &lt;figure class&#x3D;&quot;wp-block-pullquote has-text-align-right&quot;&gt;
   &lt;blockquote&gt;
     &lt;p&gt;It is not an exaggeration to say that peas can be described as nothing less than perfect spheres of joy.&lt;/p&gt;
     &lt;cite&gt;The Encyclopedia of world peas&lt;/cite&gt;
   &lt;/blockquote&gt;
 &lt;/figure&gt;
 &lt;!-- /wp:pullquote --&gt;
 
 
 
 Looks like plain HTML, right?! This, in technical lingo, is the “serialized” block. Notice the JSON data in the HTML comment, &quot;textAlign&quot;: &quot;right&quot;. That’s an attribute — a property associated with the block.
 
 
 
 Let’s say that you close the Block Editor, and then some time later, open it again. The content from the relevant post_content field is retrieved by the Block Editor. The editor then parses the retrieved content, and wherever it encounters this:
 
 
 
 &lt;!-- wp:pullquote {&quot;textAlign&quot;:&quot;right&quot;} --&gt;...&lt;!-- /wp:pullquote --&gt;
 
 
 
 …it says out loud to itself:
 
 
 
 OK, that seems like a Pullquote block to me. Hmm.. it’s got an attribute too… I do have a JavaScript file that tells me how to construct the graphical interface for a Pullquote block in the editor from its attributes. I should do that now to render this block in all its glory.
 
 
 
 As a block developer, your job is to:
 
 
 
 Tell WordPress that you want to register a specific type of block, with so-and-so details.Provide the JavaScript file to the Block Editor that will help it render the block in the editor while also “serializing” it to save it in the database.Provide any additional resources the block needs for its proper functionality, e.g. styles and fonts.
 
 
 
 One thing to note is that all of this conversion from serialized data to graphical interface — and vice versa — takes place only in the Block Editor. On the front end, the content is displayed exactly the way it is stored. Therefore, in a sense, blocks are a fancy way of putting data in the database.
 
 
 
 Hopefully, this gives you some clarity as to how a block works.
 
 
 
 
 
 
 Blocks are just plugins
 
 
 Blocks are just plugins. Well, technically, you can put blocks in themes and you can put multiple blocks in a plugin. But, more often than not, if you want to make a block, you’re going to be making a plugin. So, if you’ve ever created a WordPress plugin, then you’re already part-way there to having a handle on making a WordPress block.
 
 
 
 But let’s assume for a moment that you’ve never set up a WordPress plugin, let alone a block. Where do you even start?
 
 
 Setting up a block
 
 
 We have covered what blocks are. Let’s start setting things up to make one.
 
 
 Make sure you have Node installed
 
 
 This will give you access to npm and npx commands, where npm installs your block’s dependencies and helps compile stuff, while npx runs commands on packages without installing them. If you’re on macOS, you probably already have Node and can can use nvm to update versions. If you’re on Windows, you’ll need to download and install Node.
 
 
 Create a project folder
 
 
 Now, you might run into other tutorials that jump straight into the command line and instruct you to install a package called @wordpress/create-block. This package is great because it spits out a fully formed project folder with all the dependencies and tools you need to start developing.
 
 
 
 I personally go this route when setting up my own blocks, but humor me for a moment because I want to cut through the opinionated stuff it introduces and focus just on the required bits for the sake of understanding the baseline development environment.
 
 
 
 These are the files I’d like to call out specifically:
 
 
 
 readme.txt: This is sort of like the front face of the plugin directory, typically used to describe the plugin and provide additional details on usage and installation. If you submit your block to the WordPress Plugin Directory, this file helps populate the plugin page. If you plan on creating a GitHub repo for your block plugin, then you might also consider a README.md file with the same information so it displays nicely there.package.json: This defines the Node packages that are required for development. We’ll crack it open when we get to installation. In classic WordPress plugin development, you might be accustomed to working with Composer and a composer.json file instead. This is the equivalent of that.plugin.php: This is the main plugin file and, yes, it’s classic PHP! We’ll put our plugin header and metadata in here and use it to register the plugin.
 
 
 
 In addition to these files, there’s also the src directory, which is supposed to contain the source code of our block.
 
 
 
 Having these files and the src directory is all you need to get started. Out of that group, notice that we technically only need one file (plugin.php) to make the plugin. The rest either provide information or are used to manage the development environment.
 
 
 
 The aforementioned @wordpress/create-block package scaffolds these files (and more) for us. You can think of it as an automation tool instead of a necessity. Regardless, it does make the job easier, so you can take the liberty of scaffolding a block with it by running:
 
 
 
 npx @wordpress/create-block
 
 
 Install block dependencies
 
 
 Assuming you have the three files mentioned in the previous section ready, it’s time to install the dependencies. First, we need to specify the dependencies we will need. We do that by editing the package.json. While using the @wordpress/create-block utility, the following is generated for us (comments added; JSON does not support comments, so remove the comments if you’re copying the code):
 
 
 
 {
   // Defines the name of the project
   &quot;name&quot;: &quot;block-example&quot;,
   // Sets the project version number using semantic versioning
   &quot;version&quot;: &quot;0.1.0&quot;,
   // A brief description of the project
   &quot;description&quot;: &quot;Example block scaffolded with Create Block tool.&quot;,
   // You could replace this with yourself
   &quot;author&quot;: &quot;The WordPress Contributors&quot;,
   // Standard licensing information
   &quot;license&quot;: &quot;GPL-2.0-or-later&quot;,
   // Defines the main JavaScript file
   &quot;main&quot;: &quot;build/index.js&quot;,
   // Everything we need for building and compiling the plugin during development
   &quot;scripts&quot;: {
     &quot;build&quot;: &quot;wp-scripts build&quot;,
     &quot;format&quot;: &quot;wp-scripts format&quot;,
     &quot;lint:css&quot;: &quot;wp-scripts lint-style&quot;,
     &quot;lint:js&quot;: &quot;wp-scripts lint-js&quot;,
     &quot;packages-update&quot;: &quot;wp-scripts packages-update&quot;,
     &quot;plugin-zip&quot;: &quot;wp-scripts plugin-zip&quot;,
     &quot;start&quot;: &quot;wp-scripts start&quot;
   },
   // Defines which version of the scripts packages are used (24.1.0 at time of writing)
   // https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/
   &quot;devDependencies&quot;: {
     &quot;@wordpress/scripts&quot;: &quot;^24.1.0&quot;
   }
 }
 
 
 
 
   
           View without comments      
   
 
 {
   &quot;name&quot;: &quot;block-example&quot;,
   &quot;version&quot;: &quot;0.1.0&quot;,
   &quot;description&quot;: &quot;Example block scaffolded with Create Block tool.&quot;,
   &quot;author&quot;: &quot;The WordPress Contributors&quot;,
   &quot;license&quot;: &quot;GPL-2.0-or-later&quot;,
   &quot;main&quot;: &quot;build/index.js&quot;,
   &quot;scripts&quot;: {
     &quot;build&quot;: &quot;wp-scripts build&quot;,
     &quot;format&quot;: &quot;wp-scripts format&quot;,
     &quot;lint:css&quot;: &quot;wp-scripts lint-style&quot;,
     &quot;lint:js&quot;: &quot;wp-scripts lint-js&quot;,
     &quot;packages-update&quot;: &quot;wp-scripts packages-update&quot;,
     &quot;plugin-zip&quot;: &quot;wp-scripts plugin-zip&quot;,
     &quot;start&quot;: &quot;wp-scripts start&quot;
   },
   &quot;devDependencies&quot;: {
     &quot;@wordpress/scripts&quot;: &quot;^24.1.0&quot;
   }
 }
 
 
 
 
 
 The @wordpress/scripts package is the main dependency here. As you can see, it’s a devDependency meaning that it aids in development. How so? It exposes the wp-scripts binary that we can use to compile our code, from the src directory to the build directory, among other things.
 
 
 
 There are a number of other packages that WordPress maintains for various purposes. For example, the @wordpress/components package provides several pre-fab UI components for the WordPress Block Editor that can be used for creating consistent user experiences for your block that aligns with WordPress design standards.
 
 
 
 You don’t actually need to install these packages, even if you want to use them. This is because these @wordpress dependencies aren’t bundled with your block code. Instead, any import statements referencing code from utility packages — like @wordpress/components — are used to construct an “assets” file, during compilation. Moreover, these import statements are converted to statements mapping the imports to properties of a global object. For example, import { __ } from &quot;@wordpress/i18n&quot; is converted to a minified version of const __ &#x3D; window.wp.i18n.__. (window.wp.i18n being an object that is guaranteed to be available in the global scope, once the corresponding i18n package file is enqueued).
 
 
 
 During block registration in the plugin file, the “assets” file is implicitly used to tell WordPress the package dependencies for the block. These dependencies are automatically enqueued. All of this is taken care of behind the scenes, granted you are using the scripts package. That being said, you can still choose to locally install dependencies for code completion and parameter info in your package.json file:
 
 
 
 // etc.
 &quot;devDependencies&quot;: {
   &quot;@wordpress/scripts&quot;: &quot;^24.1.0&quot;
 },
 &quot;dependencies&quot;: {
   &quot;@wordpress/components&quot;: &quot;^19.17.0&quot;
 }
 
 
 
 Now that package.json is set up, we should be able to install all those dependencies by navigating to the project folder in the command line and running npm install.
 
 
 
 
 
 
 Add the plugin header
 
 
 If you’re coming from classic WordPress plugin development, then you probably know that all plugins have a block of information in the main plugin file that helps WordPress recognize the plugin and display information about it on the Plugins screen of the WordPress admin.
 
 
 
 Here’s what @wordpress/create-block generated for me in for a plugin creatively called “Hello World”:
 
 
 
 &lt;?php
 /**
  * Plugin Name:       Block Example
  * Description:       Example block scaffolded with Create Block tool.
  * Requires at least: 5.9
  * Requires PHP:      7.0
  * Version:           0.1.0
  * Author:            The WordPress Contributors
  * License:           GPL-2.0-or-later
  * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
  * Text Domain:       css-tricks
  *
  * @package           create-block
  */
 
 
 
 That’s in the main plugin file, which you can call whatever you’d like. You might call it something generic like index.php or plugin.php. The create-block package automatically calls it whatever you provide as the project name when installing it. Since I called this example “Block Example”, the package gave us a block-example.php file with all this stuff.
 
 
 
 You’re going to want to change some of the details, like making yourself the author and whatnot. And not all of that is necessary. If I was rolling this from “scratch”, then it might look something closer to this:
 
 
 
 &lt;?php
 /**
  * Plugin Name:       Block Example
  * Plugin URI:        https://css-tricks.com
  * Description:       An example plugin for learning WordPress block development.
  * Version:           1.0.0
  * Author:            Arjun Singh
  * License:           GPL-2.0-or-later
  * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
  * Text Domain:       css-tricks
  */
 
 
 
 I won’t get into the exact purpose of each line since that’s already a well-established pattern in the WordPress Plugin Handbook.
 
 
 The file structure
 
 
 We’ve already looked at the required files for our block. But if you’re using @wordpress/create-block, you will see a bunch of other files in the project folder.
 
 
 
 Here’s what’s in there at the moment:
 
 
 
 block-example/
 ├── build
 ├── node_modules
 ├── src/
 │   ├── block.json
 │   ├── edit.js
 │   ├── editor.scss
 │   ├── index.js
 │   ├── save.js
 │   └── style.scss
 ├── .editorconfig
 ├── .gitignore
 ├── block-example.php
 ├── package-lock.json
 ├── package.json
 └── readme.txt
 
 
 
 Phew, that’s a lot! Let’s call out the new stuff:
 
 
 
 build/: This folder received the compiled assets when processing the files for production use.node_modules: This holds all the development dependencies we installed when running npm install.src/: This folder holds the plugin’s source code that gets compiled and sent to the build directory. We’ll look at each of the files in here in just a bit..editorconfig: This contains configurations to adapt your code editor for code consistency..gitignore: This is a standard repo file that identifies local files that should be excluded from version control tracking. Your node_modules should definitely be included in here.package-lock.json: This is an auto-generated file containing for tracking updates to the required packages we installed with npm install.
 
 
 Block metadata
 
 
 I want to dig into the src directory with you but will focus first on just one file in it: block.json. If you’ve used create-block , it’s already there for you; if not, go ahead and create it. WordPress is leaning in hard to make this the standard, canonical way to register a block by providing metadata that provides WordPress context to both recognize the block and render it in the Block Editor.
 
 
 
 Here’s what @wordpress/create-block generated for me:
 
 
 
 {
   &quot;$schema&quot;: &quot;https://schemas.wp.org/trunk/block.json&quot;,
   &quot;apiVersion&quot;: 2,
   &quot;name&quot;: &quot;create-block/block example&quot;,
   &quot;version&quot;: &quot;0.1.0&quot;,
   &quot;title&quot;: &quot;Block Example&quot;,
   &quot;category&quot;: &quot;widgets&quot;,
   &quot;icon&quot;: &quot;smiley&quot;,
   &quot;description&quot;: &quot;Example block scaffolded with Create Block tool.&quot;,
   &quot;supports&quot;: {
     &quot;html&quot;: false
   },
   &quot;textdomain&quot;: &quot;css-tricks&quot;,
   &quot;editorScript&quot;: &quot;file:./index.js&quot;,
   &quot;editorStyle&quot;: &quot;file:./index.css&quot;,
   &quot;style&quot;: &quot;file:./style-index.css&quot;
 }
 
 
 
 There’s actually a bunch of different information we can include here, but all that’s actually required is name and title. A super minimal version might look like this:
 
 
 
 {
   &quot;$schema&quot;: &quot;https://schemas.wp.org/trunk/block.json&quot;,
   &quot;apiVersion&quot;: 2,
   &quot;name&quot;: &quot;css-tricks/block-example&quot;,
   &quot;version&quot;: &quot;1.0.0&quot;,
   &quot;title&quot;: &quot;Block Example&quot;,
   &quot;category&quot;: &quot;text&quot;,
   &quot;icon&quot;: &quot;format-quote&quot;,
   &quot;editorScript&quot;: &quot;file:./index.js&quot;,
 }
 
 
 
 $schema defines the schema formatting used to validate the content in the file. It sounds like a required thing, but it’s totally optional as it allows supporting code editors to validate the syntax and provide other additional affordances, like tooltip hints and auto-completion.apiVersion refers to which version of the Block API the plugin uses. Today, Version 2 is the latest.name is a required unique string that helps identify the plugin. Notice that I’ve prefixed this with css-tricks/ which I’m using as a namespace to help avoid conflicts with other plugins that might have the same name. You might choose to use something like your initials instead (e.g. as/block-example).version is something WordPress suggests using as a cache-busting mechanism when new versions are released.title is the other required field, and it sets the name that’s used wherever the plugin is displayed.category groups the block with other blocks and displays them together in the Block Editor. Current existing categories include text, media, design, widgets, theme, and embed, and you can even create custom categories.icon lets you choose something from the Dashicons library to visually represent your block in the Block Editor. I’m using the format-quote icon since we’re making our own pullquote sort of thing in this example. It’s nice we can leverage existing icons rather than having to create our own, though that’s certainly possible.editorScript is where the main JavaScript file, index.js, lives.
 
 
 Register the block
 
 
 One last thing before we hit actual code, and that’s to register the plugin. We just set up all that metadata and we need a way for WordPress to consume it. That way, WordPress knows where to find all the plugin assets so they can be enqueued for use in the Block Editor.
 
 
 
 Registering the block is a two-fold process. We need to register it both in PHP and in JavaScript. For the PHP side, open up the main plugin file (block-example.php in this case) and add the following right after the plugin header:
 
 
 
 function create_block_block_example_block_init() {
   register_block_type( __DIR__ . &#x27;/build&#x27; );
 }
 add_action( &#x27;init&#x27;, &#x27;create_block_block_example_block_init&#x27; );
 
 
 
 This is what the create-block utility generated for me, so that’s why the function is named the way it is. We can use a different name. The key, again, is avoiding conflicts with other plugins, so it’s a good idea to use your namespace here to make it as unique as possible:
 
 
 
 function css_tricks_block_example_block_init() {
   register_block_type( __DIR__ . &#x27;/build&#x27; );
 }
 add_action( &#x27;init&#x27;, &#x27;css_tricks_block_example_block_init&#x27; );
 
 
 
 Why are we pointing to the build directory if the block.json with all the block metadata is in src? That’s because our code still needs to be compiled. The scripts package processes the code from files in the src directory and places the compiled files used in production in the build directory, while also copying the block.json file in the process.
 
 
 
 Alright, let’s move over to the JavaScript side of registering the block. Open up src/index.js and make sure it looks like this:
 
 
 
 import { registerBlockType } from &quot;@wordpress/blocks&quot;;
 
 import metadata from &quot;./block.json&quot;;
 import Edit from &quot;./edit.js&quot;;
 import Save from &quot;./save.js&quot;;
 
 const { name } &#x3D; metadata;
 
 registerBlockType(name, {
   edit: Edit,
   save: Save,
 });
 
 
 
 We’re getting into React and JSX land! This tells WordPress to:
 
 
 
 Import the registerBlockType module from the @wordpress/blocks package.Import metadata from block.json.Import the Edit and Save components from their corresponding files. We’ll be putting code into those files later.Register the the block, and use the Edit and Save components for rendering the block and saving its content to the database.
 
 
 
 What’s up with the edit and save functions? One of the nuances of WordPress block development is differentiating the “back end” from the “front end” and these functions are used to render the block’s content in those contexts, where edit handles back-end rendering and save writes the content from the Block Editor to the database for rendering the content on the front end of the site.
 
 
 A quick test
 
 
 We can do some quick work to see our block working in the Block Editor and rendered on the front end. Let’s open index.js again and use the edit and save functions to return some basic content that illustrates how they work:
 
 
 
 import { registerBlockType } from &quot;@wordpress/blocks&quot;;
 import metadata from &quot;./block.json&quot;;
 
 const { name } &#x3D; metadata;
 
 registerBlockType(name, {
   edit: () &#x3D;&gt; {
     return (
       &quot;Hello from the Block Editor&quot;
     );
   },
   save: () &#x3D;&gt; {
     return (
       &quot;Hello from the front end&quot;
     );
   }
 });
 
 
 
 This is basically a stripped-down version of the same code we had before, only we’re pointing directly to the metadata in block.json to fetch the block name, and left out the Edit and Save components since we’re running the functions directly from here.
 
 
 
 We can compile this by running npm run build in the command line. After that, we have access to a block called “Block Example” in the Block Editor:
 
 
 
 
 
 
 
 If we drop the block into the content area, we get the message we return from the edit function:
 
 
 
 
 
 
 
 If we save and publish the post, we should get the message we return from the save function when viewing it on the front end:
 
 
 
 
 
 
 Creating a block
 
 
 Looks like everything is hooked up! We can revert back to what we had in index.js before the test now that we’ve confirmed things are working:
 
 
 
 import { registerBlockType } from &quot;@wordpress/blocks&quot;;
 
 import metadata from &quot;./block.json&quot;;
 import Edit from &quot;./edit.js&quot;;
 import Save from &quot;./save.js&quot;;
 
 const { name } &#x3D; metadata;
 
 registerBlockType(name, {
   edit: Edit,
   save: Save,
 });
 
 
 
 Notice that the edit and save functions are tied to two existing files in the src directory that @wordpress/create-block generated for us and includes all the additional imports we need in each file. More importantly, though, those files establish the Edit and Save components that contain the block’s markup.
 
 
 Back end markup (src/edit.js)
 
 
 import { useBlockProps } from &quot;@wordpress/block-editor&quot;;
 import { __ } from &quot;@wordpress/i18n&quot;;
 
 export default function Edit() {
   return (
     &lt;p {...useBlockProps()}&gt;
       {__(&quot;Hello from the Block Editor&quot;, &quot;block-example&quot;)}
     &lt;/p&gt;
   );
 }
 
 
 
 See what we did there? We’re importing props from the @wordpress/block-editor package which allows us to generate classes we can use later for styling. We’re also importing the __ internationalization function, for dealing with translations.
 
 
 
 
 
 
 Front-end markup (src/save.js)
 
 
 This creates a Save component and we’re going to use pretty much the same thing as src/edit.js with slightly different text:
 
 
 
 import { useBlockProps } from &quot;@wordpress/block-editor&quot;;
 import { __ } from &quot;@wordpress/i18n&quot;;
 
 export default function Save() {
   return (
     &lt;p {...useBlockProps.save()}&gt;
       {__(&quot;Hello from the front end&quot;, &quot;block-example&quot;)}
     &lt;/p&gt;
   );
 }
 
 
 
 Again, we get a nice class we can use in our CSS:
 
 
 
 
 
 
 Styling blocks
 
 
 We just covered how to use block props to create classes. You’re reading this article on a site all about CSS, so I feel like I’d be missing something if we didn’t specifically address how to write block styles.
 
 
 Differentiating front and back-end styles
 
 
 If you take a look at the block.json in the src directory you’ll find two fields related to styles:
 
 
 
 editorStyle provides the path to the styles applied to the back end.style is the path for shared styles that are applied to both the front and back end.
 
 
 
 Kev Quirk has a detailed article that shows his approach for making the back-end editor look like the front end UI.
 
 
 
 Recall that the @wordpress/scripts package copies the block.json file when it processes the code in the /src directory and places compiled assets in the /build directory. It is the build/block.json file that is used to register the block. That means any path that we provide in src/block.json should be written relative to build/block.json.
 
 
 Using Sass
 
 
 We could drop a couple of CSS files in the build directory, reference the paths in src/block.json, run the build, and call it a day. But that doesn’t leverage the full might of the @wordpress/scripts compilation process, which is capable of compiling Sass into CSS. Instead, we place our style files in the src directory and import them in JavaScript.
 
 
 
 While doing that, we need to be mindful of how @wordpress/scripts processes styles:
 
 
 
 A file named style.css or style.scss or style.sass, imported into the JavaScript code, is compiled to style-index.css.All other style files are compiled and bundled into index.css.
 
 
 
 The @wordpress/scripts package uses webpack for bundling and @wordpress/scripts uses the PostCSS plugin for working for processing styles. PostCSS can be extended with additional plugins. The scripts package uses the ones for Sass, SCSS, and Autoprefixer, all of which are available for use without installing additional packages.
 
 
 
 In fact, when you spin up your initial block with @wordpress/create-block, you get a nice head start with SCSS files you can use to hit the ground running:
 
 
 
 editor.scss contains all the styles that are applied to the back-end editor.style.scss contains all the styles shared by both the front and back end.
 
 
 
 Let’s now see this approach in action by writing a little Sass that we’ll compile into the CSS for our block. Even though the examples aren’t going to be very Sass-y, I’m still writing them to the SCSS files to demonstrate the compilation process.
 
 
 Front and back-end styles
 
 
 OK, let’s start with styles that are applied to both the front and back end. First, we need to create src/style.scss (it’s already there if you’re using @wordpress/create-block) and make sure we import it, which we can do in index.js:
 
 
 
 import &quot;./style.scss&quot;;
 
 
 
 Open up src/style.scss and drop a few basic styles in there using the class that was generated for us from the block props:
 
 
 
 .wp-block-css-tricks-block-example {
   background-color: rebeccapurple;
   border-radius: 4px;
   color: white;
   font-size: 24px;
 }
 
 
 
 That’s it for now! When we run the build, this gets compiled into build/style.css and is referenced by both the Block Editor and the front end.
 
 
 Back-end styles
 
 
 You might need to write styles that are specific to the Block Editor. For that, create src/editor.scss (again, @wordpress/create-block does this for you) and drop some styles in there:
 
 
 
 .wp-block-css-tricks-block-example {
   background-color: tomato;
   color: black;
 }
 
 
 
 Then import it in edit.js, which is the file that contains our Edit component (we can import it anywhere we want, but since these styles are for the editor, it’s more logical to import the component here):
 
 
 
 import &quot;./editor.scss&quot;;
 
 
 
 Now when we run npm run build, the styles are applied to the block in both contexts:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Referencing styles in block.json
 
 
 We imported the styling files in the edit.js and index.js, but recall that the compilation step generates two CSS files for us in the build directory: index.css and style-index.css respectively. We need to reference these generated files in the block metadata.
 
 
 
 Let’s add a couple of statements to the block.json metadata:
 
 
 
 {
   &quot;$schema&quot;: &quot;https://schemas.wp.org/trunk/block.json&quot;,
   &quot;apiVersion&quot;: 2,
   &quot;name&quot;: &quot;css-tricks/block-example&quot;,
   &quot;version&quot;: &quot;1.0.0&quot;,
   &quot;title&quot;: &quot;Block Example&quot;,
   &quot;category&quot;: &quot;text&quot;,
   &quot;icon&quot;: &quot;format-quote&quot;,
   &quot;editorScript&quot;: &quot;file:./index.js&quot;,
   &quot;editorStyle&quot;: &quot;file:./index.css&quot;,
   &quot;style&quot;: &quot;file:./style-index.css&quot;
 }
 
 
 
 Run npm run build once again, install and activate the plugin on your WordPress site, and you’re ready to use it!
 
 
 
 You can use npm run start to run your build in watch mode, automatically compiling your code every time you make a change in your code and save.
 
 
 We’re scratching the surface
 
 
 Actual blocks make use of the Block Editor’s Settings sidebar and other features WordPress provides to create rich user experiences. Moreover, the fact that there’s essentially two versions of our block — edit and save — you also need to give thought to how you organize your code to avoid code duplication.
 
 
 
 But hopefully this helps de-mystify the general process for creating WordPress blocks. This is truly a new era in WordPress development. It’s tough to learn new ways of doing things, but I’m looking forward to seeing how it evolves. Tools like @wordpress/create-block help, but even then it’s nice to know exactly what it’s doing and why.
 
 
 
 Are the things we covered here going to change? Most likely! But at least you have a baseline to work from as we keep watching WordPress blocks mature, including best practices for making them.
 
 
 References
 
 
 Again, my goal here is to map out an efficient path for getting into block development in this season where things are evolving quickly and WordPress documentation is having a little hard time catching up. Here are some resources I used to pull this together:
 
 
 
 Key Concepts (WordPress Block Editor Handbook)Create a Block Tutorial (WordPress Block Editor Handbook)Metadata in block.json (WordPress Block Editor Handbook)Source code for core blocks (WordPress GitHub)webpack config used in the @wordpress/scripts package (WordPress GitHub)A Backend Engineer Learns to Build Block Editor Blocks, Part 1 (Tom McFarlin)Ryan Welcher’s Twitch streams (Ryan is a developer advocate at Automattic)
 
 Getting Started With WordPress Block Development originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>GIFs Without the .gif: The Most Performant Image and Video Options Right Now</title>
         <link href="https://css-tricks.com/gifs-without-the-gif-the-most-performant-image-and-video-options-right-now/"/>
       <updated>2022-09-28T13:09:11.000Z</updated>
       <content type="text">So you want an auto-playing looping video without sound? In popular vernacular this is the very meaning of the word GIF. The word has stuck around but the image format itself is ancient and obsolete. Twitter, for example, has a “GIF” button that actually inserts a &lt;video&gt; element with an MP4 file into your tweet — no .gif in sight. There are a beguiling amount of ways to achieve the same outcome but one thing is clear: there’s really no good reason to use the bulky .gif file format anymore.
 
 
 
 
 
 
 Use a HTML &lt;video&gt; element
 
 
 It’s easy to recreate the behavior of a GIF using the HTML video element.
 
 
 
 &lt;video autoplay loop muted playsinline src&#x3D;&quot;cats.mp4&quot;&gt;&lt;/video&gt;
 
 
 
 With this code the video will play automatically in a continuous loop with no audio. playsinline means that mobile browsers will play the video where it is on the page rather than opening in fullscreen.
 
 
 
 While the HTML video element itself has been supported for many years, the same can’t be said for the wide variety of video formats.
 
 
 
 Videos are made up of two parts: the container and the video codec. (If your video contains audio then it is made up of three parts, the third being the audio codec.) Containers can store video, audio, subtitles and meta information. The two most common containers for video on the web are MP4 and WebM. The container is the same as the file type — if a file ends with a .mp4 extension, that means it’s using an MP4 container. The file extension doesn’t tell you the codec though. Examples of video codecs commonly used on the web include VP8, VP9, H.264 and HEVC (H.265). For your video to play online, the browser needs to support both the video container and the codec.
 
 
 
 Browser support for video is a labyrinthine mess, which is part of the reason YouTube embeds are ubiquitous, but that doesn’t work for our use case. Let’s look at the video formats that are worth considering.
 
 
 
 Containers
 
 
 
 MP4 was originally released in 2001. It is supported by all web browsers and has been for quite some time.WebM was released in 2010. It works in all browsers except for iOS Safari.
 
 
 
 Codecs
 
 
 
 The H.264 codec works in all browsers.HEVC/H.265, the successor of H.264, is supported by Safari, Edge, and Chrome (as of version 105).VP9 is the successor to the VP8 codec. VP9 is supported by all the browsers that support WebM.The AV1 codec has been supported in Chrome since 2018 and Firefox since 2019. It has not yet shipped in Edge or Safari.
 
 
 
 An MP4 file using the H.264 codec will work everywhere, but it doesn’t deliver the best quality or the smallest file size.
 
 
 
 AV1 doesn’t have cross-browser support yet but, released in 2018, it’s the most modern codec around. It’s already being used, at least for some videos and platforms, by Netflix, YouTube and Vimeo. AV1 is a royalty-free video codec designed specifically for the internet. AV1 was created by the Alliance for Open Media (AOM), a group founded by Google, Mozilla, Cisco, Microsoft, Netflix, Amazon, and Intel. Apple is now also a member, so it’s safe to assume all browsers will support AV1 eventually. Edge is “still evaluating options to support AVIF and AV1.”
 
 
 
 The recently redesigned website from development consultancy Evil Martians is a testament to the file-size reduction that AV1 is capable of.
 
 
 
 
 We are using video files for moving backgrounds on https://t.co/5VndxSCEgv.In AV1 it is just 68 KB, similar to the image file. HEVC is 195 KB, and H264 is 512 КB.This is a good example how good AV1 is.https://t.co/lqti7vMdDW pic.twitter.com/DaCnKxy6QK— Sitnik the Developer (@sitnikcode) September 8, 2022
 
 
 
 
 If you want to use newer video formats with fallbacks for older browsers, you can use multiple &lt;source&gt; elements. The order of the source elements matter. Specify the ideal source at the top, and the fallback after.
 
 
 
 &lt;video autoplay loop muted playsinline&gt;
   &lt;source src&#x3D;&quot;cats.webm&quot; type&#x3D;&quot;video/webm&quot;&gt; &lt;!-- ideal --&gt;
   &lt;source src&#x3D;&quot;cats.mp4&quot; type&#x3D;&quot;video/mp4&quot;&gt; &lt;!-- fallhack --&gt;
 &lt;/video&gt;
 
 
 
 Given the above code, cats.webm will be used unless the browser does not support that format, in which case the MP4 will be displayed instead.
 
 
 
 What if you want to include multiple MP4 files, but with each using a different codec? When specifying the type you can include a codecs parameter. The syntax is horrifically complicated for anybody who isn’t some kind of hardcore codec nerd, but it looks something like this:
 
 
 
 &lt;video autoplay loop muted playsinline&gt;
   &lt;source src&#x3D;&quot;cats.mp4&quot; type&#x3D;&quot;video/mp4; codecs&#x3D;av01.0.05M.08&quot; &gt;
   &lt;source src&#x3D;&quot;cats.mp4&quot; type&#x3D;&quot;video/mp4&quot; &gt;
 &lt;/video&gt;
 
 
 
 Using the above code the browser will select AV1 if it can play that format and fallback to the universally-supported H.264 if not. For AV1, the codecs parameter always starts with av01. The next number is either 0 (for main profile), 1 (for high profile) or 2 (for professional profile). Next comes a two-digit level number. This is followed either by the letter M (for main tier) or H (for high tier). It’s difficult to understand what any those things mean, so you could provide your AV1 video in a WebM container and avoid specifying the codec entirely.
 
 
 
 Most video editing software does not allow you to export as AV1, or even as WebM. If you want to use one of those formats you’ll need to export your video as something else, like a .mov, and then convert it using the command-line tool FFmpeg:
 
 
 
 ffmpeg -i yourSourceFile.mov -map_metadata -1 -c:a libopus -c:v librav1e -qp 80 -tile-columns 2 -tile-rows 2 -pix_fmt yuv420p -movflags +faststart -vf &amp;quot;scale&#x3D;trunc(iw/2)*2:trunc(ih/2)*2&amp;quot; videoTitle.mp4
 
 
 
 You should use the most high-resolution source file you can. Obviously, once image quality is lost you can’t improve it through conversion to a superior format. Using a .gif as a source file isn’t ideal because the visual quality of .gif isn’t great, but you’ll still get the benefit of a large reduction in file size:
 
 
 
 ffmpeg -i cats.gif -map_metadata -1 -an opus -c:v librav1e -qp 80 -tile-columns 2 -tile-rows 2 -pix_fmt yuv420p -movflags +faststart -vf &amp;quot;scale&#x3D;trunc(iw/2)*2:trunc(ih/2)*2&amp;quot; cats.mp4
 
 
 
 On Mac, you can download FFmpeg using Homebrew:
 
 
 
 brew install ffmpeg
 
 
 
 Here’s a nice example of video in web design on the masterfully designed Oxide website:
 
 
 
 
 Site serves transparent video where it can – WebM on most browsers, transparent mov on Safari, which lets you do some subtle but nice hover effects pic.twitter.com/wa0eTgGWa2— Ben Leonard (@lenjaminbeonard) August 19, 2022
 
 
 
 
 If you want to use the video as a background and place other elements on top of it, working with &lt;video&gt; is slightly more challenging than a CSS background-image, and requires code that goes something like this:
 
 
 
 .video-parent {
   position: relative;
   width: 100vw;
   height: 100vh;
 } 
 
 .video-parent video {
   object-fit: cover;
   position: absolute;
   inset: 0;
   z-index: -1;
   width: 100%;
   height: 100%;
 }
 
 
 
 The &lt;video&gt; element is a perfectly okay option for replacing GIFs but it does have one unfortunate side-effect: it prevents a user’s screen from going to sleep, as explained in this post from an ex- product manager on the Microsoft Edge browser.
 
 
 The benefits of using an image
 
 
 Whether it’s an animated WebP or animated AVIF file, using images rather than video comes with some benefits.
 
 
 
 I’m not sure how many people actually want to art-direct their GIFs, but using the &lt;picture&gt; element does open up some possibilities that couldn’t easily be achieved with &lt;video&gt;. You could specify different animations for light and dark mode, for example:
 
 
 
 &lt;picture&gt;
   &lt;source srcset&#x3D;&quot;dark-animation.avifs&quot; media&#x3D;&quot;(prefers-color-scheme: dark)&quot;&gt;
   &lt;img src&#x3D;&quot;light-animation.avif&quot; alt&#x3D;&quot;&quot;&gt;
 &lt;/picture&gt;
 
 
 
 
 
 
 
 We might want a video on mobile to be a different aspect ratio than on desktop. We could just crop parts of the image with CSS, but that seems like a waste of bytes and somewhat haphazard. Using a media query we can display a different animated image file based on the screen size or orientation:
 
 
 
 &lt;picture&gt;
   &lt;source type&#x3D;&quot;image/avif&quot; srcset&#x3D;&quot;typeloop-landscape.avifs&quot; media&#x3D;&quot;(orientation: landscape)&quot;&quot;&gt;
   &lt;img src&#x3D;&quot;typeloop-portrait.avif&quot; alt&#x3D;&quot;&quot;&gt;
 &lt;/picture&gt;
 
 
 
 
 
 
 
 All of this is possible with video — you can use matchMedia to do any media queries in JavaScript and programmatically change the src of a &lt;video&gt; element:
 
 
 
 const mediaQuery &#x3D; window.matchMedia(&quot;(prefers-color-scheme: dark)&quot;);
 if (mediaQuery.matches) {
   document.querySelector(&quot;video&quot;).src &#x3D; &quot;dark-animation.mp4&quot;;
 }
 
 
 
 I believe that whenever there’s a way to do something with markup it should be preferred over doing it JavaScript.
 
 
 
 You can use raster images inside of an SVG using the &lt;image&gt; element. This includes animated image formats. There’s not much you can do with an image inside an SVG that you couldn’t already do with CSS, but if you group an image with vector elements inside an SVG, then you do get the benefit that the different elements move and scale together.
 
 
 
 The &lt;img&gt; element has the benefit of native lazy-loading:
 
 
 
 &lt;img loading&#x3D;&quot;lazy&quot; src&#x3D;&quot;cats.avif&quot; alt&#x3D;&quot;cats&quot;&gt;
 
 
 
 If you want a background video that takes up the entire screen, it’s slightly easier to position a background-image than a HTML &lt;video&gt; element:
 
 
 
 .background-video {
   background-image: url(&quot;coolbackground.webp&quot;);
   background-repeat: no-repeat;
   background-size: cover;
   height: 100vh;
   width: 100vh;
 } 
 
 
 
 If you want to support older browsers you could use the &lt;picture&gt; element with a fallback of either an animated WebP or, just for Safari, an img with a video src, or if you care about ancient browsers, maybe an APNG (animated PNG) or a GIF. Using multiple image formats this way might be impractical if you’re optimizing images manually; but it is relatively trivial if you’re using a service like Cloudinary.
 
 
 
 &lt;picture&gt;
   &lt;source type&#x3D;&quot;image/avif&quot; srcset&#x3D;&quot;cats.avif&quot;&gt;
   &lt;img src&#x3D;&quot;cats.webp&quot;&gt;
 &lt;/picture&gt;
 
 
 
 There’s still no well-supported way to specify fallback images for CSS backgrounds. image-set is an equivalent of the &lt;picture&gt; element, [but for background-image. Unfortunately, only Firefox currently supports the type attribute of image-set.
 
 
 
 .box {
   background-image: image-set(
     url(&quot;cats.avif&quot;) type(&quot;image/avif&quot;),
     url(&quot;cats.webp&quot;) type(&quot;image/webp&quot;));
 }
 
 
 This browser support data is from Caniuse, which has more detail. A number indicates that browser supports the feature at that version and up.DesktopChromeFirefoxIEEdgeSafari109*89No105*TPMobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS Safari105*104105*16.1
 
 
 Use animated WebP
 
 
 The WebP image format was introduced by Google in 2010. WebP, including animated WebP, has broad browser support.
 
 
 
 
 
 
 
 &lt;img src&#x3D;&quot;nyancat.webp&quot; alt&#x3D;&quot;A cat flying through space leaving a rainbow trail&quot;&gt;
 
 
 This browser support data is from Caniuse, which has more detail. A number indicates that browser supports the feature at that version and up.DesktopChromeFirefoxIEEdgeSafari3265No1816.0Mobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS Safari1051044.2-4.314.0-14.4
 
 
 Use animated AVIF
 
 
 WebP is now twelve years old. The more modern AV1 Image File Format (AVIF), released in 2019, is the best image format for most use cases on the web. Converting a .gif file to AVIF can reduce bytes by over 90%.
 
 
 
 &lt;img src&#x3D;&quot;nyancat.avif&quot; alt&#x3D;&quot;A cat flying through space leaving a rainbow trail&quot;&gt;
 
 
 
 As its name suggests, AVIF is based on the the AV1 video codec. Like WebP, AVIF can be used for both still images and animation. There’s not much difference between an animated AVIF file and an AV1 video in an MP4 container.
 
 
 
 You can put a shadow on AVIF animation, e.g.:
 
 
 
 filter: drop-shadow(2px 4px 6px black);
 
 
 
 AVIF is already supported by Safari, Firefox, Samsung Internet, and Chrome. Firefox only shipped support for still images, not animated AVIF. Safari supports animation as of version 16.1. Unfortunately, because Firefox does support AVIF, just not animated AVIF, it’s impossible to successfully use the &lt;picture&gt; element to display AVIF only to browsers that support animation. Given the following code, Firefox would display the AVIF, but as a static image, rather than showing the animated WebP version:
 
 
 
 &lt;picture&gt;
   &lt;source srcset&#x3D;&quot;https://fonts.gstatic.com/s/e/notoemoji/latest/1f4a9/512.avif&quot; type&#x3D;&quot;image/avif&quot;&gt;
   &lt;img src&#x3D;&quot;https://fonts.gstatic.com/s/e/notoemoji/latest/1f4a9/512.webp&quot; alt&#x3D;&quot;💩&quot; width&#x3D;&quot;32&quot; height&#x3D;&quot;32&quot;&gt;
 &lt;/picture&gt;
 
 
 
 Tooling for AVIF is still improving. Video editing software does not enable you to export footage as animated AVIF or animated WebP. You’ll need to export it in some other format and then convert it. On the website ezgif.com you can upload a video file or a .gif and convert it to AVIF or WebP. You could also use FFmpeg. Using Cloudinary you can upload a video file or an old .gif and convert it to pretty much any format you want — including animated WebP and animated AVIF. As of time of writing, Squoosh, an image conversion app, doesn’t support animated AVIF.
 
 
 
 Adoption remains lacking in design software. When viewing a prototype, Figma will play any animated GIFs included in the design. For AVIF, by contrast, you can’t even import or export a still image.
 
 
 
 
 
 
 Use a video with an &lt;img&gt; element
 
 
 In 2018, Safari 11.1 gave developers the ability to use a video file as the source of the HTML &lt;img&gt; element. This works in Safari:
 
 
 
 &lt;img src&#x3D;&quot;cat.mp4&quot; alt&#x3D;&quot;A Siamese cat walking in a circle&quot;&gt;
 
 
 
 All the same codecs that Safari supports for &lt;video&gt; are supported by &lt;img&gt;. This means you can use MP4, H.264, and HEVC.
 
 
 
 In Safari, video files will also work anyplace in CSS where you could use an image, like background-image or border-image:
 
 
 
 .video-border {  
   border: 40px solid transparent;
   border-image: url(abstract_bg_animation.mp4) 100 round;
 }
 
 
 
 One strange consequence of this feature in Safari is that the poster image of a &lt;video&gt; element can also be a video. The poster will autoplay even if you have blocked video’s from auto-playing. Safari claimed this feature came with performance benefits, not just over using .gif files but also over using the &lt;video&gt; element. According to Apple:
 
 
 
 By placing your videos in &lt;img&gt; elements, the content loads faster, uses less battery power, and gets better performance.
 
 
 
 Colin Bendell, co-author of O‘Reilly’s High Performance Images, wrote about the shortcomings of the &lt;video&gt; tag for our use case:
 
 
 
 Unlike &lt;img&gt; tags, browsers do not preload &lt;video&gt; content. Generally preloaders only preload JavaScript, CSS, and image resources because they are critical for the page layout. Since &lt;video&gt; content can be any length – from micro-form to long-form – &lt;video&gt; tags are skipped until the main thread is ready to parse its content. This delays the loading of &lt;video&gt; content by many hundreds of milliseconds.[…]Worse yet, many browsers assume that &lt;video&gt; tags contain long-form content. Instead of downloading the whole video file at once, which would waste your cell data plan in cases where you do not end up watching the whole video, the browser will first perform a 1-byte request to test if the server supports HTTP Range Requests. Then it will follow with multiple range requests in various chunk sizes to ensure that the video is adequately (but not over-) buffered. The consequence is multiple TCP round trips before the browser can even start to decode the content and significant delays before the user sees anything. On high-latency cellular connections, these round trips can set video loads back by hundreds or thousands of milliseconds.
 
 
 
 Chrome has marked this as “WontFix” — meaning they don’t intend to ever support this feature, for various reasons. There is, however, an open issue on GitHub to add it to the HTML spec, which would force Google’s hand.
 
 
 Respecting user preferences
 
 
 Video has the benefit of automatically respecting a users preferences. Firefox and Safari allow users to block videos from automatically playing, even if they don’t have any audio. Here are the settings in Firefox, for example:
 
 
 
 
 
 
 
 The user can still decide to watch a certain video by right-clicking and pressing play in the menu, or enable autoplay for all videos on a specific website.
 
 
 
 
 
 
 
 For users who haven’t disabled autoplay, it’s nice to have the option to pause an animation if you happen to find it annoying or distracting (a user can still right-click to bring up the pause option in a menu when video controls aren’t shown). Success Criterion 2.2.2 Pause, Stop, Hide of the WCAG accessibility guidelines states:
 
 
 
 For any moving, blinking or scrolling information that (1) starts automatically, (2) lasts more than five seconds, and (3) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential.
 
 
 
 With the &lt;video&gt; element, you’ll achieve that criterion without any additional development.
 
 
 
 There’s also a “reduce motion” user setting that developers can respect by reducing or removing CSS and JavaScript web animations.
 
 
 
 
 
 
 
 You can also use it to display a still image instead of an animation. This takes extra code to implement — and you need to host a still image in additional to your animated image.
 
 
 
 &lt;picture&gt;
   &lt;source
     srcset&#x3D;&quot;nyancat.avifs&quot;
     type&#x3D;&quot;image/avif&quot;
     media&#x3D;&quot;(prefers-reduced-motion: no-preference)&quot;
   /&gt;
   &lt;img src&#x3D;&quot;nyancat.png&quot; alt&#x3D;&quot;Nyan cat&quot; width&#x3D;&quot;250&quot; height&#x3D;&quot;250&quot; /&gt;
 &lt;/picture&gt;
 
 
 
 There’s another downside. When using the &lt;picture&gt; element in this way if the user has checked “reduce motion”there’s no way for them to see the animation. Just because a user prefers less animation, doesn’t mean they never want any — they might still want to be able to opt-in and watch one every now and then. Unlike the &lt;video&gt; element, displaying a still image takes away that choice.
 
 
 Checking for progressive enhancement
 
 
 If you want to check that your &lt;picture&gt; code is properly working and fallback images are being displayed, you can use the Rendering tab in Chrome DevTools to turn off support for AVIF and WebP image formats. Seeing as all browsers now support WebP, this is a pretty handy feature.
 
 
 
 
 
 
 
 While it’s usually the best option to create animations with CSS, JavaScript, DOM elements, canvas and SVG, as new image and video formats offer smaller files than what was previously possible, they become a useful option for UI animation (rather than just nyancat loops). For one-off animations, an AVIF file is probably going to be more performant than importing an entire animation library.
 
 
 
 Here’s a fun example of using video for UI from all the way back in 2017 for the League of Legends website.
 
 
 Lottie
 
 
 After Effects is a popular animation tool from Adobe. Using an extension called Bodymovin, you can export animation data from After Effects as a JSON file.
 
 
 
 Then there’s Lottie, an open-source animation library from Airbnb that can take that JSON file and render it as an animation on different platforms. The library is available for native iOS, Android, and React Native applications, as well as for the web. You can see examples from Google Home, Target, and Walgreens, among others.
 
 
 
 Once you’ve included the dependency you need to write a small amount of JavaScript code to get the animation to run:
 
 
 
 &lt;div id&#x3D;&quot;lottie&quot;&gt;&lt;/div&gt;
 
 
 
 const animation &#x3D; bodymovin.loadAnimation({
   container: document.getElementById(&#x27;lottie&#x27;),
   path: &#x27;myAnimation.json&#x27;,
   renderer: &#x27;svg&#x27;,
   loop: true,
   autoplay: true,
 })
 
 
 
 You can optionally change those settings to only play after an event:
 
 
 
 const lottieContainer &#x3D; document.getElementById(&#x27;lottie&#x27;);
 const animation &#x3D; bodymovin.loadAnimation({
   container: lottieContainer, 
   path: &#x27;myAnimation.json&#x27;,
   renderer: &#x27;svg&#x27;,
   loop: true,
   autoplay: false,
   })
 // Play the animation on hover
 lottieContainer.addEventListener(&#x27;mouseover&#x27;, () &#x3D;&gt; {
   animation.play();
 });
 // Stop the animation after playing once
 animation.addEventListener(&#x27;loopComplete&#x27;, function() {
   animation.stop();
 });
 
 
 
 Here’s a cute example of a cat typing on a keyboard I took from Lottiefiles.com (the website is a useful website for previewing your own Lottie JSON file animations, rather than needing to install After Effects, as well finding animations from other creatives):
 
 
 
 
 
 
 
 You can also programmatically play an animation backwards and change the playback rate.
 
 
 
 If you do choose to use Lottie, there’s a Figma plugin for Lottie but all it does is convert JSON files to .gif so that they can be previewed in prototyping mode.
 
 
 
 Abd what about Lottie’s performance? There’s size of the library — 254.6KB (63.8 gzipped) — and the size of the JSON file to consider. There’s also the amount of DOM elements that get created for the SVG parts. If you run into this issue, Lottie has the option to render to a HTML &lt;canvas&gt;, but you’ll need to use a different version of the JavaScript library.
 
 
 
 const animation &#x3D; bodymovin.loadAnimation({
   container: document.getElementById(&#x27;lottie&#x27;), 
   path: &#x27;myAnimation.json&#x27;,
   renderer: &#x27;canvas&#x27;,
 })
 
 
 
 Lottie isn’t a full replacement for gifs. While After Effects itself is often used with video clips, and Lottie can render to a HTML &lt;canvas&gt;, and a canvas can play video clips, you wouldn’t use a Lottie file for that purpose. Lottie is for advanced 2D animations, not so much for video. There are other tools for creating complex web animations with a GUI like SVGator and Rive, but I haven’t tried them myself. 🤷‍♂️
 
 
 
 
 
 
 
 I wish there was a TL;DR for this article. For now, at least, there’s no clear winner…
 
 GIFs Without the .gif: The Most Performant Image and Video Options Right Now originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Named Element IDs Can Be Referenced as JavaScript Globals</title>
         <link href="https://css-tricks.com/named-element-ids-can-be-referenced-as-javascript-globals/"/>
       <updated>2022-09-27T12:58:21.000Z</updated>
       <content type="text">Did you know that DOM elements with IDs are accessible in JavaScript as global variables? It’s one of those things that’s been around, like, forever but I’m really digging into it for the first time.
 
 
 
 If this is the first time you’re hearing about it, brace yourself! We can see it in action simply by adding an ID to an element in HTML:
 
 
 
 &lt;div id&#x3D;&quot;cool&quot;&gt;&lt;/div&gt;
 
 
 
 Normally, we’d define a new variable using querySelector(&quot;#cool&quot;) or getElementById(&quot;cool&quot;) to select that element:
 
 
 
 var el &#x3D; querySelector(&quot;#cool&quot;);
 
 
 
 But we actually already have access to #cool without that rigamorale:
 
 
 
 
 
 
 
 CodePen Embed Fallback
 
 
 
 So, any id — or name attribute, for that matter — in the HTML can be accessed in JavaScript using window[ELEMENT_ID]. Again, this isn’t exactly “new” but it’s really uncommon to see.
 
 
 
 As you may guess, accessing the global scope with named references isn’t the greatest idea. Some folks have come to call this the “global scope polluter.” We’ll get into why that is, but first…
 
 
 Some context
 
 
 This approach is outlined in the HTML specification, where it’s described as “named access on the Window object.”
 
 
 
 Internet Explorer was the first to implement the feature. All other browsers added it as well. Gecko was the only browser at the time to not support it directly in standards mode, opting instead to make it an experimental feature. There was hesitation to implement it at all, but it moved ahead in the name of browser compatibility (Gecko even tried to convince WebKit to move it out of standards mode) and eventually made it to standards mode in Firefox 14.
 
 
 
 One thing that might not be well known is that browsers had to put in place a few precautionary measures — with varying degrees of success — to ensure generated globals don’t break the webpage. One such measure is…
 
 
 Variable shadowing
 
 
 Probably the most interesting part of this feature is that named element references don’t shadow existing global variables. So, if a DOM element has an id that is already defined as a global, it won’t override the existing one. For example:
 
 
 
 &lt;head&gt;
   &lt;script&gt;
     window.foo &#x3D; &quot;bar&quot;;
   &lt;/script&gt;
 &lt;/head&gt;
 &lt;body&gt;
   &lt;div id&#x3D;&quot;foo&quot;&gt;I won&#x27;t override window.foo&lt;/div&gt;
   &lt;script&gt;
     console.log(window.foo); // Prints &quot;bar&quot;
   &lt;/script&gt;
 &lt;/body&gt;
 
 
 
 And the opposite is true as well:
 
 
 
 &lt;div id&#x3D;&quot;foo&quot;&gt;I will be overridden :(&lt;/div&gt;
 &lt;script&gt;
   window.foo &#x3D; &quot;bar&quot;;
   console.log(window.foo); // Prints &quot;bar&quot;
 &lt;/script&gt;
 
 
 
 This behavior is essential because it nullifies dangerous overrides such as &lt;div id&#x3D;&quot;alert&quot; /&gt;, which would otherwise create a conflict by invalidating the alert API. This safeguarding technique may very well be the why you — if you’re like me — are learning about this for the first time.
 
 
 The case against named globals
 
 
 Earlier, I said that using global named elements as references might not be the greatest idea. There are lots of reasons for that, which TJ VanToll has covered nicely over at his blog and I will summarize here:
 
 
 
 If the DOM changes, then so does the reference. That makes for some really “brittle” (the spec’s term for it) code where the separation of concerns between HTML and JavaScript might be too much.Accidental references are far too easy. A simple typo may very well wind up referencing a named global and give you unexpected results.It is implemented differently in browsers. For example, we should be able to access an anchor with an id — e.g. &lt;a id&#x3D;&quot;cool&quot;&gt; — but some browsers (namely Safari and Firefox) return a ReferenceError in the console.It might not return what you think. According to the spec, when there are multiple instances of the same named element in the DOM — say, two instances of &lt;div class&#x3D;&quot;cool&quot;&gt; — the browser should return an HTMLCollection with an array of the instances. Firefox, however, only returns the first instance. Then again, the spec says we ought to use one instance of an id in an element’s tree anyway. But doing so won’t stop a page from working or anything like that.Maybe there’s a performance cost? I mean, the browser’s gotta make that list of references and maintain it. A couple of folks ran tests in this StackOverflow thread, where named globals were actually more performant in one test and less performant in a more recent test.
 
 
 Additional considerations
 
 
 Let’s say we chuck the criticisms against using named globals and use them anyway. It’s all good. But there are some things you might want to consider as you do.
 
 
 Polyfills
 
 
 As edge-case-y as it may sound, these types of global checks are a typical setup requirement for polyfills. Check out the following example where we set a cookie using the new CookieStore API, polyfilling it on browsers that don’t support it yet:
 
 
 
 &lt;body&gt;
   &lt;img id&#x3D;&quot;cookieStore&quot;&gt;&lt;/img&gt;
   &lt;script&gt;
     // Polyfill the CookieStore API if not yet implemented.
     // https://developer.mozilla.org/en-US/docs/Web/API/CookieStore
     if (!window.cookieStore) {
       window.cookieStore &#x3D; myCookieStorePolyfill;
     }
     cookieStore.set(&quot;foo&quot;, &quot;bar&quot;);
   &lt;/script&gt;
 &lt;/body&gt;
 
 
 
 This code works perfectly fine in Chrome, but throws the following error in Safari.:
 
 
 
 TypeError: cookieStore.set is not a function
 
 
 
 Safari lacks support for the CookieStore API as of this writing. As a result, the polyfill is not applied because the img element ID creates a global variable that clashes with the cookieStore global.
 
 
 JavaScript API updates
 
 
 We can flip the situation and find yet another issue where updates to the browser’s JavaScript engine can break a named element’s global references.
 
 
 
 For example:
 
 
 
 &lt;body&gt;
   &lt;input id&#x3D;&quot;BarcodeDetector&quot;&gt;&lt;/input&gt;
   &lt;script&gt;
     window.BarcodeDetector.focus();
   &lt;/script&gt;
 &lt;/body&gt;
 
 
 
 That script grabs a reference to the input element and invokes focus() on it. It works correctly. Still, we don’t know how long it will continue to work.
 
 
 
 You see, the global variable we’re using to reference the input element will stop working as soon as browsers start supporting the BarcodeDetector API. At that point, the window.BarcodeDetector global will no longer be a reference to the input element and .focus() will throw a “window.BarcodeDetector.focus is not a function” error.
 
 
 Conclusion
 
 
 Let’s sum up how we got here:
 
 
 
 All major browsers automatically create global references to each DOM element with an id (or, in some cases, a name attribute).Accessing these elements through their global references is unreliable and potentially dangerous. Use querySelector or getElementById instead.Since global references are generated automatically, they may have some side effects on your code. That’s a good reason to avoid using the id attribute unless you really need it.
 
 
 
 At the end of the day, it’s probably a good idea to avoid using named globals in JavaScript. I quoted the spec earlier about how it leads to “brittle” code, but here’s the full text to drive the point home:
 
 
 
 As a general rule, relying on this will lead to brittle code. Which IDs end up mapping to this API can vary over time, as new features are added to the web platform, for example. Instead of this, use document.getElementById() or document.querySelector().
 
 
 
 I think the fact that the HTML spec itself recommends to staying away from this feature speaks for itself.
 
 Named Element IDs Can Be Referenced as JavaScript Globals originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How to Create Wavy Shapes &amp; Patterns in CSS</title>
         <link href="https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/"/>
       <updated>2022-09-26T13:13:30.000Z</updated>
       <content type="text">The wave is probably one of the most difficult shapes to make in CSS. We always try to approximate it with properties like border-radius and lots of magic numbers until we get something that feels kinda close. And that’s before we even get into wavy patterns, which are more difficult.
 
 
 
 “SVG it!” you might say, and you are probably right that it’s a better way to go. But we will see that CSS can make nice waves and the code for it doesn’t have to be all crazy. And guess what? I have an online generator to make it even more trivial!
 
 
 
 
 
 
 
 
 
 
 
 
 
 If you play with the generator, you can see that the CSS it spits out is only two gradients and a CSS mask property — just those two things and we can make any kind of wave shape or pattern. Not to mention that we can easily control the size and the curvature of the waves while we’re at it.
 
 
 
 Some of the values may look like “magic numbers” but there’s actually logic behind them and we will dissect the code and discover all the secrets behind creating waves.
 
 
 
 This article is a follow-up to a previous one where I built all kinds of different zig-zag, scoped, scalloped, and yes, wavy border borders. I highly recommend checking that article as it uses the same technique we will cover here, but in greater detail.
 
 
 The math behind waves
 
 
 Strictly speaking, there isn’t one magic formula behind wavy shapes. Any shape with curves that go up and down can be called a wave, so we are not going to restrict ourselves to complex math. Instead, we will reproduce a wave using the basics of geometry.
 
 
 
 Let’s start with a simple example using two circle shapes:
 
 
 
 
 
 
 
 We have two circles with the same radius next to each other. Do you see that red line? It covers the top half of the first circle and the bottom half of the second one. Now imagine you take that line and repeat it.
 
 
 
 
 
 
 
 We already see the wave. Now let’s fill the bottom part (or the top one) to get the following:
 
 
 
 
 
 
 
 Tada! We have a wavy shape, and one that we can control using one variable for the circle radii. This is one of the easiest waves we can make and it’s the one I showed off in this previous article
 
 
 
 Let’s add a bit of complexity by taking the first illustration and moving the circles a little:
 
 
 
 
 
 
 
 We still have two circles with the same radii but they are no longer horizontally aligned. In this case, the red line no longer covers half the area of each circle, but a smaller area instead. This area is limited by the dashed red line. That line crosses the point where both circles meet.
 
 
 
 Now take that line and repeat it and you get another wave, a smoother one.
 
 
 
 
 
 
 
 
 
 
 
 I think you get the idea. By controlling the position and size of the circles, we can create any wave we want. We can even create variables for them, which I will call P and S, respectively.
 
 
 
 
 
 
 
 You have probably noticed that, in the online generator, we control the wave using two inputs. They map to the above variables. S is the “Size of the wave” and P is the “curvature of the wave”.
 
 
 
 I am defining P as P &#x3D; m*S where m is the variable you adjust when updating the curvature of the wave. This allows us to always have the same curvature, even if we update S.
 
 
 
 m can be any value between 0 and 2. 0 will give us the first particular case where both circles are aligned horizontally. 2 is a kind of maximum value. We can go bigger, but after a few tests I found that anything above 2 produces bad, flat shapes.
 
 
 
 Let’s not forget the radius of our circle! That can also be defined using S and P like this:
 
 
 
 R &#x3D; sqrt(P² + S²)/2
 
 
 
 When P is equal to 0, we will have R &#x3D; S/2.
 
 
 
 We have everything to start converting all of this into gradients in CSS!
 
 
 Creating gradients
 
 
 Our waves use circles, and when talking about circles we talk about radial gradients. And since two circles define our wave, we will logically be using two radial gradients.
 
 
 
 We will start with the particular case where P is equal to 0. Here is the illustration of the first gradient:
 
 
 
 CodePen Embed Fallback
 
 
 
 This gradient creates the first curvature while filling in the entire bottom area —the “water” of the wave so to speak.
 
 
 
 
 
 
 
 .wave {
   --size: 50px;
 
   mask: radial-gradient(var(--size) at 50% 0%, #0000 99%, red 101%) 
     50% var(--size)/calc(4 * var(--size)) 100% repeat-x;
 }
 
 
 
 The --size variable defines the radius and the size of the radial gradient. If we compare it with the S variable, then it’s equal to S/2.
 
 
 
 Now let’s add the second gradient:
 
 
 
 CodePen Embed Fallback
 
 
 
 The second gradient is nothing but a circle to complete our wave:
 
 
 
 radial-gradient(var(--size) at 50% var(--size), blue 99%, #0000 101%) 
   calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%
 
 
 
 If you check the previous article you will see that I am simply repeating what I already did there.
 
 
 
 I followed both articles but the gradient configurations are not the same.
 
 
 
 That’s because we can reach the same result using different gradient configurations. You will notice a slight difference in the alignment if you compare both configurations, but the trick is the same. This can be confusing if you are unfamiliar with gradients, but don’t worry. With some practice, you get used to them and you will find by yourself that different syntax can lead to the same result.
 
 
 
 Here is the full code for our first wave:
 
 
 
 .wave {
   --size: 50px;
 
   mask:
     radial-gradient(var(--size) at 50% var(--size),#000 99%, #0000 101%) 
       calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,
     radial-gradient(var(--size) at 50% 0px, #0000 99%, #000 101%) 
       50% var(--size)/calc(4 * var(--size)) 100% repeat-x;
 }
 
 
 
 Now let’s take this code and adjust it to where we introduce a variable that makes this fully reusable for creating any wave we want. As we saw in the previous section, the main trick is to move the circles so they are no more aligned so let’s update the position of each one. We will move the first one up and the second down.
 
 
 
 Our code will look like this:
 
 
 
 .wave {
   --size: 50px;
   --p: 25px;
 
   mask:
     radial-gradient(var(--size) at 50% calc(var(--size) + var(--p)), #000 99%, #0000 101%) 
       calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,
     radial-gradient(var(--size) at 50% calc(-1*var(--p)), #0000 99%, #000 101%) 
       50% var(--size) / calc(4 * var(--size)) 100% repeat-x;
 }
 
 
 
 I have introduced a new --p variable that’s used it to define the center position of each circle. The first gradient is using 50% calc(-1*var(--p)), so its center moves up while the second one is using calc(var(--size) + var(--p)) to move it down.
 
 
 
 A demo is worth a thousand words:
 
 
 
 CodePen Embed Fallback
 
 
 
 The circles are neither aligned nor touch one another. We spaced them far apart without changing their radii, so we lost our wave. But we can fix things up by using the same math we used earlier to calculate the new radius. Remember that R &#x3D; sqrt(P² + S²)/2. In our case, --size is equal to S/2; the same for --p which is also equal to P/2 since we are moving both circles. So, the distance between their center points is double the value of --p for this:
 
 
 
 R &#x3D; sqrt(var(--size) * var(--size) + var(--p) * var(--p))
 
 
 
 That gives us a result of 55.9px.
 
 
 
 CodePen Embed Fallback
 
 
 
 Our wave is back! Let’s plug that equation into our CSS:
 
 
 
 .wave {
   --size: 50px;
   --p: 25px;
   --R: sqrt(var(--p) * var(--p) + var(--size)*var(--size));
 
   mask:
     radial-gradient(var(--R) at 50% calc(var(--size) + var(--p)), #000 99%, #0000 101%) 
       calc(50% - 2*var(--size)) 0 / calc(4 * var(--size)) 100%,
     radial-gradient(var(--R) at 50% calc(-1*var(--p)), #0000 99%, #000 101%) 
       50% var(--size)/calc(4 * var(--size)) 100% repeat-x;
 }
 
 
 
 This is valid CSS code. sqrt() is part of the specification, but at the time I’m writing this, there is no browser support for it. That means we need a sprinkle of JavaScript or Sass to calculate that value until we get broader sqrt() support.
 
 
 
 This is pretty darn cool: all it takes is two gradients to get a cool wave that you can apply to any element using the mask property. No more trial and error — all you need is to update two variables and you’re good to go!
 
 
 Reversing the wave
 
 
 What if we want the waves going the other direction, where we’re filling in the “sky” instead of the “water”. Believe it or not, all we have to do is to update two values:
 
 
 
 .wave {
   --size: 50px;
   --p: 25px;
   --R: sqrt(var(--p) * var(--p) + var(--size) * var(--size));
 
   mask:
     radial-gradient(var(--R) at 50% calc(100% - (var(--size) + var(--p))), #000 99%, #0000 101%)
       calc(50% - 2 * var(--size)) 0/calc(4 * var(--size)) 100%,
     radial-gradient(var(--R) at 50% calc(100% + var(--p)), #0000 99%, #000 101%) 
       50% calc(100% - var(--size)) / calc(4 * var(--size)) 100% repeat-x;
 }
 
 
 
 All I did there is add an offset equal to 100%, highlighted above. Here’s the result:
 
 
 
 CodePen Embed Fallback
 
 
 
 We can consider a more friendly syntax using keyword values to make it even easier:
 
 
 
 .wave {
   --size: 50px;
   --p: 25px;
   --R: sqrt(var(--p)*var(--p) + var(--size) * var(--size));
 
   mask:
     radial-gradient(var(--R) at left 50% bottom calc(var(--size) + var(--p)), #000 99%, #0000 101%) 
       calc(50% - 2 * var(--size)) 0/calc(4 * var(--size)) 100%,
     radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), #0000 99%, #000 101%) 
       left 50% bottom var(--size) / calc(4 * var(--size)) 100% repeat-x;
 }
 
 
 
 We’re using the left and bottom keywords to specify the sides and the offset. By default, the browser defaults to left and top — that’s why we use 100% to move the element to the bottom. In reality, we are moving it from the top by 100%, so it’s really the same as saying bottom. Much easier to read than math!
 
 
 
 With this updated syntax, all we have to do is to swap bottom for top — or vice versa — to change the direction of the wave.
 
 
 
 CodePen Embed Fallback
 
 
 
 And if you want to get both top and bottom waves, we combine all the gradients in a single declaration:
 
 
 
 .wave {
   --size: 50px;
   --p: 25px;
   --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));
 
   mask:
     /* Gradient 1 */
     radial-gradient(var(--R) at left 50% bottom calc(var(--size) + var(--p)), #000 99%, #0000 101%) 
       left calc(50% - 2*var(--size)) bottom 0 / calc(4 * var(--size)) 51% repeat-x,
     /* Gradient 2 */
     radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), #0000 99%, #000 101%) 
       left 50% bottom var(--size) / calc(4 * var(--size)) calc(51% - var(--size)) repeat-x,
     /* Gradient 3 */
     radial-gradient(var(--R) at left 50% top calc(var(--size) + var(--p)), #000 99%, #0000 101%) 
       left calc(50% - 2 * var(--size)) top 0 / calc(4 * var(--size)) 51% repeat-x,
     /* Gradient 4 */
     radial-gradient(var(--R) at left 50% top calc(-1 * var(--p)), #0000 99%, #000 101%) 
       left 50% top var(--size) / calc(4 * var(--size)) calc(51% - var(--size)) repeat-x;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 If you check the code, you will see that in addition to combining all the gradients, I have also reduced their height from 100% to 51% so that they both cover half of the element. Yes, 51%. We need that little extra percent for a small overlap that avoid gaps.
 
 
 
 What about the left and right sides?
 
 
 
 It’s your homework! Take what we did with the top and bottom sides and try to update the values to get the right and left values. Don’t worry, it’s easy and the only thing you need to do is to swap values.
 
 
 
 If you have trouble, you can always use the online generator to check the code and visualize the result.
 
 
 Wavy lines
 
 
 Earlier, we made our first wave using a red line then filled the bottom portion of the element. How about that wavy line? That’s a wave too! Even better is if we can control its thickness with a variable so we can reuse it. Let’s do it!
 
 
 
 
 
 
 
 
 
 We are not going to start from scratch but rather take the previous code and update it. The first thing to do is to update the color stops of the gradients. Both gradients start from a transparent color to an opaque one, or vice versa. To simulate a line or border, we need to start from transparent, go to opaque, then back to transparent again:
 
 
 
 #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%
 
 
 
 I think you already guessed that the --b variable is what we’re using to control the line thickness. Let’s apply this to our gradients:
 
 
 
 CodePen Embed Fallback
 
 
 
 Yeah, the result is far from a wavy line. But looking closely, we can see that one gradient is correctly creating the bottom curvature. So, all we really need to do is rectify the second gradient. Instead of keeping a full circle, let’s make partial one like the other gradient.
 
 
 
 CodePen Embed Fallback
 
 
 
 Still far, but we have both curvatures we need! If you check the code, you will see that we have two identical gradients. The only difference is their positioning:
 
 
 
 .wave {
   --size: 50px;
   --b: 10px;
   --p: 25px;
   --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));
 
   --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;
   mask:
     radial-gradient(var(--R) at left 50% bottom calc(-1*var(--p)), var(--_g)) 
       calc(50% - 2*var(--size)) 0/calc(4*var(--size)) 100%,
     radial-gradient(var(--R) at left 50% top    calc(-1*var(--p)), var(--_g)) 
       50% var(--size)/calc(4*var(--size)) 100%;
 }
 
 
 
 Now we need to adjust the size and position for the final shape. We no longer need the gradient to be full-height, so we can replace 100% with this:
 
 
 
 /* Size plus thickness */
 calc(var(--size) + var(--b))
 
 
 
 There is no mathematical logic behind this value. It only needs to be big enough for the curvature. We will see its effect on the pattern in just a bit. In the meantime, let’s also update the position to vertically center the gradients:
 
 
 
 .wave {
   --size: 50px;
   --b: 10px;
   --p: 25px;
   --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));
 
   --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;  
   mask:
     radial-gradient(var(--R) at left 50% bottom calc(-1*var(--p)), var(--_g)) 
       calc(50% - 2*var(--size)) 50%/calc(4 * var(--size)) calc(var(--size) + var(--b)) no-repeat,
     radial-gradient(var(--R) at left 50% top calc(-1 * var(--p)), var(--_g)) 50%
       50%/calc(4 * var(--size)) calc(var(--size) + var(--b)) no-repeat;
 }
 
 
 
 Still not quite there:
 
 
 
 CodePen Embed Fallback
 
 
 
 One gradient needs to move a bit down and the other a bit up. Both need to move by half of their height.
 
 
 
 CodePen Embed Fallback
 
 
 
 We are almost there! We need a small fix for the radius to have a perfect overlap. Both lines need to offset by half the border (--b) thickness:
 
 
 
 CodePen Embed Fallback
 
 
 
 We got it! A perfect wavy line that we can easily adjust by controlling a few variables:
 
 
 
 .wave {
   --size: 50px;
   --b: 10px;
   --p: 25px;
   --R: calc(sqrt(var(--p) * var(--p) + var(--size) * var(--size)) + var(--b) / 2);
 
   --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;
   mask:
     radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), var(--_g)) 
      calc(50% - 2*var(--size)) calc(50% - var(--size)/2 - var(--b)/2) / calc(4 * var(--size)) calc(var(--size) + var(--b)) repeat-x,
     radial-gradient(var(--R) at left 50% top calc(-1*var(--p)),var(--_g)) 
      50%  calc(50% + var(--size)/2 + var(--b)/2) / calc(4 * var(--size)) calc(var(--size) + var(--b)) repeat-x;
 }
 
 
 
 I know that the logic takes a bit to grasp. That’s fine and as I said, creating a wavy shape in CSS is not easy, not to mention the tricky math behind it. That’s why the online generator is a lifesaver — you can easily get the final code even if you don’t fully understand the logic behind it.
 
 
 Wavy patterns
 
 
 We can make a pattern from the wavy line we just created!
 
 
 
 Oh no, the code of the pattern will be even more difficult to understand!
 
 
 
 Not at all! We already have the code. All we need to do is to remove repeat-x from what we already have, and tada. 🎉
 
 
 
 CodePen Embed Fallback
 
 
 
 A nice wavy pattern. Remember the equation I said we’d revisit?
 
 
 
 /* Size plus thickness */
 calc(var(--size) + var(--b))
 
 
 
 Well, this is what controls the distance between the lines in the pattern. We can make a variable out of it, but there’s no need for more complexity. I’m not even using a variable for that in the generator. Maybe I’ll change that later.
 
 
 
 Here is the same pattern going in a different direction:
 
 
 
 CodePen Embed Fallback
 
 
 
 I am providing you with the code in that demo, but I’d for you to dissect it and understand what changes I made to make that happen.
 
 
 Simplifying the code
 
 
 In all the previous demos, we always define the --size and --p independently. But do you recall how I mentioned earlier that the online generator evaluates P as equal to m*S, where m controls the curvature of the wave? By defining a fixed multiplier, we can work with one particular wave and the code can become easier. This is what we will need in most cases: a specific wavy shape and a variable to control its size.
 
 
 
 Let’s update our code and introduce the m variable:
 
 
 
 .wave {
   --size: 50px;
   --R: calc(var(--size) * sqrt(var(--m) * var(--m) + 1));
 
   mask:
     radial-gradient(var(--R) at 50% calc(var(--size) * (1 + var(--m))), #000 99%, #0000 101%) 
       calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,
     radial-gradient(var(--R) at 50% calc(-1 * var(--size) * var(--m)), #0000 99%, #000 101%) 
       50% var(--size) / calc(4 * var(--size)) 100% repeat-x;
   }
 
 
 
 As you can see, we no longer need the --p variable. I replaced it with var(--m)*var(--size), and optimized some of the math accordingly. Now, If we want to work with a particular wavy shape, we can omit the --m variable and replace it with a fixed value. Let’s try .8 for example.
 
 
 
 --size: 50px;
 --R: calc(var(--size) * 1.28);
 
 mask:
   radial-gradient(var(--R) at 50% calc(1.8 * var(--size)), #000 99%, #0000 101%) 
     calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,
   radial-gradient(var(--R) at 50% calc(-.8 * var(--size)), #0000 99%, #000 101%) 
     50% var(--size) / calc(4 * var(--size)) 100% repeat-x;
 
 
 
 See how the code is easier now? Only one variable to control your wave, plus you no more need to rely on sqrt() which has no browser support!
 
 
 
 CodePen Embed Fallback
 
 
 
 You can apply the same logic to all the demos we saw even for the wavy lines and the pattern. I started with a detailed mathmatical explanation and gave the generic code, but you may find yourself needing easier code in a real use case. This is what I am doing all the time. I rarely use the generic code, but I always consider a simplified version especially that, in most of the cases, I am using some known values that don’t need to be stored as variables. (Spoiler alert: I will be sharing a few examples at the end!)
 
 
 Limitations to this approach
 
 
 Mathematically, the code we made should give us perfect wavy shapes and patterns, but in reality, we will face some strange results. So, yes, this method has its limitations. For example, the online generator is capable of producing poor results, especially with wavy lines. Part of the issue is due to a particular combination of values where the result gets scrambled, like using a big value for the border thickness compared to the size:
 
 
 
 
 
 
 
 For the other cases, it’s the issue related to some rounding that will results in misalignment and gaps between the waves:
 
 
 
 
 
 
 
 That said, I still think the method we covered remains a good one because it produces smooth waves in most cases, and we can easily avoid the bad results by playing with different values until we get it perfect.
 
 
 Wrapping up
 
 
 I hope that after this article, you will no more to fumble around with trial and error to build a wavy shape or pattern. In addition to the online generator, you have all the math secrets behind creating any kind of wave you want!
 
 
 
 The article ends here but now you have a powerful tool to create fancy designs that use wavy shapes. Here’s inspiration to get you started…
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 What about you? Use my online generator (or write the code manually if you already learned all the math by heart) and show me your creations! Let’s have a good collection in the comment section.
 
 How to Create Wavy Shapes &amp; Patterns in CSS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How To Customize WordPress Block Theme Cover Templates with Dynamic Post Feature Images</title>
         <link href="https://css-tricks.com/how-to-customize-wordpress-block-theme-cover-templates-with-dynamic-post-feature-images/"/>
       <updated>2022-09-23T16:15:19.000Z</updated>
       <content type="text">If we browse the WordPress theme directory, a majority of themes showcase cover images. It is a feature in popular demand. The cover page trend is true even in the block theme directory screenshots as well.
 
 
 
 Let’s consider the following example from Twenty Twenty (a classic theme) which includes a cover template that can be used to display both in single post and page, where the post’s featured image displays at the top that stretches across the browser screen, with post title and other desired meta data below. Cover templates allow creating content that stands out from the traditional constraints of displaying content.
 
 
 
 Screenshot showing a single post with Twenty Twenty cover template.
 
 
 
 Creating cover templates currently requires writing PHP code as captured here in the Twenty Twenty default theme’s cover template. If we look at the template-parts/content-cover.php file, it contains the code for displaying content when the cover-template is used.
 
 
 
 Thus, it is not possible to create a customized cover page if you do not possess a deep knowledge of PHP. For many ordinary WordPress users, the only option is to use plugin like Custom Post Type UI as described in this short video.
 
 
 
 
 
 
 Cover sections in block themes
 
 
 Since WordPress 5.8, theme authors could create custom templates (like single post, author, category, and others) with a top hero section using block editor cover block and bundled into their themes with minimal or no code.
 
 
 
 Before diving into how top large cover sections are created in block themes templates, let’s briefly look at the two block themes Twenty Twenty-Two and Wabi by Rich Tabor (full review here).
 
 
 
 Screenshot showing cover page thumbnails of Twenty Twenty-Two (left) and Wabi (right) themes.
 
 
 
 Behind-the-scenes, Twenty Twenty-Two implements a large header by adding a hidden image stored as a pattern in the header-dark-large parts. Whereas, in the Wabi theme, the large header background color in a single post is implemented with accent background colors and a 50px height spacer block (lines: 5-9). The accent colors are managed by the assets/js/accent-colors.js file.
 
 
 
 Many others chose to create a top cover section by using cover block, which allowed users to change the background color and add a static image from Media Library or upload from media devices – without writing any code. With this approach, images from the post featured image block had to be added manually to each single post if you wanted to have the post featured image as the background image in single posts.
 
 
 Cover Blocks with dynamic post featured image
 
 
 WordPress 6.0 made available another cool featured image cover blocks feature, which allows use of the featured image of any post or page as the background image in the cover block.
 
 
 
 In the following short video, Automattic engineers discuss adding featured images to cover blocks with an example from Archeo theme:
 
 
 
 
 
 
 
 
 
 The image block including post featured image block can be further customized using duotone color in theme.json as discussed in this short Connecting The Dots YouTube video (Automattic’s Anne McCarthy).
 
 
 
 Use case examples (Wei, Bright Mode)
 
 
 
 If we browse the thumbnail images in the block theme directory, we see a majority of them include large cover header sections. If we dig into their template files, they make use of cover blocks with static image background.
 
 
 
 Some recently developed themes are using cover blocks with the dynamic post featured image background (e.g., Archeo, Wei, Frost, Bright Mode, etc.). A brief overview of the new feature is available in this short GitHub video.
 
 
 
 Screenshot showing cover page thumbnails of Wei (left) and Bright-mode (right) themes.
 
 
 
 Combining dynamic accent colors features of Wabi theme with cover and post featured image blocks, Rich Tabor further expands his creativity in his new Wei theme (full review available here) to display dynamic cover images from a single post.
 
 
 
 In his Wei announcement post, Rich Tabor writes: “Behind-the-scenes, the single.html template is using a Cover block that leverages the post’s featured image. Then the duotone is applied by the color scheme assigned to the post. This way, just about any image will look fine”.
 
 
 
 If you would like to dig deeper into the Wei theme’s header cover block and learn how to create your own, here is a short video from Fränk Klein (WP Development Courses) who explains step-by-step how it was created.
 
 
 
 Similar to the Wei theme, Brian Gardner also makes use of cover block with post featured image block in his recent Bright Mode theme to display standout contents with vibrant colors.
 
 
 
 Brian told WPTavern: “he loves most about the theme is the way the Cover Block is used on single pages. It pulls the featured image into the Cover block and also offers custom block styles for shadows and full-height options. […] I feel as though this really presents what’s possible with modern WordPress.”
 
 
 
 For more detail, here is its demo site and full review of Brian’s Bright Mode theme.
 
 
 Designing complex layouts with block editor
 
 
 Recently, WordPress launched a new block editor designed landing homepage and a download page. The announcement attracted mixed reactions from its readers, including from Matt Mullenweg (Automattic) who commented on the 33-days taken to design and launch such a “simple page”. You can find additional behind the scene discussions here.
 
 
 
 In response, Jamie Marsland of Pootlepress created this YouTube video where he reproduces a nearly identical homepage in nearly 20 minutes.
 
 
 
 Commenting on Marsland video, Sarah Gooding of WP Travern writes: “He is what one might describe as a power user with the block editor. He can quickly shuffle rows, columns, and groups around, adjusting padding and margins as necessary, and assign each section the corresponding color for the design. At this point, this is not something most average WordPress users could do.”
 
 
 
 Though the block editor has come a long way, there are still growing pain points to most theme developers and ordinary users to create and design complex layouts with it.
 
 
 Adding enhancement to TT2 Gopher blocks
 
 
 In this section, I will walk you through how I added enhancements to the TT2 Gopher Blocks theme that I referenced in my previous article. Inspired by cover blocks from themes that I described earlier, I wanted to add three cover templates (author, category, and single-cover) to the theme.
 
 
 
 While browsing websites, we notice two types of cover headers. The mostly observed header is cover section blended with the site header (site title and top navigation) into the cover block (e.g., Twenty Twenty, Twenty Twenty-Two, Wei, Wabi, Frost, Bright Mode, etc.). We also find header cover section which is not blended with site header and positioned just underneath, such as this BBC Future website. For TT2 Gopher blocks theme, I opted for the latter.
 
 
 Creating cover header patterns
 
 
 First, let’s create cover header patterns for author, single, and others (categories, tags) templates using cover blocks. Then we will convert them into patterns (as described here previously) and call the respective header cover patterns into the templates.
 
 
 
 If you are familiar to working with the block editor, design your header section using cover blocks in the site editor and then convert the cover header code into patterns. However, if you are not familiar with FSE editor, then the easiest way is to copy patterns from the patterns directory in a post, make necessary modification and convert it into a pattern.
 
 
 
 In my previous CSS-Tricks article, I discussed in detail on creating and using block patterns. Here is a brief overview of the workflow that I am using to create the single post cover header pattern:
 
 
 
 Single post cover header pattern
 
 
 
 Step 1: Using FSE interface, let’s create a new blank file and start building block structure as shown on the left panel.
 
 
 
 Screenshot of the WordPress UI with the Full Site Editor. A block is being assembled with post date, categories, and post title.
 
 
 
 Alternatively, this could be done in a post or page first, and then copy and paste the markup into a pattern file, later.
 
 
 
 Step 2: Next, to covert the above markup into a pattern, first we should copy its code markup and paste into a new /patterns/header-single-cover.php in our code editor. We should also add required pattern file header markup (e.g., title, slug, categories, inserter, etc.).
 
 
 
 Here is the entire code of the /patterns/header-single-cover.php file:
 
 
 
 &lt;?php
     /**
      * Title: Header cover single
      * Slug: tt2gopher/header-cover-single
      * Categories: tt2gopher-header
      * Block Types: core/template-part/header
      * inserter: yes
      */
 ?&gt;
     &lt;!-- wp:cover {&quot;url&quot;:&quot;https://pd.w.org/2022/08/15062ed5f5707b5c5.85694718-2048x1536.jpg&quot;,&quot;id&quot;:100,&quot;dimRatio&quot;:0,&quot;overlayColor&quot;:&quot;foreground&quot;,&quot;focalPoint&quot;:{&quot;x&quot;:&quot;0.40&quot;,&quot;y&quot;:&quot;0.37&quot;},&quot;minHeight&quot;:50,&quot;minHeightUnit&quot;:&quot;vh&quot;,&quot;isDark&quot;:false,&quot;align&quot;:&quot;full&quot;,&quot;style&quot;:{&quot;color&quot;:{&quot;duotone&quot;:[&quot;#000000&quot;,&quot;#00a5ff&quot;]},&quot;spacing&quot;:{&quot;margin&quot;:{&quot;top&quot;:&quot;0px&quot;,&quot;bottom&quot;:&quot;0px&quot;}}}} --&gt;
     &lt;div class&#x3D;&quot;wp-block-cover alignfull is-light&quot; style&#x3D;&quot;margin-top:0px;margin-bottom:0px;min-height:50vh&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;wp-block-cover__background has-foreground-background-color has-background-dim-0 has-background-dim&quot;&gt;&lt;/span&gt;&lt;img class&#x3D;&quot;wp-block-cover__image-background wp-image-100&quot; alt&#x3D;&quot;&quot; src&#x3D;&quot;https://pd.w.org/2022/08/15062ed5f5707b5c5.85694718-2048x1536.jpg&quot; style&#x3D;&quot;object-position:40% 37%&quot; data-object-fit&#x3D;&quot;cover&quot; data-object-position&#x3D;&quot;40% 37%&quot;/&gt;&lt;div class&#x3D;&quot;wp-block-cover__inner-container&quot;&gt;&lt;!-- wp:group {&quot;style&quot;:{&quot;elements&quot;:{&quot;link&quot;:{&quot;color&quot;:{&quot;text&quot;:&quot;var:preset|color|base&quot;}}},&quot;spacing&quot;:{&quot;blockGap&quot;:&quot;10px&quot;}},&quot;textColor&quot;:&quot;base&quot;,&quot;layout&quot;:{&quot;wideSize&quot;:&quot;800px&quot;}} --&gt;
     &lt;div class&#x3D;&quot;wp-block-group has-base-color has-text-color has-link-color&quot;&gt;&lt;!-- wp:group {&quot;style&quot;:{&quot;spacing&quot;:{&quot;blockGap&quot;:&quot;10px&quot;}},&quot;textColor&quot;:&quot;primary&quot;,&quot;layout&quot;:{&quot;type&quot;:&quot;flex&quot;,&quot;flexWrap&quot;:&quot;nowrap&quot;,&quot;justifyContent&quot;:&quot;center&quot;},&quot;fontSize&quot;:&quot;small&quot;} --&gt;
     &lt;div class&#x3D;&quot;wp-block-group has-primary-color has-text-color has-small-font-size&quot;&gt;&lt;!-- wp:post-date {&quot;textColor&quot;:&quot;foreground&quot;} /--&gt;
     
     &lt;!-- wp:paragraph --&gt;
     &lt;p&gt;|&lt;/p&gt;
     &lt;!-- /wp:paragraph --&gt;
     
     &lt;!-- wp:post-terms {&quot;term&quot;:&quot;category&quot;,&quot;style&quot;:{&quot;elements&quot;:{&quot;link&quot;:{&quot;color&quot;:{&quot;text&quot;:&quot;var:preset|color|foreground&quot;}}}}} /--&gt;&lt;/div&gt;
     &lt;!-- /wp:group --&gt;
     
     &lt;!-- wp:post-title {&quot;textAlign&quot;:&quot;center&quot;,&quot;level&quot;:1,&quot;style&quot;:{&quot;typography&quot;:{&quot;fontStyle&quot;:&quot;normal&quot;,&quot;fontWeight&quot;:&quot;400&quot;}},&quot;textColor&quot;:&quot;foreground&quot;,&quot;fontSize&quot;:&quot;max-60&quot;} /--&gt;&lt;/div&gt;
     &lt;!-- /wp:group --&gt;&lt;/div&gt;&lt;/div&gt;
     &lt;!-- /wp:cover --&gt;
 
 
 
 Step 3: For this demo, I have used this image from photos directory as a filler background image, and applied the Midnight duotone color. To use post featured image dynamically, we should add &quot;useFeaturedImage&quot;:true in the cover block by replacing the above filler image link just before the &quot;dimRatio&quot;:50 such that the line 10 should look like the following:
 
 
 
 &lt;!-- wp:cover {&quot;useFeaturedImage&quot;:true,&quot;dimRatio&quot;:0,&quot;overlayColor&quot;:&quot;foreground&quot;,&quot;focalPoint&quot;:{&quot;x&quot;:&quot;0.40&quot;,&quot;y&quot;:&quot;0.37&quot;},&quot;minHeight&quot;:50,&quot;minHeightUnit&quot;:&quot;vh&quot;,&quot;isDark&quot;:false,&quot;align&quot;:&quot;full&quot;,&quot;style&quot;:{&quot;color&quot;:{&quot;duotone&quot;:[&quot;#000000&quot;,&quot;#00a5ff&quot;]},&quot;spacing&quot;:{&quot;margin&quot;:{&quot;top&quot;:&quot;0px&quot;,&quot;bottom&quot;:&quot;0px&quot;}}}} --&gt;
 
 
 
 Alternatively, the filler image could also be changed by clicking Replace and selecting Use featured image option:
 
 
 
 Screenshot of the WordPress UI with ‘Replace’ and ‘Use featured image’ selected.
 
 
 
 Now, the header cover patterns should be visible in the patterns inserter panel for use anywhere in the templates, posts, and pages.
 
 
 
 Archive cover headers
 
 
 
 Inspired by this WP Tavern post and a step-by-step walkthrough to create an author template header, I wanted to create a similar cover header and add to TT2 Gopher theme, too.
 
 
 
 First, let’s create the archive cover header pattern for author.html the template as well, following the above workflow. In this case, I am creating this in a new blank page, by adding blocks (as shown below in list view):
 
 
 
 Screenshot of the WordPress UI for an Author page using a single post header cover.
 
 
 
 In the background for the cover, I used the same image used in the single post header cover.
 
 
 
 Because we would like to display a short author biography on the author block, a biographical statement should also be added to the user profile page, or else a blank space will be displayed in the front-end.
 
 
 
 The following is the markup code of the header-author-cover, that we will use pattern, in the next step:
 
 
 
     &lt;!-- wp:cover {&quot;url&quot;:&quot;https://pd.w.org/2022/03/8256241eff74ef542.61868565.jpeg&quot;,&quot;id&quot;:226,&quot;dimRatio&quot;:10,&quot;focalPoint&quot;:{&quot;x&quot;:&quot;0.50&quot;,&quot;y&quot;:&quot;0.75&quot;},&quot;minHeight&quot;:200,&quot;minHeightUnit&quot;:&quot;px&quot;,&quot;isDark&quot;:false,&quot;align&quot;:&quot;full&quot;,&quot;style&quot;:{&quot;color&quot;:{&quot;duotone&quot;:[&quot;#000000&quot;,&quot;#00a5ff&quot;]}}} --&gt;
     &lt;div class&#x3D;&quot;wp-block-cover alignfull is-light&quot; style&#x3D;&quot;min-height:200px&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;wp-block-cover__background has-background-dim-10 has-background-dim&quot;&gt;&lt;/span&gt;&lt;img class&#x3D;&quot;wp-block-cover__image-background wp-image-226&quot; alt&#x3D;&quot;&quot; src&#x3D;&quot;https://pd.w.org/2022/03/8256241eff74ef542.61868565.jpeg&quot; style&#x3D;&quot;object-position:50% 75%&quot; data-object-fit&#x3D;&quot;cover&quot; data-object-position&#x3D;&quot;50% 75%&quot;/&gt;&lt;div class&#x3D;&quot;wp-block-cover__inner-container&quot;&gt;&lt;!-- wp:group {&quot;layout&quot;:{&quot;inherit&quot;:true}} --&gt;
     &lt;div class&#x3D;&quot;wp-block-group&quot;&gt;&lt;!-- wp:group {&quot;style&quot;:{&quot;spacing&quot;:{&quot;padding&quot;:{&quot;top&quot;:&quot;1rem&quot;,&quot;right&quot;:&quot;2rem&quot;,&quot;bottom&quot;:&quot;1rem&quot;,&quot;left&quot;:&quot;2rem&quot;}}},&quot;layout&quot;:{&quot;type&quot;:&quot;flex&quot;,&quot;flexWrap&quot;:&quot;nowrap&quot;}} --&gt;
     &lt;div class&#x3D;&quot;wp-block-group&quot; style&#x3D;&quot;padding-top:1rem;padding-right:2rem;padding-bottom:1rem;padding-left:2rem&quot;&gt;&lt;!-- wp:avatar {&quot;size&quot;:70,&quot;isLink&quot;:true,&quot;align&quot;:&quot;right&quot;,&quot;style&quot;:{&quot;border&quot;:{&quot;radius&quot;:&quot;9999px&quot;}}} /--&gt;
     
     &lt;!-- wp:group --&gt;
     &lt;div class&#x3D;&quot;wp-block-group&quot;&gt;&lt;!-- wp:group {&quot;style&quot;:{&quot;spacing&quot;:{&quot;blockGap&quot;:&quot;6px&quot;}},&quot;layout&quot;:{&quot;type&quot;:&quot;flex&quot;},&quot;fontSize&quot;:&quot;large&quot;} --&gt;
     &lt;div class&#x3D;&quot;wp-block-group has-large-font-size&quot;&gt;&lt;!-- wp:paragraph {&quot;textColor&quot;:&quot;foreground&quot;,&quot;fontSize&quot;:&quot;large&quot;} --&gt;
     &lt;p class&#x3D;&quot;has-foreground-color has-text-color has-large-font-size&quot;&gt;Published by:&lt;/p&gt;
     &lt;!-- /wp:paragraph --&gt;
     
     &lt;!-- wp:post-author-name {&quot;isLink&quot;:true,&quot;style&quot;:{&quot;typography&quot;:{&quot;fontStyle&quot;:&quot;large&quot;,&quot;fontWeight&quot;:&quot;600&quot;},&quot;elements&quot;:{&quot;link&quot;:{&quot;color&quot;:{&quot;text&quot;:&quot;var:preset|color|background&quot;}}}},&quot;textColor&quot;:&quot;foreground&quot;} /--&gt;&lt;/div&gt;
     &lt;!-- /wp:group --&gt;
     
     &lt;!-- wp:post-author-biography {&quot;textColor&quot;:&quot;foreground&quot;,&quot;fontSize&quot;:&quot;small&quot;} /--&gt;
     
     &lt;!-- wp:separator {&quot;backgroundColor&quot;:&quot;foreground&quot;} --&gt;
     &lt;hr class&#x3D;&quot;wp-block-separator has-text-color has-foreground-color has-alpha-channel-opacity has-foreground-background-color has-background&quot;/&gt;
     &lt;!-- /wp:separator --&gt;&lt;/div&gt;
     &lt;!-- /wp:group --&gt;&lt;/div&gt;
     &lt;!-- /wp:group --&gt;&lt;/div&gt;
     &lt;!-- /wp:group --&gt;&lt;/div&gt;&lt;/div&gt;
     &lt;!-- /wp:cover --&gt;
 
 
 
 To covert the markup into a header-author-cover pattern, we should add the required pattern file header markup as described earlier. By editing the header-author-cover.php pattern, we can create similar header covers for tags, taxonomy, and other custom templates.
 
 
 
 The header-category-cover.php pattern for my category.html template is available on GitHub.
 
 
 Creating Templates with header cover blocks
 
 
 WordPress 6.0 and the recent Gutenberg 13.7 extended template creating features into the block editor, thus making it possible for many WordPress users, without deep knowledge of coding, to create their customized templates.
 
 
 
 For more detailed information and use cases, here is a thorough customization note by Justin Tadlock.
 
 
 
 Block editor allows creating various types of templates, including cover templates. Let’s briefly overview how combining cover block and post featured image block with new template UI makes easy to create various types of cover custom templates even with no or low coding skills.
 
 
 
 Screenshot of the WordPress UI displaying available templates provided by TT2 Gopher Blocks – Single, Page, Index, Home, 404, Blank, and Archive.
 
 
 
 Creating templates has been made much easier with Gutenberg 13.7. How to create block templates with codes and in site editor is described in the Theme handbook and in my previous article.
 
 
 
 Author template with cover block
 
 
 
 Top (header section) markup of the author.html template is shown below (line 6):
 
 
 
     &lt;!-- wp:template-part {&quot;slug&quot;:&quot;header-small-dark&quot;,&quot;theme&quot;:&quot;TT2-GOPHER-V2&quot;,&quot;tagName&quot;:&quot;header&quot;} /--&gt;
     
     &lt;!-- wp:group {&quot;tagName&quot;:&quot;main&quot;,&quot;style&quot;:{&quot;spacing&quot;:{&quot;margin&quot;:{&quot;top&quot;:&quot;0&quot;,&quot;bottom&quot;:&quot;0px&quot;},&quot;padding&quot;:{&quot;bottom&quot;:&quot;80px&quot;},&quot;blockGap&quot;:&quot;0px&quot;}},&quot;className&quot;:&quot;site-content&quot;} --&gt;
     &lt;main class&#x3D;&quot;wp-block-group site-content&quot; style&#x3D;&quot;margin-top:0;margin-bottom:0px;padding-bottom:80px&quot;&gt;
     
         &lt;!-- wp:pattern {&quot;slug&quot;:&quot;tt2gopher/header-author-cover&quot;} /--&gt;
     
     ...
     ...
     ...
     &lt;!-- /wp:group --&gt;
     ...
 
 
 
 Here are screenshots of cover headers for the author.html and category.html templates:
 
 
 
 Screenshot of Author Page header (left) with author name, avatar, and biography. And screenshot of Category Page header (right).
 
 
 
 The entire code for both templates is available on GitHub.
 
 
 
 Single post with cover block
 
 
 
 To display cover block in our single post, we have to call the header-cover-single pattern below the header section (line 3):
 
 
 
     &lt;!-- wp:template-part {&quot;slug&quot;:&quot;header-small-dark&quot;,&quot;tagName&quot;:&quot;header&quot;} /--&gt;
     
      &lt;!-- wp:pattern {&quot;slug&quot;:&quot;tt2gopher/header-cover-single&quot;} /--&gt;
     
     &lt;!-- wp:spacer {&quot;height&quot;:32} --&gt;
     &lt;div style&#x3D;&quot;height:32px&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;wp-block-spacer&quot;&gt;&lt;/div&gt;
     &lt;!-- /wp:spacer --&gt;
     ....
     ....
     ....
 
 
 
 Here is a screen capture showing the front-end view of the single post with the header cover section:
 
 
 
 Screenshot of TT2 Gopher Blocks Single Post with Header Cover Section Pattern.
 
 
 
 The entire single-cover.html template is available on GitHub.
 
 
 
 You can find additional step-by-step walkthrough tutorials on creating a hero header post section and using post featured image background cover blocks on WP Tavern and Full Site Editing website.
 
 
 
 There you have it!
 
 
 Helpful Resources
 
 Featured image cover block
 
 
 Post Featured Image Block (WordPress Support)Using the Post Featured Image with the Cover Block YouTube (Dave on WP)Cover Block Step by Step tutorial (WordPress Support)Featured Cover Blocks and the Future of Binding Data to Generic WordPress Blocks (WP Tavern)Custom Single Post Layouts with WordPress Gutenberg (Pootlepress)Makes cover block dynamic and adds featured image binding #39658 (GitHub)
 
 
 Blog posts
 
 
 Featured Cover Blocks and the Future of Binding Data to Generic WordPress Blocks (WPTavern)Making an Impression: How To Build a Post Hero Header With Blocks (WPTavern)Core Editor Improvement: Deeper customization with more template options (Make WordPress Core)
 
 
 
 
 
 
 
 Even though the block themes, in general, are getting lots of pushback from WordPress community members, in my opinion, they are the future of WordPress, too. With block themes, amateur theme authors, without the deep coding skills and mastery of PHP and JavaScript languages, can now create themes with complex layouts with a hero cover section as described in this article combined with patterns and style variations.
 
 
 
 As an early Gutenberg user, I couldn’t be more excited with the new theming tools like create block theme plugin and others which allow theme authors to achieve the following directly from block editor UI without writing any code:
 
 
 
 (i) create(ii) overwrite theme files and export(iii) generate blank or a child theme, and(iv) modify and save style variation of the current theme
 
 
 
 Additionally, the recent iterations of the Gutenberg plugin allow enabling fluid typography and layout alignments and other stylistic controls using only theme.json file without JavaScript and a line of CSS rules.
 
 
 
 Thank you for reading and share your comments and thoughts below!
 
 How To Customize WordPress Block Theme Cover Templates with Dynamic Post Feature Images originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>The Web is Good Now</title>
         <link href="https://css-tricks.com/the-web-is-good-now/"/>
       <updated>2022-09-22T22:07:22.000Z</updated>
       <content type="text">The video of Chris Coyier’s talk at CascadiaJS 2022 is now available. It’s his first in-person talk in more than two years, so it’s great to see our good friend back on stage slinging gems on what makes the web good these days.
 
 
 
 Container Queries! WAAPI! Scroll Timelines! offset-path! FLIP! Variable fonts! Fluid type! We really are all-powerful front-end developers these days.
 
 
 
 Chris really packs a bunch into a 25-minute slot. It feels good to pause for that brief amount of time to reflect on the great new things for building websites and celebrate the fact that we get to use them.
 
 
 
 And there’s nothing better than watching Chris greet the enture room as a bunch of “web nerds”. 🤓
 
 
 
 
 
 
 To Shared Link — Permalink on CSS-Tricks
 The Web is Good Now originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How I Made an Icon System Out of CSS Custom Properties</title>
         <link href="https://css-tricks.com/how-i-made-an-icon-system-out-of-css-custom-properties/"/>
       <updated>2022-09-22T15:17:21.000Z</updated>
       <content type="text">SVG is the best format for icons on a website, there is no doubt about that. It allows you to have sharp icons no matter the screen pixel density, you can change the styles of the SVG on hover and you can even animate the icons with CSS or JavaScript.
 
 
 
 There are many ways to include an SVG on a page and each technique has its own advantages and disadvantages. For the last couple of years, I have been using a Sass function to import directly my icons in my CSS and avoid having to mess up my HTML markup.
 
 
 
 
 
 
 
 I have a Sass list with all the source codes of my icons. Each icon is then encoded into a data URI with a Sass function and stored in a custom property on the root of the page.
 
 
 TL;DR
 
 
 What I have for you here is a Sass function that creates a SVG icon library directly in your CSS.
 
 
 
 The SVG source code is compiled with the Sass function that encodes them in data URI and then stores the icons in CSS custom properties. You can then use any icon anywhere in your CSS like as if it was an external image.
 
 
 
 This is an example pulled straight from the code of my personal site:
 
 
 
 .c-filters__summary h2:after {
   content: var(--svg-down-arrow);
   position: relative;
   top: 2px;
   margin-left: auto;
   animation: closeSummary .25s ease-out;
 }
 
 
 Demo
 
 
 CodePen Embed Fallback
 
 
 Sass structure
 
 
 /* All the icons source codes */
 $svg-icons: (
   burger: &#x27;&lt;svg xmlns&#x3D;&quot;http://www.w3.org/2000/svg&quot; viewBox&#x3D;&quot;0...&#x27;
 );
 
 /* Sass function to encode the icons */
 @function svg($name) {
   @return url(&#x27;data:image/svg+xml, #{$encodedSVG} &#x27;);
 }
 
 /* Store each icon into a custom property */
 :root {
   @each $name, $code in $svg-icons {
     --svg-#{$name}: #{svg($name)};
   }
 }
 
 /* Append a burger icon in my button */
 .menu::after {
   content: var(--svg-burger);
 }		
 
 
 
 This technique has both pros and cons, so please take them into account before implementing this solution on your project:
 
 
 Pros
 
 
 There are no HTTP requests for the SVG files.All of the icons are stored in one place.If you need to update an icon, you don’t have to go over each HTML templates file.The icons are cached along with your CSS.You can manually edit the source code of the icons.It does not pollute your HTML by adding extra markup.You can still change the color or some aspect of the icon with CSS.
 
 
 Cons
 
 
 You cannot animate or update a specific part of the SVG with CSS.The more icons you have, the heavier your CSS compiled file will be.
 
 
 
 I mostly use this technique for icons rather than logos or illustrations. An encoded SVG is always going to be heavier than its original file, so I still load my complex SVG with an external file either with an &lt;img&gt; tag or in my CSS with url(path/to/file.svg).
 
 
 Encoding SVG into data URI
 
 
 Encoding your SVG as data URIs is not new. In fact Chris Coyier wrote a post about it over 10 years ago to explain how to use this technique and why you should (or should not) use it.
 
 
 
 There are two ways to use an SVG in your CSS with data URI:
 
 
 
 As an external image (using background-image,border-image,list-style-image,…)As the content of a pseudo element (e.g. ::before or ::after)
 
 
 
 Here is a basic example showing how you how to use those two methods:
 
 
 
 CodePen Embed Fallback
 
 
 
 The main issue with this particular implementation is that you have to convert the SVG manually every time you need a new icon and it is not really pleasant to have this long string of unreadable code in your CSS.
 
 
 
 This is where Sass comes to the rescue!
 
 
 Using a Sass function
 
 
 By using Sass, we can make our life simpler by copying the source code of our SVG directly in our codebase, letting Sass encode them properly to avoid any browser error.
 
 
 
 This solution is mostly inspired by an existing function developed by Threespot Media and available in their repository.
 
 
 
 Here are the four steps of this technique:
 
 
 
 Create a variable with all your SVG icons listed.List all the characters that needs to be skipped for a data URI.Implement a function to encode the SVGs to a data URI format.Use your function in your code.
 
 
 1. Icons list
 
 
 /**
 * Add all the icons of your project in this Sass list
 */
 $svg-icons: (
   burger: &#x27;&lt;svg xmlns&#x3D;&quot;http://www.w3.org/2000/svg&quot; viewBox&#x3D;&quot;0 0 24.8 18.92&quot; width&#x3D;&quot;24.8&quot; height&#x3D;&quot;18.92&quot;&gt;&lt;path d&#x3D;&quot;M23.8,9.46H1m22.8,8.46H1M23.8,1H1&quot; fill&#x3D;&quot;none&quot; stroke&#x3D;&quot;#000&quot; stroke-linecap&#x3D;&quot;round&quot; stroke-width&#x3D;&quot;2&quot;/&gt;&lt;/svg&gt;&#x27;
 );
 
 
 2. List of escaped characters
 
 
 /**
 * Characters to escape from SVGs
 * This list allows you to have inline CSS in your SVG code as well
 */
 $fs-escape-chars: (
   &#x27; &#x27;: &#x27;%20&#x27;,
   &#x27;\&#x27;&#x27;: &#x27;%22&#x27;,
   &#x27;&quot;&#x27;: &#x27;%27&#x27;,
   &#x27;#&#x27;: &#x27;%23&#x27;,
   &#x27;/&#x27;: &#x27;%2F&#x27;,
   &#x27;:&#x27;: &#x27;%3A&#x27;,
   &#x27;(&#x27;: &#x27;%28&#x27;,
   &#x27;)&#x27;: &#x27;%29&#x27;,
   &#x27;%&#x27;: &#x27;%25&#x27;,
   &#x27;&lt;&#x27;: &#x27;%3C&#x27;,
   &#x27;&gt;&#x27;: &#x27;%3E&#x27;,
   &#x27;\\&#x27;: &#x27;%5C&#x27;,
   &#x27;^&#x27;: &#x27;%5E&#x27;,
   &#x27;{&#x27;: &#x27;%7B&#x27;,
   &#x27;|&#x27;: &#x27;%7C&#x27;,
   &#x27;}&#x27;: &#x27;%7D&#x27;,
 );
 
 
 3. Encode function
 
 
 /**
 * You can call this function by using &#x60;svg(nameOfTheSVG)&#x60;
 */
 @function svg($name) {
   // Check if icon exists
   @if not map-has-key($svg-icons, $name) {
     @error &#x27;icon “#{$name}” does not exists in $svg-icons map&#x27;;
     @return false;
   }
 
   // Get icon data
   $icon-map: map-get($svg-icons, $name);
 
   $escaped-string: &#x27;&#x27;;
   $unquote-icon: unquote($icon-map);
   // Loop through each character in string
   @for $i from 1 through str-length($unquote-icon) {
     $char: str-slice($unquote-icon, $i, $i);
 
     // Check if character is in symbol map
     $char-lookup: map-get($fs-escape-chars, $char);
 
     // If it is, use escaped version
     @if $char-lookup !&#x3D; null {
         $char: $char-lookup;
     }
 
     // Append character to escaped string
     $escaped-string: $escaped-string + $char;
   }
 
   // Return inline SVG data
   @return url(&#x27;data:image/svg+xml, #{$escaped-string} &#x27;);
 }		
 
 
 4. Add an SVG in your page
 
 
 button {
   &amp;::after {
     /* Import inline SVG */
     content: svg(burger);
   }
 }
 
 
 
 If you have followed those steps, Sass should compile your code properly and output the following:
 
 
 
 button::after {
   content: url(&quot;data:image/svg+xml, %3Csvg%20xmlns&#x3D;%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox&#x3D;%270%200%2024.8%2018.92%27%20width&#x3D;%2724.8%27%20height&#x3D;%2718.92%27%3E%3Cpath%20d&#x3D;%27M23.8,9.46H1m22.8,8.46H1M23.8,1H1%27%20fill&#x3D;%27none%27%20stroke&#x3D;%27%23000%27%20stroke-linecap&#x3D;%27round%27%20stroke-width&#x3D;%272%27%2F%3E%3C%2Fsvg%3E &quot;);
 }		
 
 
 
 CodePen Embed Fallback
 
 
 Custom properties
 
 
 The now-implemented Sass svg() function works great. But its biggest flaw is that an icon that is needed in multiple places in your code will be duplicated and could increase your compiled CSS file weight by a lot!
 
 
 
 To avoid this, we can store all our icons into CSS variables and use a reference to the variable instead of outputting the encoded URI every time.
 
 
 
 We will keep the same code we had before, but this time we will first output all the icons from the Sass list into the root of our webpage:
 
 
 
 /**
   * Convert all icons into custom properties
   * They will be available to any HTML tag since they are attached to the :root
   */
 
 :root {
   @each $name, $code in $svg-icons {
     --svg-#{$name}: #{svg($name)};
   }
 }
 
 
 
 Now, instead of calling the svg() function every time we need an icon, we have to use the variable that was created with the --svg prefix.
 
 
 
 button::after {
   /* Import inline SVG */
   content: var(--svg-burger);
 }
 
 
 Optimizing your SVGs
 
 
 This technique does not provide any optimization on the source code of the SVG you are using. Make sure that you don’t leave unnecessary code; otherwise they will be encoded as well and will increase your CSS file size.
 
 
 
 You can check this great list of tools and information on how to optimize properly your SVG. My favorite tool is Jake Archibald’s SVGOMG — simply drag your file in there and copy the outputted code.
 
 
 Bonus: Updating the icon on hover
 
 
 With this technique, we cannot select with CSS specific parts of the SVG. For example, there is no way to change the fill color of the icon when the user hovers the button. But there are a few tricks we can use with CSS to still be able to modify the look of our icon.
 
 
 
 For example, if you have a black icon and you want to have it white on hover, you can use the invert() CSS filter. We can also play with the hue-rotate() filter.
 
 
 
 CodePen Embed Fallback
 
 
 Bonus #2: Updating the icon using CSS mask-image property
 
 
 Another trick to be able to change the color of your icon, is to use it as a mask on your pseudo-element with a background. Set your pseudo-element as inline-block with a background-color and define a width &amp; height for the size needed.
 
 
 
 Once you have a rectangle with the color needed, apply those four values to only keep the shape of the SVG needed:
 
 
 
 mask-image: var(--svg-burger): The reference to our icon.mask-repeat: no-repeat: To prevent the mask to be duplicated.mask-size: contain: To make the icon fit perfectly in the rectangle.mask-position: center: To center our icon in the pseudo-element.
 
 
 
 Don’t forget that all CSS mask properties still need to be prefixed with -webkit- for most browsers as of September 2022.
 
 
 
 CodePen Embed Fallback
 
 
 
 Thanks to Christopher and Mike for letting me know about this trick in the comments!
 
 
 That’s it!
 
 
 I hope you find this little helper function handy in your own projects. Let me know what you think of the approach — I’d be interested to know how you’d make this better or tackle it differently!
 
 How I Made an Icon System Out of CSS Custom Properties originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>CSS Rules vs. CSS Rulesets</title>
         <link href="https://css-tricks.com/css-rules-vs-css-rulesets/"/>
       <updated>2022-09-21T21:53:44.000Z</updated>
       <content type="text">The latest spec:
 
 
 
 A style rule is a qualified rule that associates a selector list with a list of property declarations and possibly a list of nested rules. They are also called rule sets in CSS2.
 
 
 
 Louis Lazaris:
 
 
 
 As the above quote from W3C indicates, it seems like the W3C considers “rule set” to be a bit of an outdated term, preferring the term “style rule” (or possibly “rule” for short).
 
 
 
 
 
 
 
 I never noticed that! “Rule set” is so gosh darned branded on my brain that it’s gonan take losing a lot of muscle memory to start using “style rule” instead. I didn’t see a specific note in the spec’s Changes section, but you can see the change in the table of contents between versions:
 
 
 
 
 
 
 
 Louis nicely sums up the parts of a style rule as well:
 
 
 
 /* Everything below is a style rule (or rule set, or just rule) */
 section { /* Everything between the braces is a declaration block */
   margin: 0 20px; /* This line is an individual declaration */
   color: #888; /* Another declaration */
 }
 
 
 
 I know nothing of the context and, at first, I was gonna poo-poo the change, but “style rule” really makes sense the more I sit with it. If the property:value pairs are declarations that sit in a declaration block, then we’ve got something less like a set of rules and more like one rule that defines the styles for a selector with a block of style declarations. 👌
 
 
 
 Once again, naming things is hard.
 To Shared Link — Permalink on CSS-Tricks
 CSS Rules vs. CSS Rulesets originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>CSS Checkerboard Background… But With Rounded Corners and Hover Styles</title>
         <link href="https://css-tricks.com/css-checkerboard-background-but-with-rounded-corners-and-hover-styles/"/>
       <updated>2022-09-20T13:19:24.000Z</updated>
       <content type="text">On one hand, creating simple checkered backgrounds with CSS is easy. On the other hand, though, unless we are one of the CSS-gradient-ninjas, we are kind of stuck with basic patterns.
 
 
 
 At least that’s what I thought while staring at the checkered background on my screen and trying to round those corners of the squares just a little…until I remembered my favorite bullet point glyph — ✦ — and figured that if only I could place it over every intersection in the pattern, I’ll surely get the design I want.
 
 
 
 Turns out it’s possible! Here’s the proof.
 
 
 
 
 
 
 
 CodePen Embed Fallback
 
 
 
 Let’s start with the basic pattern:
 
 
 
 &lt;div&gt;&lt;/div&gt;
 
 
 
 div {
  background: 
   repeating-linear-gradient(
     to right, transparent, 
     transparent 50px, 
     white 50px, 
     white 55px
   ),
   repeating-linear-gradient(
     to bottom, transparent,  
     transparent 50px, 
     white 50px, 
     white 55px
   ),
   linear-gradient(45deg, pink, skyblue);
   /* more styles */
 }
 
 
 
 What that gives us is a repeating background of squares that go from pink to blue with 5px white gaps between them. Each square is fifty pixels wide and transparent. This is created using repeating-linear-gradient, which creates a linear gradient image where the gradient repeats throughout the containing area.
 
 
 
 In other words, the first gradient in that sequence creates white horizontal stripes and the second gradient creates white vertical stripes. Layered together, they form the checkered pattern, and the third gradient fills in the rest of the space.
 
 
 
 CodePen Embed Fallback
 
 
 
 Now we add the star glyph I mentioned earlier, on top of the background pattern. We can do that by including it on the same background property as the gradients while using an encoded SVG for the shape:
 
 
 
 div {
   background: 
     repeat left -17px top -22px/55px 55px
     url(&quot;data:image/svg+xml,
     &lt;svg xmlns&#x3D;&#x27;http://www.w3.org/2000/svg&#x27; viewBox&#x3D;&#x27;0 0 35px 35px&#x27;&gt;
       &lt;foreignObject width&#x3D;&#x27;35px&#x27; height&#x3D;&#x27;35px&#x27;&gt;
         &lt;div xmlns&#x3D;&#x27;http://www.w3.org/1999/xhtml&#x27; style&#x3D;&#x27;color: white; font-size: 35px&#x27;&gt;✦&lt;/div&gt;
       &lt;/foreignObject&gt;
     &lt;/svg&gt;&quot;
     ), 
     repeating-linear-gradient(
       to right, transparent,
       transparent 50px,
       white 50px,
       white 55px
     ),
     repeating-linear-gradient(
       to bottom, transparent,
       transparent 50px,
       white 50px,
       white 55px
     ),
     linear-gradient(45deg, pink, skyblue);
   /* more style */
 }
 
 
 
 Let’s break that down. The first keyword, repeat, denotes that this is a repeating background image. Followed by that is the position and size of each repeating unit, respectively (left -17px top -22px/55px 55px). This offset position is based on the glyph and pattern’s size. You’ll see below how the glyph size is given. The offset is added to re-position the repeating glyph exactly over each intersection in the checkered pattern.
 
 
 
 The SVG has an HTML &lt;div&gt; carrying the glyph. Notice that I declared a font-size on it. That ultimately determines the border radius of the squares in the checkerboard pattern — the bigger the glyph, the more rounded the squares. The unrolled SVG from the data URL looks like this:
 
 
 
 &lt;svg xmlns&#x3D;&#x27;http://www.w3.org/2000/svg&#x27; viewBox&#x3D;&#x27;0 0 35px 35px&#x27;&gt;
   &lt;foreignObject width&#x3D;&#x27;35px&#x27; height&#x3D;&#x27;35px&#x27;&gt;
     &lt;div xmlns&#x3D;&#x27;http://www.w3.org/1999/xhtml&#x27; style&#x3D;&#x27;color:white;font-size:35px&#x27;&gt;✦&lt;/div&gt;
   &lt;/foreignObject&gt;
 &lt;/svg&gt;
 
 
 
 Now that a CSS pattern is established, let’s add a :hover effect where the glyph is removed and the white lines are made slightly translucent by using rgb() color values with alpha transparency.
 
 
 
 div:hover {
   background:
     repeating-linear-gradient(
       to right, transparent,
       transparent 50px,
       rgb(255 255 255 / 0.5) 50px,
       rgb(255 255 255 / 0.5) 55px
     ),
     repeating-linear-gradient(
       to bottom, transparent,
       transparent 50px,
       rgb(255 255 255 / 0.5) 50px,
       rgb(255 255 255 / 0.5) 55px
     ),
   linear-gradient(45deg, pink, skyblue);
   box-shadow: 10px 10px 20px pink;
 }
 
 
 
 There we go! Now, not only do we have our rounded corners, but we also have more control control over the pattern for effects like this:
 
 
 
 CodePen Embed Fallback
 
 
 
 Again, this whole exercise was an attempt to get a grid of squares in a checkerboard pattern that supports rounded corners, a background gradient that serves as an overlay across the pattern, and interactive styles. I think this accomplishes the task quite well, but I’m also interested in how you might’ve approached it. Let me know in the comments!
 
 CSS Checkerboard Background… But With Rounded Corners and Hover Styles originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Making a Real-Time Clock With a Conic Gradient Face</title>
         <link href="https://css-tricks.com/making-a-real-time-clock-with-a-conic-gradient-face/"/>
       <updated>2022-09-19T12:58:09.000Z</updated>
       <content type="text">Gradients have been a part of the CSS spectrum for quite some time now. We see a lot of radial and linear gradients in a lot of projects, but there is one type of gradient that seems to be a bit lonely: the conic gradient. We’re going to make a watch face using this type of gradient.
 
 
 
 
 
 
 Working with conic gradients
 
 
 What we’re making consists of a gradient with color transitions rotated around a center point and can have multiple color values. For this clock to work, we will also be using the angle value of a conic gradient which defines the rotation or starting point. The angle is defined by using a from value.
 
 
 
 background-image: conic-gradient(from 45deg, #6e7dab, #5762d5);
 
 
 
 What is interesting about this, is that a starting angle can have a negative value in CSS, which will come in handy later.
 
 
 
 A simple elegant example of a conical gradient:
 
 
 
 CodePen Embed Fallback
 
 
 Building our basic clock
 
 
 Let’s start by adding some HTML for the clock and the hands:
 
 
 
 Let’s create some default styling for our clock. For this to work properly, we will update CSS variables with JavaScript later on, so let’s scope these variables inside our .clock selector. For easy tweaking, let’s add the colors of the hands as well.
 
 
 
 .clock {
   /* general clock vars */
   --hour-hand-color: #000;
   --hour-hand-degrees: 0deg;
   --minute-hand-color: #000;
   --minute-hand-degrees: 0deg;
   --second-hand-color: hotpink;
   --second-hand-degrees: 0deg;
 
   position: relative;
   min-width: 320px;
   width: 25vw;
   height: 25vw;
   min-height: 320px;
   border-radius: 50%;
   margin: 0 auto;
   border: 7px solid #000;
 }
 
 /* clock hands */
 .hand {
   position: absolute;
   left: 50%;
   bottom: 50%;
   height: 45%;
   width: 4px;
   margin-left: -2px;
   background: var(--second-hand-color);
   border-radius: 6px;
   transform-origin: bottom center;
   transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);
 }
 .second-hand {
   transform: rotate(var(--second-hand-degrees));
 }
 .hour-hand {
   height: 35%;
   border-radius: 40px;
   background-color: var(--hour-hand-color);
   transform: rotate(var(--hour-hand-degrees));
 }
 .minute-hand {
   height: 50%;
   background: var(--minute-hand-color);
   transform: rotate(var(--minute-hand-degrees));
 }
 
 
 
 This sets us up with the general styling we need for the clock. We’ve set transform-origin on the hands so that they properly rotate around the face of the clock. There are also a few custom properties in there to set angles on the hands that we’ll update with JavaScript to get the timing just right so that each hand maps to seconds, minutes, and hours accordingly.
 
 
 
 Here’s what we have so far:
 
 
 
 CodePen Embed Fallback
 
 
 
 Alright, let’s move on to updating those custom properties!
 
 
 Adding the JavaScript for our basic clock
 
 
 First off, we’re going to target our clock and create a function:
 
 
 
 const clock &#x3D; document.getElementById(&quot;clock&quot;);
 function setDate() {
   // Code to set the current time and hand angles.
 }
 setDate();
 
 
 
 Inside of our function we’re going to fetch the current time using the Date() function to calculate the correct angle of the hands:
 
 
 
 const now &#x3D; new Date();
 const secondsAngle &#x3D; now.getSeconds() * 6; 
 const minsAngle &#x3D; now.getMinutes() * 6 + secondsAngle / 60;
 const hourAngle &#x3D; ((now.getHours() % 12) / 12) * 360 + minsAngle / 12;
 
 
 
 Here is how this calculation works:
 
 
 
 Seconds: We take 60 seconds and multiply it by 6, which happens to be 360, the perfect number of angles in a full circle.Minutes: Same as seconds, but now we add the seconds angle and divide it by 60 to increase the angle just a little bit within the minute for a more accurate result.Hours: First, we calculate the remainder of the hour and divide it by 12. Then we divide that remainder by 12 again to get a decimal value we can multiply by 360. For example, when we’re at the 23rd hour, 23 / 12 &#x3D; remain 11. Divide this by 12 and we get 0.916 which then gets multiplied by 360 for a grand total of 330. Here, we will do the same thing we did with the minutes and add the minutes angle, divided by 12, for a more accurate result.
 
 
 
 Now that we have our angles, the only thing left to do is to update the variables of our clock by adding the following at the end of our function:
 
 
 
 clock.style.setProperty(&quot;--second-hand-degrees&quot;, secondsAngle + &quot;deg&quot;);
 clock.style.setProperty(&quot;--minute-hand-degrees&quot;, minsAngle + &quot;deg&quot;);
 clock.style.setProperty(&quot;--hour-hand-degrees&quot;, hourAngle + &quot;deg&quot;);
 
 
 
 Last, but not least, we will trigger the function with an interval of a second to get a working clock:
 
 
 
 const clock &#x3D; document.getElementById(&quot;clock&quot;);
 function setDate() {
   // etc.
 }
 // Tick tick tick
 setInterval(setDate, 1000);
 setDate();
 
 
 
 See the working demo of our basic clock:
 
 
 
 CodePen Embed Fallback
 
 
 Applying this to a conical gradient
 
 
 OK, so the hands of our clock are working. What we really want is to map them to a conical gradient that updates as the time changes. You may have seen the same effect if you have an Apple Watch with the “Gradient” face active:
 
 
 
 Credit: Macworld
 
 
 
 To do this, let’s start by updating our .clock element with a conic gradient and two custom properties that control the starting and ending angles :
 
 
 
 .clock {
   /* same as before */
 
   /* conic gradient vars */
   --start: 0deg;
   --end: 0deg;
 
   /* same as before */
 
   background: 
     conic-gradient(
       from var(--start),
       rgb(255 255 255) 2deg,
       rgb(0 0 0 / 0.5) var(--end),
       rgb(255 255 255) 2deg,
       rgb(0 0 0 / 0.7)
   );
 }
 
 
 
 You can play around with this a bit to style it just the way you like it. I added some extra colors in the gradient to my liking, but as long as you have a starting point and an ending point, you’re good to go.
 
 
 
 CodePen Embed Fallback
 
 
 
 Next up, we will update our setDate() function so that it updates the variables for our starting and ending points on the conic gradient. The starting point will be our seconds hand, which is easy to find because it will be the same as the angle of our minutes. To make this end at the hours hand, we should make our ending point the same as the hourAngle variable in the script, but subtract our starting point from it.
 
 
 
 let startPosition &#x3D; minsAngle;
 let endPosition &#x3D; hourAngle - minsAngle;
 
 
 
 Now we can update our variables with JavaScript again:
 
 
 
 clock.style.setProperty(&quot;--start&quot;, startPosition + &quot;deg&quot;);
 clock.style.setProperty(&quot;--end&quot;, endPosition + &quot;deg&quot;);
 
 
 
 It looks like we could be done at this point, but there is a catch! This calculation works fine as long as the minutes hand has a smaller angle than the hours hand. Our conic gradient will get messy the moment when the minutes hand has moved past it. To fix this, we will use a negative value as a starting point. Luckily, it’s easy to spot when this happens. Before updating our variables we’ll add the following:
 
 
 
 if (minsAngle &gt; hourAngle) {
   startPosition &#x3D; minsAngle - 360;
   endPosition &#x3D; hourAngle - startPosition;
 }
 
 
 
 By subtracting 360 from our minutes angle, we are able to set a negative value for our startposition variable. Because of this negative starting point, our end position should be updated by the hour angle, subtracted by the starting position.
 
 
 
 There we go — now the hour and minute hands are set to gradient angles:
 
 
 
 CodePen Embed Fallback
 
 
 
 That’s it! But don’t let that stop you from taking this even further. Create your own styles and share them with me in the comments so I can check them out.. Here is a little inspiration to get you going:
 
 
 
 CodePen Embed Fallback
 
 Making a Real-Time Clock With a Conic Gradient Face originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>More Details on &#x60;details&#x60;</title>
         <link href="https://css-tricks.com/more-details-on-details/"/>
       <updated>2022-09-15T13:12:40.000Z</updated>
       <content type="text">A lot of chatter around the ol’ &lt;details&gt; and &lt;summary&gt; elements lately! I saw Lea Verou recently tweet an observation about the element’s display behavior and that sorta splintered into more observations and usage notes from folks, including a revived discussion on whether &lt;summary&gt; should be allowed to contain interactive elements or not.
 
 
 
 There are a lot of dots to connect and I’ll do my best here to do exactly that.
 
 
 
 
 
 
 Can we change the display of elements nested in the &lt;details&gt; element?
 
 
 
 In the app I’m building, I’m using &lt;details&gt; for panels but ran into some sizing weirdness.Flexbox: https://t.co/noZvxAN35GGrid: https://t.co/pis0lPjvXkAt first I thought it was a bug, but all three engines agree. Nothing in the UA stylesheet for &lt;details&gt; seems to explain it.— Lea Verou (@LeaVerou) August 28, 2022
 
 
 
 
 Super weird! If we crack open DevTools, the user agent stylesheet tells us &lt;details&gt; is a displayed as a block element.
 
 
 
 
 
 
 
 Notice the required &lt;summary&gt; element and the two additional &lt;div&gt;s in there. We can override the display, right?
 
 
 
 
 
 
 
 What we might expect is that &lt;details&gt; now has an explicit height of 40vh and three rows where the third row takes up the remaining space leftover from the first two. Like this:
 
 
 
 
 
 
 
 Ugh, but the third row doesn’t… do… that.
 
 
 
 
 
 
 
 Apparently what we’re dealing with is a grid container that is unable to apply grid behavior to its grid items. But the HTML spec tells us:
 
 
 
 The details element is expected to render as a block box. The element is also expected to have an internal shadow tree with two slots.(Emphasis mine)
 
 
 
 And a little later:
 
 
 
 The details element’s second slot is expected to have its style attribute set to “display: block; content-visibility: hidden;” when the details element does not have an open attribute. When it does have the open attribute, the style attribute is expected to be removed from the second slot.(Emphasis mine, again)
 
 
 
 So, the spec says the second slot — the two additional &lt;div&gt;s from the example — are only coerced into being block elements when &lt;details&gt; is closed. When it’s open — &lt;details open&gt; — they should conform to the grid display that overrides the user agent styling… right?
 
 
 
 That’s the debate. I get that slots are set to display: contents by default, but jamming nested elements into slots and removing the ability to style them seems off. Is it a spec issue that the contents are slots, or a browser issue that we cannot override their display even though they are in the box tree? Smarter people can enlighten me but it seems like an incorrect implementation.
 
 
 Is &lt;details&gt; a container or an interactive element?
 
 
 Lots of folks are using &lt;details&gt; to toggle menus open and closed. It’s a practice popularized by GitHub.
 
 
 
 
 
 
 
 Seems reasonable. The spec sure allows it:
 
 
 
 The details element represents a disclosure widget from which the user can obtain additional information or controls.(Emphasis mine)
 
 
 
 Alright, so we might expect that &lt;details&gt; is the container (it has an implicit role&#x3D;group) and &lt;summary&gt; is an interactive element that sets the container’s open state. Makes sense since &lt;summary&gt; has an implcit button role in some contexts (but no corresponding WAI-ARIA role).
 
 
 
 But Melanie Sumner did some digging that not only seems to contradict that, but leads to the conclusion that using &lt;details&gt; as a menu probably ain’t the best thing. See what happens when &lt;details&gt; is rendered without the &lt;summary&gt; element:
 
 
 
 CodePen Embed Fallback
 
 
 
 It does exactly what the spec suggests when it’s missing a &lt;summary&gt; — it makes its own:
 
 
 
 The first summary element child of the element, if any, represents the summary or legend of the details. If there is no child summary element, the user agent should provide its own legend (e.g. “Details”).(Emphasis mine)
 
 
 
 
 
 
 
 Melanie ran that through an HTML validator and — surprise! — it’s invalid:
 
 
 
 
 
 
 
 So, &lt;details&gt; requires the &lt;summary&gt;. And when &lt;summary&gt; is missing, &lt;details&gt; creates it’s own, though it’s relayed as invalid markup. It’s all hunky-dory and valid when  &lt;summary&gt; is there:
 
 
 
 
 
 
 
 All of which leads to a new question: why is &lt;summary&gt; given an implcit button role when &lt;details&gt; is what appears to be the interactive element? Perhaps this is another case where the browser implementation is incorrect? Then again, the spec does categorize both as interactive elements. You can see how utterly confusing all of this becomes.
 
 
 
 Either way, Melanie’s ultimate conclusion that we ought to avoid using &lt;details&gt; for menus is based on how assistive tech reads and announces &lt;details&gt; that contain interactive elements. The element is announced, but there is no mention of interactive controls beyond that until you, er, interact with &lt;details&gt;. Only then will something like a list of links be announced.
 
 
 
 Besides, content inside a collapsed &lt;details&gt; is excluded from in-page searching (except in Chromium browsers, which can access the collapsed content at the time of writing), making things even more difficult to find.
 
 
 Should &lt;summary&gt; allow interactive elements?
 
 
 That’s the question posed in this open thread. The idea is that something like this would be invalid:
 
 
 
 &lt;details&gt;
   &lt;summary&gt;&lt;a href&#x3D;&quot;...&quot;&gt;Link element&lt;/a&gt;&lt;/summary&gt;
 &lt;/details&gt;
 
 &lt;!-- or --&gt;
 
 &lt;details&gt;
   &lt;summary&gt;&lt;input&gt;&lt;/summary&gt;
 &lt;/details&gt;
 
 
 
 Scott O’Hara sums up nicely why this is an issue:
 
 
 
 The link is not discoverable at all to JAWS when navigating with its virtual cursor. If navigating to the summary element via the Tab key, JAWS announces “example text, button” as the name and role of the element. If hitting Tab key again, JAWS again announces “example text, button” even though keyboard focus is on the link.[…]There is more I could go on about with the various problems different AT have with the content model for summary… but that would just extend this comment out beyond what is necessary. tldr; the summary content model produces very inconsistent and sometimes just flat out broken experiences for people using AT.
 
 
 
 Scott opened tickets to correct this behavior in Chromium and WebKit. Thanks, Scott!
 
 
 
 Yet, it’s valid HTML:
 
 
 
 
 
 
 
 Scott goes further in a separate blog post. For example, he explains how slapping role&#x3D;button on &lt;summary&gt; might seem like a reasonable fix to ensure it is consistently announced by assistive tech. That would also settle the debate over whether &lt;summary&gt; should allow interactive elements because buttons cannot contain interactive elements. The only problem is that Safari then treats &lt;summary&gt; as a standard button, which loses its expanded and collapsed states. So, the correct role is announced, but now its state is not. 🙃
 
 
 Where do we go now?
 
 
 Are you scared to use &lt;details&gt;/&lt;summary&gt; with all of these issues and inconsistencies? I sure am, but only insofar as to make sure that what’s in it provides the right sort of experience and expectations for users.
 
 
 
 I’m just glad these conversations are happening and that they’re taking place in the open. Because of that, you can comment on Scott’s three proposed solutions for how the content model for &lt;summary&gt; is defined, upvote his tickets, and report your own issues and use cases while you’re at it. Hopefully, the better we understand how the elements are used and what we expect them to do, the better they are implemented.
 
 More Details on &#x60;details&#x60; originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>When is it OK to Disable Text Selection?</title>
         <link href="https://css-tricks.com/when-is-it-ok-to-disable-text-selection/"/>
       <updated>2022-09-14T13:03:04.000Z</updated>
       <content type="text">Using CSS, it’s possible to prevent users from selecting text within an element using user-select: none. Now, it’s understandable why doing so might be considered “controversial”. I mean, should we be disabling standard user behaviors? Generally speaking, no, we shouldn’t be doing that. But does disabling text selection have some legitimate (albeit rare) use-cases? I think so.
 
 
 
 
 
 
 
 In this article we’ll explore these use cases and take a look at how we can use user-select: none to improve (not hinder) user experiences. It’s also worth nothing that the user-select property has other values besides none that can be used to alter the behavior of text selection rather than disable it completely, and another value that even enforces text selection, so we’ll also take a look at those.
 
 
 Possible user-select values
 
 
 Let’s kick things off by running through the different user-select values and what they do.
 
 
 
 Applying user-select: none; to an element means that its text content and nested text content won’t be functionally selectable or visually selectable (i.e. ::selection won’t work). If you were to make a selection that contained some non-selectable content, the non-selectable content would be omitted from the selection, so it’s fairly well implemented. And the support is great.
 
 
 This browser support data is from Caniuse, which has more detail. A number indicates that browser supports the feature at that version and up.DesktopChromeFirefoxIEEdgeSafari4*2*10*12*3.1*Mobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS Safari1051042.1*3.2*
 
 
 
 Conversely, user-select: text makes the content selectable. You’d use this value to overwrite user-select: none.
 
 
 
 user-select: contain is an interesting one. Applying it means that if a selection begins within the element then it must end within it too, containing it. This oddly doesn’t apply when the selection begins before the element, however, which is probably why no browser currently supports it. (Internet Explorer and earlier versions of Microsoft Edge previously supported it under the guise of user-select: element.)
 
 
 
 With user-select: all, selecting part of the element’s content results in all of it being selected automatically. It’s all or nothing, which is very uncompromising but useful in circumstances where users are more likely to copy content to their clipboard (e.g. sharing and embedding links, code snippets, etc.). Instead of double-clicking, users will only need to click once for the content to auto-select.
 
 
 
 Be careful, though, since this isn’t always the feature you think it is. What if users only want to select part of the content (e.g. only the font name part of a Google Fonts snippet or one part of a code snippet)? It’s still better to handle ”copy to clipboard” using JavaScript in many scenarios.
 
 
 
 A better application of user-select: all is to ensure that quotes are copied entirely and accurately.
 
 
 
 The behavior of user-select: auto (the initial value of user-select) depends on the element and how it’s used. You can find out more about this in our almanac.
 
 
 
 Now let’s turn to exploring use cases for user-select: none…
 
 
 Stripping non-text from the selection
 
 
 When you’re copying content from a web page, it’s probably from an article or some other type of long-form content, right? You probably don’t want your selection to include images, emoji (which can sometimes copy as text, e.g. “:thinkingface:”), and other things that you might expect to find wrapped in an &lt;aside&gt; element (e.g. in-article calls to action, ads, or something else that’s not part of the main content).
 
 
 
 To prevent something from being included in selections, make sure that it’s wrapped in an HTML element and then apply user-select: none to it:
 
 
 
 &lt;p&gt;lorem &lt;span style&#x3D;&quot;user-select: none&quot;&gt;🤔&lt;/span&gt; ipsum&lt;/p&gt;
 
 &lt;aside style&#x3D;&quot;user-select: none&quot;&gt;
   &lt;h1&gt;Heading&lt;/h1&gt;
   &lt;p&gt;Paragraph&lt;/p&gt;
   &lt;a&gt;Call to action&lt;/a&gt;
 &lt;/aside&gt;
 
 
 
 In scenarios like this, we’re not disabling selection, but rather optimizing it. It’s also worth mentioning that selecting doesn’t necessarily mean copying — many readers (including myself) like to select content as they read it so that they can remember where they are (like a bookmark), another reason to optimize rather than disable completely.
 
 
 Preventing accidental selection
 
 
 Apply user-select: none to links that look like buttons (e.g. &lt;a href&#x3D;&quot;/whatever&quot; class&#x3D;&quot;button&quot;&gt;Click Me!&lt;/a&gt;).
 
 
 
 It’s not possible to select the text content of a &lt;button&gt; or &lt;input type&#x3D;&quot;submit&quot;&gt; because, well, why would you? However, this behavior doesn’t apply to links because traditionally they form part of a paragraph that should be selectable.
 
 
 
 Fair enough.
 
 
 
 We could argue that making links look like buttons is an anti-pattern, but whatever. It’s not breaking the internet, is it? That ship has sailed anyway, so if you’re using links designed to look like buttons then they should mimic the behavior of buttons, not just for consistency but to prevent users from accidentally selecting the content instead of triggering the interaction.
 
 
 
 I’m certainly prone to selecting things accidentally since I use my laptop in bed more than I care to admit. Plus, there are several medical conditions that can affect control and coordination, turning an intended click into an unintended drag/selection, so there are accessibility concerns that can be addressed with user-select too.
 
 
 
 Interactions that require dragging (intentionally) do exist too of course (e.g. in browser games), but these are uncommon. Still, it just shows that user-select does in fact have quite a few use-cases.
 
 
 Avoiding paywalled content theft
 
 
 Paywalled content gets a lot of hate, but if you feel that you need to protect your content, it’s your content — nobody has the right steal it just because they don’t believe they should pay for it.
 
 
 
 If you do want to go down this route, there are many ways to make it more difficult for users to bypass paywalls (or similarly, copy copyrighted content such as the published work of others).
 
 
 
 Blurring the content with CSS:
 
 
 
 article { filter: blur(&lt;radius&gt;); }
 
 
 
 Disabling the keyboard shortcuts for DevTools:
 
 
 
 document.addEventListener(&quot;keydown&quot;, function (e) {
   if (e.keyCode &#x3D;&#x3D; 123) e.preventDefault();
   else if ((e.ctrlKey || e.metaKey) &amp;&amp; e.altKey &amp;&amp; e.keyCode &#x3D;&#x3D; 73) e.preventDefault();
   else if ((e.ctrlKey || e.metaKey) &amp;&amp; e.altKey &amp;&amp; e.keyCode &#x3D;&#x3D; 74) e.preventDefault();
   else if ((e.ctrlKey || e.metaKey) &amp;&amp; e.altKey &amp;&amp; e.keyCode &#x3D;&#x3D; 85) e.preventDefault();
 });
 
 
 
 Disabling access to DevTools via the context menu by disabling the context menu itself:
 
 
 
 document.addEventListener(&quot;contextmenu&quot;, e &#x3D;&gt; e.preventDefault())
 
 
 
 And of course, to prevent users from copying the content when they’re not allowed to read it at the source, applying user-select: none:
 
 
 
 &lt;article style&#x3D;&quot;user-select: none&quot;&gt;
 
 
 Any other use cases?
 
 
 Those are the three use cases I could think of for preventing text selection. Several others crossed my mind, but they all seemed like a stretch. But what about you? Have you had to disable text selection on anything? I’d like to know!
 
 When is it OK to Disable Text Selection? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>WebKit Features in Safari 16.0</title>
         <link href="https://css-tricks.com/webkit-features-in-safari-16-0/"/>
       <updated>2022-09-13T16:14:13.000Z</updated>
       <content type="text">Whew boy, Safari 16 is officially out in the wild and it packs in a bunch of features, some new and exciting (Subgrid! Container Queries! Font Palettes!) and others we’ve been waiting on for better cross-browser support (Motion Path! Overscroll Behavior! AVIF!). I imagine Jen Simmons typing cheerfully writing out all of the new goodies in the roundup announcement.
 
 
 
 
 
 
 
 Source: WebKit.org
 
 
 
 Just gonna drop in the new CSS features from the release notes:
 
 
 
 Added size queries support for Container Queries. Chrome started supporting it in Version 105, so all we need is Firefox to join the party to get The Big Three™ covered.Added support for Container Query Units. These units go hand-in-hand with Container Queries. Once again, we need Firefox.Added support for Subgrid. Now it’s Safari and Firefox with support coverage. The good news is that Chrome is currently developing it as well.Added support for animatable Grids. Very cool! Chrome has always had some implementation of this and Firefox started supporting it back in 2019.Added support for Offset Path. This is also known as Motion Path, and we’ve had broad browser support since 2020. It’s nice to see Safari on board.Added support for Overscroll Behavior. Now we can modify “scroll chaining” and overflow affordances with the overscroll-behavior property.Added support for text-align-last. Now we’re all set with cross-browser support for this property!Added support for the resolution media query. All set here as well!
 
 
 
 There are quite a few nice updates to Safari’s developer tools, too. We’ve got a Flexbox inspector, a Timelines tab (with an experimental screenshots timeline), and Container Queries info, to name a few. There’s a full 32-minute video that walks through everything, too.
 
 
 
 I thought Safari 15 was a pretty killer release, but 16 is pretty epic in comparison. I know there’s a “Safari is the new Internet Explorer” vibe in some circles, but I’m happy to see big jumps like this and appreciate all the forward momentum. Go Safari Team!
 To Shared Link — Permalink on CSS-Tricks
 WebKit Features in Safari 16.0 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>The Basics of Remix</title>
         <link href="https://css-tricks.com/the-basics-of-remix/"/>
       <updated>2022-09-13T12:59:46.000Z</updated>
       <content type="text">You’ve probably heard a lot of hype around one of the newest kids on the framework block, Remix. It may be surprising that it got its start back in 2019, but it was originally only available as a subscription-based premium framework. In 2021, the founders raised seed funding and open sourced the framework to let users start using Remix for free. The floodgates opened and everyone seems to be talking about it, good or bad. Let’s dive in and look at some of the basics of Remix.
 
 
 
 
 
 
 
 Remix is a server “edge” first JavaScript framework. It uses React, at least for now, for the front end and prioritizes server-side rendering the application on the edge. Platforms can take the server-side code and run it as serverless or edge functions making it cheaper than a traditional server and putting it closer to your users. The Remix founders like to call it a “center stack” framework because it adapts the requests and responses made between the server and the client for the platform it is being run on.
 
 
 
 
 
 
 Deploying Remix
 
 
 Because Remix requires a server, let’s talk about how you can deploy it. Remix does not provide the server itself — you bring the server — allowing it to be run in any Node.js or Deno environment, including Netlify Edge and DigitalOcean’s App Platform. Remix itself is a compiler, a program that translates the requests for the platform it is running on. This process uses esbuild to create handlers for the requests to the server. The HTTP handlers it uses are built on the Web Fetch API and are ran on the server by adapting them for the platform they will be deployed to.
 
 
 Remix stacks
 
 
 Remix stacks are projects that have some common tools that come preconfigured for you. There are three official stacks that are maintained by the Remix team and they are all named after musical genres. There is also a number of community Remix stacks including the K-Pop Stack created by the Templates Team at Netlify. This stack is a powerhouse and includes a Supabase database and authentication, Tailwind for styling, Cypress end-to-end testing, Prettier code formatting, ESLint linting, and TypeScript static typing. Check out Tara  Manicsic’s post on deploying the K-Pop Stack.
 
 
 Caching routes
 
 
 Even though Remix requires a server, it can still take advantage of the Jamstack benefits by caching routes. A static site or static site generation (SSG) is when all of your content is rendered at build time and stays static until another rebuild. The content is pre-generated and can be put on a CDN. This provides many benefits and speedy site loads for the end user. However, Remix does not do typical SSG like other popular React frameworks, including Next.js and Gatsby. To get the some of the benefits of SSG, you can use the native Cache-Control HTTP header in a Remix headers function to cache a particular route or directly in the root.tsx file.
 
 
 
 [[headers]]
   for &#x3D; &quot;/build/*&quot;
   [headers.values]
     &quot;Cache-Control&quot; &#x3D; &quot;public, max-age&#x3D;31536000, s-maxage&#x3D;31536000&quot;
 
 
 
 Then add in your headers function where you want it. This caches for one hour:
 
 
 
 export function headers() {
   return {
     &quot;Cache-Control&quot;: &quot;public, s-maxage&#x3D;360&quot;,
   };
 };
 
 
 Remixing routing
 
 
 A lot of frameworks have leaned into routing based on file systems. This is a technique where a designated folder is used to define routes for your application. They typically have special syntax for declaring dynamic routes and endpoints. The biggest difference currently between Remix and other popular frameworks is the ability to use nested routing.
 
 
 
 Every Remix app starts with the root.tsx file. This is where the entire base of the app is rendered. You’ll find some of the common HTML layout here like the &lt;html&gt; tag, the &lt;head&gt; tag, and then the &lt;body&gt; tag with the components needed to render the app. The one thing to point out here is the &lt;Scripts&gt; component is what enables JavaScript on the site; some things will work without it, but not everything. The root.tsx file acts as a parent layout for everything inside of the routes directory, everything in routes is rendered where the &lt;Outlet/&gt; component is in root.tsx. This is the base of nested routing in Remix.
 
 
 Nested routing
 
 
 Not only was Remix founded by some of the team from React Router, it also uses React Router. In fact, they are bringing some of the good things about Remix back to React Router. A complex problem that the maintainers of Next.js and SvelteKit are trying to solve right now is nested routing.
 
 
 
 Nested routing is unlike traditional routing. Where a new route would take a user to a new page, each nested route is a separate section of the same page. It allows for separation of concerns by keeping business logic associated with only the files that need it. Remix is able to handle errors localized to only the section of the page the nested route is at. The other routes on the page are still usable and the route that broke can provide relevant context to the error without the entire page crashing.
 
 
 
 Remix does this when a root file in app/routes is named the same as a directory of files that will load inside of the base file. The root file becomes a layout for the files in the directory by using an &lt;Outlet /&gt; component to tell Remix where to load the other routes.
 
 
 Outlet component
 
 
 The &lt;Outlet /&gt; Component is a signal to Remix for where it should render content for nested routes. It’s put in the file at the root of the app/routes directory with the same name as the nested routes. The following code goes in a app/routes/about.tsx file and includes the outlet for the files inside app/routes/about folder:
 
 
 
 import { Outlet } from &quot;@remix-run/react&quot;;
 
 export default function About() {
   return (
     &lt;&gt;
       &lt;section&gt;
         I am the parent layout. I will be on any page inside of my named directory.
       &lt;/section&gt;
       { /* All of my children, the files in the named directory, will go here. */ }
       &lt;Outlet /&gt;
     &lt;/&gt;
   )
 }
 
 
 Folder structure
 
 
 Any file in the app/routes/ directory becomes a route at the URL of its name. A directory can also be added with an index.tsx file.
 
 
 
 app/
 ├── routes/
 │   │
 │   └── blog
 |   |   ├── index.tsx ## The /blog route
 │   └── about.tsx  ## The /about route
 │   ├── index.tsx  ## The / or home route
 └── root.tsx
 
 
 
 If a route has the same name as a directory, the named file becomes a layout file for the files inside the directory and the layout file needs an Outlet component to place the nested route in.
 
 
 
 app/
 ├── routes/
 │   │
 │   └── about
 │   │   ├── index.tsx
 │   ├── about.tsx ## this is a layout for /about/index.tsx
 │   ├── index.tsx
 └── root.tsx
 
 
 
 Layouts can also be created by prefixing them with a double underscore (__).
 
 
 
 app/
 ├── routes/
 │   │
 │   └── about
 │   │   ├── index.tsx
 │   ├── index.tsx
 │   ├── about.tsx
 │   ├── __blog.tsx ## this is also a layout
 └── root.tsx
 
 
 
 https://your-url.com/about will still render the app/routes/about.tsx file, but will also render whatever is in app/routes/about/index.tsx where the Outlet component is in the markup of app/routes/about.tsx.
 
 
 Dynamic Routes
 
 
 A dynamic route is a route that changes based on information in the url. That may be a name of a blog post or a customer id, but no matter what it is the $ syntax added to the front of the route signals to Remix that it is dynamic. The name doesn’t matter other than the $ prefix.
 
 
 
 app/
 ├── routes/
 │   │
 │   └── about
 │   │   ├── $id.tsx
 │   │   ├── index.tsx
 │   ├── about.tsx ## this is a layout for /about/index.tsx
 │   ├── index.tsx
 └── root.tsx
 
 
 Fetch that data!
 
 
 Since Remix renders all of its data on the server, you don’t see a lot of the things that have become the standard of a React app, like useState() and useEffect() hooks, in Remix. There is less need for client-side state since it has already been evaluated on the server.
 
 
 
 It also doesn’t matter what type of server you use for fetching data. Since Remix sits between the request and response and translates it appropriately, you can use the standard Web Fetch API. Remix does this in a loader function that only runs on the server and uses the useLoaderData() hook to render the data in the component. Here’s an example using the Cat as a Service API to render a random cat image.
 
 
 
 import { Outlet, useLoaderData } from &#x27;@remix-run/react&#x27;
 
 export async function loader() {
   const response &#x3D; await fetch(&#x27;&lt;https://cataas.com/cat?json&#x3D;true&gt;&#x27;)
   const data &#x3D; await response.json()
   return {
     data
   }
 }
 
 export default function AboutLayout() {
   const cat &#x3D; useLoaderData&lt;typeof loader&gt;()
   return (
     &lt;&gt;
       &lt;img
         src&#x3D;{&#x60;https://cataas.com/cat/${cat}&#x60;}
         alt&#x3D;&quot;A random cat.&quot;
       /&gt;
       &lt;Outlet /&gt;
     &lt;/&gt;
   )
 }
 
 
 Route parameters
 
 
 In dynamic routes, routes prefixed with $ need to be able to access the URL parameter to handle that data that should be rendered. The loader function has access to these through a params argument.
 
 
 
 import { useLoaderData } from &#x27;@remix-run/react&#x27;
 import type { LoaderArgs } from &#x27;@remix-run/node&#x27;
 
 export async function loader({ params }: LoaderArgs) {
   return {
       params
   }
 }
 
 export default function AboutLayout() {
   const { params } &#x3D; useLoaderData&lt;typeof loader&gt;()
   return &lt;p&gt;The url parameter is {params.tag}.&lt;/p&gt;
 }
 
 
 Other Remix functions
 
 
 Remix has a few other helper functions that add extra functionality to normal HTML elements and attributes in the route module API. Each route can define its own of these types of functions.
 
 
 Action function
 
 
 An action function allows you to add extra functionality to a form action using the standard web FormData API.
 
 
 
 export async function action({ request }) {
   const body &#x3D; await request.formData();
   const todo &#x3D; await fakeCreateTodo({
       title: body.get(&quot;title&quot;),
   });
   return redirect(&#x60;/todos/${todo.id}&#x60;);
 }
 
 
 Headers function
 
 
 Any HTTP standard headers can go in a headers function. Because each route can have a header, to avoid conflicts with nested routes, the deepest route — or the URL with the most forward slashes (/) — wins. You can also get the headers passed through, actionHeaders, loaderHeaders, or parentHeaders
 
 
 
 export function headers({
   actionHeaders,
   loaderHeaders,
   parentHeaders,
 }) {
   return {
 &quot;Cache-Control&quot;: loaderHeaders.get(&quot;Cache-Control&quot;),
   };
 }
 
 
 Meta function
 
 
 This function will set the meta tags for the HTML document. One is set in the root.tsx file by default, but they can be updated for each route.
 
 
 
 export function meta() {
   return {
     title: &quot;Your page title&quot;,
     description: &quot;A new description for each route.&quot;,
   };
 };
 
 
 Links function
 
 
 HTML link elements live in the &lt;head&gt; tag of an HTML document and they import CSS, among other things. The links function, not to be confused with the &lt;Link /&gt; component, allows you to only import things in the routes that need them. So, for example, CSS files can be scoped and only imported on the routes that need those specific files. The link elements are returned from a links() function as an array of objects and can either be a HtmlLinkDescriptor from the link API or a PageLinkDescriptor that can prefetch the data for a page.
 
 
 
 export function links() {
   return [
     // add a favicon
     {
       rel: &quot;icon&quot;,
       href: &quot;/favicon.png&quot;,
       type: &quot;image/png&quot;,
     },
     // add an external stylesheet
     {
       rel: &quot;stylesheet&quot;,
       href: &quot;&lt;https://example.com/some/styles.css&gt;&quot;,
       crossOrigin: &quot;true&quot;,
     },
     // add a local stylesheet,
     { rel: &quot;stylesheet&quot;, href: stylesHref },
 
     // prefetch a page&#x27;s data
     { page: &quot;/about/community&quot; }
   ]
 }
 
 
 Linking between routes
 
 
 Remix provides a component to go between the different routes in your app called &lt;Link/&gt;. To get client-side routing, use the &lt;Link to&#x3D;&quot;&quot;&gt;Name&lt;/Link&gt; component instead of &lt;a href&#x3D;&quot;&quot;&gt;Name&lt;/a&gt;. The &lt;Link /&gt; component also takes a prop of prefetch with accepts none by default, intent to prefetch the data if Remix detects the user hovers or focuses the link, or render which will fetch the route’s data as soon as the link is rendered.
 
 
 
 import { Link } from &quot;@remix-run/react&quot;;
 
 export default function Nav() {
   return (
     &lt;nav&gt;
       &lt;Link to&#x3D;&quot;/&quot;&gt;Home&lt;/Link&gt;{&quot; &quot;}
       &lt;Link to&#x3D;&quot;/about&quot;&gt;About&lt;/Link&gt;{&quot; &quot;}
       &lt;Link to&#x3D;&quot;/about/community&quot; prefetch&#x3D;&quot;intent&quot;&gt;Community&lt;/Link&gt;
     &lt;/nav&gt;
   );
 }
 
 
 Next steps
 
 
 Now you know the basics of Remix and you’re ready to get started actually building applications, right? Remix provides a Jokes app and a Blog tutorial to get you started implementing this basic knowledge. You can also start from scratch and create a brand new Remix app. Or if you are ready to dive in, give the K-Pop Stack a try. I have really enjoyed my time with Remix and love the focus on web standards and bringing it back to the basics. Now it’s your turn to start creating!
 
 The Basics of Remix originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Building Interactive Figma Widgets</title>
         <link href="https://css-tricks.com/building-interactive-figma-widgets/"/>
       <updated>2022-09-12T13:05:20.000Z</updated>
       <content type="text">Figma has always encouraged collaboration between developers and designers. It strives on an endless treasury of community-made plugins. Need 3D elements? There’s a plugin for that. Need abstract SVGs? There’s a plugin for that, too.
 
 
 
 That said, the design part of Figma has always been relatively static — always working with unmovable rectangles connected to each other through predefined user interactions. But what if I told you that your designs could suddenly come to life — that they could be animated, interactive, and even stateful? Then, what would separate concept from implementation?
 
 
 
 Figma announced in June that it’s bringing JavaScript-powered widgets to the table. Now, designers have can browse and implement logic-driven components straight in Figma!
 
 
 
 Say hello to the Widgets API! You want to know what it is and how to use it? That’s exactly what we’re going to do together in this post.
 
 
 
 
 
 
 Figma widgets open up tons of possibilities
 
 
 Imagine that you’re working around the clock with your partner to design a large restaurant application. You’re both already collaborating on the same Figma board; both of you are sharing the exact same document with changes happening on the fly.
 
 
 
 Surely, you already know that collaboration involves more that just the design process:
 
 
 
 project management,hosting polls to gather votes,importing and visualizing mock data,and perhaps even playing a multiplayer game to cool-off after many hours of work.
 
 
 
 We just require one person to manage everything and send-out links to other members of the group. But oh, that’s not very efficient, is it?
 
 
 
 Well, that’s where widgets come into play. We can conceivably do all of that — yes, everything —without ever leaving Figma.
 
 
 
 Here are just a few of the ways you might want to use widgets in Figma:
 
 
 
 Creating tasks for Jira and AsanaCreating issues in GitHubDisplaying Dynamic DataRecording voice memosCreating task listsWasting time Playing Tic-Tac-ToeTracking activitiesCreating timers
 
 
 
 The list goes on and on. As you can tell, there’s already a plethora of widgets that you can freely use in your documents. In fact, you can add Widgets straight to your board from the Widgets menu (Shift+I).
 
 
 
 But we’re not here to learn how to use widgets, because that’s easy. Let us do what we do best: we’re gonna create our own Figma widget! This one will be inspired by Chris Coyier’s design quotes website. We’ll take the API, feed it into the widget, then display random design quotes directly in Figma.
 
 
 
 
 
 
 Here’s what we need
 
 
 I don’t like to be the bearer of bad news, but in order to develop widgets, you must be on Windows or Mac. Linux users, I’m sorry, but you’re out of luck. (You could still use a VM if you want to follow along.)
 
 
 
 We’re gonna download the Figma Desktop application. The simplest way to get started is by generating a widget template, straight from the app.
 
 
 
 
 
 
 
 Let’s create a new board by opening the widgets menu (Shift+ I), switching to the Development tab, and creating a new item.
 
 
 
 
 
 
 
 Following that, Figma will prompt you to name the new widget and decide whether it’s more tailored towards design boards or FigJam boards too. The former option is sufficient for the purposes of this article.
 
 
 
 
 
 
 
 And the customization doesn’t end here; Figma will also give you the option to start with a pre-made counter widget or an iFrame-enabled alternative that also gives you access to the Canvas and Fetch APIs (as well as all other browser APIs). We’ll go with the simple “Empty” option, but we’ll eventually modify it ourselves to make use of the Fetch API.
 
 
 
 You’ll then be prompted to save your new widget project to a special directory in your system. Once that’s done, launch your terminal and direct it to that folder. Don’t run any commands yet — we’ll do that later and purposefully get an error with the goal of learning more about the Widgets API.
 
 
 Designing the widget
 
 
 
 
 
 
 We’re pulling the design straight from Chris Coyier’s design quotes website. So, let’s go there and dive into by firing up DevTools.
 
 
 
 
 
 
 
 
 
 The two key shortcuts that I’m using here are Ctrl+Shift+C (or Cmd+Shift+C) to toggle the “Pick element” tool, and Shift+Click to change the color format to HEX code. We’re doing this to learn about the colors, fonts, font weights and font sizes used in Chris’s website. All this information is critical to build a closely-resembling widget in Figma, which will be our next step! You can grab the designed component and use it in your own canvas.
 
 
 
 I won’t go into much detail here as this article’s main topic is building widgets by writing code. But I can’t stress enough how important it is to take good care of your widgets’ style… CSS-Tricks already has a plethora of design-oriented Figma tutorials; you won’t regret adding them to your reading list.
 
 
 Creating the layout for our widget
 
 
 With design out of the way, it’s time to take our programming fingers out and start building the gears of our widget.
 
 
 
 It’s very interesting how Figma translates its design building blocks to React-like components. Frame elements with the auto-layout feature, for example, are represented as the &lt;AutoLayout /&gt; component in code. In addition to that, we’ll be using two more components: &lt;Text /&gt; and &lt;SVG /&gt;.
 
 
 
 Take a look at my Figma board… I’m precisely asking you to focus on the object tree. It’s what we need to be able to translate our widget design to JSX code.
 
 
 
 
 
 
 
 As you can see, our design quotes widget demands three components to be imported. That’s a decent number of components considering that the full API only contains eight layer-based nodes. But as you’ll soon see, these modules are more than sufficient to craft all kinds of layouts.
 
 
 
 // code.tsx
 const { widget } &#x3D; figma;
 const { AutoLayout, Text, SVG } &#x3D; widget;
 
 
 
 And with this, we have all we need to go ahead and build the skeleton of our widget like we would in React:
 
 
 
 function QuotesWidget() {
   const quote &#x3D; &#x60;...&#x60;;
   const author &#x3D; &#x60;...&#x60;;
 
   return (
     &lt;AutoLayout&gt;
       &lt;SVG /&gt;
       &lt;AutoLayout&gt;
         &lt;Text&gt;{quote}&lt;/Text&gt;
         &lt;Text&gt;— {author}&lt;/Text&gt;
       &lt;/AutoLayout&gt;
       &lt;SVG /&gt;
     &lt;/AutoLayout&gt;
   );
 }
 
 widget.register(QuotesWidget);
 
 
 
 This code is very confusing, to say the least. Right now, we can’t tell the design layers apart. Thankfully, we’re able to easily solve this issue through the use of the name property.
 
 
 
 &lt;AutoLayout name&#x3D;{&quot;Quote&quot;}&gt;
   &lt;SVG name&#x3D;{&quot;LeftQuotationMark&quot;} /&gt;
   &lt;AutoLayout name&#x3D;{&quot;QuoteContent&quot;}&gt;
     &lt;Text name&#x3D;{&quot;QuoteText&quot;}&gt;{quote}&lt;/Text&gt;
     &lt;Text name&#x3D;{&quot;QuoteAuthor&quot;}&gt;— {author}&lt;/Text&gt;
   &lt;/AutoLayout&gt;
   &lt;SVG name&#x3D;{&quot;RightQuotationMark&quot;} /&gt;
 &lt;/AutoLayout&gt;;
 
 
 
 And, of course, we still can’t see our quotation mark SVGs, so let’s work on fixing that. The &lt;SVG/&gt; component accept a srcproperty that takes the source code for an SVG element. There isn’t much to say on this one, so let’s keep it simple and jump straight back to code:
 
 
 
 const leftQuotationSvgSrc &#x3D; &#x60;&lt;svg width&#x3D;&quot;117&quot; height&#x3D;&quot;103&quot; viewBox&#x3D;&quot;0 0 117 103&quot; fill&#x3D;&quot;none&quot; xmlns&#x3D;&quot;&lt;http://www.w3.org/2000/svg&gt;&quot;&gt;
   // shortened for brevity
 &lt;/svg&gt;&#x60;;
 const rightQuotationSvgSrc &#x3D; &#x60;&lt;svg width&#x3D;&quot;118&quot; height&#x3D;&quot;103&quot; viewBox&#x3D;&quot;0 0 118 103&quot; fill&#x3D;&quot;none&quot; xmlns&#x3D;&quot;&lt;http://www.w3.org/2000/svg&gt;&quot;&gt;
 // shortened for brevity
 &lt;/svg&gt;&#x60;;
 
 function QuotesWidget() {
   return (
     &lt;SVG name&#x3D;{&quot;LeftQuotationMark&quot;} src&#x3D;{leftQuotationSvgSrc} /&gt;
     &lt;SVG name&#x3D;{&quot;RightQuotationMark&quot;} src&#x3D;{rightQuotationSvgSrc} /&gt;
   );
 }
 
 
 
 I think we can all agree that everything is much clearer now! When we name things, their purpose suddenly becomes much more obvious to the readers of our code.
 
 
 Previewing our widget in real-time
 
 
 Figma offers a great developer experience when building widgets, including (but not limited to ) hot-reloading. With this feature, we’re able to code and preview changes to our widget in real-time.
 
 
 
 Get started by opening the widgets menu (Shift+I), switching to the development tab and clicking or dragging your new widget to the board. Unable to locate your widget? Don’t worry, just click on the three-dot menu and import your widget’s manifest.json file. Yes, that’s all it takes bring it back to existence!
 
 
 
 
 
 
 
 Wait, did you get an error message at the bottom of your screen?
 
 
 
 
 
 
 
 If so, let’s investigate. Click on “Open console” and read what it has to say. If the Open console button is gone, there’s an alternative way to open the debugging console. Click on the Figma logo, jump to the widgets category and reveal the development menu.
 
 
 
 
 
 
 
 That error is likely due to the fact that we haven’t compiled our TypeScript to JavaScript yet. We can do that in the command line by running npm install and npm run watch. (or yarn and yarn watch ). No errors this time!
 
 
 
 One more obstacle you might hit is that the widget fails to re-render any time the code is changed. We can easily force our widget to update using the following context menu command: Widgets → Re-render widget.
 
 
 
 
 
 
 Styling the widget
 
 
 As it currently stands, the looks of our widgets are still pretty far from our final goal.
 
 
 
 
 
 
 
 So how do we style Figma components from code? Maybe with CSS like we would do in a React project? Negative. With Figma widgets, all the styling happens through a set of well-documented props. Lucky for us, these items are named almost identically to their counterparts in Figma.
 
 
 
 
 
 
 
 We’ll get started by configuring our two &lt;AutoLayout /&gt; components. As you can see in the infographic above, prop names are pretty descriptive of their purpose. This makes it easy for us to jump straight into code and start making some changes. I won’t be showing the whole code again, so please rely on the component names to guide you where the snippets belongs.
 
 
 
 &lt;AutoLayout
   name&#x3D;{&quot;Quote&quot;}
   direction&#x3D;{&quot;horizontal&quot;}
   verticalAlignItems&#x3D;{&quot;start&quot;}
   horizontalAlignItems&#x3D;{&quot;center&quot;}
   spacing&#x3D;{54}
   padding&#x3D;{{
     horizontal: 61,
     vertical: 47,
   }}
 &gt;
   &lt;AutoLayout
     name&#x3D;{&quot;QuoteContent&quot;}
     direction&#x3D;{&quot;vertical&quot;}
     verticalAlignItems&#x3D;{&quot;end&quot;}
     horizontalAlignItems&#x3D;{&quot;start&quot;}
     spacing&#x3D;{10}
     padding&#x3D;{{
       horizontal: 0,
       vertical: 0,
     }}
   &gt;&lt;/AutoLayout&gt;
 &lt;/AutoLayout&gt;;
 
 
 
 We just made a lot of progress! Let’s save and jump back to Figma to see how our widget looks like. Remember how Figma reloads widgets automatically upon new changes?
 
 
 
 
 
 
 
 But it’s not quite there yet. We must also add a background color to the root component:
 
 
 
 &lt;AutoLayout name&#x3D;{&quot;Quote&quot;} fill&#x3D;{&quot;#ffffff&quot;}&gt;
 
 
 
 Again, take a look at your Figma board and notice how changes can be reflected almost immediately back into the widget.
 
 
 
 
 
 
 
 Let’s move along this guide and style the &lt;Text&gt; components.
 
 
 
 
 
 
 
 After taking a look at the Widgets API documentation, it’s again clear that property names are almost identical to their counterparts in the Figma app, as can be seen in the infographic above. We’ll also be using values from the last section where we inspected Chris’ website.
 
 
 
 
 
 
 
 &lt;Text name&#x3D;{&#x27;QuoteText&#x27;}
   fontFamily&#x3D;{&#x27;Lora&#x27;}
   fontSize&#x3D;{36}
   width&#x3D;{700}
   fill&#x3D;{&#x27;#545454&#x27;}
   fontWeight&#x3D;{&#x27;normal&#x27;}
 &gt;{quote}&lt;/Text&gt;
 
 &lt;Text name&#x3D;{&#x27;QuoteAuthor&#x27;}
   fontFamily&#x3D;{&#x27;Raleway&#x27;}
   fontSize&#x3D;{26}
   width&#x3D;{700}
   fill&#x3D;{&#x27;#16B6DF&#x27;}
   fontWeight&#x3D;{&#x27;bold&#x27;}
   textCase&#x3D;{&#x27;upper&#x27;}
 &gt;— {author}&lt;/Text&gt;
 
 
 Adding state to the widget
 
 
 Oour widget currently displays the same quote, but we want to pull from the entire pool of quotes at random. We must add state to our widget, which all React developers know is a variable whose change triggers the re-rendering of our component.
 
 
 
 With Figma, state is created with the useSyncedState hook; it’s pretty much React’s useState, but it requires programmers to specify a unique key. This requirement stems from the fact that Figma must sync our widget’s state across all clients that may be viewing the same design board, but through different computers.
 
 
 
 const { useSyncedState } &#x3D; widget;
 
 function QuotesWidget() {
   const [quote, setQuote] &#x3D; useSyncedState(&quot;quote-text&quot;, &quot;&quot;);
   const [author, setAuthor] &#x3D; useSyncedState(&quot;quote-author&quot;, &quot;&quot;);
 }
 
 
 
 That’s all the change that we need for now. In the next section, we’ll figure out how to fetch data from the Internet. Spoiler Alert: it’s not as simple as it seems.
 
 
 Fetching data from the network
 
 
 Recall when Figma gave us the choice to start with an iFrame-enabled widget. Although we didn’t go with that option, we must still implement some of its features. Let me explain why we can’t simply call fetch() within our widget code.
 
 
 
 When you use a widget, you are running JavaScript code on your own computer that’s written by someone else. While all widgets are thoroughly reviewed by the Figma staff, it’s still a huge security hole as we all know how much damage can be created by even one line of JavaScript.
 
 
 
 As a result, Figma cannot simply eval() any widget code written by anonymous programmers. Long story short, the team decided that the best solution was running third-party code in a closely-guarded sandbox environment. And as you might have guessed, browser APIs are unavailable in such an environment.
 
 
 
 But don’t fret, Figma’s solution to this second problem is &lt;iframe&gt;s. Any HTML code that we write in a file, preferably called ui.html, will have access to all browser APIs. You might be wondering how we can trigger this code from the widget, but we’ll look into that later. Right now, let’s jump back into code:
 
 
 
 // manifest.json
 {
   &quot;ui&quot;: &quot;ui.html&quot;
 }
 
 
 
 &lt;!-- ui.html --&gt;
 &lt;script&gt;
 window.onmessage &#x3D; async (event) &#x3D;&gt; {
   if (event.data.pluginMessage.type &#x3D;&#x3D;&#x3D; &#x27;networkRequest&#x27;) {
     // TODO: fetch data from the server
 
     window.parent.postMessage({
       pluginMessage: {
         // TODO: return fetched data
       }
     }, &#x27;*&#x27;)
   }
 }
 &lt;/script&gt;
 
 
 
 That’s the general template for widget-to-iframe communication. Let’s use it to fetch data from the server:
 
 
 
 &lt;!-- ui.html --&gt;
 &lt;script&gt;
 window.onmessage &#x3D; async (event) &#x3D;&gt; {
   if (event.data.pluginMessage.type &#x3D;&#x3D;&#x3D; &#x27;networkRequest&#x27;) {
     // Get random number from 0 to 100
     const randomPage &#x3D; Math.round(Math.random() * 100)
 
     // Get a random quote from the Design Quotes API
     const res &#x3D; await fetch(&#x60;https://quotesondesign.com/wp-json/wp/v2/posts/?orderby&#x3D;rand&amp;per_page&#x3D;1&amp;page&#x3D;${randomPage}&amp;_fields&#x3D;title,yoast_head_json&#x60;)
     const data &#x3D; await res.json()
 
     // Extract author name and quote content from response
     const authorName &#x3D; data[0].title.rendered
     const quoteContent &#x3D; data[0].yoast_head_json.og_description
 
     window.parent.postMessage({
       pluginMessage: {
         authorName,
         quoteContent
       }
     }, &#x27;*&#x27;)
   }
 }
 &lt;/script&gt;
 
 
 
 We’re leaving out error-handling to keep this simple and to-the-point. Let’s jump back into the widget code and see how we access functions defined in the &lt;iframe&gt;:
 
 
 
 function fetchData() {
   return new Promise&lt;void&gt;(resolve &#x3D;&gt; {
     figma.showUI(__html__, {visible: false})
     figma.ui.postMessage({type: &#x27;networkRequest&#x27;})
 
     figma.ui.onmessage &#x3D; async ({authorName, quoteContent}) &#x3D;&gt; {
       setAuthor(authorName)
       setQuote(quoteContent)
 
       resolve()
     }
   })
 }
 
 
 
 As you can see, we’re first telling Figma to expose access to our hidden &lt;iframe&gt; and to trigger an event with the name &quot;networkRequest&quot;. We’re handling this event in the ui.html file by checking event.data.pluginMessage.type &#x3D;&#x3D;&#x3D; &#x27;networkRequest&#x27;, and then posting data back to the widget.
 
 
 
 But nothing is happening yet… We still haven’t called the fetchData() function. If we call it directly in the component function, the following error occurs in the console:
 
 
 
 Cannot use showUI during widget rendering.
 
 
 
 Figma is telling us not to call showUI directly in the function body… So, where should we put it? The answer to that is one new hook and one new function: useEffect and waitForTask. You might already have familiarity with useEffect if you’re a React developer, but we’re gonna use it here to fetch data from the server when the widget component mounts.
 
 
 
 const { useEffect, waitForTask } &#x3D; widget;
 
 function QuotesWidget() {
   useEffect(() &#x3D;&gt; {
     waitForTask(fetchData());
   });
 }
 
 
 
 But this will result in yet another “error” where our widget will keep re-rendering with a new quote, forever. This happens because useEffect, by definition, triggers again whenever the widget’s state changes, nay when we call fetchData. And while there’s a technique to only call useEffect once in React, it does not work on Figma’s implementation. From Figma’s docs:
 
 
 
 Because of How Widgets Run, useEffect should handle being called multiple times with the same state.
 
 
 
 Thankfully, there’s a simple workaround that we can take advantage of and call useEffect only once when the component first mounts, and it’s by checking whether or not the state’s values are still empty:
 
 
 
 function QuotesWidget() {
   useEffect(() &#x3D;&gt; {
     if (!author.length &amp; !quote.length) {
       waitForTask(fetchData());
     }
   });
 }
 
 
 
 You might run into a scary “memory access out of bounds” error. It’s quite common to see in plugin and widget development. Just restart Figma and it won’t be there anymore.
 
 
 
 You might have noticed that sometimes, the quote text contains weird characters.
 
 
 
 
 
 
 
 These are Unicode characters and we must properly format them in code:
 
 
 
 &lt;!-- ui.html --&gt;
 &lt;script&gt;
 window.onmessage &#x3D; async (event) &#x3D;&gt; {
   // ...
   const quoteContent &#x3D; decodeEntities(data[0].yoast_head_json.og_description);
 };
 
 // &lt;https://stackoverflow.com/a/9609450&gt;
 var decodeEntities &#x3D; (function () {
   // this prevents any overhead from creating the object each time
   var element &#x3D; document.createElement(&quot;div&quot;);
 
   function decodeHTMLEntities(str) {
     if (str &amp;&amp; typeof str &#x3D;&#x3D;&#x3D; &quot;string&quot;) {
       // strip script/html tags
       str &#x3D; str.replace(/&lt;script[^&gt;]*&gt;([\\\\S\\\\s]*?)&lt;\\\\/script&gt;/gim, &quot;&quot;);
       str &#x3D; str.replace(/&lt;\\\\/?\\\\w(?:[^&quot;&#x27;&gt;]|&quot;[^&quot;]*&quot;|&#x27;[^&#x27;]*&#x27;)*&gt;/gim, &quot;&quot;);
       element.innerHTML &#x3D; str;
       str &#x3D; element.textContent;
       element.textContent &#x3D; &quot;&quot;;
     }
 
     return str;
   }
 
   return decodeHTMLEntities;
 })();
 &lt;/script&gt;
 
 
 
 And voilà, our widget fetched a brand new design quote every single time it’s added to the design board.
 
 
 
 
 
 
 
 
 Adding a property menu to our widget
 
 
 While our widget fetches a fresh quote upon instantiation, it would be much more practical if we could do this process again but without deleting it. This section will be short as the solution is quite remarkable. With property menus, we can add interactivity to our widget with a single call to the usePropertyMenu hook.
 
 
 
 Credit: Figma Docs.
 
 
 
 const { usePropertyMenu } &#x3D; widget;
 
 function QuotesWidget() {
   usePropertyMenu(
     [
       {
         itemType: &quot;action&quot;,
         propertyName: &quot;generate&quot;,
 	tooltip: &quot;Generate&quot;,
         icon: &#x60;&lt;svg width&#x3D;&quot;22&quot; height&#x3D;&quot;15&quot; viewBox&#x3D;&quot;0 0 22 15&quot; fill&#x3D;&quot;none&quot; xmlns&#x3D;&quot;&lt;http://www.w3.org/2000/svg&gt;&quot;&gt;
           &lt;!-- Shortened for brevity --&gt;
         &lt;/svg&gt;&#x60;,
       },
     ],
     () &#x3D;&gt; fetchData()
   );
 }
 
 
 
 With one simple hook we’re able to create a button that appears near our widget when it’s selected. That was the last piece that we needed to add in order to complete this project.
 
 
 
 
 
 
 
 
 Publishing our widget to the public
 
 
 There’s not much use in building a widget if, well, no one uses it. And while Figma grants organizations with the option to launch private widgets for internal use, it’s much more common to release these little programs to the world.
 
 
 
 Figma has a delicate widget review process that may take up 5 to 10 business days. And while the design quotes widget we built together is already in the widget library, I will still demonstrate how it got there. Please don’t attempt to re-publish this widget again as that will only result in removal. But if you gave it some significant alterations, go ahead and share your own widget with the community!
 
 
 
 Get started by clicking the widgets menu (Shift+I) and switching to the Development tab to view our widget. Click on the three-dots menu and press Publish.
 
 
 
 
 
 
 
 Figma will prompt you to enter some details about your widget, such as a title, description, and some tags. We’ll also need a 128×128 icon image and a 1920×960 banner image.
 
 
 
 
 
 
 
 After importing all these assets, we still need a screenshot of our widget. Close the publishing modal (don’t worry, you won’t lose your data) and right-click on the widget to reveal an interesting context menu. Find the Copy/Paste ascategory and select Copy as PNG.
 
 
 
 
 
 
 
 
 
 With that done, let’s go back to the publishing modal and paste the widget’s screenshot:
 
 
 
 
 
 
 
 Scroll down and finally publish your modal. Celebrate! 🎉
 
 
 
 
 
 
 
 
 
 
 
 
 
 Figma will reach out to you in a couple of days about the status of your modal’s review. In the case of a rejection, you’ll be given the opportunity to make changes and submit again.
 
 
 Conclusion
 
 
 We just built a Figma widget from scratch! There are many things not covered here, such as click events, input forms, and much more. You can dig into the full source code for the widget in this GitHub repo.
 
 
 
 To those who aspire to take their Figma skills to greater levels, I suggest exploring the Widgets community and using what catches your eye as inspiration. Keep building more widgets, keep sharpening your React skills, and before you even realize it, you’ll be teaching me how to do all this.
 
 
 Further resources
 
 
 I had to refer to lots of documentation while I was making this widget. I thought I’d share what I found to help the most.
 
 
 Build more widgets:
 
 
 Best practices for building widgetsOfficial Figma widget examples, with code
 
 
 Learn widgets in greater depth:
 
 
 All widget hooksAll widget componentsHow widgets run behind the scenes
 
 
 Widgets vs. plugins
 
 
 Widgets vs PluginsIntroduction to Figma PluginsHow plugins run behind the scenes
 
 Building Interactive Figma Widgets originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How I Made a Pure CSS Puzzle Game</title>
         <link href="https://css-tricks.com/how-i-made-a-pure-css-puzzle-game/"/>
       <updated>2022-09-09T13:21:29.000Z</updated>
       <content type="text">I recently discovered the joy of creating CSS-only games. It’s always fascinating how HTML and CSS are capable of handling the logic of an entire online game, so I had to try it! Such games usually rely on the ol’ Checkbox Hack where we combine the checked/unchecked state of a HTML input with the :checked pseudo-class in CSS. We can do a lot of magic with that one combination!
 
 
 
 In fact, I challenged myself to build an entire game without Checkbox. I wasn’t sure if it would be possible, but it definitely is, and I’m going to show you how.
 
 
 
 
 
 
 
 In addition to the puzzle game we will study in this article, I have made a collection of pure CSS games, most of them without the Checkbox Hack. (They are also available on CodePen.)
 
 
 Want to play before we start?
 
 
 I personally prefer playing the game in full screen mode, but you can play it below or open it up over here.
 
 
 
 CodePen Embed Fallback
 
 
 
 Cool right? I know, it’s not the Best Puzzle Game You Ever Saw™ but it’s also not bad at all for something that only uses CSS and a few lines of HTML. You can easily adjust the size of the grid, change the number of cells to control the difficulty level, and use whatever image you want!
 
 
 
 We’re going to remake that demo together, then put a little extra sparkle in it at the end for some kicks.
 
 
 The drag and drop functionality
 
 
 While the structure of the puzzle is fairly straightforward with CSS Grid, the ability to drag and drop puzzle pieces is a bit trickier. I had to relying on a combination of transitions, hover effects, and sibling selectors to get it done.
 
 
 
 CodePen Embed Fallback
 
 
 
 If you hover over the empty box in that demo, the image moves inside of it and stays there even if you move the cursor out of the box. The trick is to add a big transition duration and delay — so big that the image takes lots of time to return to its initial position.
 
 
 
 img {
   transform: translate(200%);
   transition: 999s 999s; /* very slow move on mouseout */
 }
 .box:hover img {
   transform: translate(0);
   transition: 0s; /* instant move on hover */
 }
 
 
 
 Specifying only the transition-delay is enough, but using big values on both the delay and the duration decreases the chance that a player ever sees the image move back. If you wait for 999s + 999s — which is approximately 30 minutes — then you will see the image move. But you won’t, right? I mean, no one’s going to take that long between turns unless they walk away from the game. So, I consider this a good trick for switching between two states.
 
 
 
 Did you notice that hovering the image also triggers the changes? That’s because the image is part of the box element, which is not good for us. We can fix this by adding pointer-events: none to the image but we won’t be able to drag it later.
 
 
 
 That means we have to introduce another element inside the .box:
 
 
 
 CodePen Embed Fallback
 
 
 
 That extra div (we’re using a class of .a) will take the same area as the image (thanks to CSS Grid and grid-area: 1 / 1) and will be the element that triggers the hover effect. And that is where the sibling selector comes into play:
 
 
 
 .a {
   grid-area: 1 / 1;
 }
 img {
   grid-area: 1 / 1;
   transform: translate(200%);
   transition: 999s 999s;
 }
 .a:hover + img {
   transform: translate(0);
   transition: 0s;
 }
 
 
 
 Hovering on the .a element moves the image, and since it is taking up all space inside the box, it’s like we are hovering over the box instead! Hovering the image is no longer a problem!
 
 
 
 Let’s drag and drop our image inside the box and see the result:
 
 
 
 
 
 
 
 
 
 Did you see that? You first grab the image and move it to the box, nothing fancy. But once you release the image you trigger the hover effect that moves the image, and then we simulate a drag and drop feature. If you release the mouse outside the box, nothing happens.
 
 
 
 Hmm, your simulation isn’t perfect because we can also hover the box and get the same effect.
 
 
 
 True and we will rectify this. We need to disable the hover effect and allow it only if we release the image inside the box. We will play with the dimension of our .a element to make that happen.
 
 
 
 CodePen Embed Fallback
 
 
 
 Now, hovering the box does nothing. But if you start dragging the image, the .a element appears, and once released inside the box, we can trigger the hover effect and move the image.
 
 
 
 Let’s dissect the code:
 
 
 
 .a {
   width: 0%;
   transition: 0s .2s; /* add a small delay to make sure we catch the hover effect */
 }
 .box:active .a { /* on :active increase the width */
   width: 100%;
   transition: 0s; /* instant change */
 }
 img {
   transform: translate(200%);
   transition: 999s 999s;
 }
 .a:hover + img {
   transform: translate(0);
   transition: 0s;
 }
 
 
 
 Clicking on the image fires the :active pseudo-class that makes the .a element full-width (it is initially equal to 0). The active state will remain active until we release the image. If we release the image inside the box, the .a element goes back to width: 0, but we will trigger the hover effect before it happens and the image will fall inside the box! If you release it outside the box, nothing happens.
 
 
 
 There is a little quirk: clicking the empty box also moves the image and breaks our feature. Currently, :active is linked to the .box element, so clicking on it or any of its children will activate it; and by doing this, we end up showing the .a element and triggering the hover effect.
 
 
 
 We can fix that by playing with pointer-events. It allows us to disable any interaction with the .box while maintaining the interactions with the child elements.
 
 
 
 .box {
   pointer-events: none;
 }
 .box * {
   pointer-events: initial;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Now our drag and drop feature is perfect. Unless you can find how to hack it, the only way to move the image is to drag it and drop it inside the box.
 
 
 Building the puzzle grid
 
 
 Putting the puzzle together is going to feel easy peasy compared to what we just did for the drag and drop feature. We are going to rely on CSS grid and background tricks to create the puzzle.
 
 
 
 Here’s our grid, written in Pug for convenience:
 
 
 
 - let n &#x3D; 4; /* number of columns/rows */
 - let image &#x3D; &quot;https://picsum.photos/id/1015/800/800&quot;;
 
 g(style&#x3D;&#x60;--i:url(${image})&#x60;)
   - for(let i &#x3D; 0; i &lt; n*n; i++)
     z
       a
       b(draggable&#x3D;&quot;true&quot;) 
 
 
 
 The code may look strange but it compiles into plain HTML:
 
 
 
 &lt;g style&#x3D;&quot;--i: url(https://picsum.photos/id/1015/800/800)&quot;&gt;
  &lt;z&gt;
    &lt;a&gt;&lt;/a&gt;
    &lt;b draggable&#x3D;&quot;true&quot;&gt;&lt;/b&gt;
  &lt;/z&gt;
  &lt;z&gt;
    &lt;a&gt;&lt;/a&gt;
    &lt;b draggable&#x3D;&quot;true&quot;&gt;&lt;/b&gt;
  &lt;/z&gt;
  &lt;z&gt;
    &lt;a&gt;&lt;/a&gt;
    &lt;b draggable&#x3D;&quot;true&quot;&gt;&lt;/b&gt;
  &lt;/z&gt;
   &lt;!-- etc. --&gt;
 &lt;/g&gt;
 
 
 
 I bet you’re wondering what’s up with those tags. None of these elements have any special meaning — I just find that the code is much easier to write using &lt;z&gt; than a bunch of &lt;div class&#x3D;&quot;z&quot;&gt; or whatever.
 
 
 
 This is how I’ve mapped them out:
 
 
 
 &lt;g&gt; is our grid container that contains N*N &lt;z&gt; elements.&lt;z&gt; represents our grid items. It plays the role of the .box element we saw in the previous section.&lt;a&gt; triggers the hover effect.&lt;b&gt; represents a portion of our image. We apply the draggable attribute on it because it cannot be dragged by default.
 
 
 
 Alright, let’s register our grid container on &lt;g&gt;. This is in Sass instead of CSS:
 
 
 
 $n : 4; /* number of columns/rows */
 
 g {
   --s: 300px; /* size of the puzzle */
 
   display: grid;
   max-width: var(--s);
   border: 1px solid;
   margin: auto;
   grid-template-columns: repeat($n, 1fr);
 }
 
 
 
 We’re actually going to make our grid children — the &lt;z&gt; elements — grids as well and have both &lt;a&gt; and &lt;b&gt; within the same grid area:
 
 
 
 z {
   aspect-ratio: 1;
   display: grid;
   outline: 1px dashed;
 }
 a {
   grid-area: 1/1;
 }
 b {
   grid-area: 1/1;
 }
 
 
 
 As you can see, nothing fancy — we created a grid with a specific size. The rest of the CSS we need is for the drag and drop feature, which requires us to randomly place the pieces around the board. I’m going to turn to Sass for this, again for the convenience of being able to loop through and style all the puzzle pieces with a function:
 
 
 
 b {
   background: var(--i) 0/var(--s) var(--s);
 }
 
 @for $i from 1 to ($n * $n + 1) {
   $r: (random(180));
   $x: (($i - 1)%$n);
   $y: floor(($i - 0.001) / $n);
   z:nth-of-type(#{$i}) b{
     background-position: ($x / ($n - 1)) * 100% ($y / ($n - 1)) * 100%;
     transform: 
       translate((($n - 1) / 2 - $x) * 100%, (($n - 1)/2 - $y) * 100%) 
       rotate($r * 1deg) 
       translate((random(100)*1% + ($n - 1) * 100%)) 
       rotate((random(20) - 10 - $r) * 1deg)
    }
 }
 
 
 
 You may have noticed that I’m using the Sass random() function. That’s how we get the randomized positions for the puzzle pieces. Remember that we will disable that position when hovering over the &lt;a&gt; element after dragging and dropping its corresponding &lt;b&gt; element inside the grid cell.
 
 
 
 z a:hover ~ b {
   transform: translate(0);
   transition: 0s;
 }
 
 
 
 In that same loop, I am also defining the background configuration for each piece of the puzzle. All of them will logically share the same image as the background, and its size should be equal to the size of the whole grid (defined with the --s variable). Using the same background-image and some math, we update the background-position to show only a piece of the image.
 
 
 
 That’s it! Our CSS-only puzzle game is technically done!
 
 
 
 CodePen Embed Fallback
 
 
 
 But we can always do better, right? I showed you how to make a grid of puzzle piece shapes in another article. Let’s take that same idea and apply it here, shall we?
 
 
 Puzzle piece shapes
 
 
 Here’s our new puzzle game. Same functionality but with more realistic shapes!
 
 
 
 CodePen Embed Fallback
 
 
 
 This is an illustration of the shapes on the grid:
 
 
 
 
 
 
 
 If you look closely you’ll notice that we have nine different puzzle-piece shapes: the four corners, the four edges, and one for everything else.
 
 
 
 The grid of puzzle pieces I made in the other article I referred to is a little more straightforward:
 
 
 
 CodePen Embed Fallback
 
 
 
 We can use the same technique that combines CSS masks and gradients to create the different shapes. In case you are unfamiliar with mask and gradients, I highly recommend checking that simplified case to better understand the technique before moving to the next part.
 
 
 
 First, we need to use specific selectors to target each group of elements that shares the same shape. We have nine groups, so we will use eight selectors, plus a default selector that selects all of them.
 
 
 
 z  /* 0 */
 
 z:first-child  /* 1 */
 
 z:nth-child(-n + 4):not(:first-child) /* 2 */
 
 z:nth-child(5) /* 3 */
 
 z:nth-child(5n + 1):not(:first-child):not(:nth-last-child(5)) /* 4 */
 
 z:nth-last-child(5)  /* 5 */
 
 z:nth-child(5n):not(:nth-child(5)):not(:last-child) /* 6 */
 
 z:last-child /* 7 */
 
 z:nth-last-child(-n + 4):not(:last-child) /* 8 */
 
 
 
 Here is a figure that shows how that maps to our grid:
 
 
 
 
 
 
 
 Now let’s tackle the shapes. Let’s focus on learning just one or two of the shapes because they all use the same technique — and that way, you have some homework to keep learning!
 
 
 
 For the puzzle pieces in the center of the grid, 0:
 
 
 
 mask: 
   radial-gradient(var(--r) at calc(50% - var(--r) / 2) 0, #0000 98%, #000) var(--r)  
     0 / 100% var(--r) no-repeat,
   radial-gradient(var(--r) at calc(100% - var(--r)) calc(50% - var(--r) / 2), #0000 98%, #000) 
     var(--r) 50% / 100% calc(100% - 2 * var(--r)) no-repeat,
   radial-gradient(var(--r) at var(--r) calc(50% - var(--r) / 2), #000 98%, #0000),
   radial-gradient(var(--r) at calc(50% + var(--r) / 2) calc(100% - var(--r)), #000 98%, #0000);
 
 
 
 The code may look complex, but let’s focus on one gradient at a time to see what’s happening:
 
 
 
 CodePen Embed Fallback
 
 
 
 Two gradients create two circles (marked green and purple in the demo), and two other gradients create the slots that other pieces connect to (the one marked blue fills up most of the shape while the one marked red fills the top portion). A CSS variable, --r, sets the radius of the circular shapes.
 
 
 
 
 
 
 
 The shape of the puzzle pieces in the center (marked 0 in the illustration) is the hardest to make as it uses four gradients and has four curvatures. All the others pieces juggle fewer gradients.
 
 
 
 For example, the puzzle pieces along the top edge of the puzzle (marked 2 in the illustration) uses three gradients instead of four:
 
 
 
 mask: 
   radial-gradient(var(--r) at calc(100% - var(--r)) calc(50% + var(--r) / 2), #0000 98%, #000) var(--r) calc(-1 * var(--r)) no-repeat,
   radial-gradient(var(--r) at var(--r) calc(50% - var(--r) / 2), #000 98%, #0000),
   radial-gradient(var(--r) at calc(50% + var(--r) / 2) calc(100% - var(--r)), #000 98%, #0000);
 
 
 
 CodePen Embed Fallback
 
 
 
 We removed the first (top) gradient and adjusted the values of the second gradient so that it covers the space left behind. You won’t notice a big difference in the code if you compare the two examples. It should be noted that we can find different background configurations to create the same shape. If you start playing with gradients you will for sure come up with something different than what I did. You may even write something that’s more concise — if so, share it in the comments!
 
 
 
 In addition to creating the shapes, you will also find that I am increasing the width and/or the height of the elements like below:
 
 
 
 height: calc(100% + var(--r));
 width: calc(100% + var(--r));
 
 
 
 The pieces of the puzzle need to overflow their grid cell to connect.
 
 
 
 
 
 
 Final demo
 
 
 Here is the full demo again. If you compare it with the first version you will see the same code structure to create the grid and the drag-and-drop feature, plus the code to create the shapes.
 
 
 
 CodePen Embed Fallback
 
 
 
 
 Play it online
 
 
 
 Possible enhancements
 
 
 The article ends here but we could keep enhancing our puzzle with even more features! How about a a timer? Or maybe some sort of congratulations when the player finishes the puzzle?
 
 
 
 I may consider all these features in a future version, so keep an eye on my GitHub repo.
 
 
 Wrapping up
 
 
 And CSS isn’t a programming language, they say. Ha!
 
 
 
 I’m not trying to spark some #HotDrama by that. I say it because we did some really tricky logic stuff and covered a lot of CSS properties and techniques along the way. We played with CSS Grid, transitions, masking, gradients, selectors, and background properties. Not to mention the few Sass tricks we used to make our code easy to adjust.
 
 
 
 The goal was not to build the game, but to explore CSS and discover new properties and tricks that you can use in other projects. Creating an online game in CSS is a challenge that pushes you to explore CSS features in great detail and learn how to use them. Plus, it’s just a lot of fun that we get something to play with when all is said and done.
 
 
 
 Whether CSS is a programming language or not, doesn’t change the fact that we always learn by building and creating innovative stuff.
 
 How I Made a Pure CSS Puzzle Game originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>What’s New With Forms in 2022?</title>
         <link href="https://css-tricks.com/whats-new-with-forms-in-2022/"/>
       <updated>2022-09-08T13:12:51.000Z</updated>
       <content type="text">Browsers are constantly adding new HTML, JavaScript and CSS features. Here are some useful additions to working with forms that you might have missed…
 
 
 
 
 
 
 requestSubmit()
 
 
 Safari 16 will be the final browser to add support for requestSubmit.
 
 
 
 Before we look at how .requestSubmit() works, let’s remind ourselves how programmatically submitting a form with JavaScript works when using the .submit() method. Submitting a form with submit() does not trigger a submit event. So in the following code, the form is submitted, preventDefault() has no effect, and nothing is logged to the console:
 
 
 
 const form &#x3D; document.forms[0];
 form.addEventListener(&#x27;submit&#x27;, function(event) {
   // code to submit the form goes here
   event.preventDefault();
   console.log(&#x27;form submitted!&#x27;);
 });
 
 document.querySelector(&#x27;.btn&#x27;).addEventListener(&#x27;click&#x27;, function() {
   form.submit();
 })
 
 
 
 .submit() will also ignore any HTML form validation. Given the following markup, the form will be submitted when the input is empty even though the input has a required attribute:
 
 
 
 &lt;form&gt;   
   &lt;label for&#x3D;&quot;name&quot;&gt;Name&lt;/label&gt;
   &lt;input required name&#x3D;&quot;name&quot; id&#x3D;&quot;name&quot; type&#x3D;&quot;text&quot;&gt;
 &lt;/form&gt;
 
 
 
 .requestSubmit() is an alternative way to submit a form using JavaScript, but in contrast to .submit(), HTML form validation will prevent the form from being submitted. If all the data entered in the form passes validation, the submit event will be fired, meaning “form submitted!” would be logged to the console in the following example:
 
 
 
 form.addEventListener(&#x27;submit&#x27;, function(event) {
   event.preventDefault();
   console.log(&#x27;form submitted!&#x27;);
 });
 
 document.querySelector(&#x27;.btn&#x27;).addEventListener(&#x27;click&#x27;, function() {
   form.requestSubmit();
 })
 
 
 
 You could already achieve this by programmatically clicking the form’s submit button, but requestSubmit is perhaps a more elegant solution.
 
 
 submitter property of submit event
 
 
 The SubmitEvent.submitter property gained full cross-browser support with the release of Safari 15.4. This read-only property specifies the &lt;button&gt; or &lt;input type&#x3D;&quot;submit&quot;&gt; element that caused a form to be submitted.
 
 
 
 &lt;form&gt;
   &lt;button name&#x3D;&quot;foo&quot; value&#x3D;&quot;bar&quot; type&#x3D;&quot;submit&quot;&gt;Bar&lt;/button&gt;
   &lt;button name&#x3D;&quot;foo&quot; value&#x3D;&quot;baz&quot; type&#x3D;&quot;submit&quot;&gt;Baz&lt;/button&gt;
 &lt;/form&gt;
 
 
 
 When you have multiple submit buttons or inputs, each with a different value, only the value of the button or input that was clicked on to submit the form will be sent to the server, rather than both values. That’s nothing new. What is new is that the event listener for the submit event now has access to the event.submitter property. You can use this to add a class to the button or input that triggered the form submission, for example, or to obtain its value or any other of its HTML attributes.
 
 
 
 document.forms[0].addEventListener(&#x27;submit&#x27;, function(event) {
   event.preventDefault();
   console.log(event.submitter.value);
   console.log(event.submitter.formaction);
   event.submitter.classList.add(&#x27;spinner-animation&#x27;);
 })
 
 
 formdata event
 
 
 This isn’t particularly new, but only achieved cross-browser support with the release of Safari 15. The main use case for the formdata event is enabling custom elements to take part in form submissions. Outside of web components, though, it can still be useful.
 
 
 
 You add a formdata event listener to the form you want to interact with:
 
 
 
 document.querySelector(&#x27;form&#x27;).addEventListener(&#x27;formdata&#x27;, handleFormdata);
 
 
 
 The event is fired both by a regular HTML form submission and also by an occurrence of new FormData(). event.formData holds all of the data being submitted.
 
 
 
 function handleFormdata(event) {
   for (const entry of event.formData.values()) {
     console.log(entry);
   }
 }
 
 
 
 The callback function for the formdata event listener runs before the data is sent to the server, giving you a chance to add to or modify the data being sent.
 
 
 
 function handleFormdata(event) {
   event.formData.append(&#x27;name&#x27;, &#x27;John&#x27;);
 }
 
 
 
 You could have modified or appended the FormData inside the submit event handler but formdata allows you to separate out the logic. It’s also an alternative to using hidden inputs in the markup of your form in cases where you are submitting the form “the old fashioned way” — i.e. relying on the built-in functionality of HTML to submit the form rather than doing it with fetch.
 
 
 showPicker() for input elements
 
 
 showPicker() has been supported since Chrome 99, Firefox 101, and in the upcoming Safari 16. For an input element whose type attribute is either Date, Month, Week, Time, datetime-local, color, or file, showPicker() provides a programmatic way to display the selection UI. For color and file inputs, it’s always been possible to programmatically show the picker by calling .click on the input:
 
 
 
 document.querySelector(&#x27;input[type&#x3D;&quot;color&quot;]&#x27;).click();
 
 
 
 That approach doesn’t work on date inputs, which is why this new API was added. .showPicker() will also work with color and file inputs but there’s no real advantage to using it over .click().
 
 
 
 
 
 
 Inert attribute
 
 
 It’s always been possible to disable multiple inputs at once by wrapping them in a HTML fieldset and disabling the fieldset:
 
 
 
 CodePen Embed Fallback
 
 
 
 Inert is a new HTML attribute. It isn’t only for forms, but forms are certainly a key use-case. Unlike the disabled attribute, inert can be applied to a form element itself. Everything within the form will be non-focusable and non-clickable. When it comes to assistive technologies, inert is similar to setting aria-hidden&#x3D;&quot;true&quot;. Unlike the disabled attribute, inert does not apply any styling by default, but it’s easy to add your own:
 
 
 
 form[inert] {
   opacity: .2;
 }
 
 
 
 CodePen Embed Fallback
 
 
 There’s more to come…
 
 
 The big one is styling &lt;select&gt; elements, something developers have wanted for decades. It looks set to finally become a reality sometime soon with the introduction of selectmenu.
 
 
 
 But that’s it for now! The recent updates bring full browser support to form features we’ve been waiting for, making them prime for production use.
 
 What’s New With Forms in 2022? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Overlapping Bar Charts</title>
         <link href="https://css-tricks.com/overlapping-bar-charts/"/>
       <updated>2022-09-07T13:46:58.000Z</updated>
       <content type="text">As the name suggests, overlapping charts visualize two different sets of data in a single diagram. The idea is that the overlapping bars allow us to compare data, say, year-over-year. They are also useful for things like tracking progress for a goal where one bar represents the goal and the other shows the current amount.
 
 
 
 But they’re beautiful too!
 
 
 
 
 
 
 
 Your mind is probably like mine and is already starting to figure out how you’d go off and code that. Here’s how I tackled it.
 
 
 
 CodePen Embed Fallback
 
 
 The HTML
 
 
 We’re going to start with markup because, well, that’s how we know what needs styling.
 
 
 
 &lt;div class&#x3D;&quot;container&quot;&gt;
   &lt;div class&#x3D;&quot;chart&quot;&gt;
     &lt;dl class&#x3D;&quot;numbers&quot;&gt;
       &lt;dd&gt;&lt;span&gt;100%&lt;/span&gt;&lt;/dd&gt;
       &lt;!-- all the way to 0% --&gt;
     &lt;/dl&gt;
     &lt;dl class&#x3D;&quot;bars&quot;&gt;
       &lt;div&gt;
           &lt;dt&gt;2018&lt;/dt&gt;
           &lt;dd&gt;
             &lt;div class&#x3D;&quot;bar&quot; data-percentage&#x3D;&quot;50&quot;&gt;&lt;/div&gt;
             &lt;div class&#x3D;&quot;bar overlap&quot; data-percentage&#x3D;&quot;53&quot;&gt;&lt;/div&gt;
           &lt;/dd&gt;
         &lt;/div&gt;
       &lt;div&gt;
       &lt;!-- more bars --&gt;
     &lt;/dl&gt;
   &lt;/div&gt;
 &lt;/div&gt;
 
 
 
 We will be using description lists (&lt;dl&gt;) as it is a much more semantic approach as compared to standard ordered and unordered lists. Another reason is that we are including a label within each bar. Normal lists do not have a tag within them to add a title or description unlike definition lists. In simple terms, it just makes more sense and is more readable too.
 
 
 
 The first description list, .numbers, is the y-axis. The .bars is where the data is visualized and I’ve made a definition list to build the x-axis as well. Each list item contains a .bar and the label as a description term (dt).
 
 
 
 And what’s up with the data attribute? The data-percentage is being used to specify the height of the bar, which ultimately represents its value on the y-axis. We could manually set it in CSS for each bar, but that is repetitive and a lot of extra code that can be replaced with a few lines of CSS.
 
 
 The basic chart styles
 
 
 We’re working with a lot of two-dimensional directions, so flexbox is going to be our friend for getting everything lined up. We can make the .chart element a flexible container that positions the y-axis labels and the chart beside one another in the row direction.
 
 
 
 .chart {
   display: flex;
 }
 
 
 
 We don’t even need to specify the direction since flexbox defaults to row. Let’s do that and then add flexbox to the list of labels along the y-axis while we’re at it since we know those will run in the column direction.
 
 
 
 .numbers {
   display: flex;
   flex-direction: column;
   list-style: none;
   margin: 0 15px 0 0;
   padding: 0;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Believe it or not, we can use flexbox again for the bars since, they too, are running in a row direction.
 
 
 
 .bars {
   display: flex;
   flex: auto; /* fill up the rest of the &#x60;.chart&#x60; space */
   gap: 60px;
 }
 
 
 
 I’ve set this up so that the .bars automatically take up whatever space is leftover by the y-axis .numbers.
 
 
 
 You probably noticed it in the HTML, but “bar” is actually two bars where one overlaps the other. I wrapped those in a generic &lt;div&gt; that we can use as yet another flexible container that holds the definition term (&lt;dt&gt;) we’re using as a label and the description details (&lt;dd&gt;) that holds both bar values:
 
 
 
 .bars &gt; div {
   align-items: center;
   display: flex;
   flex-direction: column;
   flex: 1;
   position: relative;
 }
 
 
 
 Each bar is going to be the same width, hence flex: 1. We’re relatively positioning the element while we’re at it because we’re about to absolutely position each bar and we want to make sure they stay in their containers.
 
 
 
 CodePen Embed Fallback
 
 
 
 Each bar has a percentage height that corresponds to the values along the vertical y-axis. You may also remember that we gave each bar a data-percentage attribute — we’re going to sprinkle in a little JavaScript that sets the height of each bar using those values.
 
 
 
 var bars &#x3D; document.querySelectorAll(&quot;dd .bar&quot;);
 bars.forEach((bar) &#x3D;&gt; {
   var height &#x3D; bar.getAttribute(&quot;data-percentage&quot;);
   bar.style.height &#x3D; height + &quot;%&quot;;
 });
 
 
 
 That’s our basic chart!
 
 
 
 CodePen Embed Fallback
 
 
 
 We want to get this to where we can see the bars overlapping one another. That’s next!
 
 
 Overlapping bars
 
 
 The trick to get one bar to overlap another is funny because we’re often trying to prevent things from overlapping visually in CSS. But in this case, we actually want that to happen.
 
 
 
 The bars are already overlapping; it’s just tough to tell. Notice in the HTML that the second .bar in each set has an additional .overlap class. Let’s use that to differentiate the bars. You’re totally free to choose your own styling for this. I’m adding a little padding to the .overlap bars so that they are wider than the other bars. Then I’m tweaking the stacking order using z-index so that the .overlap bars sit below the other bars.
 
 
 
 CodePen Embed Fallback
 
 
 Let’s add a legend
 
 
 Legend. Such a great word, isn’t it? Packed with all kinds of meaning. In this case, it’s a more than a nice touch because, visually, we’re jamming two bars in spaces that are typically reserved for one bar. A legend provides context that explains what each bar represents.
 
 
 
 &lt;figure class&#x3D;&quot;legend&quot;&gt;
   &lt;div class&#x3D;&quot;type1&quot;&gt;Estimate&lt;/div&gt;
   &lt;div class&#x3D;&quot;type2&quot;&gt;Actual&lt;/div&gt;
 &lt;/figure&gt;
 
 
 
 Using a &lt;figure&gt; feels correct to me. They’re often used to wrap images, but the spec says they’re used “to annotate illustrations, diagrams, photos, code listings, etc.” and we’re working with a diagram. We could probably use an unordered list to hold the items, but I went with an unsemantic &lt;div&gt;. If anyone has an opinion on the best way to mark this up, I’m all ears in the comments!
 
 
 
 Once again, styling is totally up to you:
 
 
 
 CodePen Embed Fallback
 
 
 Accessibility considerations
 
 
 We’ve spent a bunch of our effort on making decisions for the markup and styling of our overlapping bar chart. It’s great so far, but we’re definitely not done because there’s more we can do to make this a more accessible experience. Not everyone is a sighted web surfer, so there’s some additional work to do to convey the content in those contexts.
 
 
 
 Specifically, we need to:
 
 
 
 check that our colors have plenty of contrast between them,allow keyboard users to tab to each overlapping bar, andmake sure screen readers announce the content.
 
 
 Color contrasts
 
 
 We need enough contrast between:
 
 
 
 the overlapping barsthe bars and the chart backgroundthe label text and background
 
 
 
 I did a little homework in advance on the colors I used in the examples we’ve look at so far, making sure that there is enough contrast between the foregrounds and backgrounds to achieve WCAG AA compliance.
 
 
 
 Here’s what I’m using:
 
 
 
 Overlapping bars: (#25DEAA and #696969: 3.16:1 ratio)Bars and chart background (#696969 and #111: 3.43:1 ratio)Y-axis label text and background (#fff and #333: 12.63: 1 ratio)
 
 
 Tabbing between bars
 
 
 To get this where keyboard users can select each individual bar with the Tab key, we can reach for the HTML tabindex attribute. We can use the following JavaScript inside the for-each function to add this property to each bar (both of them). We will set the tab index to 0:
 
 
 
 bar.setAttribute(&quot;tabindex&quot;, 0);
 
 
 
 We can also add some CSS to improve the outline when the bar is selected while we’re at it:
 
 
 
 .bar:focus {
   outline: 1.5px solid #f1f1f1;
 }
 
 
 Announcing content on screen readers
 
 
 Another important aspect of accessibility is making sure screen readers can announce the bars and their percentages.
 
 
 
 We’re working with two different charts in one: a chart that shows “Estimated” values and another that shows “Actual” values. It’d be great if the user knew which bar was being announced, so let’s label them with the aria-label attribute:
 
 
 
 &lt;div class&#x3D;&quot;bar&quot; data-percentage&#x3D;&quot;50&quot; aria-label&#x3D;&quot;Estimate&quot;&gt;50%&lt;/div&gt;
 
 
 
 Notice that we have the bar’s value directly in the HTML as well. That will get announced, but we still want to visually hide it. We could use transparent text for that, but another way is to use the classic .visually-hidden trick by wrapping the value in span:
 
 
 
 &lt;div class&#x3D;&quot;bar&quot; data-percentage&#x3D;&quot;50&quot; aria-label&#x3D;&quot;Estimate&quot;&gt;
   &lt;span class&#x3D;&quot;visually-hidden&quot;&gt;50%&lt;/span&gt;
 &lt;/div&gt;
 
 
 
 .visually-hidden {
   clip: rect(0 0 0 0); 
   clip-path: inset(50%);
   height: 1px;
   overflow: hidden;
   position: absolute;
   white-space: nowrap; 
   width: 1px;
 }
 
 
 
 While we’re talking about announcing content, we can probably prevent the y-axis labels from being read. It’s not like the user is missing information, as the actual percentages for each bar are already available and announced. We can use the aria-hidden attribute for that:
 
 
 
 &lt;dl class&#x3D;&quot;numbers&quot; aria-hidden&#x3D;&quot;true&quot;&gt;
   &lt;dd&gt;&lt;span&gt;100%&lt;/span&gt;&lt;/dd&gt;
   &lt;dd&gt;&lt;span&gt;80%&lt;/span&gt;&lt;/dd&gt;
   &lt;dd&gt;&lt;span&gt;60%&lt;/span&gt;&lt;/dd&gt;
   &lt;dd&gt;&lt;span&gt;40%&lt;/span&gt;&lt;/dd&gt;
   &lt;dd&gt;&lt;span&gt;20%&lt;/span&gt;&lt;/dd&gt;
   &lt;dd&gt;&lt;span&gt;0%&lt;/span&gt;&lt;/dd&gt;
 &lt;/dl&gt;
 
 
 
 I also think it’s OK for screen readers to ignore the legend since it’s a visual aid:
 
 
 
 &lt;figure class&#x3D;&quot;legend&quot; aria-hidden&#x3D;&quot;true&quot;&gt;
   &lt;div class&#x3D;&quot;type1&quot;&gt;Estimate&lt;/div&gt;
   &lt;div class&#x3D;&quot;type2&quot;&gt;Actual&lt;/div&gt;
 &lt;/figure&gt;
 
 
 The final demo
 
 
 CodePen Embed Fallback
 
 
 That’s a wrap!
 
 
 There we go, a chart with overlapping bars! It’s a nice way to compare data and I hope you can find a use for it on some project.
 
 
 
 Are there other ways we could have approached this? Of course! Everything we covered here is merely walking you through my thought process. I imagine some of you would have taken a different approach — if that’s you, please share! It’d be great to see other CSS layout techniques and perspectives on nailing the accessibility.
 
 Overlapping Bar Charts originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Hacking CSS Animation State and Playback Time</title>
         <link href="https://css-tricks.com/hacking-css-animation-state-and-playback-time/"/>
       <updated>2022-09-06T18:00:28.000Z</updated>
       <content type="text">CSS-only Wolfenstein is a little project that I made a few weeks ago. It was an experiment with CSS 3D transformations and animations.
 
 
 
 Inspired by the FPS demo and another Wolfenstein CodePen, I decided to build my own version. It is loosely based on Episode 1 – Floor 9 of the original Wolfenstein 3D game.
 
 
 
 CodePen Embed Fallback
 
 
 
 Editor: This game intentionally requires some quick reaction to avoid a Game Over screen.
 
 
 
 Here is a playthrough video:
 
 
 
 
 
 
 
 
 
 
 
 
 
 In a nutshell, my project is nothing but a carefully scripted long CSS animation. Plus a few instances of the checkbox hack.
 
 
 
 :checked ~ div { animation-name: spin; }
 
 
 
 The environment consists of 3D grid faces and the animations are mostly plain 3D translations and rotations. Nothing really fancy.
 
 
 
 However, two problems were particularly tricky to solve:
 
 
 
 Play the “weapon firing” animation whenever the player clicks on an enemy.When the fast-moving boss got the last hit, enter a dramatic slow motion.
 
 
 
 At a technical-level, this meant:
 
 
 
 Replay an animation when the next checkbox is checked.Slow down an animation, when a checkbox is checked.
 
 
 
 In fact, neither was properly solved in my project! I either ended up using workarounds or just gave up.
 
 
 
 On the other hand, after some digging, eventually I found the key to both problems: altering the properties of running CSS animations. In this article, we will explore further on this topic:
 
 
 
 Lots of interactive examples.Dissections: how does each example work (or not work)?Behind-the-scene: how do browsers handle animation states?
 
 
 
 Let me “toss my bricks”.
 
 
 Problem 1: Replaying Animation
 
 The first example: “just another checkbox”
 
 
 My first intuition was “just add another checkbox”, which does not work:
 
 
 
 CodePen Embed Fallback
 
 
 
 Each checkbox works individually, but not both together. If one checkbox is already checked, the other no longer works.
 
 
 
 Here’s how it works (or “does not work”):
 
 
 
 The animation-name of &lt;div&gt; is none by default.The user clicks on one checkbox, animation-name becomes spin, and the animation starts from the beginning.After a while, the user clicks on the other checkbox. A new CSS rule takes effect, but animation-name is still spin, which means no animation is added nor removed. The animation simply continues playing as if nothing happened.
 
 
 The second example: “cloning the animation”
 
 
 One working approach is to clone the animation:
 
 
 
 #spin1:checked ~ div { animation-name: spin1; }
 #spin2:checked ~ div { animation-name: spin2; }
 
 
 
 CodePen Embed Fallback
 
 
 
 Here’s how it works:
 
 
 
 animation-name is none initially.The user clicks on “Spin!”, animation-name becomes spin1. The animation spin1 is started from the beginning because it was just added.The user clicks on “Spin again!”, animation-name becomes spin2. The animation spin2 is started from the beginning because it was just added.
 
 
 
 Note that in Step #3, spin1 is removed because of the order of the CSS rules. It won’t work if “Spin again!” is checked first.
 
 
 The third example: “appending the same animation”
 
 
 Another working approach is to “append the same animation”:
 
 
 
 #spin1:checked ~ div { animation-name: spin; }
 #spin2:checked ~ div { animation-name: spin, spin; }
 
 
 
 CodePen Embed Fallback
 
 
 
 This is similar to the previous example. You can actually understand the behavior this way:
 
 
 
 #spin1:checked ~ div { animation-name: spin1; }
 #spin2:checked ~ div { animation-name: spin2, spin1; }
 
 
 
 Note that when “Spin again!” is checked, the old running animation becomes the second animation in the new list, which could be unintuitive. A direct consequence is: the trick won’t work if animation-fill-mode is forwards. Here’s a demo:
 
 
 
 CodePen Embed Fallback
 
 
 
 If you wonder why this is the case, here are some clues:
 
 
 
 animation-fill-mode is none by default, which means “The animation has no effect at all if not playing”.animation-fill-mode: forwards; means “After the animation finishes playing, it must stay at the last keyframe forever”.spin1’s decision always override spin2’s because spin1 appears later in the list.Suppose the user clicks on “Spin!”, waits for a full spin, then clicks on “Spin again!”. At this moment. spin1 is already finished, and spin2 just starts. 
 
 
 Discussion
 
 
 Rule of thumb: you cannot “restart” an existing CSS animation. Instead, you want to add and play a new animation. This may be confirmed by the W3C spec:
 
 
 
 Once an animation has started it continues until it ends or the animation-name is removed.
 
 
 
 Now comparing the last two examples, I think in practice, “cloning animations” should often work better, especially when CSS preprocessor is available.
 
 
 Problem 2: Slow Motion
 
 
 One might think that slowing an animation is just a matter of setting a longer animation-duration:
 
 
 
 div { animation-duration: 0.5s; }
 #slowmo:checked ~ div { animation-duration: 1.5s; }
 
 
 
 Indeed, this works:
 
 
 
 CodePen Embed Fallback
 
 
 
 … or does it?
 
 
 
 With a few tweaks, it should be easier to see the issue.
 
 
 
 CodePen Embed Fallback
 
 
 
 Yes, the animation is slowed down. And no, it does not look good. The dog (almost) always “jumps” when you toggle the checkbox. Furthermore, the dog seems to jump to a random position rather than the initial one. How come?
 
 
 
 It would be easier to understand it if we introduced two “shadow elements”:
 
 
 
 CodePen Embed Fallback
 
 
 
 Both shadow elements are running the same animations with different animation-duration. And they are not affected by the checkbox.
 
 
 
 When you toggle the checkbox, the element just immediately switches between the states of two shadow elements.
 
 
 
 Quoting the W3C spec:
 
 
 
 Changes to the values of animation properties while the animation is running apply as if the animation had those values from when it began.
 
 
 
 This follows the stateless design, which allows browsers to easily determine the animated value. The actual calculation is described here and here.
 
 
 Another Attempt
 
 
 One idea is to pause the current animation, then add a slower animation that takes over from there:
 
 
 
 div {
   animation-name: spin1;
   animation-duration: 2s;
 }
 
 #slowmo:checked ~ div {
   animation-name: spin1, spin2;
   animation-duration: 2s, 5s;
   animation-play-state: paused, running;
 }
 
 
 
 So it works:
 
 
 
 CodePen Embed Fallback
 
 
 
 … or does it?
 
 
 
 It does slow down when you click on “Slowmo!”. But if you wait for a full circle, you will see a “jump”. Actually, it always jumps to the position when “Slowmo!” is clicked on.
 
 
 
 The reason is we don’t have a from keyframe defined – and we shouldn’t. When the user clicks on “Slowmo!”, spin1 is paused at some position, and spin2 starts at exactly the same position. We simply cannot predict that position beforehand … or can we?
 
 
 A Working Solution
 
 
 We can! By using a custom property, we can capture the angle in the first animation, then pass it to the second animation:
 
 
 
 div {
   transform: rotate(var(--angle1));
   animation-name: spin1;
   animation-duration: 2s;
 }
 
 #slowmo:checked ~ div {
   transform: rotate(var(--angle2));
   animation-name: spin1, spin2;
   animation-duration: 2s, 5s;
   animation-play-state: paused, running;
 }
 
 @keyframes spin1 {
   to {
     --angle1: 360deg;
   }
 }
 
 @keyframes spin2 {
   from {
     --angle2: var(--angle1);
   }
   to {
     --angle2: calc(var(--angle1) + 360deg);
   }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Note: @property is used in this example, which is not supported by all browsers.
 
 
 The “Perfect” Solution
 
 
 There is a caveat to the previous solution: “exiting slowmo” does not work well.
 
 
 
 Here is a better solution:
 
 
 
 CodePen Embed Fallback
 
 
 
 In this version, slow motion can be entered or exited seamlessly. No experimental feature is used either. So is it the perfect solution? Yes and no.
 
 
 
 This solution works like “shifting” “gears”:
 
 
 
 Gears: there are two &lt;div&gt;s. One is the parent of the other. Both have the spin animation but with different animation-duration. The final state of the element is the accumulation of both animations.Shifting: At the beginning, only one &lt;div&gt; has its animation running. The other is paused. When the checkbox is toggled, both animations swap their states.
 
 
 
 While I really like the result, there is one problem: it is a nice exploit of the spin animation, which does not work for other types of animations in general.
 
 
 A Practical Solution (with JS)
 
 
 For general animations, it is possible to achieve the slow motion function with a bit of JavaScript:
 
 
 
 CodePen Embed Fallback
 
 
 
 A quick explanation:
 
 
 
 A custom property is used to track the animation progress.The animation is “restarted” when the checkbox is toggled.The JS code computes the correct animation-delay to ensure a seamless transition. I recommend this article if you are not familiar with negative values of animation-delay.
 
 
 
 You can view this solution as a hybrid of “restarting animation” and the “gear-shifting” approach.
 
 
 
 Here it is important to track the animation progress correctly. Workarounds are possible if @property is not available. As an example, this version uses z-index to track the progress:
 
 
 
 CodePen Embed Fallback
 
 
 
 Side-note: originally, I also tried to create a CSS-only version but did not succeed. While not 100% sure, I think it is because animation-delay is not animatable.
 
 
 
 Here is a version with minimal JavaScript. Only “entering slowmo” works.
 
 
 
 CodePen Embed Fallback
 
 
 
 Please let me know if you manage to create a working CSS-only version!
 
 
 Slow-mo Any Animation (with JS)
 
 
 Lastly, I’d like to share a solution that works for (almost) any animation, even with multiple complicated @keyframes:
 
 
 
 CodePen Embed Fallback
 
 
 
 Basically, you need to add an animation progress tracker, then carefully compute animation-delay for the new animation. However, sometimes it could be tricky (but possible) to get the correct values.
 
 
 
 For example:
 
 
 
 animation-timing-function is not linear.animation-direction is not normal.multiple values in animation-name with different animation-duration’s and animation-delay’s.
 
 
 
 This method is also described here for the Web Animations API.
 
 
 Acknowledgments
 
 
 I started down this path after encountering CSS-only projects. Some were delicate artwork, and some were complex contraptions. My favorites are those involving 3D objects, for example, this bouncing ball and this packing cube.
 
 
 
 In the beginning, I had no clue how these were made. Later I read and learned a lot from this nice tutorial by Ana Tudor.
 
 
 
 As it turned out, building and animating 3D objects with CSS is not much different from doing it with Blender, just with a bit different flavor.
 
 
 Conclusion
 
 
 In this article we examined the behavior of CSS animations when an animate-* property is altered. Especially we worked out solutions for “replaying an animation” and “animation slow-mo”.
 
 
 
 I hope you find this article interesting. Please let me know your thoughts!
 
 Hacking CSS Animation State and Playback Time originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Flutter For Front-End Web Developers</title>
         <link href="https://css-tricks.com/flutter-for-front-end-web-developers/"/>
       <updated>2022-09-05T20:10:24.000Z</updated>
       <content type="text">I started as a front-end web developer and then became a Flutter developer. I think there were some concepts that helped me adopt Flutter easier. There were also some new concepts that were different.
 
 
 
 In this article, I want to share my experience and inspire anyone feeling paralyzed with choosing one ecosystem over the other by showing how concepts transfer over and any new concepts are learnable.
 
 
 
 
 
 
 Concepts That Transferred Over
 
 
 This section shows places where front-end web development and Flutter resemble. It explains skills that you already have that are an advantage to you if you start Flutter.
 
 
 1. Implementing User Interfaces (UIs)
 
 
 To implement a given UI in front-end web, you compose HTML elements and style them with CSS. To implement UIs in Flutter, you compose widgets and style them with properties.
 
 
 
 Like CSS, the Color class in Dart works with “rgba” and “hex”. Also like CSS, Flutter uses pixels for space and size units.
 
 
 
 In Flutter, we have Dart classes and enums for almost all CSS properties and their values. For example:
 
 
 
 BorderRadiusBoxShadowFontWeightOpacityPadding…
 
 
 
 Flutter also has Column and Row widgets. These are the Flutter equivalent for display: flex in CSS. To configure justify-content and align-items styles, you use MainAxisAlignment and CrossAxisAlignment properties. To adjust the flex-grow style, wrap the affected child(ren) widget(s) of the Column/Row, in an Expanded or Flexible.
 
 
 
 For the advanced UIs, Flutter has the CustomPaint class – it is to Flutter what the Canvas API is to web development. CustomPaint gives you a painter to draw any UI as you wish. You will usually use CustomPaint when you want something that is really complex. Also, CustomPaint is the go-to way when a combination of widgets doesn’t work.
 
 
 2. Developing For Multiple Screen Resolutions
 
 
 Websites run on browsers and mobile apps run on devices. As such, while developing for either platform, you have to keep the platform in mind. Each platform implements the same features (camera, location, notifications, etc.) in different ways.
 
 
 
 As a web developer, you think about your website’s responsiveness. You use media queries to handle what your website looks like in smaller and wider screens.
 
 
 
 Coming over from mobile web development to Flutter, you have the MediaQuery helper class. The MediaQuery class gives you the current device orientation (landscape or portrait). It also gives you the current viewport size, the devicePixelRatio, among other device info. Together, these values give you insights about the mobile device’s configuration. You can use them to change what your mobile app looks like at various screen sizes.
 
 
 3. Working with Debuggers, Editors, and Command Line Tools
 
 
 Desktop browsers have developer tools. These tools include an inspector, a console, a network monitor, etc. These tools improve the web development process. Flutter too has its own DevTools. It has its widget inspector, debugger, network monitor, among other features.
 
 
 
 IDE support is also similar. Visual Studio Code is one of the most popular IDE for web development. There are many web-related extensions for VS Code. Flutter too supports VS Code. So while transitioning, you don’t need to change IDE. There are Dart and Flutter extensions for VS Code. Flutter also works well with Android Studio. Both Android Studio and VS Code support Flutter DevTools. These IDE integrations make Flutter tooling complete.
 
 
 
 Most front-end JavaScript frameworks come with their command-line interface (CLI). For example: Angular CLI, Create React App, Vue CLI, etc. Flutter also comes with an exclusive CLI. The Flutter CLI permits you to build, create, and develop Angular projects. It has commands for analyzing and testing Flutter projects.
 
 
 Concepts That Were New
 
 
 This section talks about Flutter-specific concepts that are easier or non-existent in web development. It explains ideas you should keep in mind as you enter Flutter.
 
 
 How To Handle Scrolling
 
 
 When developing for the web, default scrolling behavior is handled by web browsers. Yet, you are free to customize scrolling with CSS (using overflow).
 
 
 
 This is not the case in Flutter. Widget groups don’t scroll by default. When you sense that widget groups might overflow, you have to proactively configure scrolling.
 
 
 
 In Flutter, you configure scrolling by using peculiar widgets that permit scrolling. For example: ListView, SingleChildScrollView, CustomScrollView, etc. These scrollable widgets give you great control over scrolling. With CustomScrollView, you can configure expert and complex scroll mechanisms within the application.
 
 
 
 On Flutter’s side, using ScrollViews is inevitable. Android and iOS have ScrollView and UIScrollView to handle scrolling. Flutter needs a way to unify the rendering and developer experience by using its ScrollViews, too.
 
 
 
 It may help to stop thinking about the flow of document structure and instead consider the application as an open canvas for a device’s native painting mechanisms.
 
 
 2. Setting Up Your Development Environment
 
 
 To create the simplest website, you can create a file with a .html extension and open it in a browser. Flutter is not that simple. To use Flutter, you need to have installed the Flutter SDK and have configured Flutter for a test device. So if you want to code Flutter for Android, you need to set up the Android SDK. You will also need to configure at least one Android device (an Android Emulator or a physical device).
 
 
 
 This is the same case for Apple devices (iOS and macOS). After installing Flutter on a Mac, you still need to set up Xcode before going further. You will also need at least an iOS simulator or an iPhone to test Flutter on iOS. Flutter for desktop is also a considerable setup. On Windows, you need to set up the Windows Development SDK with Visual Studio (not VS Code). On Linux, you will install more packages.
 
 
 
 Without extra setup, Flutter works on browsers. As a result, you could overlook the extra setup for target devices. In most cases, you would use Flutter for mobile app development. Hence, you would want to setup at least Android or iOS. Flutter comes with the flutter doctor command. This command reports the status of your development setup. That way, you know what to work on, in the setup, if need be.
 
 
 
 This doesn’t mean that development in Flutter is slow. Flutter comes with a powerful engine. The flutter run command permits hot-reloading to the test device while coding. But then you will need to press R to actually hot-reload. This is not an issue. Flutter’s VS Code extension permits auto-hot-reload on file changes.
 
 
 3. Packaging and Deployment
 
 
 Deploying websites is cheaper and easier compared to deploying mobile applications. When you deploy websites, you access them through domain names. These domain names are usually renewed annually. However, they are optional.
 
 
 
 Today, many platforms offer free hosting.
 
 
 
 For example: DigitalOcean gives you a free subdomain on .ondigitalocean.com.
 
 
 
 You can use these domains if you are building a documentation website. You can also use them when you are not worried about branding.
 
 
 
 In Flutter’s world with mobile applications, you usually in most cases deploy your app to two places.
 
 
 
 App Store (for iOS devices)Google Play (for Android devices)
 
 
 
 You have to register a developer account on each of these platforms. Registering a developer account requires a fee or subscription and identity verification.
 
 
 
 For App Store, you need to enroll for the Apple Developer program. You need to maintain an annual subscription of $99. For Google Play, you need to make a one-time $25 payment for the account.
 
 
 
 These stores review every app reviewed before it goes live.
 
 
 
 Also bear in mind that users don’t easily consume app updates. Users must explicitly update installed applications. This is in contrast to the web where everyone just gets to see the latest deployed version of a website.
 
 
 
 Managing deployed applications is relatively more demanding than managing deployed websites. However, this shouldn’t scare you. After all, there are millions of apps deployed on either stores so you can add yours, too.
 
 
 Additional Thoughts On Flutter
 
 
 Flutter is a cross-platform tool to build desktop, mobile, or web applications. Flutter apps are pixel-perfect. Flutter paints the same UI on each app irrespective of the target platform. This is because each Flutter app contains the Flutter engine. This engine renders the Flutter UI code. Flutter provides a canvas for each device and allows you to paint as you want. The engine communicates with the target platform to handle events and interactions.
 
 
 
 Flutter is efficient. It has high-performance levels. This is because it is built with Dart and it leverages Dart’s features.
 
 
 
 With these many benefits, Flutter is a good choice for many applications. Cross-platform apps save money and time during production and maintenance. However, Flutter (and cross-platform solutions) might not be an optimum choice in some cases.
 
 
 
 Don’t use Flutter if you want users to use platform developer tools with your application. Platform developer tools here mean device-specific tools like Android developer options. It also includes browser developer tools.
 
 
 
 Don’t use Flutter for web if you expect browser extensions to interact with the website.
 
 
 
 Also, don’t use Flutter for content-heavy websites.
 
 
 Conclusion
 
 
 This was a review of skills that carry over from front-end web development to working with Flutter. We also discussed app development concepts that you have to learn as a web developer.
 
 
 
 Flutter is simpler for web developers because they both involve implementing UIs. If you start Flutter, you will find out that it gives you a good developer experience. Give Flutter a try! Use it to build mobile apps and of course, showcase what you build.
 
 
 
 Cheers!
 
 Flutter For Front-End Web Developers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Behind the CSScenes, September 2022</title>
         <link href="https://css-tricks.com/behind-the-csscenes-sept2022/"/>
       <updated>2022-09-01T20:06:56.000Z</updated>
       <content type="text">Those of you who have been reading CSS-Tricks for a while may remember that we used to publish a little thing we called CSS-Tricks Chronicles. Our friend Chris Coyier would write up a reflection from the past couple of months or so, and it was a great way to get a pulse on what’s happening around CSS-Tricks, the site, and what the team is doing.
 
 
 
 We like that and want to keep it going. It’s a new era, though! So what we’re going to do is welcome you back to what we’re now calling Behind the CSScenes. You’re going to meet some new and familiar faces in these updates, starting with Haley Mills, who is kicking off the very first issue.
 
 
 
 
 
 
 How’s the transition going?
 
 
 [Haley Mills:] Before we dive in, let me start by introducing myself! My name is Haley, and I’m the manager of Content Integration here at DigitalOcean. I’ve been at DigitalOcean for 5 years and previously worked on our editorial team, helping authors publish all sorts of topics through our Write For DOnations program. 
 
 
 
 Many folks here at DigitalOcean (including myself) are avid readers of CSS-Tricks, and we still have to pinch ourselves for how lucky we are to be entrusted with this community. We recognize that CSS-Tricks is a critical free resource for devs across the world, and my goal is to keep it that way. 
 
 
 
 Since the acquisition, we have published 95 pieces of new content and look forward to growing that number.In the month of August, we performed maintenance on 6 existing pieces of content.
 
 
 
 That said, change is to be expected when passing a torch.
 
 
 
 I think we all know that no one can replace Chris’ voice — it’s a big reason why CSS-Tricks is, well, CSS-Tricks. His ability to have you laughing while learning something new is a skill that few can compete with. I know many of you miss his writing because you told us so in a survey (which we’ll get to in a bit), but it also opens up a huge opportunity for us all to take the torch and continue doing what CSS-Tricks does best:
 
 
 
 Find creative solutions to problems and share them with the world. Chris brought people together this way on CSS-Tricks — and you can give back, too.
 
 
 
 Your blossoming idea could turn out to be what the Flexbox Guide is for me and so many other people, so I humbly encourage you to reach out in our Guest Writing Form and talk to us about your topic ideas. We have two awesome editors, Geoff and Brad, to help you shape and bring your ideas to life to share with the CSS-Tricks community. In addition to paying you for your contribution, we will now also make a matching donation to a tech-focused charity of your choice.
 
 
 
 Next up, we have Product Manager Karen Degi with some survey result highlights.
 
 
 The results are in…
 
 
 [Karen Degi:] In June, we shared a survey to collect feedback to help shape the future of CSS-Tricks. We received almost 900 responses, including some great written responses that helped us understand what CSS-Tricks means to the larger community. 
 
 
 
 Many of you also volunteered to talk to us directly, which has us thinking about the best way to gather those thoughts. If you’re one of those folks, know that we haven’t forgotten about you and still want to hear from you. We just want to make sure we approach this in the most effective way!
 
 
 
 The survey confirmed some things we already suspected and brought new things to our attention. The top few things that grabbed our attention are:
 
 
 
 Engaging, high-quality content is at the heart of CSS-Tricks. We’re working to make sure that we continue investing in in-depth guides on front-end topics, as well as providing short articles about quick tricks and tutorials with embedded demos.You love RSS! As we continue investing in CSS-Tricks and bringing new functionality, we’ll make sure we keep an eye on how our changes affect the RSS feed.You come to CSS-Tricks to learn, to be entertained, and to do your jobs better. You do not come to CSS-Tricks because you’re excited about being sold…well, anything, really. Although we think DigitalOcean is pretty great, and we’ll probably continue to talk about ourselves where it makes sense, we understand that we need to do so in a way that is honest, trustworthy, and connected to your needs as a front-end enthusiast.
 
 
 
 Next up is Logan Liffick, Senior Digital Experience Designer, with redesign updates.
 
 
 A redesign is in the works!
 
 
 [Logan Liffick:] If you’ve worked on the front end — or really anywhere on the web, you’re bound to know CSS-Tricks. It’s where I, and many others, started the journey. So, when I was asked to spearhead a redesign for the site, it was nothing short of an honor. Without a doubt, undertaking a brand update for something so familiar to so many is a challenge of incredible magnitude
 
 
 
 If I were to do justice to this project, I’d need to pay tribute to the original. That mentality became the underlying theme of my work, and any effort to rejuvenate took inspiration from existing patterns and styles from the site.
 
 
 
 
 
 
 
 Upon first glance, you’ll notice the fresh coat of paint. Past that, you’ll recognize the site reads more “editorial” than before. This was a purposeful decision to accentuate existing type stylings and, more importantly, to pay homage to the essence of CSS-Tricks as an informational resource. 
 
 
 
 Preserving the element of “fun” was also top of mind. Sprinkled throughout the site are various snippets from the actual CSS “tricks” shared on this site — for example, there’s going to be a little Easter egg tucked inside a sticky footer using Preethi’s slide-out effect that’s my personal favorite, a fantastic suggestion from Geoff himself. Gradients are now a core color-way in the system, and border-radii have been rounded out. 
 
 
 
 We wanted to give ourselves permission and space to explore an open-ended and malleable system far into the future, which lines up nicely with the overall mission and goal of CSS-Tricks: to explore what’s possible with CSS. This is just the beginning, there’s so much more to see, do, and learn with CSS-Tricks living in our (digital) ocean.Next is Geoff with author highlights!
 
 
 New authors! 
 
 
 [Geoff:] We’ve added a few new faces to our growing list of guest authors who have contributed to CSS-Tricks:
 
 
 
 Nick SypterasJohn Siciliano Sunkanmi FafoworaMarcel MoreauNicholas C. ZakasAisha BukarSaleh MubasharVictor AdedokunHolger SindbaekEludaBlessing Ene AnyebeObumuneme NwabudeOnuorah Bonaventure ChukwudiDaniel SchwarzPreethi Selvam
 
 
 
 You may have also seen our editor Bradley Kouchi’s name pop up a couple of times, and you can expect to continue seeing him on a semi-regular basis.
 
 
 
 That’s 16 new authors! You can be one, too, by filling out our guest writing form.
 
 
 
 On a related note, I’m pleased as punch that we still get regular contributions from a large band of familiar faces from before the DigitalOcean acquisition. Just look at all the fine folks who’ve continued to share their great ideas with us:
 
 
 
 Temani AfifMariana BeldiGanesh DahalAdam RackisPreehi SamathanamMojtaba SeyediJhey TompkinsŠime VidasOllie Williams
 
 
 
 Big shake-ups like the one we’re going through today can be scary. Seeing these familiar names in article bylines has helped me a ton as far as continuity and consistency go. CSS-Tricks still seems very CSS-Tricks-y to me, and that’s a big deal.
 
 
 Until next time…
 
 
 We hope you’ve enjoyed this little peek behind the CSScenes! We’ll do it again… and again and again. As you can tell, there’s a lot of activity happening around here, which means we’ll have lots to share in the next edition.
 
 
 
 Oh, and if you’re one of the many who’ve told us just how much you miss the newsletter, it’s still here! We’re sending it just once a month while we get back in the swing of things, and you may very well need to re-subscribe to get it (we had to do a lot of scrubbing after the keys to the site were handed over).
 
 
 
 Thanks for reading!
 
 Behind the CSScenes, September 2022 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>A Brief Introduction to JAWS, NVDA, and VoiceOver</title>
         <link href="https://css-tricks.com/comparing-jaws-nvda-and-voiceover/"/>
       <updated>2022-09-01T17:47:16.000Z</updated>
       <content type="text">A screen reader is an important accessibility tool for people with no or limited vision. People who are blind or those with low vision can use a screen reader to navigate the computer. Screen readers will read contents on the screen and explain to the user what is on the page. Screen readers allow people to use the computer for daily tasks.
 
 
 
 There are many screen reader software available for people through their operating system or through open source projects.
 
 
 
 A 2021 research by WebAim found that from 1568 responders, more than 53.7 percent of people surveyed used JAWS on Windows, more than 30.7 percent of people used NVDA on Windows and little over 6.5 percent of people used VoiceOver on macOS.
 
 
 
 JAWS and NVDA for Windows and VoiceOver for macOS are the most popular screen readers people use.
 
 
 
 
 
 
 
 First, I should clarify that this article will be written from my point of view. To give background, I have been a front-end developer at a non-profit for people with learning differences for over three years. I, along with my colleagues, seek to make our projects more accessible every day. I am not visually impaired and do not use these tools on a regular basis. For work, I have a Mac machine and test accessibility using VoiceOver.
 
 
 
 Here is my planned testing methodology:
 
 
 
 Navigate the page by heading, until “Accessibility APIs” section.Reason for this step: A 2016 survey by Heydon Pickering found that most people who use screen readers navigate new pages by headingsIn the “Accessibility APIs” section, read the content and the unordered list inside.TAB to hear focusable items in the unordered list.Jump to the Search field.TAB to hear a few items in the navigation section
 
 
 
 To find similarities and differences between them, I decided to test a set of steps with each screen reader on a Wikipedia page about screen readers. I will browse the web with Chrome for my tests. Testing all screen readers on the same page and browser will reduce the amount of variables and keep the tests consistent.
 
 
 JAWS
 
 
 JAWS is an acronym for Job Access With Speech and is the most widely used screen reader in the world. It is only available on Windows. Depending on the plan and features, JAWS can be purchased anywhere from $90 yearly license all the way to $1605 for perpetual license.
 
 
 
 JAWS has predefined keyboard commands to navigate the web. Full list of keyboard commands can be found on their website.
 
 
 Demonstration
 
 
 
 
 JAWS Demo
 
 
 
 
 In the beginning of the demo, I am clicking on H key on my keyboard to go to the next heading. JAWS is moving down the page, reading me the headings along with their level.
 
 
 
 Later in the video, I am clicking on number 2 and number 3 on my keyboard to have JAWS read Heading Levels 2s then later Heading Levels 3s. This is a great feature because we can move down the page and sections by heading level and get a better sense of the page layout.
 
 
 
 When I reach the “Accessible APIs” section, I press the DOWN ARROW key until the third item in the unordered list.
 
 
 
 Later in the demo, I am clicking on the TAB key for JAWS to read to me the next focusable item on the page, which is inside this list. I click TAB until I reach a focusable element in another section.
 
 
 
 Then I press F key to focus on the search field, which JAWS reads to me.
 
 
 
 Then I click on TAB and JAWS focuses on the navigation elements that are on the side of the page.
 
 
 
 Pros &amp; Cons
 
 
 Pros:
 
 
 
 JAWS is more customizable than other screen readers.There are more options to navigate through the page.JAWS is industry standard.Widely used, which means there are lots of user to user support.
 
 
 
 Cons:
 
 
 
 JAWS is more complicated to use than NVDA or VoiceOver.Some commands are not intuitive.There are a lot more commands for the user to learn.More learning curve for users.JAWS is also not available on the Mac, which limits its users.Costs anywhere between $90 – $1605 for the user.JAWS has different key commands for desktop and laptop which may make it harder for users to transfer knowledge and may cause confusion.
 
 
 NVDA
 
 
 NVDA, or NonVisual Digital Access, is available on Windows only. Users need to download the software from NVDA’s website, NVAccess. This software is free to download but does not come already installed on Windows machines. NVDA is the second most popular screen reader in the world according to WebAim’s 2021 survey.
 
 
 
 Like other screen readers, NVDA has defined keyboard commands to navigate the web. NVDA’s full keyboard commands can be found on their website.
 
 
 Demonstration
 
 
 
 
 NVDA Demo
 
 
 
 
 In the demo I am clicking on H key on the keyboard to go to the next heading. First, NVDA reads me Heading Level 1, which is “Screen reader”. Then NVDA goes to read Heading Level 2s and 3s.
 
 
 
 When I reach “References” I begin to click on TAB on my keyboard for NVDA to focus on next focusable items.
 
 
 
 After focusing on a few items on the list, I click ENTER and go to the New York Times page.
 
 
 
 Pros &amp; Cons
 
 
 Pros:
 
 
 
 Overall, I found NVDA was able to provide me with information on the screen.The out-of-the-box keyboard commands were easy to use and easy to learn.NVDA is open source, which means the community can update and fix.NVDA is free, which makes it an affordable option to Windows users.
 
 
 
 Cons:
 
 
 
 NVDA is not available on the Mac, which limits its users.
 
 
 VoiceOver
 
 
 VoiceOver is the screen reader used in Mac. VoiceOver is only available on Mac not available in Windows. VoiceOver is free and is already installed on the computer, which removes barriers because this is part of the computer setup and the user does not have to download or purchase any additional software.
 
 
 
 VoiceOver has defined keyboard commands to navigate the web. VoiceOver’s full keyboard commands can be found on their website.
 
 
 Demonstration
 
 
 
 
 VoiceOver Demo
 
 
 
 
 In the demo, I am on a Wikipedia page and I am clicking on the VoiceOver Command (which is Control+Option) along with Command+H to navigate through the headings. VoiceOver reads the headings in order, starting from Heading Level 1, “Screen Reader”, to Heading Level 2, “Contents”, to Heading Level 3, and so on.
 
 
 
 When I reach the “Accessibility APIs” section, I click on VoiceOver Command plus the RIGHT ARROW, to tell VoiceOver that I want it to read this section. Later I am clicking on the VoiceOver Command plus the RIGHT ARROW on my keyboard, to navigate the section.
 
 
 
 When I get on to the third item on the unordered list, I press TAB on my keyboard to focus on the next focusable element.
 
 
 
 I press TAB a few times, then I press VoiceOver Command plus U, to open the Form Control Menu. In the menu, I press DOWN ARROW until I hear the “Search Wikipedia” option. When I hear it, I click ENTER and the screen reader focuses on the form field. In the form field, I press TAB to navigate to the navigation section.
 
 
 
 Pros &amp; Cons
 
 
 Pros:
 
 
 
 VoiceOver is easy to use and learn.VoiceOver’s commands are intuitive.Free tool that comes installed in every macOS device.
 
 
 
 Cons:
 
 
 
 VoiceOver is also not available on Windows, which limits its users.VoiceOver is not an app and can only be updated when Apple releases macOS update.
 
 
 Key Takeaways
 
 
 A screen reader is an important accessibility tool for people with no or limited vision. Screen readers allow people to use the computer for daily tasks.
 
 
 
 There are many screen reader softwares available. In this article I compared JAWS, NVDA, and VoiceOver.
 
 
 
 Here is a comparison chart overview of the three screen readers:
 
 
 
 JAWSNVDAVoiceOverOperating SystemWindowsWindowsmacOSPrice$90 – $1695FreeFree# of users50%30%6%Ease of Use (subjective)HardEasyEasy
 
 
 
 I found that for basic screen reader testing, most screen readers follow a similar keystroke pattern and knowledge from one screen reader can be used for others.
 
 
 
 All screen readers have their pros and cons. Ultimately, it’s up to user preference and also the operating system they use to determine which screen reader software is best for them.
 
 
 
 Previously: “Small Tweaks That Can Make a Huge Impact on Your Website’s Accessibility” (2018), and “Why, How, and When to Use Semantic HTML and ARIA” (2019), “15 Things to Improve Your Website Accessibility” (2020), “5 Accessibility Quick Wins You Can Implement Today” (2022).
 
 A Brief Introduction to JAWS, NVDA, and VoiceOver originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>iShadeed’s Container Queries Lab</title>
         <link href="https://css-tricks.com/ishadeeds-container-queries-lab/"/>
       <updated>2022-09-01T14:29:27.000Z</updated>
       <content type="text">Ahmad Shadeed got an early jump on container queries and has a growing collection of examples based on everyday patterns.
 
 
 
 
 
 
 
 
 
 
 
 And, if you missed it, his latest post on container queries does a wonderful job covering how they work since landing in Chrome 105 this month (we’ll see them in Safari 16 soon). Some choice highlights and takeaways:
 
 
 
 Containers are defined with the container-type property. Previous demos and proposals had been using contain instead.Container queries are very much like the media queries we’ve been writing all along to target the viewport size. So, rather than something like @media (min-width: 600px) {}, we have @container (min-width: 600px) {}. That should make converting many of those media queries to container queries fairly straightfoward, minus the work of figuring out the new breakpoint values.We can name containers to help distinguish them in our code (e.g. container-name: blockquote).
 
 
 
 Great job, Ahmad! And thanks for sharing!
 To Shared Link — Permalink on CSS-Tricks
 iShadeed’s Container Queries Lab originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Interpolating Numeric CSS Variables</title>
         <link href="https://css-tricks.com/interpolating-numeric-css-variables/"/>
       <updated>2022-08-30T13:17:25.000Z</updated>
       <content type="text">We can make variables in CSS pretty easily:
 
 
 
 :root {
   --scale: 1;
 }
 
 
 
 And we can declare them on any element:
 
 
 
 
 
 
 
 .thing {
   transform: scale(var(--scale));
 }
 
 
 
 Even better for an example like this is applying the variable on a user interaction, say :hover:
 
 
 
 :root {
   --scale: 1;
 }
 
 .thing {
   height: 100px;
   transform: scale(var(--scale));
   width: 100px;
 }
 
 .thing:hover {
   --scale: 3;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 But if we wanted to use that variable in an animation… nada.
 
 
 
 :root {
   --scale: 1;
 }
 
 @keyframes scale {
   from { --scale: 0; }
   to { --scale: 3; }
 }
 
 /* Nope! */
 .thing {
   animation: scale .25s ease-in;
   height: 100px;
   width: 100px;
 }
 
 
 
 That’s because the variable is recognized as a string and what we need is a number that can be interpolated between two numeric values. That’s where we can call on @property to not only register the variable as a custom property, but define its syntax as a number:
 
 
 
 @property --scale {
   syntax: &quot;&lt;number&gt;&quot;;
   initial-value: 1;
   inherits: true;
 }
 
 
 
 Now we get the animation!
 
 
 
 CodePen Embed Fallback
 
 
 
 You’re going to want to check browser support since @property has only landed in Chrome (starting in version 85) as of this writing. And if you’re hoping to sniff it out with @supports, we’re currently out of luck because it doesn’t accept at-rules as values… yet. That will change once at-rule()becomes a real thing.
 
 
 
 CodePen Embed Fallback
 
 Interpolating Numeric CSS Variables originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Using Grid Named Areas to Visualize (and Reference) Your Layout</title>
         <link href="https://css-tricks.com/using-grid-named-areas-to-visualize-and-reference-your-layout/"/>
       <updated>2022-08-26T13:44:49.000Z</updated>
       <content type="text">Whenever we build simple or complex layouts using CSS Grid, we’re usually positioning items with line numbers. Grid layouts contain grid lines that are automatically indexed with positive and negative line numbers (that is unless we explicitly name them). Positioning items with line numbers is a fine way to lay things out, though CSS Grid has numerous ways to accomplish the same with an undersized cognitive encumbrance. One of those ways is something I like to think of as the “ASCII” method.
 
 
 
 
 
 
 The ASCII method in a nutshell
 
 
 The method boils down to using grid-template-areas to position grid items using custom-named areas at the grid container level rather than line numbers.
 
 
 
 When we declare an element as a grid container using display: grid, the grid container, by default, generates a single-column track and rows that sufficiently hold the grid items. The container’s child elements that participate in the grid layout are converted to grid items, irrespective of their display property.
 
 
 
 For instance, let’s create a grid by explicitly defining columns and rows using the grid-template-columns and grid-template-rows properties.
 
 
 
 .grid {
   display: grid;
   grid-template-columns: 1fr 1fr;
   grid-template-rows: repeat(3, 200px);
 }
 
 
 
 This little snippet of CSS creates a 3×2 grid where the grid items take up equal space in the columns, and where the grid contains three rows with a track size of 200px.
 
 
 
 
 
 
 
 We can define the entire layout with named grid areas using the grid-template-areas property. According to the spec, the initial value of grid-template-areas is none.
 
 
 
 grid-template-areas &#x3D; none | &lt;string&gt;+
 
 
 
 &lt;string&gt;+ is listing the group of strings enclosed with a quote. Each string is represented as a cell, and each quoted string is represented as a row. Like this:
 
 
 
 grid-template-areas: &quot;head head&quot; &quot;nav main&quot; &quot;foot foot&quot;;
 
 
 
 The value of grid-template-areas describes the layout as having four grid areas. They are,
 
 
 
 headnavmainfoot
 
 
 
 head and foot span two column tracks and one row track. The remaining nav and main each span one column track and one row track. The value of grid-template-areas is a lot like arranging ASCII characters, and as Chris suggested a while back, we can get a visualization of the overall structure of the layout from the CSS itself which is the most trouble-free way to understand it.
 
 
 
 (Full size GIF)
 
 
 
 OK, so we created our layout with four named grid areas: head, nav, main, foot.
 
 
 
 Now, let’s start to position the grid items against named grid areas instead of line numbers. Specifically, let’s place a header element into the named grid area head and specify the named grid area head in the header element using the grid-area property.
 
 
 
 Named grid areas in a grid layout are called idents. So, what we just did was create a custom ident named head that we can use to place items into certain grid tracks.
 
 
 
 header { grid-area: head; }
 
 
 
 We can other HTML elements using other custom idents:
 
 
 
 nav { grid-area: nav; }
 main { grid-area: main; }
 footer { grid-area: foot; }
 
 
 Writing named area values
 
 
 According to CSS Grid Layout Module Level 1, all strings must be defined under the following tokens:
 
 
 
 Named cell token: This represents the named grid area in the grid. For instance, head is a named cell token.Null cell token: This represents the unnamed grid area in the grid container. For instance, an empty cell in the grid is a null cell token.Trash token: This is a syntax error, such as an invalid declaration. For instance, a disparate number of cells and rows compared to the number of grid items would make a declaration invalid.
 
 
 
 In grid-template-area, every quoted string (the rows) must have the same number of cells and define the complete grid without ignoring any cell.
 
 
 
 
 
 
 
 We can ignore a cell or leave it as an empty cell using the full-stop character (.)
 
 
 
 .grid { 
   display: grid;
   grid-template-areas:
     &quot;head head&quot;
     &quot;nav main&quot;
     &quot;foot .&quot;;
 }
 
 
 
 If that feels visually awkward or imbalanced to you, we can use multiple full-stop characters without any whitespaces separating them:
 
 
 
 .grid {
   display: grid;
   grid-template-areas:
     &quot;head head&quot;
     &quot;nav main&quot;
     &quot;foot ....&quot;;
 }
 
 
 
 A named cell token can span multiple grid cells, But those cells must form a rectangular layout. In other words, we’re unable to create “L” or “T”-shaped layouts, although the spec does hint at support for non-rectangular layouts with disconnected regions in the future.
 
 
 ASCII is better than line-based placement
 
 
 Line-based placement is where we use the grid-column and grid-row properties to position an element on the grid using grid line numbers that are automatically indexed by a number:
 
 
 
 .grid-item {
   grid-column: 1 / 3; /* start at grid column line 1 and span to line 3 */
 }
 
 
 
 But grid item line numbers can change if our layout changes at a breakpoint. In those cases, it’s not like we can rely on the same line numbers we used at a specific breakpoint. This is where it takes extra cognitive encumbrance to understand the code.
 
 
 
 That’s why I think an ASCII-based approach works best. We can redefine the layout for each breakpoint using grid-template-areas within the grid container, which offers a convenient visual for how the layout will look directly in the CSS — it’s like self-documented code!
 
 
 
 .grid {
   grid-template-areas:
     &quot;head head&quot;
     &quot;nav main&quot;
     &quot;foot ....&quot;; /* much easier way to see the grid! */
 }
 
 .grid-item {
   grid-area: foot; /* much easier to place the item! */
 }
 
 
 
 We can actually see a grid’s line numbers and grid areas in DevTools. In Firefox, for example, go to the Layout panel. Then, under the Grid tab, locate the “Grid display settings” and enable the “Display line number” and “Display area names” options.
 
 
 
 
 
 
 
 This ASCII approach using named areas requires a lot less effort to visualize and easily find the placement of elements.
 
 
 
 
 
 
 Let’s look at the “universal” use case
 
 
 Whenever I see a tutorial on named grid areas, the common example is generally some layout pattern containing header, main, sidebar, and footer areas. I like to think of this as the “universal” use case since it casts such a wide net.
 
 
 
 
 
 
 
 It’s a great example to illustrate how grid-template-areas works, but a real-life implementation usually involves media queries set to change the layout at certain viewport widths. Rather than having to re-declare grid-area on each grid item at each breakpoint to re-position everything, we can use grid-template-areas to “respond” to the breakpoint instead — and get a nice visual of the layout at each breakpoint in the process!
 
 
 
 Before defining the layout, let’s assign an ident to each element using the grid-area property as a base style.
 
 
 
 header {
   grid-area: head;
 }
 
 .left-side {
   grid-area: left;
 }
 
 main {
   grid-area: main;
 }
 
 .right-side {
   grid-area: right;
 }
 
 footer {
   grid-area: foot;
 }
 
 
 
 Now, let’s define the layout again as a base style. We’re going with a mobile-first approach so that things will stack by default:
 
 
 
 .grid-container {
   display: grid;
   grid-template-areas:
     &quot;head&quot;
     &quot;left&quot;
     &quot;main&quot;
     &quot;right&quot;
     &quot;foot&quot;;
 }
 
 
 
 
 
 
 
 Each grid item is auto-sized in this configuration — which seems a little bit weird — so we can set min-height: 100vh on the grid container to give us more room to work with:
 
 
 
 .grid-container {
   display: grid;
   grid-template-areas:
     &quot;head&quot;
     &quot;left&quot;
     &quot;main&quot;
     &quot;right&quot;
     &quot;foot&quot;;
   min-height: 100vh;
 }
 
 
 
 
 
 
 
 Now let’s say we want the main element to sit to the right of the stacked left and right sidebars when we get to a slightly wider viewport width. We re-declare grid-template-areas with an updated ASCII layout to get that:
 
 
 
 @media (min-width: 800px) {
   .parent {
     grid-template-columns: 0.5fr 1fr;
     grid-template-rows: 100px 1fr 1fr 100px;
     grid-template-areas:
       &quot;head head&quot;
       &quot;left main&quot;
       &quot;right main&quot;
       &quot;foot foot&quot;;
   }
 }
 
 
 
 I tossed some column and row sizing in there purely for aesthetics.
 
 
 
 
 
 
 
 As the browser gets even wider, we may want to change the layout again, so that main is sandwiched between the left and right sidebars. Let’s write the layout visually!
 
 
 
 .grid-container {
   grid-template-columns: 200px 1fr 200px; /* again, just for sizing */
   grid-template-areas:
     &quot;head head head&quot;
     &quot;left main right&quot;
     &quot;left main right&quot;
     &quot;foot foot foot&quot;;
 }
 
 
 
 
 
 
 
 CodePen Embed Fallback
 
 
 Leveraging implicit line names for flexibility
 
 
 According to the spec, grid-template-areas automatically generates names for the grid lines created by named grid areas. We call these implicitly-named grid lines because they are named for us for free without any additional work.
 
 
 
 Every named grid area gets four implicitly-named grid lines, two in the column direction and two in the row direction, where -start and -end are appended to the ident. For example, a grid area named head gets head-start and head-end lines in both directions for a total of four implicitly-named grid lines.
 
 
 
 
 
 
 
 We can use these lines to our advantage! For instance, if we want an element to overlay the main, left, and right areas of our grid. Earlier, we talked about how layouts have to be rectangular — no “T” and “L” shaped layouts allowed. Consequently, we’re unable to use the ASCII visual layout method to place the overlay. We can, however, use our implicit line names using the same grid-area property on the overlay that we use to position the other elements.
 
 
 
 Did you know that grid-area is a shorthand property, sort of the same way that margin and padding are shorthand properties? It takes multiple values the same way, but instead of following a “clockwise” direction like, margin — which goes in order of margin-block-start, margin-inline-end, margin-block-end, and margin-inline-start — grid-area goes like this:
 
 
 
 grid-area: block-start / inline-start / block-end / inline-end;
 
 
 
 
 
 
 
 But we’re talking about rows and columns, not block and inline directions, right? Well, they correspond to one another. The row axis corresponds to the block direction, and the column axis corresponds to the inline direction:
 
 
 
 grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end;
 
 
 
 
 
 
 
 Back to positioning that overlay element as a grid item in our layout. The grid-area property will be helpful to position the element using our implicitly-named grid lines:
 
 
 
 .overlay {
   grid-area: left-start / left-start / right-end / main-end;
 }
 
 
 
 CodePen Embed Fallback
 
 
 Creating a minimal grid system
 
 
 When we focus on layouts like the “universal” use case we just saw, it’s tempting to think of grid areas in terms of one area per element. But it doesn’t have to work like that. We can repeat idents to reserve more space for them in the layout. We saw that when we repeated the head and foot idents in the last example:
 
 
 
 .grid-container {
   grid-template-areas:
     &quot;head head head&quot;
     &quot;left main right&quot;
     &quot;left main right&quot;
     &quot;foot foot foot&quot;;
 }
 
 
 
 Notice that main, left, and right are also repeated but in the block direction.
 
 
 
 Let’s forget about full page layouts and use named grid areas on a component. Grid is just as good for component layouts as full pages!
 
 
 
 Here’s a pretty standard hero component that sports a row of images followed by different blocks of text:
 
 
 
 
 
 
 
 The HTML is pretty simple:
 
 
 
 &lt;div class&#x3D;&quot;hero&quot;&gt;
   &lt;div class&#x3D;&quot;image&quot;&gt;
     &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;&quot; /&gt;
   &lt;/div&gt;
   &lt;div class&#x3D;&quot;text&quot;&gt;
     &lt;!-- ... --&gt;
   &lt;/div&gt;
 &lt;/div&gt;
 
 
 
 We could do this for a real fast stacked layout:
 
 
 
 .hero {
   grid-template-areas:
     &quot;image&quot;
     &quot;text&quot;;
 }
 
 
 
 But then we have to reach for some padding, max-width or whatever to get the text area narrower than the row of images. How about we expand our ASCII layout into a four-column grid instead by repeating our idents on both rows:
 
 
 
 .hero {
   display: grid;
   grid-template-columns: repeat(4, 1fr); /* maintain equal sizing */
   grid-template-areas:
     &quot;image image image image&quot;
     &quot;text  text  text  text&quot;;
 }
 
 
 
 Alright, now we can place our grid items into those named areas:
 
 
 
 .hero .image {
   grid-area: image;
 }
 
 .hero .text {
   grid-area: text;
 }
 
 
 
 So far, so good — both rows take up the entire width. We can use that as our base layout for small screens.
 
 
 
 
 
 
 
 But maybe we want to introduce the narrower text when the viewport reaches a larger width. We can use what we know about the full-stop character to “skip” columns. Let’s have the text ident skip the first and last columns in this case.
 
 
 
 @media (min-width: 800px) {
   main {
     grid-template-columns: repeat(6, 1fr); /* increase to six columns */
     grid-template-areas:
       &quot;image image image image image image&quot;
       &quot;..... text  text  text  text  .....&quot;;
   }
 }
 
 
 
 Now we have the spacing we want:
 
 
 
 
 
 
 
 If the layout needs additional tweaking at even larger breakpoints, we can add more columns and go from there:
 
 
 
 .hero {
   grid-template-columns: repeat(8, 1fr);
   grid-template-areas:
     &quot;image image image image image image image image&quot;
     &quot;..... text  text  text  text  text  text  .....&quot;;
 }
 
 
 
 Dev tool visualization:
 
 
 
 
 
 
 
 Remember when 12-column and 16-column layouts were the big things in CSS frameworks? We can quickly scale up to that and maintain a nice visual ASCII layout in the code:
 
 
 
 main {
   grid-template-columns: repeat(12, 1fr);
   grid-template-areas:
     &quot;image image image image image image image image image image image image&quot;
     &quot;..... text  text  text  text  text  text  text  text  text  text  .....&quot;;
 }
 
 
 
 CodePen Embed Fallback
 
 
 Let’s look at something more complex
 
 
 We’ve looked at one fairly generic example and one relatively straightforward example. We can still get nice ASCII layout visualizations with more complex layouts.
 
 
 
 Let’s work up to this:
 
 
 
 
 
 
 
 I’ve split this up into two elements in the HTML, a header and a main:
 
 
 
 &lt;header&gt;
   &lt;div class&#x3D;&quot;logo&quot;&gt; ... &lt;/div&gt;
   &lt;div class&#x3D;&quot;menu&quot;&gt; ... &lt;/div&gt;
 &lt;/header&gt;
 &lt;main&gt;
   &lt;div class&#x3D;&quot;image&quot;&gt; ... &lt;/div&gt;
   &lt;h2&gt; ... &lt;/h2&gt;
   &lt;div class&#x3D;&quot;image&quot;&gt; ... &lt;/div&gt;
   &lt;div class&#x3D;&quot;image&quot;&gt; ... &lt;/div&gt;
 &lt;/main&gt;
 
 
 
 I think flexbox is more appropriate for the header since we can space its child elements out easily that way. So, no grid there:
 
 
 
 header {
   display: flex;
   justify-content: space-between;
   /* etc. */
 }
 
 
 
 But grid is well-suited for the main element’s layout. Let’s define the layout and assign the idents to the corresponding elements that we need to position the .text and three .image elements. We’ll start with this as our baseline for small screens:
 
 
 
 .grid {
   display: grid;
   grid-template-columns: repeat(4, 1fr);
   grid-template-areas:
     &quot;image1 image1 .....  image2&quot;
     &quot;texts  texts  texts  texts&quot;
     &quot;.....  image3 image3 .....&quot;;
 }
 
 
 
 You can already see where we’re going with this, right? The layout is visualized for us, and we can drop the grid items into place with the custom idents:
 
 
 
 .image:nth-child(1) {
   grid-area: image1;
 }
 
 .image:nth-last-child(2) {
   grid-area: image2;
 }
 
 .image:nth-last-child(1) {
   grid-area: image3;
 }
 
 h2 {
   grid-area: texts;
 }
 
 
 
 
 
 
 
 That’s our base layout, so let’s venture into a wider breakpoint:
 
 
 
 @media (min-width: 800px) {
   .grid {
     grid-template-columns: repeat(8, 1fr);
     grid-template-areas:
       &quot;. image1 image1 ...... ......  ...... image2 .&quot;
       &quot;. texts  texts  texts  texts   texts  image2 .&quot;
       &quot;. .....  image3 image3 image3  image3 ...... .&quot;;
   }
 }
 
 
 
 I bet you know exactly how that will look because the layout is right there in the code!
 
 
 
 
 
 
 
 Same deal if we decide to scale up even further:
 
 
 
 .grid {
   grid-template-columns: repeat(12, 1fr);
   grid-template-areas:
     &quot;. image1 image1 .....  .....   .....  .....  .....  .....  .....  .....  .&quot;
     &quot;. texts  texts  texts  texts   texts  texts  texts  texts  texts  image2 .&quot;
     &quot;. .....  image3 image3 image3  image3 .....  .....  .....  .....  .....  .&quot;;
 }
 
 
 
 
 
 
 
 Here’s the full demo:
 
 
 
 CodePen Embed Fallback
 
 
 
 I’m using the “negative margin hack” to get the first image to overlap the heading.
 
 
 Wrapping up
 
 
 I’m curious if anyone else is using grid-template-areas to create named areas for the benefit of having an ASCII visual of the grid layout. Having that as a reference in my CSS code has helped de-mystify some otherwise complex designs that may have been even more complex when dealing with line numbers.
 
 
 
 But if nothing else, defining grid layouts this way teaches us some interesting things about CSS Grid that we saw throughout this post:
 
 
 
 The grid-template-areas property allows us to create custom idents — or “named areas” — and use them to position grid items using the grid-area property.There are three types of “tokens” that grid-template-areas accepts as values, including named cell tokens, null cell tokens, and trash cell tokens.Each row that is defined in grid-template-areas needs the same number of cells. Ignoring a single cell doesn’t create a layout; it is considered a trash token.We can get a visual ASCII-like diagram of the grid layout in the grid-template-areas property value by using required whitespaces between named cell tokens while defining the grid layout.Make sure there is no whitespace inside a null cell token (e.g. .....). Otherwise, a single whitespace between null cell tokens creates unnecessary empty cells, resulting in an invalid layout.We can redefine the layout at various breakpoints by re-positioning the grid items using grid-area, then re-declaring the layout with grid-template-areas on the grid container to update the track listing, if needed. There’s no need to touch the grid items.Custom named grid areas automatically get four implicitly assigned line names — &lt;custom-ident&gt;-start and &lt;custom-ident&gt;-end in both the column and row directions.
 
 Using Grid Named Areas to Visualize (and Reference) Your Layout originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Not Sure How to WordPress Anymore?</title>
         <link href="https://css-tricks.com/not-sure-how-to-wordpress-anymore/"/>
       <updated>2022-08-25T14:34:06.000Z</updated>
       <content type="text">Neither do I! And that’s probably because there’s a lot happening in WordPress-land. The evolution towards full-site editing (FSE) introduces frequent changes to the way we build themes and plugins, and at such break-neck speed that the documentation itself is either non-existent or nearly stale upon being published. Heck, the term “full-site editing” might even change.
 
 
 
 
 
 
 
 Tom McFarlin was musing about this in his post titled “Writing Tutorials in These Gutenberg Times”:
 
 
 
 I know Gutenberg has been in development for five years and I know that it’s matured a lot over the course of that time. But [t]he number of tutorials explaining how to do something that’s already outdated was absolutely incredible.
 
 
 
 The truth is that I wouldn’t know where to start if I was asked to make a new WordPress site. As I see, there are a number of ways to go in this evolving era of WordPress:
 
 
 
 Make a virtually empty theme that leverages the Site Editor for templating and block patterns for layouts.Make a child theme based on the existing Twenty Twenty-Two theme (because it supports FSE out of the box and is minimal enough to customize without much fuss).Make a classic theme.Ditch theming altogether and make a headless front-end that consumes the WordPress REST API.
 
 
 
 I mean, we have so many tools for extending WordPress as a CMS that the front end of a WordPress site may vary from site to site. We can quite literally build an entire custom WordPress site with nothing but some tweaks to the theme.json file and fiddling around with layouts in the Block Editor.
 
 
 
 It’s amazing and dizzying all at once.
 
 
 
 It can also be frustrating, and we saw some of the frustration boil over when Matt Mullenweg commented on the recent design updates to the WordPress.org homepage and the amount of time took to complete:
 
 
 
 […] it’s such a basic layout, it’s hard to imagine it taking a single person more than a day on Squarespace, Wix, Webflow, or one of the WP page builders.
 
 
 
 (And, yes, someone proved that a nearly identical copy of the design could be created in 20 minutes.)
 
 
 
 I think Matt’s comments have more to do with the process and solving the right problems than they are criticizing the approach that was taken. But reading the comments on that post is a nice microcosm of what I believe is an existential dilemma that many WordPress developers — including myself — are feeling after five years of living between “classic” and FSE themes.
 
 
 
 I’ll be honest: I feel super out of touch with FSE development. So out of touch that I’ve wondered whether I’ve fallen too far behind and whether I’ll be able to catch up. I know there’s a huge effort to bolster learning (Learn WordPress is a great example of that), but it feels like there’s still something missing — or some sorta disconnect — that’s preventing the community from being on the same page as far as where we are and where we’re heading.
 
 
 
 Could it be a lack of communication? Nah, there’s lots of that, not to mention lots of opportunities to attend meetings and view meeting notes. Could it be a lack of stable documentation? That’s legit, at least when I’ve tried seeking information on block development.
 
 
 
 Perhaps the biggest shortcoming is the dearth of blog posts that share tips, tricks, and best practices. The WordPress community has always been a vast army of folks who generously share their talents and wisdom. But I think Tom summed it up best when he tweeted:
 
 
 
 my sympathy to anyone who duckduckgo’s/googles a tutorial for how to create a gutenberg block and cannot find a single consistent tutorial.what a mess.— Tom McFarlin (@tommcfarlin) August 17, 2022 
 
 
 
 I, for one, would love to be writing about WordPress as much as I have in the “classic” era. But again, there’s that elusive starting point that prevents me from feeling confident about anything I’d say.
 
 Not Sure How to WordPress Anymore? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Using CSS Cascade Layers to Manage Custom Styles in a Tailwind Project</title>
         <link href="https://css-tricks.com/using-css-cascade-layers-to-manage-custom-styles-in-a-tailwind-project/"/>
       <updated>2022-08-24T13:11:47.000Z</updated>
       <content type="text">If a utility class only does one thing, chances are you don’t want it to be overridden by any styles coming from elsewhere. One approach is to use !important to be 100% certain the style will be applied, regardless of specificity conflicts.
 
 
 
 The Tailwind config file has an !important option that will automatically add !important to every utility class. There’s nothing wrong with using !important this way, but nowadays there are better ways to handle specificity. Using CSS Cascade Layers we can avoid the heavy-handed approach of using !important.
 
 
 
 
 
 
 
 Cascade layers allow us to group styles into “layers”. The precedence of a layer always beats the specificity of a selector. Specificity only matters inside each layer. Establishing a sensible layer order helps avoid styling conflicts and specificity wars. That’s what makes CSS Cascade Layers a great tool for managing custom styles alongside styles from third-party frameworks, like Tailwind.
 
 
 
 A Tailwind source .css file usually starts something like this:
 
 
 
 @tailwind base;
 @tailwind components;
 @tailwind utilities;
 @tailwind variants;
 
 
 
 Let’s take a look at the official Tailwind docs about directives:
 
 
 
 Directives are custom Tailwind-specific at-rules you can use in your CSS that offer special functionality for Tailwind CSS projects. Use the @tailwind directive to insert Tailwind’s base, components, utilities and variants styles into your CSS.
 
 
 
 In the output CSS file that gets built, Tailwind’s CSS reset — known as Preflight — is included first as part of the base styles. The rest of base consists of CSS variables needed for Tailwind to work. components is a place for you to add your own custom classes. Any utility classes you’ve used in your markup will appear next. Variants are styles for things like hover and focus states and responsive styles, which will appear last in the generated CSS file.
 
 
 The Tailwind @layer directive
 
 
 Confusingly, Tailwind has its own @layer syntax. This article is about the CSS standard, but let’s take a quick look at the Tailwind version (which gets compiled away and doesn’t end up in the output CSS). The Tailwind @layer directive is a way to inject your own extra styles into a specified part of the output CSS file.
 
 
 
 For example, to append your own styles to the base styles, you would do the following:
 
 
 
 @layer base {
   h1 {
     font-size: 30px;
   }
 }
 
 
 
 The components layer is empty by default — it’s just a place to put your own classes. If you were doing things the Tailwind way, you’d probably use @apply (although the creator of Tailwind recently advised against it), but you can also write classes the regular way:
 
 
 
 @layer components {
   .btn-blue {
     background-color: blue;
     color: white;
   }
 }
 
 
 
 The CSS standard is much more powerful. Let’s get back to that…
 
 
 Using the CSS standard @layer
 
 
 Here’s how we can rewrite this to use the CSS standard @layer:
 
 
 
 @layer tailwind-base, my-custom-styles, tailwind-utilities;
 
 @layer tailwind-base {
   @tailwind base;
 }
 
 @layer tailwind-utilities {
   @tailwind utilities;
   @tailwind variants;
 } 
 
 
 
 Unlike the Tailwind directive, these don’t get compiled away. They’re understood by the browser. In fact, DevTools in Edge, Chrome, Safari, and Firefox will even show you any layers you’ve defined.
 
 
 
 
 
 
 
 You can have as many layers as you want — and name them whatever you want — but in this example, all my custom styles are in a single layer (my-custom-styles). The first line establishes the layer order:
 
 
 
 @layer tailwind-base, my-custom-styles, tailwind-utilities;
 
 
 
 This needs to be provided upfront. Be sure to include this line before any other code that uses @layer. The first layer in the list will be the least powerful, and the last layer in the list will be the most powerful. That means tailwind-base is the least powerful layer and any code in it will be overridden by all the subsequent layers. That also means tailwind-utilities will always trump any other styles — regardless of source order or specificity. (Utilities and variants could go in separate layers, but the maintainers of Tailwind will ensure variants always trump utilities, so long as you include the variants below the utilities directive.)
 
 
 
 Anything that isn’t in a layer will override anything that is in a layer (with the one exception being styles that use !important). So, you could also opt to leave utilities and variants outside of any layer:
 
 
 
 @layer tailwind-base, tailwind-components, my-custom-styles;
 
 @layer tailwind-base {
   @tailwind base;
 }
 
 @layer tailwind-components {
   @tailwind components;
 }
 
 @tailwind utilities;
 @tailwind variants;
 
 
 
 What did this actually buy us? There are plenty of times when advanced CSS selectors come in pretty handy. Let’s create a version of :focus-within that only responds to keyboard focus rather than mouse clicks using the :has selector (which lands in Chrome 105). This will style a parent element when any of its children receive focus. Tailwind 3.1 introduced custom variants — e.g. &lt;div class&#x3D;&quot;[&amp;:has(:focus-visible)]:outline-red-600&quot;&gt; — but sometimes it’s easier to just write CSS:
 
 
 
 @layer tailwind-base, my-custom-styles;
 @layer tailwind-base {
   @tailwind base;
 }
 
 @tailwind utilities;
 
 @layer my-custom-styles {
   .radio-container {
     padding: 4px 24px;
     border: solid 2px rgb(230, 230, 230);
   }
   .radio-container:has(:focus-visible) {
     outline: solid 2px blue;
   }
 }
 
 
 
 Let’s say in just one instance we want to override the outline-color from blue to something else. Let’s say the element we’re working with has both the Tailwind class .outline-red-600 and our own .radio-container:has(:focus-visible) class:
 
 
 
 &lt;div class&#x3D;&quot;outline-red-600 radio-container&quot;&gt; ... &lt;/div&gt;
 
 
 
 Which outline-color will win?
 
 
 
 Ordinarily, the higher specificity of .radio-container:has(:focus-visible) would mean the Tailwind class has no effect — even if it’s lower in the source order. But, unlike the Tailwind @layer directive that relies on source order, the CSS standard @layer overrules specificity.
 
 
 
 
 
 
 
 As a result, we can use complex selectors in our own custom styles but still override them with Tailwind’s utility classes when we need to — without having to resort to heavy-handed !important usage to get what we want.
 
 Using CSS Cascade Layers to Manage Custom Styles in a Tailwind Project originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Removing jQuery from GOV.UK</title>
         <link href="https://css-tricks.com/removing-jquery-from-gov-uk/"/>
       <updated>2022-08-23T13:04:31.000Z</updated>
       <content type="text">The GOV.UK team recently published “How and why we removed jQuery from GOV.UK“. This was an insightful look at how an organization can assess its tooling and whether something is still the best tool for the job. This is not a nudge to strip libraries out of your current project right now! Many of us may still be supporting legacy projects and browser requirements that prevent this from being a viable option.
 
 
 
 
 
 
 
 Some of the criticism appears to be that the library size argument is negligible on modern network speeds and caching.
 
 
 
 GOV.UK posted an update to address this criticism with metrics – “The impact of removing jQuery on our web performance“.
 
 
 
 This article also makes the case for improving maintenance. Instead of upgrading disparate outdated versions of code and having to address security updates in a piecemeal approach, removing the dependency reduces this footprint. This is the dream of having the luxury for addressing technical debt.
 
 
 
 Previously, GitHub also documented how they incrementally decoupled jQuery from their front-end code. Improving maintenance and developer experience played a role into their decision.
 
 
 
 What caught my eye in particular was the link to the documentation on how to remove jQuery. Understanding how to decouple and perform migration steps are maintenance tasks that will continue to come up for websites and it’s reassuring to have a guide from someone that had to do the same.
 
 
 
 Further musing on this subject turned up the old chestnuts “You Might Not Need jQuery” (2014), “(Now More Than Ever) You Might Not Need jQuery” (2017), “Is jQuery still relevant? (1)” (2016),  and “Is jQuery still relevant? (2)” (2017).
 To Shared Link — Permalink on CSS-Tricks
 Removing jQuery from GOV.UK originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>CSS Grid and Custom Shapes, Part 2</title>
         <link href="https://css-tricks.com/css-grid-and-custom-shapes-part-2/"/>
       <updated>2022-08-22T14:08:39.000Z</updated>
       <content type="text">Alright, so the last time we checked in, we were using CSS Grid and combining them with CSS clip-path and mask techniques to create grids with fancy shapes.
 
 
 
 Here’s just one of the fantastic grids we made together:
 
 
 
 
 
 
 
 CodePen Embed Fallback
 
 
 
 Ready for the second round? We are still working with CSS Grid, clip-path, and mask, but by the end of this article, we’ll end up with different ways to arrange images on the grid, including some rad hover effects that make for an authentic, interactive experience to view pictures.
 
 
 
 And guess what? We’re using the same markup that we used last time. Here’s that again:
 
 
 
 &lt;div class&#x3D;&quot;gallery&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;!-- as many times as we want --&gt;
 &lt;/div&gt;
 
 
 
 Like the previous article, we only need a container with images inside. Nothing more!
 
 
 Nested Image Grid
 
 
 Last time, our grids were, well, typical image grids. Other than the neat shapes we masked them with, they were pretty standard symmetrical grids as far as how we positioned the images inside.
 
 
 
 Let’s try nesting an image in the center of the grid:
 
 
 
 CodePen Embed Fallback
 
 
 
 We start by setting a 2✕2 grid for four images:
 
 
 
 .gallery {
   --s: 200px; /* controls the image size */
   --g: 10px; /* controls the gap between images */
 
   display: grid;
   gap: var(--g);
   grid-template-columns: repeat(2, auto);
 }
 .gallery &gt; img {
   width: var(--s);
   aspect-ratio: 1;
   object-fit: cover;
 }
 
 
 
 Nothing complex yet. The next step is to cut the corner of our images to create the space for the nested image. I already have a detailed article on how to cut corners using clip-path and mask. You can also use my online generator to get the CSS for masking corners.
 
 
 
 What we need here is to cut out the corners at an angle equal to 90deg. We can use the same conic-gradient technique from that article to do that:
 
 
 
 .gallery &gt; img {
    mask: conic-gradient(from var(--_a), #0000 90deg, #000 0);
 }
 .gallery &gt; img:nth-child(1) { --_a: 90deg; }
 .gallery &gt; img:nth-child(2) { --_a: 180deg; }
 .gallery &gt; img:nth-child(3) { --_a: 0deg; }
 .gallery &gt; img:nth-child(4) { --_a:-90deg; }
 
 
 
 We could use the clip-path method for cutting corners from that same article, but masking with gradients is more suitable here because we have the same configuration for all the images — all we need is a rotation (defined with the variable --_a) get the effect, so we’re masking from the inside instead of the outside edges.
 
 
 
 
 
 
 
 Now we can place the nested image inside the masked space. First, let’s make sure we have a fifth image element in the HTML:
 
 
 
 &lt;div class&#x3D;&quot;gallery&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
 &lt;/div&gt;
 
 
 
 We are going to rely on the good ol’ absolute positioning to place it in there:
 
 
 
 .gallery &gt; img:nth-child(5) {
   position: absolute;
   inset: calc(50% - .5*var(--s));
   clip-path: inset(calc(var(--g) / 4));
 }
 
 
 
 The inset property allows us to place the image at the center using a single declaration. We know the size of the image (defined with the variable --s), and we know that the container’s size equals 100%. We do some math, and the distance from each edge should be equal to (100% - var(--s))/2.
 
 
 
 
 
 
 
 You might be wondering why we’re using clip-path at all here. We’re using it with the nested image to have a consistent gap. If we were to remove it, you would notice that we don’t have the same gap between all the images. This way, we’re cutting a little bit from the fifth image to get the proper spacing around it.
 
 
 
 The complete code again:
 
 
 
 .gallery {
   --s: 200px; /* controls the image size */
   --g: 10px;  /* controls the gap between images */
   
   display: grid;
   gap: var(--g);
   grid-template-columns: repeat(2, auto);
   position: relative;
 }
 
 .gallery &gt; img {
   width: var(--s);
   aspect-ratio: 1;
   object-fit: cover;
   mask: conic-gradient(from var(--_a), #0000 90deg, #000 0);
 }
 
 .gallery &gt; img:nth-child(1) {--_a: 90deg}
 .gallery &gt; img:nth-child(2) {--_a:180deg}
 .gallery &gt; img:nth-child(3) {--_a:  0deg}
 .gallery &gt; img:nth-child(4) {--_a:-90deg}
 .gallery &gt; img:nth-child(5) {
   position: absolute;
   inset: calc(50% - .5*var(--s));
   clip-path: inset(calc(var(--g) / 4));
 }
 
 
 
 Now, many of you might also be wondering: why all the complex stuff when we can place the last image on the top and add a border to it? That would hide the images underneath the nested image without a mask, right?
 
 
 
 That’s true, and we will get the following:
 
 
 
 CodePen Embed Fallback
 
 
 
 No mask, no clip-path. Yes, the code is easy to understand, but there is a little drawback: the border color needs to be the same as the main background to make the illusion perfect. This little drawback is enough for me to make the code more complex in exchange for real transparency independent of the background. I am not saying a border approach is bad or wrong. I would recommend it in most cases where the background is known. But we are here to explore new stuff and, most important, build components that don’t depend on their environment.
 
 
 
 Let’s try another shape this time:
 
 
 
 CodePen Embed Fallback
 
 
 
 This time, we made the nested image a circle instead of a square. That’s an easy task with border-radius But we need to use a circular cut-out for the other images. This time, though, we will rely on a radial-gradient() instead of a conic-gradient() to get that nice rounded look.
 
 
 
 .gallery &gt; img {
   mask: 
     radial-gradient(farthest-side at var(--_a),
       #0000 calc(50% + var(--g)/2), #000 calc(51% + var(--g)/2));
 }
 .gallery &gt; img:nth-child(1) { --_a: calc(100% + var(--g)/2) calc(100% + var(--g)/2); }
 .gallery &gt; img:nth-child(2) { --_a: calc(0%   - var(--g)/2) calc(100% + var(--g)/2); }
 .gallery &gt; img:nth-child(3) { --_a: calc(100% + var(--g)/2) calc(0%   - var(--g)/2); }
 .gallery &gt; img:nth-child(4) { --_a: calc(0%   - var(--g)/2) calc(0%   - var(--g)/2); }
 
 
 
 All the images use the same configuration as the previous example, but we update the center point each time.
 
 
 
 
 
 
 
 The above figure illustrates the center point for each circle. Still, in the actual code, you will notice that I am also accounting for the gap to ensure all the points are at the same position (the center of the grid) to get a continuous circle if we combine them.
 
 
 
 Now that we have our layout let’s talk about the hover effect. In case you didn’t notice, a cool hover effect increases the size of the nested image and adjusts everything else accordingly. Increasing the size is a relatively easy task, but updating the gradient is more complicated since, by default, gradients cannot be animated. To overcome this, I will use a font-size hack to be able to animate the radial gradient.
 
 
 
 If you check the code of the gradient, you can see that I am adding 1em:
 
 
 
 mask: 
     radial-gradient(farthest-side at var(--_a),
       #0000 calc(50% + var(--g)/2 + 1em), #000 calc(51% + var(--g)/2 + 1em));
 
 
 
 It’s known that em units are relative to the parent element’s font-size, so changing the font-size of the .gallery will also change the computed em value — this is the trick we are using. We are animating the font-size from a value of 0 to a given value and, as a result, the gradient is animated, making the cut-out part larger, following the size of the nested image that is getting bigger.
 
 
 
 Here is the code that highlights the parts involved in the hover effect:
 
 
 
 .gallery {
   --s: 200px; /* controls the image size */
   --g: 10px; /* controls the gaps between images */
 
   font-size: 0; /* initially we have 1em &#x3D; 0 */
   transition: .5s;
 }
 /* we increase the cut-out by 1em */
 .gallery &gt; img {
   mask: 
     radial-gradient(farthest-side at var(--_a),
       #0000 calc(50% + var(--g)/2 + 1em), #000 calc(51% + var(--g)/2 + 1em));
 }
 /* we increase the size by 2em */
 .gallery &gt; img:nth-child(5) {
   width: calc(var(--s) + 2em);
 }
 /* on hover 1em &#x3D; S/5 */
 .gallery:hover {
   font-size: calc(var(--s) / 5);
 }
 
 
 
 The font-size trick is helpful if we want to animate gradients or other properties that cannot be animated. Custom properties defined with @property can solve such a problem, but support for it is still lacking at the time of writing.
 
 
 
 I discovered the font-size trick from @SelenIT2 while trying to solve a challenge on Twitter.
 
 
 
 Another shape? Let’s go!
 
 
 
 CodePen Embed Fallback
 
 
 
 This time we clipped the nested image into the shape of a rhombus. I’ll let you dissect the code as an exercise to figure out how we got here. You will notice that the structure is the same as in our examples. The only differences are how we’re using the gradient to create the shape. Dig in and learn!
 
 
 Circular Image Grid
 
 
 We can combine what we’ve learned here and in previous articles to make an even more exciting image grid. This time, let’s make all the images in our grid circular and, on hover, expand an image to reveal the entire thing as it covers the rest of the photos.
 
 
 
 CodePen Embed Fallback
 
 
 
 The HTML and CSS structure of the grid is nothing new from before, so let’s skip that part and focus instead on the circular shape and hover effect we want.
 
 
 
 We are going to use clip-path and its circle() function to — you guessed it! — cut a circle out of the images.
 
 
 
 
 
 
 
 That figure illustrates the clip-path used for the first image. The left side shows the image’s initial state, while the right shows the hovered state. You can use this online tool to play and visualize the clip-path values.
 
 
 
 For the other images, we can update the center of the circle (70% 70%) to get the following code:
 
 
 
 .gallery &gt; img:hover {
   --_c: 50%; /* same as &quot;50% at 50% 50%&quot; */
 }
 .gallery &gt; img:nth-child(1) {
   clip-path: circle(var(--_c, 55% at 70% 70%));
 }
 .gallery &gt; img:nth-child(2) {
   clip-path: circle(var(--_c, 55% at 30% 70%));
 }
 .gallery &gt; img:nth-child(3) {
   clip-path: circle(var(--_c, 55% at 70% 30%));
 }
 .gallery &gt; img:nth-child(4) {
   clip-path: circle(var(--_c, 55% at 30% 30%));
 }
 
 
 
 Note how we are defining the clip-path values as a fallback inside var(). This way allows us to more easily update the value on hover by setting the value of the --_c variable. When using circle(), the default position of the center point is 50% 50%, so we get to omit that for more concise code. That’s why you see that we are only setting 50% instead of 50% at 50% 50%.
 
 
 
 Then we increase the size of our image on hover to the overall size of the grid so we can cover the other images. We also ensure the z-index has a higher value on the hovered image, so it is the top one in our stacking context.
 
 
 
 .gallery {
   --s: 200px; /* controls the image size */
   --g: 8px;   /* controls the gap between images */
 
   display: grid;
   grid: auto-flow var(--s) / repeat(2, var(--s));
   gap: var(--g);
 }
 
 .gallery &gt; img {
   width: 100%; 
   aspect-ratio: 1;
   cursor: pointer;
   z-index: 0;
   transition: .25s, z-index 0s .25s;
 }
 .gallery &gt; img:hover {
   --_c: 50%; /* change the center point on hover */
   width: calc(200% + var(--g));
   z-index: 1;
   transition: .4s, z-index 0s;
 }
 
 .gallery &gt; img:nth-child(1){
   clip-path: circle(var(--_c, 55% at 70% 70%));
   place-self: start;
 }
 .gallery &gt; img:nth-child(2){
   clip-path: circle(var(--_c, 55% at 30% 70%));
   place-self: start end;
 }
 .gallery &gt; img:nth-child(3){
   clip-path: circle(var(--_c, 55% at 70% 30%));
   place-self: end start;
 }
 .gallery &gt; img:nth-child(4){
   clip-path: circle(var(--_c, 55% at 30% 30%));
   place-self: end;
 }
 
 
 
 What’s going on with the place-self property? Why do we need it and why does each image have a specific value?
 
 
 
 Do you remember the issue we had in the previous article when creating the grid of puzzle pieces? We increased the size of the images to create an overflow, but the overflow of some images was incorrect. We fixed them using the place-self property.
 
 
 
 Same issue here. We are increasing the size of the images so each one overflows its grid cells. But if we do nothing, all of them will overflow on the right and bottom sides of the grid. What we need is:
 
 
 
 the first image to overflow the bottom-right edge (the default behavior),the second image to overflow the bottom-left edge,the third image to overflow the top-right edge, andthe fourth image to overflow the top-left edge.
 
 
 
 To get that, we need to place each image correctly using the place-self property.
 
 
 
 
 
 
 
 In case you are not familiar with place-self, it’s the shorthand for justify-self and align-self to place the element horizontally and vertically. When it takes one value, both alignments use that same value.
 
 
 Expanding Image Panels
 
 
 In a previous article, I created a cool zoom effect that applies to a grid of images where we can control everything: number of rows, number of columns, sizes, scale factor, etc.
 
 
 
 A particular case was the classic expanding panels, where we only have one row and a full-width container.
 
 
 
 CodePen Embed Fallback
 
 
 
 We will take this example and combine it with shapes!
 
 
 
 Before we continue, I highly recommend reading my other article to understand how the tricks we’re about to cover work. Check that out, and we’ll continue here to focus on creating the panel shapes.
 
 
 
 First, let’s start by simplifying the code and removing some variables
 
 
 
 CodePen Embed Fallback
 
 
 
 We only need one row and the number of columns should adjust based on the number of images. That means we no longer need variables for the number of rows (--n) and columns (--m ) but we need to use grid-auto-flow: column, allowing the grid to auto-generate columns as we add new images. We will consider a fixed height for our container; by default, it will be full-width.
 
 
 
 Let’s clip the images into a slanted shape:
 
 
 
 clip-path: polygon(S 0%, 100% 0%, (100% - S) 100%, 0% 100%);
 
 
 
 CodePen Embed Fallback
 
 
 
 Once again, each image is contained in its grid cell, so there’s more space between the images than we’d like:
 
 
 
 
 
 
 
 We need to increase the width of the images to create an overlap. We replace min-width: 100% with min-width: calc(100% + var(--s)), where --s is a new variable that controls the shape.
 
 
 
 CodePen Embed Fallback
 
 
 
 Now we need to fix the first and last images, so they sort of bleed off the page without gaps. In other words, we can remove the slant from the left side of the first image and the slant from the right side of the last image. We need a new clip-path specifically for those two images.
 
 
 
 We also need to rectify the overflow. By default, all the images will overflow on both sides, but for the first one, we need an overflow on the right side while we need a left overflow for the last image.
 
 
 
 .gallery &gt; img:first-child {
   min-width: calc(100% + var(--s)/2);
   place-self: start;
   clip-path: polygon(0 0,100% 0,calc(100% - var(--s)) 100%,0 100%);
 }
 .gallery &gt; img:last-child {
   min-width: calc(100% + var(--s)/2);
   place-self: end;
   clip-path: polygon(var(--s) 0,100% 0,100% 100%,0 100%);
 }
 
 
 
 The final result is a nice expanding panel of slanted images!
 
 
 
 CodePen Embed Fallback
 
 
 
 We can add as many images as you want, and the grid will adjust automatically. Plus, we only need to control one value to control the shape!
 
 
 
 We could have made this same layout with flexbox since we are dealing with a single row of elements. Here is my implementation.
 
 
 
 Sure, slanted images are cool, but what about a zig-zag pattern? I already teased this one at the end of the last article.
 
 
 
 CodePen Embed Fallback
 
 
 
 All I’m doing here is replacing clip-path with mask… and guess what? I already have a detailed article on creating that zig-zag shape — not to mention an online generator to get the code. See how all everything comes together?
 
 
 
 The trickiest part here is to make sure the zig-zags are perfectly aligned, and for this, we need to add an offset for every :nth-child(odd) image element.
 
 
 
 .gallery &gt; img {
   mask: 
     conic-gradient(from -135deg at right, #0000, #000 1deg 89deg, #0000 90deg) 
       100% calc(50% + var(--_p, 0%))/51% calc(2*var(--s)) repeat-y,
     conic-gradient(from   45deg at left,  #0000, #000 1deg 89deg, #0000 90deg) 
       0%   calc(50% + var(--_p, 0%))/51% calc(2*var(--s)) repeat-y;
 }
 /* we add an offset to the odd elements */
 .gallery &gt; img:nth-child(odd) {
   --_p: var(--s);
 }
 .gallery &gt; img:first-child {
   mask: 
     conic-gradient(from -135deg at right, #0000, #000 1deg 89deg, #0000 90deg) 
       0 calc(50% + var(--_p, 0%))/100% calc(2*var(--s));
 }
 .gallery &gt; img:last-child {
   mask: 
     conic-gradient(from 45deg at left, #0000, #000 1deg 89deg, #0000 90deg) 
       0 calc(50% + var(--_p, 0%)) /100% calc(2*var(--s));
 }
 
 
 
 Note the use of the --_p variable, which will fall back to 0% but will be equal to --_s for the odd images.
 
 
 
 Here is a demo that illustrates the issue. Hover to see how the offset — defined by --_p — is fixing the alignment.
 
 
 
 CodePen Embed Fallback
 
 
 
 Also, notice how we use a different mask for the first and last image as we did in the previous example. We only need a zig-zag on the right side of the first image and the left side of the last image.
 
 
 
 And why not rounded sides? Let’s do it!
 
 
 
 CodePen Embed Fallback
 
 
 
 I know that the code may look scary and tough to understand, but all that’s going on is a combination of different tricks we’ve covered in this and other articles I’ve already shared. In this case, I use the same code structure as the zig-zag and the slanted shapes. Compare it with those examples, and you will find no difference! Those are the same tricks in my previous article about the zoom effect. Then, I am using my other writing and my online generator to get the code for the mask that creates those rounded shapes.
 
 
 
 If you recall what we did for the zig-zag, we had used the same mask for all the images but then had to add an offset to the odd images to create a perfect overlap. In this case, we need a different mask for the odd-numbered images.
 
 
 
 The first mask:
 
 
 
 mask: 
   linear-gradient(-90deg,#0000 calc(2*var(--s)),#000 0) var(--s),
   radial-gradient(var(--s),#000 98%,#0000) 50% / calc(2*var(--s)) calc(1.8*var(--s)) space repeat;
 
 
 
 
 
 
 
 The second one:
 
 
 
 mask:
   radial-gradient(calc(var(--s) + var(--g)) at calc(var(--s) + var(--g)) 50%,#0000 98% ,#000) 
   calc(50% - var(--s) - var(--g)) / 100% calc(1.8*var(--s))
 
 
 
 
 
 
 
 The only effort I did here is update the second mask to include the gap variable (--g) to create that space between the images.
 
 
 
 The final touch is to fix the first and last image. Like all the previous examples, the first image needs a straight left edge while the last one needs a straight right edge.
 
 
 
 For the first image, we always know the mask it needs to have, which is the following:
 
 
 
 .gallery &gt; img:first-child {
   mask: 
     radial-gradient(calc(var(--s) + var(--g)) at right, #0000 98%, #000) 50% / 100% calc(1.8 * var(--s));
 }
 
 
 
 
 
 
 
 For the last image, it depends on the number of elements, so it matters if that element is :nth-child(odd) or :nth-child(even).
 
 
 
 
 
 
 
 .gallery &gt; img:last-child:nth-child(even) {
   mask: 
     linear-gradient(to right,#0000 var(--s),#000 0),
     radial-gradient(var(--s),#000 98%,#0000) left / calc(2*var(--s)) calc(1.8*var(--s)) repeat-y
 }
 
 
 
 
 
 
 
 .gallery &gt; img:last-child:nth-child(odd) {
   mask: 
     radial-gradient(calc(var(--s) + var(--g)) at left,#0000 98%,#000) 50% / 100% calc(1.8*var(--s))
 }
 
 
 
 That’s all! Three different layouts but the same CSS tricks each time:
 
 
 
 the code structure to create the zoom effecta mask or clip-path to create the shapesa separate configuration for the odd elements in some cases to make sure we have a perfect overlapa specific configuration for the first and last image to keep the shape on only one side.
 
 
 
 And here is a big demo with all of them together. All you need is to add a class to activate the layout you want to see.
 
 
 
 CodePen Embed Fallback
 
 
 
 And here is the one with the Flexbox implementation
 
 
 
 CodePen Embed Fallback
 
 
 Wrapping up
 
 
 Oof, we are done! I know there are many CSS tricks and examples between this article and the last one, not to mention all of the other tricks I’ve referenced here from other articles I’ve written. It took me time to put everything together, and you don’t have to understand everything at once. One reading will give you a good overview of all the layouts, but you may need to read the article more than once and focus on each example to grasp all the tricks.
 
 
 
 Did you notice that we didn’t touch the HTML at all other than perhaps the number of images in the markup? All the layouts we made share the same HTML code, which is nothing but a list of images.
 
 
 
 Before I end, I will leave you with one last example. It’s a “versus” between two anime characters with a cool hover effect.
 
 
 
 CodePen Embed Fallback
 
 
 
 What about you? Can you create something based on what you have learned? It doesn’t need to be complex — imagine something cool or funny like I did with that anime matchup. It can be a good exercise for you, and we may end with an excellent collection in the comment section.
 
 CSS Grid and Custom Shapes, Part 2 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>When Do You Use CSS Columns?</title>
         <link href="https://css-tricks.com/when-do-you-use-css-columns/"/>
       <updated>2022-08-18T13:24:48.000Z</updated>
       <content type="text">That ain’t rhetorical: I’m really interested in finding great use cases for CSS multi-column layouts.
 
 
 
 The answer seems straightforward. Use columns when you want to split any content into columns, right? Here is generally the sort of example you’ll find in articles that show how CSS mutli-column layouts work, including our very own Almanac:
 
 
 
 
 
 
 
 CodePen Embed Fallback
 
 
 
 Right on. But is this an actual use case? Mmmmmaybe. If the text is relatively brief, then perhaps it’s a nice touch. That’s how I sold it to myself when redesigning my website a few years ago. It’s not that way today, but this is what it looked like then:
 
 
 
 
 
 
 
 But an entire long-form article split into columns? I love it in newspapers but am hesitant to scroll down a webpage to read one column, only to scroll back up to do it again.
 
 
 
 I suppose we can use it to place two elements side-by-side, but flexbox is way more suited for that. Plus, a limitation prevents us from selecting the columns to size them individually. The columns have to be the same width.
 
 
 
 One thing columns have going for them is that they are the only CSS layout method that fragments content. (That is, unless we’re counting CSS Regions… what happened to those, anyway?!) So, if you wanna split a paragraph up into columns, it’s already possible without additional wrappers.
 
 
 
 When else might you need to split a continuous block of content into columns? I remember needing to do that when I had a big ol’ unordered list of items. I like the way lists can make content easy to scan, but long lists can make one side of the page look super heavy. Let’s say, for example, that we were listing out all the post tags for CSS-Tricks in alphabetical groups. A multi-column layout works beautifully for that:
 
 
 
 CodePen Embed Fallback
 
 
 
 Go ahead and try resizing the viewport width. Three columns are defined but the number will change based on the amount of available space. Gotta love all that responsive goodness without the media query work!
 
 
 
 I was working on a demo for the :left pseudo-class and reached for columns because it’s a great way to fragment things for printing demos. So, I guess there’s another use case. And while making a demo, I realized that a multi-column layout could be used to create a masonry grid of items, like an image gallery:
 
 
 
 CodePen Embed Fallback
 
 
 
 But what else? Are we limited to short paragraphs, long lists, and free-flowing grids?
 
 When Do You Use CSS Columns? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Why (and How) I Write Code With Pencil and Paper</title>
         <link href="https://css-tricks.com/why-and-how-i-write-code-with-pencil-and-paper/"/>
       <updated>2022-08-17T13:21:17.000Z</updated>
       <content type="text">If the thought of handwriting code seems silly, it might surprise you to know that it’s inevitable. If you’re unsure, think about the last job interview you did, and remember how there was no computer around in the interview room — just your interviewers, a blank sheet of paper, and a blue ball-point pen.
 
 
 
 For the students among you, it’s even a bigger deal as your grades hang in by the lines of code you had strategically squeezed into the available space in your answer sheet.
 
 
 
 And not just that, experienced programmers can point you to the bundle of A4 sheets they had removed from the office copy machine to scribble down a particularly complex algorithm they had been working on.
 
 
 
 So whether you’re an exam student, potential job interviewee, or someone wanting to resolve their programming dead ends, I hope this article helps you out when you put your pen to the paper to code.
 
 
 
 
 
 
 
 Although I will focus on the analog aspect of writing code, you can apply these steps to coding in any form or language. So consider this to be also like a generic coding guideline that works specifically for me but can also be very useful to you in your work.
 
 
 Why write it down?
 
 
 Before we start, it’s essential to understand that no one expects you to jot down production-ready code in a notebook. It’s not like you can drop that into a code editor and compile it without an error. If producing perfect code was the goal, you would be seated in front of a computer in the interview rooms and exam halls.
 
 
 
 The purpose of handwriting code is to work through logic in advance. There’s s desire to “get in the browser” as soon as possible in design, but there is conventional wisdom in sketching designs by hand. A low-fidelity medium encourages quick experimentation and inexpensive mistakes.
 
 
 
 The toil of trying to figure out how to affect surrounding items with one click (from my last article)
 
 
 
 The same can be true of code, mainly when working out syntax and semantics. That said, getting the correct syntax and semantics is always a plus point, though not the sole focus of the whole handwriting exercise.
 
 
 
 Let’s see where we can start when it comes to handwriting code.
 
 
 Know your question
 
 
 During my final year in college, I couldn’t do an internship or even attend campus interviews because of health reasons. As a result, my very first job interview was quite literal with high stakes.
 
 
 
 When I look back now, the interview was pretty easy. But having never attended one before, I was anxious beyond reason. The first thing the interviewers asked about programming was if I could output an inverted triangle made of asterisks. As I said, it was easy — nothing a for loop can’t handle, right? But like I said, my anxiety was through the roof as well.
 
 
 
 I took a deep breath, pressed my palm against the blank sheet of paper they had laid out for me, slid it as slow as possible towards me on the table (buying time, of course), clicked the pen, and then I did something right.
 
 
 
 I first drew an inverted triangle made of asterisks. That’s how I found my feet on the ground to start answering their question.
 
 
 
 I’ve seen otherwise brilliant developers get something wrong simply because they never fully grasp what it is they are solving.
 
 
 
 The questions we work with are not like the questions physicists or mathematicians solve. They get a set of parameters and find the missing ones; our questions are also our results. We are already told what our results are —  we have to figure out how to reach them. That’s why it’s imperative to know the question well because you’ll see the result.
 
 
 
 Writing down or drawing out what you want to output is one of the best ways to start your coding. I understand that in our fast-paced industry, the expectation is that we have to jump right into the programming by running a “hello world” demo. And that’s great to familiarize yourself with an unfamiliar syntax and shake off your anxiousness about trying something new.
 
 
 
 But when someone asks you a question and gives you a result to work up to, wouldn’t it just be better to put that down first? That question/result is not only your starting point but also your point of reference. At any step in your coding, you can look at it to ensure you’re working towards it and that you’re on the right track.
 
 
 
 So whether in your answer sheets or in that blank A4 paper you’re about to write in, start by taking a second and writing down what it is you’re trying to output. You can put it in the margins or a corner if you don’t want it to be a part of your answer. Just make sure it’s somewhere where you can keep referencing it.
 
 
 Outline your code
 
 
 This step is like a double-edged sword. It can get you a roadmap to your program or waste your time. My job is to make sure it’s the former.
 
 
 
 So, first and foremost, I like to say: outlining code is unnecessary if the scope of your problem or question is small. Again, this practice is neither prescriptive nor universal to all projects or situations. Imagine I’m your interviewer, and I ask you to write how to center an element in a web page using CSS in as many ways as possible. You won’t exactly be needing an outline for this. The code snippets are relatively small for each method.
 
 
 
 But now, let’s say I assign you to write a web application that captures user signatures via a touchscreen interface and then saves the signature on the server. Not so straightforward, right? You’ve more than one thing to figure out. Perhaps, a little outline can help.
 
 
 
 UI for capturing signature — HTML Canvas? WebGL?Disable pointer events on the rest of the web page when the user is signingConvert and save the captured image to a PNG file — JSThen convert it to blob (maybe) and save it to the visitor’s log data table.
 
 
 
 I’ve written a rough sequence of actions I think I might have to code. It could’ve been shorter or longer, depending on what I wanted from it.
 
 
 
 I highly recommend outlining code for client projects. Write the outline along with your user requirements or on the back of wireframes you’ve printed out.
 
 
 
 Your quick snapshot of bullet points gives you a map, a to-do list, and a checklist to verify against when you reach the end of the project — pretty much your whole project’s summary in a low-fidelity list. It can also become a template to start your next similar project.
 
 
 
 But like I said before, this step is like a double-edged sword. You’ll have to keep this short for examinees and interviewees when there are time constraints.
 
 
 
 If you don’t know where to start, write down just three essential functions you’ll have to code in your application, and if you have got the time, make it five.
 
 
 
 But that’s about it. Spend as little time as possible on this, and don’t sweat over the details. The outline is not going to score you extra points. It’s there only to help you make sure you have everything covered. It captures your initial gut reaction and keeps you honest throughout the project’s life.
 
 
 Longhand vs. shorthand
 
 
 A quick reference to disable text selection
 
 
 
 Time to start coding. So, what do you write? “Bdrs” or “border-radius“; “div -&gt; p” or “&lt;div&gt;&lt;p&gt;&lt;/div&gt;&lt;/p&gt;“; “pl()” or “println()“; “q()” or “querySelector()“?
 
 
 
 If someone else is grading your code, then there’s no choice. Leave out abbreviations, pseudo-codes, Emmet shortcuts, and any other form of shorthand writing. Otherwise, there’s no reason to assume that anyone reading this knows what your abbreviations mean.
 
 
 
 It’s really up to you.
 
 
 
 If you’ve gotten out of touch with writing by hand — and many of us have — it’s better not to go overboard with the longhand notations, as they get tedious. At the same time, there’s no such thing as being too frugal with your writing. Not if you want to be able to look back on it one day and understand what you’d written down.
 
 
 
 I have an open file in my note-taking app and a lined notepad on my desk where I write down code snippets I want to save for later reference. They are unorganized, just a long stream of snippets. That’s why when I browse through older notes, I wouldn’t know what I meant to write if I had not written them down clearly.
 
 
 
 I forget syntaxes all the time. For instance, I’ve been using the arrow notation for JavaScript functions since it was introduced (because it’s shorter), and I’m pretty sure if someone suddenly asks me to define a function using the function keyword, I might even misplace the parentheses or the function name, inciting a syntax error.
 
 
 
 It’s not unusual for us to forget syntaxes we haven’t used in a while. That’s why it’s better to write your notes clearly when you know you need them for future reference.
 
 
 The non-sequential flow of code
 
 
 Unlike the last step, which doesn’t apply to those of you interviewees and test-takers, this one is catered especially to you.
 
 
 
 Most programming languages are interpreted, compiled, and executed so that sometimes pre-written code in the source is executed later when called. We do it in JavaScript, for example, with function calling — functions can be defined initially, then executed later. Examinees and interviewees can use this to start working on the critical point of your answer first.
 
 
 
 As I’ve said from the very beginning, the purpose of handwriting code is to work through or test the logic of whatever it is you program. It’s best when you focus on resolving that first.
 
 
 
 Let’s take a classic textbook example — a program to find the nth Fibonacci number. If I were to write a simple outline for it, it would be something like this:
 
 
 
 Get the input.Calculate the Fibonacci number.Summarise the output.Print the output.
 
 
 
 All the steps in that outline are essential; however, 1, 3, and 4 are more obligatory. They are necessary but not important enough to focus on right away.
 
 
 
 It’s better to start writing down the code to calculate the Fibonacci number rather than to fetch the input. Wrap it in a function, then go ahead and write the code sequentially and write down a line to call that function where appropriate.
 
 
 
 Spend your time writing code that focuses on the heart of the problem.
 
 
 
 Real professionals can skip ahead. Let’s say I have a client project, and I have to work with some triangle geometry — got two sides, opposite angle, and gotta find the third side’s length. And I’ve decided to scribble on paper to get started rather than opening my IDE.
 
 
 
 First, I would draw the triangle, of course (that’s something I’m very experienced with, as you can tell). I would write down some sample lengths and angles. Then I’d write the formula (compliments of online searching, for sure), and then I’d jump right to the code for the function.
 
 
 
 There’s no point in me writing down the obligatory steps even though I’ll need them in production-ready code. But it would be different if I had to write that on an answer sheet in an exam. I can’t skip the other steps; however, I can still start with the code for the formula.
 
 
 Pseudo-code
 
 
 Chris has already written a handy article on pseudo-code that I highly recommend you give a solid read.
 
 
 
 For all those professionals who feel like the whole handwriting code thing doesn’t seem like your cup of tea but still might be curious if it can help you, then pseudo-code might be the balance you’re looking for.
 
 
 
 It’s similar to outlining the code, as I mentioned in one of the previous steps. However, it’s briefer and feels more like shorthand coding. It’s sometimes also referred to as “skeleton code.”
 
 
 
 Here’s some quick pseudo-code for a CSS grid layout:
 
 
 
 Grid
 5 60px rows
 6 100px columns
 
 
 
 There isn’t much to write! So, even though putting a pencil to paper is excellent for this sort of thing, it’s just as effective, fast, and inexpensive to jot some pseudo code into whatever program you’re using.
 
 
 Space and comments
 
 
 I believe code is 90% keywords and 10% tabs. Withoutspacesthereadabilityofwordsdecreases. Indentations are necessary for handwritten code as well. However, please don’t use it for every level because the width of the paper will limit you. Use spaces judiciously, but use them.
 
 
 
 Prized OG snippet, written with extra TLC
 
 
 
 If you’re writing code for your use, I also believe that if you’ve followed everything I’ve mentioned so far and have already written down your output and an outline on the page, you may not even need to include comments. Comments tell you quickly what its following set of code does. If you have already written and read an outline for the code, then comments are redundant notes.
 
 
 
 However, if your judgment says to put down one, then do it. Add it to the right side of the code (since you won’t be able to insert it between already written lines the way you could in, say, VS Code). Use forward slashes, brackets, or arrows to denote that they are comments.
 
 
 
 For examinees who are unconfident with a certain syntax, write down comments. This way, at least, you’re letting the person grading your paper know your intention with that incorrectly formatted code. And use only the correct delimiters to denote comments — for example, that would be the forward slashes for JavaScript.
 
 
 Analog vs. digital
 
 
 As I mentioned earlier, everything I’m providing here can is generic coding advice. If you don’t want to try this with physical paper, any note-taking application also works.
 
 
 
 But if you’re going to try the digital route, my recommendation is to try using something other than a straight note-taking app. Work with more visual digital tools — flow diagrams, mind maps, wireframes, etc. They can help you visualize your result, the outlines, and the code itself.
 
 
 
 I am not much of a digital citizen (except for working on the web and recently converting to reading e-books), so I stick to physical notebooks.
 
 
 My favorite tools for handwriting code
 
 
 Any pencil and paper will do! But there are lots of options out there, and these are a few choice tools I use:
 
 
 
 Staedtler Pigment Liner 0.3mm (Black)Mitsubishi JETSTREAM 101 0.7mm (Black)MUJI Notebook A5 6mm Rule 30 sheets (Lightweight and easy to carry)MUJI Twin-Tip Highlighter Pen (Yellow)
 
 
 There is no “write” way to code
 
 
 I hope, if nothing else, my little way of handwriting code with pencil and paper makes you evaluate the way you already plan and write code. I like knowing how other developers approach their work, and this is my way of giving you a peek into the way I do things.
 
 
 
 Again, nothing here is scientific or an exact art. But if you want to give handwritten code planning a try, here’s everything we’ve covered in a nice ordered list:
 
 
 
 Start by writing down (with sample data, if needed) the output of your code.Write an outline for the code. Please keep it to three steps for small projects or ones that are less complex.Use longhand notations. Developers writing for themselves can use shorthand notations as long as the writing is legible and makes sense to you when you refer to it later.When under a time constraint, consider writing the code that tackles the heart of the problem first. Later, write down a call to that code at the right place in your sequential code.If you feel confident, try writing pseudo code addressing the main idea.Use proper indentations and spaces — and be mindful of the paper’s width.
 
 
 
 That’s it! When you’re ready to try writing code by hand, I hope this article makes it easy for you to start. And if you’re sitting down for an exam or an interview, I hope this helps you focus on getting the questions right.
 
 Why (and How) I Write Code With Pencil and Paper originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>CSS Grid and Custom Shapes, Part 1</title>
         <link href="https://css-tricks.com/css-grid-and-custom-shapes-part-1/"/>
       <updated>2022-08-15T13:13:47.000Z</updated>
       <content type="text">In a previous article, I looked at CSS Grid’s ability to create complex layouts using its auto-placement powers. I took that one step further in another article that added a zooming hover effect to images in a grid layout. This time, I want to dive into another type of grid, one that works with shapes.
 
 
 
 
 
 
 
 Like, what if the images aren’t perfectly square but instead are shaped like hexagons or rhombuses? Spoiler alert: we can do it. In fact, we’re going to combine CSS Grid techniques we’ve looked at and drop in some CSS clip-path and mask magic to create fancy grids of images for just about any shape you can imagine!
 
 
 Let’s start with some markup
 
 
 Most of the layouts we are going to look at may look easy to achieve at first glance, but the challenging part is to achieve them with the same HTML markup. We can use a lot of wrappers, divs, and whatnot, but the goal of this post is to use the same and smallest amount of HTML code and still get all the different grids we want. After all, what’s CSS but a way to separate styling and markup? Our styling should not depend on the markup, and vice versa.
 
 
 
 This said, let’s start with this:
 
 
 
 &lt;div class&#x3D;&quot;gallery&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;!-- as many times as we want --&gt;
 &lt;/div&gt;
 
 
 
 A container with images is all that we need here. Nothing more!
 
 
 CSS Grid of Hexagons
 
 
 This is also sometimes referred to as a “honeycomb” grid.
 
 
 
 CodePen Embed Fallback
 
 
 
 There are already plenty of other blog posts out there that show how to make this. Heck, I wrote one here on CSS-Tricks! That article is still good and goes way deep on making a responsive layout. But for this specific case, we are going to rely on a much simpler CSS approach.
 
 
 
 First, let’s use clip-path on the images to create the hexagon shape and we place all of them in the same grid area so they overlap.
 
 
 
 .gallery {
   --s: 150px; /* controls the size */
   display: grid;
 }
 
 .gallery &gt; img {
   grid-area: 1/1;
   width: var(--s);
   aspect-ratio: 1.15;
   object-fit: cover;
   clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%);
 }
 
 
 
 clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%)
 
 
 
 Nothing fancy yet. All the images are hexagons and above each other. So it looks like all we have is a single hexagon-shaped image element, but there are really seven.
 
 
 
 CodePen Embed Fallback
 
 
 
 The next step is to apply a translation to the images to correctly place them on the grid.
 
 
 
 
 
 
 
 Notice that we still want one of the images to remain in the center. The rest are placed around it using CSS translate and good ol’ fashioned geometry. Here’s are the mock formulas I came up with for each image in the grid:
 
 
 
 translate((height + gap)*sin(0deg), (height + gap)*cos(0))
 translate((height + gap)*sin(60deg), (height + gap)*cos(60deg))
 translate((height + gap)*sin(120deg), (height + gap)*cos(120deg))
 translate((height + gap)*sin(180deg), (height + gap)*cos(180deg))
 translate((height + gap)*sin(240deg), (height + gap)*cos(240deg))
 translate((height + gap)*sin(300deg), (height + gap)*cos(300deg))
 
 
 
 A few calculations and optimization later (let’s skip that boring part, right?) we get the following CSS:
 
 
 
 .gallery {
   --s: 150px; /* control the size */
   --g: 10px;  /* control the gap */
   display: grid;
 }
 .gallery &gt; img {
   grid-area: 1/1;
   width: var(--s);
   aspect-ratio: 1.15;
   object-fit: cover;
   clip-path: polygon(25% 0%, 75% 0%, 100% 50% ,75% 100%, 25% 100%, 0 50%);
   transform: translate(var(--_x,0), var(--_y,0));
 }
 .gallery &gt; img:nth-child(1) { --_y: calc(-100% - var(--g)); }
 .gallery &gt; img:nth-child(7) { --_y: calc( 100% + var(--g)); }
 .gallery &gt; img:nth-child(3),
 .gallery &gt; img:nth-child(5) { --_x: calc(-75% - .87*var(--g)); }
 .gallery &gt; img:nth-child(4),
 .gallery &gt; img:nth-child(6) { --_x: calc( 75% + .87*var(--g)); }
 .gallery &gt; img:nth-child(3),
 .gallery &gt; img:nth-child(4) { --_y: calc(-50% - .5*var(--g)); }
 .gallery &gt; img:nth-child(5), 
 .gallery &gt; img:nth-child(6) { --_y: calc( 50% + .5*var(--g)); }
 
 
 
 Maybe that’ll be easier when we get real trigonometry functions in CSS!
 
 
 
 Each image is translated by the --_x and --_y variables that are based on those formulas. Only the second image (nth-child(2)) is undefined in any selector because it’s the one in the center. It can be any image if you decide to use a different order. Here’s the order I’m using:
 
 
 
 
 
 
 
 With only a few lines of code, we get a cool grid of images. To this, I added a little hover effect to the images to make things fancier.
 
 
 
 Guess what? We can get another hexagon grid by simply updating a few values.
 
 
 
 CodePen Embed Fallback
 
 
 
 If you check the code and compare it with the previous one you will notice that I have simply swapped the values inside clip-path and I switched between --x and --y. That’s all!
 
 
 CSS Grid of Rhombuses
 
 
 Rhombus is such a fancy word for a square that’s rotated 45 degrees.
 
 
 
 CodePen Embed Fallback
 
 
 
 Same HTML, remember? We first start by defining a 2×2 grid of images in CSS:
 
 
 
 .gallery {
   --s: 150px; /* controls the size */
 
   display: grid;
   gap: 10px;
   grid: auto-flow var(--s) / repeat(2, var(--s));
   place-items: center;
 }
 .gallery &gt; img {
   width: 100%; 
   aspect-ratio: 1;
   object-fit: cover;
 }
 
 
 
 The first thing that might catch your eye is the grid property. It’s pretty uncommonly used but is super helpful in that it’s a shorthand that lets you define a complete grid in one declaration. It’s not the most intuitive — and not to mention readable — property, but we are here to learn and discover new things, so let’s use it rather than writing out all of the individual grid properties.
 
 
 
 grid: auto-flow var(--s) / repeat(2,var(--s));
 
 /* is equivalent to this: */
 grid-template-columns: repeat(2, var(--s));
 grid-auto-rows: var(--s);
 
 
 
 This defines two columns equal to the --s variable and sets the height of all the rows to --s as well. Since we have four images, we will automatically get a 2×2 grid.
 
 
 
 Here’s another way we could have written it:
 
 
 
 grid-template-columns: repeat(2, var(--s));
 grid-template-rows: repeat(2, var(--s));
 
 
 
 …which can be reduced with the grid shorthand:
 
 
 
 grid: repeat(2,var(--s)) / repeat(2,var(--s));
 
 
 
 After setting the grid, we rotate it and the images with CSS transforms and we get this:
 
 
 
 CodePen Embed Fallback
 
 
 
 Note how I rotate them both by 45deg, but in the opposite direction.
 
 
 
 .gallery {
   /* etc. */
   transform: rotate(45deg);
 }
 .gallery &gt; img {
   /* etc. */
   transform: rotate(-45deg);
 }
 
 
 
 Rotating the images in the negative direction prevents them from getting rotated with the grid so they stay straight. Now, we apply a clip-path to clip a rhombus shape out of them.
 
 
 
 clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%)
 
 
 
 CodePen Embed Fallback
 
 
 
 We are almost done! We need to rectify the size of the image to make them fit together. Otherwise, they’re spaced far apart to the point where it doesn’t look like a grid of images.
 
 
 
 
 
 
 
 The image is within the boundary of the green circle, which is the inscribed circle of the grid area where the image is placed. What we want is to make the image bigger to fit inside the red circle, which is the circumscribed circle of the grid area.
 
 
 
 Don’t worry, I won’t introduce any more boring geometry. All you need to know is that the relationship between the radius of each circle is the square root of 2 (sqrt(2)). This is the value we need to increase the size of our images to fill the area. We will use 100%*sqrt(2) &#x3D; 141% and be done!
 
 
 
 .gallery {
   --s: 150px; /* control the size */
 
   display: grid;
   grid: auto-flow var(--s) / repeat(2,var(--s));
   gap: 10px;
   place-items: center;
   transform: rotate(45deg);
 }
 .gallery &gt; img {
   width: 141%; /* 100%*sqrt(2) &#x3D; 141% */
   aspect-ratio: 1;
   object-fit: cover;
   transform: rotate(-45deg);
   clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
 }
 
 
 
 Like the hexagon grid, we can make things fancier with that nice zooming hover effect:
 
 
 
 CodePen Embed Fallback
 
 
 CSS Grid of Triangular Shapes
 
 
 CodePen Embed Fallback
 
 
 
 You probably know by now that the big trick is figuring out the clip-path to get the shapes we want. For this grid, each element has its own clip-path value whereas the last two grids worked with a consistent shape. So, this time around, it’s like we’re working with a few different triangular shapes that come together to form a rectangular grid of images.
 
 
 
 The three images at the top
 
 
 
 The three images at the bottom
 
 
 
 We place them inside a 3×2 grid with the following CSS:
 
 
 
 .gallery {
   display: grid;
   gap: 10px; 
   grid-template-columns: auto auto auto; /* 3 columns */
   place-items: center;
 }
 .gallery &gt; img {
   width: 200px; /* controls the size */
   aspect-ratio: 1;
   object-fit: cover;
 }
 /* the clip-path values */
 .gallery &gt; img:nth-child(1) { clip-path: polygon(0 0, 50% 0, 100% 100% ,0 100%); }
 .gallery &gt; img:nth-child(2) { clip-path: polygon(0 0, 100% 0, 50% 100%); }
 .gallery &gt; img:nth-child(3) { clip-path: polygon(50% 0, 100% 0, 100% 100%, 0 100%); }
 .gallery &gt; img:nth-child(4) { clip-path: polygon(0 0, 100% 0, 50% 100%, 0 100%); }
 .gallery &gt; img:nth-child(5) { clip-path: polygon(50% 0, 100% 100%, 0% 100%); }
 .gallery &gt; img:nth-child(6) { clip-path: polygon(0 0, 100% 0 ,100% 100%, 50% 100%); } }
 
 
 
 Here’s what we get:
 
 
 
 CodePen Embed Fallback
 
 
 
 The final touch is to make the width of the middle column equal 0 to get rid of the spaces between the images. The same sort of spacing problem we had with the rhombus grid, but with a different approach for the shapes we’re using:
 
 
 
 grid-template-columns: auto 0 auto;
 
 
 
 I had to fiddle with the clip-path values to make sure they would all appear to fit together nicely like a puzzle. The original images overlap when the middle column has zero width, but after slicing the images, the illusion is perfect:
 
 
 
 
 
 
 CSS Pizza Pie Grid
 
 
 Guess what? We can get another cool grid by simply adding border-radius and overflow to our grid or triangular shapes. 🎉
 
 
 
 CodePen Embed Fallback
 
 
 CSS Grid of Puzzle Pieces
 
 
 This time we are going to play with the CSS mask property to make the images look like pieces of a puzzle.
 
 
 
 CodePen Embed Fallback
 
 
 
 If you haven’t used mask with CSS gradients, I highly recommend this other article I wrote on the topic because it’ll help with what comes next. Why gradients? Because that’s what we’re using to get the round notches in the puzzle piece shapes.
 
 
 
 Setting up the grid should be a cinch by now, so let’s focus instead on the mask part.
 
 
 
 CodePen Embed Fallback
 
 
 
 As illustrated in the above demo, we need two gradients to create the final shape. One gradient creates a circle (the green part) and the other creates the right curve while filling in the top part.
 
 
 
 --g: 6px; /* controls the gap */
 --r: 42px;  /* control the circular shapes */
 
 background: 
   radial-gradient(var(--r) at left 50% bottom var(--r), green 95%, #0000),
   radial-gradient(calc(var(--r) + var(--g)) at calc(100% + var(--g)) 50%, #0000 95%, red)
   top/100% calc(100% - var(--r)) no-repeat;
 
 
 
 Two variables control the shape. The --g variable is nothing but the grid gap. We need to account for the gap to correctly place our circles so they overlap perfectly when the whole puzzle is assembled. The --r variable controls the size of circular parts of the puzzle shape.
 
 
 
 
 
 
 
 Now we take the same CSS and update a few values in it to create the three other shapes:
 
 
 
 CodePen Embed Fallback
 
 
 
 We have the shapes, but not the overlapping edges we need to make them fit together. Each image is limited to the grid cell it’s in, so it makes sense why the shapes are sort of jumbled at the moment:
 
 
 
 
 
 
 
 We need to create an overflow by increasing the height/width of the images. From the above figure, we have to increase the height of the first and fourth images while we increase the width of the second and third ones. You have probably already guessed that we need to increase them using the --r variable.
 
 
 
 .gallery &gt; img:is(:nth-child(1),:nth-child(4)) {
   width: 100%;
   height: calc(100% + var(--r));
 }
 .gallery &gt; img:is(:nth-child(2),:nth-child(3)) {
   height: 100%;
   width: calc(100% + var(--r));
 }
 
 
 
 We are getting closer!
 
 
 
 CodePen Embed Fallback
 
 
 
 We created the overlap but, by default, our images either overlap on the right (if we increase the width) or the bottom (if we increase the height). But that’s not what we want for the second and fourth images. The fix is to use place-self: end on those two images and our full code becomes this:
 
 
 
 CodePen Embed Fallback
 
 
 
 Here is another example where I am using a conic gradient instead of a radial gradient. This gives us triangular puzzle pieces while keeping the same underlying HTML and CSS.
 
 
 
 CodePen Embed Fallback
 
 
 
 A last one! This time I am using clip-path and since it’s a property we can animate, we get a cool hover by simply updating the custom property that controls the shape.
 
 
 
 CodePen Embed Fallback
 
 
 Wrapping up
 
 
 That’s all for this first part! By combining the things we’ve already learned about CSS Grid with some added clip-path and mask magic, we were able to make grid layouts featuring different kinds of shapes. And we used the same HTML markup each time! And the markup itself is nothing more than a container with a handful of image elements!
 
 
 
 In the second part, we are going to explore more complex-looking grids with more fancy shapes and hover effects.
 
 
 
 I’m planning to take the demo of expanding image panels we made together in this other article:
 
 
 
 CodePen Embed Fallback
 
 
 
 …and transform it into a zig-zag image panels! And this is only one example among the many we will discover in the next article.
 
 
 
 
 
 
 
 CSS Grid and Custom Shapes, Part 1 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Quick Tip: Clear VS Code Cache for Open Files</title>
         <link href="https://css-tricks.com/quick-tip-clear-vs-code-cache-for-open-files/"/>
       <updated>2022-08-11T13:35:56.000Z</updated>
       <content type="text">If you use VS Code, you might have enabled the setting for re-opening a previously open file next time the app launches. I do. I like that.
 
 
 
 
 
 
 
 Hey, thanks for remembering, buddy! 🤗
 
 
 
 But sometimes you really, really don’t want that to happen.
 
 
 
 I recently ran into one of those times! I had to reinstall my local copy of this site and, with it, the 3GB+ database that accompanies it. Being a WordPress site and all, I needed to open up the SQL database file to search-and-replace some stuff.
 
 
 
 If you’ve ever tried to open a super duper large file in VS Code, then you know you might need to jiggle a few settings that increase the memory limit and all that. The app is super flexible like that. There’s even a nice extension that’ll both increase the memory and perform a search-and-replace on open.
 
 
 
 
 
 
 
 Anyway, that big ol’ database file crashed VS Code several times and I wound up finding another way to go about things. However, VS Code keeps trying to open that file and inevitably crashes even though I nuked the file. And that means I wait for the MacOS beachball of fun to spin around before the app crashes and I can reopen it again for reals.
 
 
 
 Well, I finally decided to fix that today and spent a little time searching around. One Stack Overflow thread suggests disabling extensions and increasing the memory limit via the command line. I’m glad that worked for some folks, but I had to keep looking.
 
 
 
 Another thread suggests clearing the app’s cache from the command palette.
 
 
 
 
 
 
 
 Nice, but no dice. 🎲
 
 
 
 I wound up going with a scorched earth strategy shared by Jie Jenn in a helpful YouTube video. You’ve gotta manually trash the cached files from VS Code. The video walks through it in Windows, but it’s pretty darn similar in MacOS. The VS Code cache is located in your user folder.
 
 
 
 
 
 
 
 Notice that I have the Backups folder highlighted there. Jie removed the files from the CachedData folder, but all that did was trigger a prompt for me to re-install the app. So, I took a risk and deleted what appeared to be a 3GB+ file in Backups. I showed that file the door and VS Code has been happy ever since.
 
 
 
 Ask me again in a week and maybe I’ll find out that I really screwed something up. But so far, so good!
 
 Quick Tip: Clear VS Code Cache for Open Files originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Designing for Long-Form Articles</title>
         <link href="https://css-tricks.com/designing-for-long-form-articles/"/>
       <updated>2022-08-10T14:30:01.000Z</updated>
       <content type="text">Designing a beautiful “article” is wrought with tons of considerations. Unlike, say, a homepage, a long-form article is less about designing an interface than it is designing text in a way that creates a relaxed and comfortable reading experience.
 
 
 
 That’s because articles deal with long-form content which, in turn, tends to be valued by a ”time on page” interaction with users. We want someone to read a complete narrative. There’s a natural space between the time someone lands on an article and reads all the words. And hopefully, that space is immersive enough to not only hold a user’s, but provoke thoughts, ideas, and, possibly, actions. At least that’s what I’m hoping as I have your attention and you make your way through the very article you’re reading.
 
 
 
 There’s a balance. On one hand, we hear that “no one reads the Internet.” On the other, a long-form article demands careful attention. Considering the current value of content marketing and the growing impatience in users, captivating readers for as long as possible should be a key concern. Let’s take a look at some best practices and examples of incredible article pages to get a better idea of what makes a visually appealing reading experience for long-form articles (without sacrificing user experience), and how we can replicate the effects.
 
 
 
 
 
 
 Quick wins
 
 
 Let me quickly list out what I think might already be obvious to many of you, but are effective things for content legibility:
 
 
 
 Increase the font size: We know that 16px is the default and is perfectly fine in many designs, but a larger font size is inviting in that it implies the user is free to lean back and settle in without having to angle forward with the screen in their face to read.Aim for characters per line: Very few people I know like to work harder than they need to, and that goes for reading too. Rather than using the full viewport width, try to narrow things down and balance that with your larger font size to get fewer characters on each line of text. Your sweet spot may vary, though many folks suggest somewhere between 45-75 characters per line to help limit how far the reader’s eye has to work to go from left to right. Chris has a bookmarklet to help count characters, but we also have the ch unit in CSS to get predictable results.Bump up the line height: A default line height is going to feel smashed. It’s funny, but more space between lines (up to a point, of course) is less work for eyes, which seems antithetical to the characters-per-line advice where we generally want eyes to travel a shorter distance. A line height between 1.2 and 1.5 seems to be a pretty typical range for long-form content.
 
 
 
 If you haven’t seen it before, Pierrick Calvez has a great “five-minute” guide to typography that packs in a bunch of low-hanging fruit like these.
 
 
 Design for extra breathing room
 
 
 You may be accustomed to designing “above the fold” where real estate is a prime commodity. That’s sort of like beach-front property in the web world because it’s where we’re used to packing in high-value things, like hero banners, calls to action, and anything else to help sell a thing. Above the fold can be a lot like a dense urban downtown with high traffic and high-rise buildings.
 
 
 
 Articles are different. They allow you to stretch out a bit. If we want to take the city development analogy a little further, articles have the acreage to lean into a “less is more” sort of design approach. That’s what makes seemingly small design choices — like type — so important to the overall experience.
 
 
 
 Check out the example below. The link underlines have a little more room to breathe (specifically, they appear below the descenders). This is actually something that you can enable sitewide but looks especially nice on article pages since it increases readability. That’s the sort of subtle design choice that contributes to extra breathing room.
 
 
 
 
 
 
 
 text-underline-position: under; is the line of CSS that makes this work. Naturally, text-decoration must be set to something other than none (underline in this case), too.
 
 
 
 The example above also features text-decoration-thickness, which alters the thickness of underlines (and other line types). You can use this CSS property to match a line’s thickness to a font’s size and/or weight.
 
 
 
 Here’s a full example:
 
 
 
 a {
   text-decoration: underline;
   text-decoration-thickness: 2px;
 
   /* or */
   text-decoration: underline 2px;
   text-underline-position: under;
 }
 
 
 
 But before you reach for the text-decoration shorthand, Šime Vidas has a few “gotchas” when it comes to using it that are worth reviewing.
 
 
 Leading into the content
 
 
 Drop caps are stylized letters that can be placed at the beginning of a document or document section. They were once used in Latin texts, but today they’re mostly used for decorative reasons.
 
 
 
 
 
 
 
 Personally, I think that drop caps hinder readability. However, they can be a nice way to “lead” a reader into the main content, and they shouldn’t introduce any serious accessibility issues as long as you’re using the ::first-letter pseudo-element. There are other (older) methods that involve more HTML and CSS as well as the use of ARIA attributes in order for the content to remain accessible.
 
 
 
 Using ::first-letter, the CSS would look something like this:
 
 
 
 /* select the first letter of the first paragraph */
 article &gt; p:first-child::first-letter {
   color: #903;
   float: left;
   font-family: Georgia;
   font-size: 75px;
   line-height: 60px;
   padding-top: 4px;
   padding-right: 8px;
   padding-left: 3px;
 }
 
 
 
 It sure would be nice if we could use the initial-letter property, but there’s pretty much no support for it at the time I’m writing this. If we had it, all that math for font size and line height would be calculated for us!
 
 
 
 CodePen challenged folks to show off their drop-cap-styling skills several years ago and you can see a whole bunch of neat examples from it in this collection.
 
 
 Skip to main content
 
 
 Screen readers allow users to skip to the main content as long as it wraps it within a &lt;main&gt; element. However, those who navigate websites by tabbing don’t benefit from this. Instead, we must create a “skip to main content” anchor link. This link is customarily hidden but revealed once the user makes their first tab (i.e. show on focus).
 
 
 
 
 
 
 
 It would look something like this:
 
 
 
 &lt;!-- anchor --&gt;
 &lt;a id&#x3D;&quot;skip-link&quot; href&#x3D;&quot;#main&quot;&gt;Skip to main content&lt;/a&gt;
 
 &lt;!-- target --&gt;
 &lt;main class&#x3D;&quot;main&quot;&gt;
   &lt;!-- main content --&gt;
 &lt;/main&gt;
 
 
 
 #skip-link {
   position: absolute; /* remove it from the flow */
   transform: translateX(-100%); /* move it off-screen so that it appears hidden but remains focusable */
 }
 #skip-link:focus {
   position: unset; /* insert it back into the flow */
   transform: unset; /* move it back onto the screen */
 }
 
 .main {
   scroll-margin: 1rem; /* adds breathing room above the scroll target */
 }
 
 
 
 There are other ways to go about it, of course. Here are a couple of deeper dives on creating skip links.
 
 
 
     		
     
       
 
   
     
                 
         Article
       
 
     on
 
     Aug 3, 2021  
 
   
     
       A Deep Dive on Skipping to Content    
   
 
   
       
       design design principles editorial typography    
   
   
     
           
   
     
       Paul Ratcliffe    
   
 
 
 
 
   
     
                 
         Article
       
 
     on
 
     Aug 25, 2021  
 
   
     
       How to Create a “Skip to Content” Link    
   
 
   
       
       design design principles editorial typography    
   
   
     
           
   
     
       Paul Ryan    
   
 
 
     
   
 
 
 Seamless visuals
 
 
 I love the illustrations in this article. Despite how incredible they look, they don’t demand too much cognitive attention. They introduce brief moments of delight but also suggest that the article itself has something more important to say. Partly, this comes down to the use of transparency, whereas rectangular images capture more negative space and therefore demand more attention (which is fine if that’s the desired effect and images are crucial to the story).
 
 
 
 
 
 
 
 However, it’s important to know that the images aren’t actually transparent at all, but instead are non-transparent JPEGs with the same background color as the content. I’m presuming that’s to keep the size of the images smaller compared to PNGs that support transparency.
 
 
 
 
 
 
 
 The downside to “faking” a transparent background like this is that it would require additional trickery (and maintenance) to support a dark mode UI if your site happens to offer one. If the illustrations are pretty flat and simple, then SVG might be the way to go instead since it’s small, scalable, and capable of blending into whatever background it’s on.
 
 
 
 But if you’re bound to using raster images and would rather work with PNG files for transparency, you’ll want to look into using responsive images and the loading&#x3D;&quot;lazy&quot; attribute for faster loading times.
 
 
 Put the focus on the type and semantics
 
 
 You may have very little say over how or where someone reads content on the web these days. Whether the user receives it in an RSS feed, gets it delivered by email, sees it copy-and-pasted from a colleague, finds it on a scraped site, or whatnot, your content might look different than you prefer. You could design what you think is the most gorgeous article in all the land and the user still might smash that Reader Mode button to your dismay.
 
 
 
 That’s ok! The discoverability of content is very much as important as the design of it, and many users have their own ways of discovering content and preferences for what makes a good reading experience.
 
 
 
 But there are reasons why someone would want a Reader Mode. For one, it’s like “not seeing any CSS” at all. By that, I mean Safari’s Reader Mode or Brave SpeedReader, which use machine learning to detect articles. There’s no fetching or executing of CSS, JavaScript, or non-article images, which boosts performance and also blocks ads and tracking.
 
 
 
 
 
 
 
 This sort of “brute minimalism” puts the focus on the content rather than the styles. So, you might actually want to embrace a browser’s opinionated reading styles specifically for that purpose.
 
 
 
 The way to do that is not by using CSS, but by paying closer attention to your HTML. Reader modes work best with markup that uses simple, semantic, article-related HTML. You’ve got to do more than simply slapping &lt;article&gt; tags around the article to get the most from it.
 
 
 
 You might just find that a minimal design that emphasizes legibility over slickness is actually a good strategy to use in your site’s design. I’d strongly suggest reading Robin’s post on the “smallest CSS” for a solid reading experience.
 
 
 Roundup of long-form articles!
 
 
 I’ve shared a lot of what I think makes for a great reading experience for long-form articles on the web. But seeing is believing and I’ve rounded up a bunch of examples that showcase what we’ve covered.
 
 
 
 Polygon uses a strong, provacative visual to hook readers into the ain content. Notice how the drop cap, larger font size, and increased line height make this feel like a page you can sit back with and relax.The TASTE website uses transparent images that blend into the background color of the content. There’s plenty of space between elements and bold accents — like thick borders and a heavy drop cap — pull the reader’s eye down the page.The Outline is a prime example of minimalism. Notice how something as subtle as a squiggly horizontal rule can be an eye-catching embellishment when there are fewer things competing for attention.The brutalist style of the Dropbox blog is probably a controversial one. The colors, fonts, and use of space are all over the place, and the content being floated to the right just feels unfamiliar. But does it break any design ‘rules’? Nope. I could grow to like it in time, especially in a milder form.Urban Beardsman’s design is extremely linear. As somebody that has difficulty concentrating and is easily distracted by sidebars, in-article CTA boxes, and even blockquotes, I very much enjoy how easy it is to read this blog like a book. The perfect example of “less is more.”There’s nothing unique about the GoSquared blog, but it managed to include pretty much all of the things we discussed in the article — a better underline design, seamless images, and some very readable typography. Quite impressive.The Smart Passive Income blog proves how far you can get just by choosing a legible font and using readable font sizes, line heights, letter spacings, and paragraph spacings.Recipe pages are consistently sucky, but not Little Fat Boy. The lack of sameness throughout the page makes it easy jump to different parts of the recipe without getting lost. Plus, the ingredients are pinned to the top-right for your convenience.
 
 Designing for Long-Form Articles originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Committing CSS Crimes</title>
         <link href="https://css-tricks.com/committing-css-crimes/"/>
       <updated>2022-08-09T13:01:44.000Z</updated>
       <content type="text">The time for CSS-Tricks is over. Now is the time for CSS Crimes!
 
 
 
 In this current landscape of content service providers, users are often limited to expressing themselves in text, links, and images. Sanitization rules tend to strip out HTML, JavaScript, and various attributes.
 
 
 
 Social media service Cohost allows users to have greater freedom with markup and inline styles than we may be typically used to. Some users have taken advantage of this freedom to commit CSS Crimes! It has resulted in creative recreations of familiar interfaces and interactive games by using properties in unconventional ways.
 
 
 
 
 
 
 
 Blackle Mori created a contraption where pulling a handle slowly turns a series of gears, pulleys, and chains. Eventually an aperture opens to reveal the site’s mascot (“eggbug”) and the proclamation “Good Job!”. I have stared at this in Developer Tools and it is an amazing combination of grid, resize, transform, and calc(). I ended up adding a border to all &lt;div&gt;s to try and get a better understanding of how each individual element moved.
 
 
 
 Several other CSS Crimes use resize to allow viewers rudimentary click and drag functionality.Blackle Mori explains this technique here!Other CSS Crimes create limited interaction through &lt;details&gt; and &lt;summary&gt;.Blackle Mori explains this technique here!Some members of the community have taken Andrew Siller’s technique from “Night of the Living GIF: Making Interactive Multiplayer Experiences” to create a multiplayer Pokemon experience!
 
 
 
 There have been situations in the past where I have been restricted from using the full toolkit of HTML, JavaScript, and CSS. There have been many instances of using decorative CSS shapes to get around images. I have used :hover as a workaround for mouseenter and mouseleave. I have used input:checked as a sibling selector for toggling.
 
 
 
 While CSS Crimes are probably not something you would want to employ on a regular basis, we should embrace experiments within constraints that can foster creative solutions.
 To Shared Link — Permalink on CSS-Tricks
 Committing CSS Crimes originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Zooming Images in a Grid Layout</title>
         <link href="https://css-tricks.com/zooming-images-in-a-grid-layout/"/>
       <updated>2022-08-08T12:55:49.000Z</updated>
       <content type="text">Creating a grid of images is easy, thanks to CSS Grid. But making the grid do fancy things after the images have been placed can be tricky to pull off.
 
 
 
 Say you want to add some fancy hover effect to the images where they grow and zoom beyond the rows and columns where they sit? We can do that!
 
 
 
 
 
 
 
 CodePen Embed Fallback
 
 
 
 Cool, right? If you check the code, you won’t find any JavaScript, complex selectors, or even magic numbers. And this is only one example among many we will explore!
 
 
 Building the grid
 
 
 The HTML code to create the grid is as simple as a list of images within a container. We don’t need more than that.
 
 
 
 &lt;div class&#x3D;&quot;gallery&quot;&gt;
   &lt;img&gt;
   &lt;img&gt;
   &lt;img&gt;
   &lt;!-- etc. --&gt;
 &lt;/div&gt;
 
 
 
 For the CSS, we first start by setting the grid using the following:
 
 
 
 .gallery {
   --s: 150px; /* controls the size */
   --g: 10px;  /* controls the gap */
 
   display: grid;
   gap: var(--g);
   width: calc(3*var(--s) + 2*var(--g)); /* 3 times the size plus 2 times the gap */
   aspect-ratio: 1;
   grid-template-columns: repeat(3, auto);
 }
 
 
 
 In short, we have two variables, one that controls the size of the images and one that sets the size of the gap between images. aspect-ratio helps keep things in proportion.
 
 
 
 You might be wondering why we are only defining three columns but no rows. No, I didn’t forget the rows — we just don’t need to explicitly set them. CSS Grid is capable of automatically placing items on implicit rows and columns, meaning we get as many rows as needed to any number of images we throw at it. We can explicitly define the rows instead but we need to add grid-auto-flow: column to make sure the browser will create the needed columns for us.
 
 
 
 Here is an example to illustrate both cases. The difference is that one flows in a row direction an the other in a column direction.
 
 
 
 CodePen Embed Fallback
 
 
 
 Check out this other article I wrote for more about the implicit grids and the auto-placement algorithm.
 
 
 
 Now that we have our grid, it’s time to style the images:
 
 
 
 .gallery &gt; img {
   width: 0;
   height: 0;
   min-height: 100%;
   min-width: 100%;
   object-fit: cover;
 }
 
 
 
 The hover effect we’re making relies on this CSS. It probably looks weird to you that we’re making images that have both no width or height but have a minimum width and height of 100%. But you will see that it’s a pretty neat trick for what we are trying to achieve.
 
 
 
 What I’m doing here is telling the browser that the images need to have 0 width and height but also need to have a minimum height equal to 100%… but 100% of what? When using percentages, the value is relative to something else. In this case, our image is placed inside a grid cell and we need to know that size to know what’s 100% is relative to.
 
 
 
 The browser will first ignore min-height: 100% to calculate the size of the grid cells, but it will use the height: 0 in its calculation. That means our images will not contribute to the size of the grid cells… because they technically have no physical size. This will result in three equal columns and rows that are based on the size of the grid (which we defined on the .gallery’s width and aspect-ratio). The height of each grid cell is nothing but the variable --s we defined (same for the width).
 
 
 
 
 
 
 
 Now that we have the dimensions of our grid’s cells, the browser will use it with min-height: 100% (and min-width: 100%) which will force the images to completely fill the space of each grid cell. The whole thing may look a bit confusing but the main idea is to make sure that the grid defines the size of the images rather than the other way around. I don’t want the image to define the size of the grid and you will understand why after adding the hover effect.
 
 
 Creating the hover effect
 
 
 What we need to do is increase the scale of the images when they’re hovered. We can do that by adjusting an image’s width and height on :hover:
 
 
 
 .gallery {
   --f: 1.5; /* controls the scale factor */
 }
 
 .gallery img:hover{
   width:  calc(var(--s) * var(--f));
   height: calc(var(--s) * var(--f));
 }
 
 
 
 I added a new custom variable, --f, to the mix as a scale factor to control the size on hover. Notice how I’m multiplying the size variable, --s, by it to calculate the new image size.
 
 
 
 But you said that the image size needs to be 0. What is going on? I am lost…
 
 
 
 What I said is still true but I am making an exception for the hovered image. I am telling the browser that only one image will have a size that’s not equal to zero — so it will contribute to the dimension of the grid — while all the others remain equal to 0.
 
 
 
 
 
 
 
 The left side shows the grid in its natural state without any hovered images, which is what the right side is showing. All the grid cells on the left side are equal in size since all the images have no physical dimensions.
 
 
 
 On the right side, the second image in the first row is hovered, which gives it dimensions that affect the grid cell’s size. The browser will make that specific grid cell bigger on hover, which contributes to the overall size. And since the size of the whole grid is set (because we set a fixed width on the .gallery), the other grid cells will logically respond by becoming smaller in order to keep the .gallery‘s overall size in tact.
 
 
 
 That’s our zoom effect in action! By increasing the size of only one image we affect the whole grid configuration, and we said before that the grid defines the size of the images so that each image stretches inside its grid cell to fill all the space.
 
 
 
 To this, we add a touch of transition and use object-fit to avoid image distortion and the illusion is perfect!
 
 
 
 I know that the logic behind the trick is not easy to grasp. Don’t worry if you don’t fully understand it. The most important is to understand the structure of the code used and how to modify it to get more variations. That’s what we will do next!
 
 
 Adding more images
 
 
 We created a 3×3 grid to explain the main trick, but you have probably guessed that we there’d no need to stop there. We can make the number of columns and rows variables and add as many images as we want.
 
 
 
 CodePen Embed Fallback
 
 
 
 .gallery {
   --n: 3; /* number of rows*/
   --m: 4; /* number of columns */
   --s: 150px; /* control the size */
   --g: 10px;  /* control the gap */
   --f: 1.5;   /* control the scale factor */
 
   display: grid;
   gap: var(--g);
   width:  calc(var(--m)*var(--s) + (var(--m) - 1)*var(--g));
   height: calc(var(--n)*var(--s) + (var(--n) - 1)*var(--g));
   grid-template-columns: repeat(var(--m),auto);
 }
 
 
 
 We have two new variables for the number of rows and columns. Then we simply define the width and height of our grid using them. Same for grid-template-columns which uses the --m variable. And just like before, we don’t need to explicitly define the rows since the CSS Grid’s auto-placement feature will do the job for us no matter how many image elements we’re using.
 
 
 
 Why not different values for the width and height? We can do that:
 
 
 
 CodePen Embed Fallback
 
 
 
 .gallery {
   --n: 3; /* number of rows*/
   --m: 4; /* number of columns */
   --h: 120px; /* control the height */
   --w: 150px; /* control the width */
   --g: 10px;  /* control the gap */
   --f: 1.5;   /* control the scale factor */
 
   display: grid;
   gap: var(--g);
   width:  calc(var(--m)*var(--w) + (var(--m) - 1)*var(--g));
   height: calc(var(--n)*var(--h) + (var(--n) - 1)*var(--g));
   grid-template-columns: repeat(var(--m),auto);
 }
 
 .gallery img:hover{
   width:  calc(var(--w)*var(--f));
   height: calc(var(--h)*var(--f));
 }
 
 
 
 We replace --s with two variables, one for the width, --w, and another one for the height, --h. Then we adjust everything else accordingly.
 
 
 
 So, we started with a grid with a fixed size and number of elements, but then we made a new set of variables to get any configuration we want. All we have to do is to add as many images as we want and adjust the CSS variables accordingly. The combinations are limitless!
 
 
 A full-screen gallery of images
 
 
 What about a full-screen version? Yes, that’s also possible. All we need is to know what values we need to assign to our variables. If we want N rows of images and we want our grid to be full screen, we first need to solve for a height of 100vh:
 
 
 
 var(--n) * var(--h) + (var(--n) - 1) * var(--g) &#x3D; 100vh
 
 
 
 Same logic for the width, but using vw instead of vh:
 
 
 
 var(--m) * var(--w) + (var(--m) - 1) * var(--g) &#x3D; 100vw
 
 
 
 We do the math to get:
 
 
 
 --w: (100vw - (var(--m) - 1) * var(--g)) / var(--m)
 --h: (100vh - (var(--n) - 1) * var(--g)) / var(--n)
 
 
 
 Done!
 
 
 
 CodePen Embed Fallback
 
 
 
 It’s the same exact HTML but with some updated variables that change the grid’s sizing and behavior.
 
 
 
 Note that I have omitted the formula we previously set on the .gallery‘s width and height and replaced them with 100vw and 100vh, respectively. The formula will give us the same result but since we know what value we want, we can ditch all that added complexity.
 
 
 
 We can also simplify the --h and --w by removing the gap from the equation in favor of this:
 
 
 
 --h: calc(100vh / var(--n)); /* Viewport height divided by number of rows */
 --w: calc(100vw / var(--m)); /* Viewport width divided by number of columns */
 
 
 
 This will make the hovered image grow a bit more than the previous example, but it is no big deal since we can control the scale with the --f variable we’re using as a multiplier.
 
 
 
 And since the variables are used in one place we can still simplify the code by removing them altogether:
 
 
 
 CodePen Embed Fallback
 
 
 
 It’s important to note this optimization applies only to the full-screen example and not to the examples we’ve covered. This example is a particular case where we can make the code lighter by removing some of the complex calculation work we needed in the other examples.
 
 
 
 We actually have everything we need to create the popular pattern of expanding panels:
 
 
 
 CodePen Embed Fallback
 
 
 Let’s dig even deeper
 
 
 Did you notice that our scale factor can be less than 1? We can define the size of the hovered image to be smaller than --h or --w but the image gets bigger on hover.
 
 
 
 The initial grid cell size is equal to --w and --h, so why do a smaller values make the grid cell bigger? Shouldn’t the cell get smaller, or at least maintain its initial size? And what is the final size of the grid cell?
 
 
 
 We need to dig deeper into how the CSS Grid algorithm calculates the size of the grid cells. And this is involves understanding CSS Grid’s default stretch alignment.
 
 
 
 Here’s an example to understand the logic.
 
 
 
 CodePen Embed Fallback
 
 
 
 On the left side of the demo, I defined a two-column with auto width. We get the intuitive result: two equal columns (and two equal grid cells). But the grid I set up on the right side of the demo, where I am updating the alignment using place-content: start, appears to have nothing.
 
 
 
 DevTools helps show us what’s really happening in both cases:
 
 
 
 
 
 
 
 In the second grid, we have two columns, but their widths equal zero, so we get two grid cells that are collapsed at the top-left corner of the grid container. This is not a bug but the logical result of the grid’s alignment. When we size a column (or row) with auto, it means that its content dictates its size — but we have an empty div with no content to make room for.
 
 
 
 But since stretch is the default alignment and we have enough space inside our grid, the browser will stretch both grid cells equally to cover all that area. That’s how the grid on the left winds up with two equal columns.
 
 
 
 From the specification:
 
 
 
 Note that certain values of justify-content and align-content can cause the tracks to be spaced apart (space-around, space-between, space-evenly) or to be resized (stretch).
 
 
 
 Note the “to be resized” which is the key here. In the last example, I used place-content which is the shorthand for justify-content and align-content
 
 
 
 And this is buried somewhere in the Grid Sizing algorithm specs:
 
 
 
 This step expands tracks that have an auto max track sizing function by dividing any remaining positive, definite free space equally amongst them. If the free space is indefinite, but the grid container has a definite min-width/height, use that size to calculate the free space for this step instead.
 
 
 
 “Equally” explains why we wind up with equal grid cells, but it applies to “the free space” which is very important.
 
 
 
 Let’s take the previous example and add content to one of the divs:
 
 
 
 CodePen Embed Fallback
 
 
 
 We added a square 50px image. Here’s an illustration of how each grid in our example responds to that image:
 
 
 
 
 
 
 
 In the first case, we can see that the first cell (in red) is bigger than the second one (in blue). In the second case, the size of the first cell changes to fit the physical size of the image while the second cell remains with no dimensions. The free space is divided equally, but the first cell has more content inside which makes it bigger.
 
 
 
 This is the math to figure out our free space:
 
 
 
 (grid width) - (gap) - (image width) &#x3D; (free space)
 200px - 5px - 50px &#x3D; 145px 
 
 
 
 Divided by two — the number of columns — we get a width of 72.5px for each column. But we add the size of the image, 50px, to the first column which leaves us with one column at 122.5px and the second one equal to 72.5px.
 
 
 
 The same logic applies to our grid of images. All the images have a size equal to 0 (no content) while the hovered image contributes to size — even if it’s just 1px — making its grid cell bigger than the others. For this reason, the scale factor can be any value bigger than 0 even decimals between 0 and 1.
 
 
 
 To get the final width of the grid cells, we do the same calculation to get the following:
 
 
 
 (container width) - (sum of all gaps) - (hovered image width) &#x3D; (free space)
 
 
 
 The width of container is defined by:
 
 
 
 var(--m)*var(--w) + (var(--m) - 1)*var(--g)
 
 
 
 …and all the gaps are equal to:
 
 
 
 (var(--m) - 1)*var(--g)
 
 
 
 …and for the hovered image we have:
 
 
 
 var(--w)*var(--f)
 
 
 
 We can calculate all of that with our variables:
 
 
 
 var(--m)*var(--w) - var(--w)*var(--f) &#x3D; var(--w)*(var(--m) - var(--f))
 
 
 
 The number of columns is defined by --m ,so we divide that free space equally to get:
 
 
 
 var(--w)*(var(--m) - var(--f))/var(--m)
 
 
 
 …which gives us the size of the non-hovered images. For hovered images, we have this:
 
 
 
 var(--w)*(var(--m) - var(--f))/var(--m) + var(--w)*var(--f)
 var(--w)*((var(--m) - var(--f))/var(--m) + var(--f))
 
 
 
 If we want to control the final size of the hovered image, we consider the above formula to get the exact size we want. If, for example, we want the image to be twice as big:
 
 
 
 (var(--m) - var(--f))/var(--m) + var(--f) &#x3D; 2
 
 
 
 So, the value of our scale multiplier, --f, needs to be equal to:
 
 
 
 var(--m)/(var(--m) - 1)
 
 
 
 For three columns we will have 3/2 &#x3D; 1.5 and that’s the scale factor I used in the first demo of this article because I wanted to make the image twice as big on hover!
 
 
 
 The same logic applies to the height calculation and in case we want to control both of them independently we will need to consider two scale factors to make sure we have a specific width and height on hover.
 
 
 
 .gallery {
   /* same as before */
    --fw: 1.5; /* controls the scale factor for the width */
    --fh: 1.2; /* controls the scale factor for the height */
 
   /* same as before */
 }
 
 .gallery img:hover{
   width:  calc(var(--w)*var(--fw));
   height: calc(var(--h)*var(--fh));
 }
 
 
 
 Now, you know all the secrets to create any kind of image grid with a cool hover effect while also having control of the sizing you want using the math we just covered.
 
 
 Wrapping up
 
 
 In my last article, we created a complex-looking grid with a few lines of CSS that put CSS Grid’s implicit grid and auto-placement features to use. In this article, we relied on some CSS Grid sizing trickery to create a fancy grid of images that zoom on hover and cause the grid to adjust accordingly. All of this with a simplified code that is easy to adjust using CSS variables!
 
 
 
 In the next article, we will play with shapes! We will combine CSS grid with mask and clip-path to get fancy grid of images.
 
 Zooming Images in a Grid Layout originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How I Added Scroll Snapping To My Twitter Timeline</title>
         <link href="https://css-tricks.com/how-i-added-scroll-snapping-to-my-twitter-timeline/"/>
       <updated>2022-08-05T13:10:09.000Z</updated>
       <content type="text">CSS Scroll Snap allows websites to snap the web page or any other scroll container to a specific scroll position when the user performs a scrolling operation. This feature has been supported in all modern browsers for over two years, but many websites that could benefit from it are still not using it.
 
 
 
 Scroll snapping is probably most associated with horizontal carousels (see Chris’s CSS-only approach) and particular web pages divided into full-screen slides. But why stop there? I believe that snapping can improve the scrolling experience on any web page that lays out items in a grid or feed.
 
 
 
 
 
 
 
 For example, most shopping websites show products in a grid. Ideally, the user would like to jump between the grid rows with minimal effort. The user can press Space to scroll the page by roughly one screen (viewport height), but depending on the height of the grid rows, the scroll position will eventually get “out of sync” with the grid, and the user will have to re-adjust it manually.
 
 
 
 
 
 
 
 
 
 If we add scroll snapping to this page, the user can consistently scroll to the next row with the Space key (pressing Shift + Space will scroll to the previous row). It’s pretty effortless.
 
 
 
 
 
 
 
 
 
 I think that scroll snapping would be a welcome addition to this website. And it’s not even that complicated to implement. The CSS code that I used for this example is relatively simple:
 
 
 
 html {
   scroll-snap-type: y proximity;
 }
 
 .product-item {
   scroll-snap-align: start;
   scroll-margin-top: 75px; /* height of web page’s sticky header */
 }
 
 
 
 You don’t have to wait if a website you visit regularly hasn’t yet added scroll snapping and you think it would improve your scrolling experience. You can add scroll snapping yourself — with user styles.
 
 
 Adding user styles to websites
 
 
 In the video above, you can see that I selected a user.css file in Safari’s advanced preferences. This file is a user style sheet. It contains CSS styles that I’ve written, stored in a local .css file, and added to Safari. These “user styles” are then applied to every web page I open in Safari.
 
 
 
 Chrome and Firefox do not allow users to select a user style sheet. Firefox supported a similar feature called userContent.css in the past, but that feature was deprecated and disabled by default in 2019. I recommend the Stylus browser extension for these two browsers (and other Chromium-based browsers).
 
 
 
 One significant advantage of Stylus is that it allows you to write user styles for specific websites and URLs. Safari’s user style sheet applies to all websites, but this can be worked around, e.g., by using the new :has() pseudo-class to create selectors that only match specific websites.
 
 
 
 The Stylus extension has been reviewed by both Chrome and Firefox teams and received a badge that denotes high standards.
 
 
 
 The CSS Cascading module defines a User Origin for styles the user adds. Safari’s user style sheet belongs to this origin, but the Stylus extension injects user styles to the Author Origin, where the website’s style sheets live. Specifically, Stylus inserts user styles directly to the page via a &lt;style&gt; element at the end of &lt;html&gt; which makes it the final style sheet on the page. Technically, this means styles added via Stylus are classified as author styles since they’re not in the User Origin, but I will continue to call them user styles because the user adds them.
 
 
 
 However, it’s worth keeping this distinction in mind because it affects the cascade. When selector specificity is equal, a real user style is weaker than the page’s own style. This makes user styles an excellent fit for user defaults. Under the same conditions, a style added via Stylus is stronger than the page‘s style, so Stylus cannot as easily be used to define user defaults.
 
 
 
 If we add !important to the mix, both real user styles and styles added via Stylus are stronger than the page’s styles. So when you want to impose your user styles on a website, it doesn’t matter if you use Safari’s “Style sheet” option or the Stylus extension. Your !important styles will win either way.
 
 
 
 In the next section, I will use a set of !important user styles to enforce scroll snapping on the timeline page of Twitter’s website. My goal is to speed up the process of reading my Twitter timeline by avoiding awkward scroll positions where the topmost tweet is only partially on screen.
 
 
 Scroll snap for Twitter’s timeline
 
 
 After some experimentation, I’ve settled on the following CSS code. These styles work well in Firefox, but I’ve experienced some issues in Chrome and Safari. I will describe these issues in more detail later in the article, but for now, let’s focus on the behavior in Firefox.
 
 
 
 html {
   scroll-snap-type: y mandatory !important;
 }
 
 /* tweets in the timeline are &lt;article&gt; elements */
 article {
   scroll-snap-align: start !important;
 }
 
 /* un-stick the sticky header and make it “snappable” as well */
 [aria-label&#x3D;&quot;Home timeline&quot;] &gt; :first-child {
   position: static !important;
   scroll-snap-align: start !important;
 }
 
 /* hide the “new Tweets available” floating toast notification */
 [aria-label&#x3D;&quot;New Tweets are available.&quot;] {
   display: none !important;
 }
 
 
 
 It is necessary to add !important to each declaration because all the user styles must win over the web page’s own styles for our custom scroll snapping implementation to work correctly. I wish that instead of repeatedly writing !important, I could just put my user styles in an “important layer,” but such a CSS feature does not exist (yet).
 
 
 
 Watch the video below to see my scroll snap user styles in action. Notice how each press on the Space key scrolls the next set of tweets into view, and the first tweet of each set is aligned to the top edge of the viewport. This allows me to read my timeline more quickly. When I need to go back to the previous set of tweets, I can press Shift + Space.
 
 
 
 
 
 
 
 
 
 What I like about this type of scroll snapping is that it allows me to predict how far the page will scroll whenever I press Space. Each scroll distance equals the combined heights of the visible tweets that are entirely on the screen. In other words, the partially visible tweet at the bottom of the screen will move to the top of the screen, which is precisely what I want.
 
 
 
 I know in advance that pressing Space will scroll Dave’s tweet to the top of the screen.
 
 
 
 To try out my scroll snap user styles on your own Twitter timeline, follow these steps:
 
 
 
 Install the Stylus extension with Firefox Add-ons or the Chrome Web Store.Navigate to your Twitter timeline at https://twitter.com/home.Click the Stylus icon in the browser’s toolbar and click “this URL” in the pop-up.Stylus will open a code editor in a new browser tab. Copy-paste my scroll snap user styles into the editor and press the Save button in the sidebar on the left. The styles will be applied to your Twitter timeline immediately (no need to reload the page).You can update the styles at any time. Click the Stylus icon and the Pencil icon to open the editor again.
 
 
 Inability to override snapping
 
 
 My implementation of scroll snapping for Twitter’s timeline has one major flaw. If a tweet is taller than the viewport, it is impossible to scroll the page to reveal the bottom part of that tweet (e.g., if you want to like or retweet that tweet) because the browser forcefully snaps the page to show the top of the tweet (or the top of the following tweet).
 
 
 
 
 
 
 
 
 
 The severity of this problem depends on the user’s display. Viewing Twitter’s timeline on a large desktop monitor at a small page zoom factor, you may not encounter any tweets taller than the viewport.
 
 
 
 I have asked the CSS Working Group if it would be possible to add a mechanism allowing the user to override the browser’s mandatory scroll snapping. I should probably mention that this problem could, at least in theory, be resolved by switching from mandatory to proximity snapping. I’ve tested proximity snapping in Chrome and Firefox, and I found it inconsistent and confusing. The browser would often snap when I didn’t expect it to, and vice versa. Maybe Twitter’s code is interfering with the proximity algorithm, the browsers are still a bit buggy, or perhaps I’m just “scrolling it wrong,” if that’s even possible. I don’t know.
 
 
 
 But the main reason why I went with mandatory snapping is that I wanted to avoid situations where the topmost tweet is only partially on screen after a scroll. The type of fast-scrolling between sets of tweets that I’ve shown in the video above is only possible with mandatory snapping.
 
 
 
 If you, like me, prefer mandatory snapping, I can suggest the following two workarounds for the “tall tweet” problem:
 
 
 
 You can open the tweet on its own page and return to the timeline afterward.If you only want to click the Like or Retweet buttons, you can Shift-click the tweet to select it and then press L to like it, or T followed by Enter to retweet it.
 
 
 Issues in Chrome and Safari
 
 
 My scroll snap user styles produce noticeably different scroll snapping behaviors in Chrome, Safari, and Firefox. Those differences are in part since the exact implementation of the snapping mechanism is left up to the browser:
 
 
 
 The CSS Scroll Snap Module intentionally does not specify nor mandate any precise animations or physics used to enforce snap positions; this is left up to the user agent.
 
 
 
 The current version of Safari has a bug that prevents scroll snapping from working correctly on the Twitter timeline. I have reported this bug.
 
 
 
 In Chrome, I have encountered the following problems:
 
 
 
 The scrolling operations animate inconsistently. Sometimes the animation is slow, sometimes it’s instant, and sometimes it starts slow but is then cut short. I found this irritating.The scrolling operations animate too slowly in general. I performed a test in Chrome and Firefox (20 Space presses), and it took me 70% more time to cover the same distance on my Twitter timeline in Chrome than in Firefox (18.5 seconds in Chrome vs. 11 seconds in Firefox).When I scroll using my laptop’s trackpad, the page flickers a lot. When I attempt to scroll fast by holding down the Space key, the page scrolls very slowly and oscillates. I suspect that both issues are caused by the same algorithm. It seems that Chrome re-snaps at a very high rate in these cases. I have reported this bug.
 
 
 
 These browser bugs and differences between browsers can be a problem for websites considering implementing scroll snapping. For example, a web developer might hold back because they don’t like how scroll snapping behaves in one particular browser. Browsers can mitigate this problem by becoming more interoperable. In fact, Scroll Snap is one of the areas of focus of the cross-browser Interop 2022 effort.
 
 
 
 Another way the situation could be improved is by introducing new CSS properties that would make scroll snapping more configurable. This could include the duration of the snapping animation, the length of the proximity threshold for snapping, and a mechanism to override mandatory snapping.
 
 
 To snap or not to snap?
 
 
 I’ve been using my scroll snap user styles on Twitter’s timeline for a couple of weeks, and I don’t want to go back. The ability to quickly flip through my feed with only the Space key is just on another level.
 
 
 
 However, I consider this an advanced feature that probably isn’t for everyone. There’s a reason why I’ve enabled it only on the timeline (/home path) and nowhere else on Twitter’s website. Snapping is a significant change in how the page scrolls, and it takes some time to get used to. It can work great for a specific use case, but it can also get in the way and frustrate the user.
 
 
 
 Websites with feeds should therefore consider offering scroll snapping only as an optional feature, after careful consideration and plenty of testing in different browsers and with different input methods (mouse, keyboard, trackpad, touch screen, etc.).
 
 
 Before you go…
 
 
 Finally, I highly recommend installing and trying out the Stylus browser extension. Web developers (or anyone who knows CSS) have the power to style any website in their browser. You can apply minor improvements and fixes to your favorite websites. I mostly use it to hide page elements that I find annoying, such as sticky headers, video pop-ups, and vote counts.
 
 
 
 But more importantly, Stylus allows you to quickly test new CSS features on any website and report browser bugs, if necessary. By doing this, you can help make the web platform a little better.
 
 How I Added Scroll Snapping To My Twitter Timeline originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Actually, the San Francisco Typeface Does Ship as a Variable Font</title>
         <link href="https://css-tricks.com/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/"/>
       <updated>2022-08-04T20:20:28.000Z</updated>
       <content type="text">Apple unveiled an expanded version of its San Francisco system font at WWDC 2022. Then, last month, Jim Nielsen zeroed in on the font’s variations, explaining how the font provides a spectrum of variations based on the width and weight. It’s a remarkable read if you haven’t checked it.
 
 
 
 
 
 
 
 
 
 
 
 With all of these great new options, you might be tempted to use them in a web design. Chris was ogling over the expanded sets as well over on his personal blog and pondered:
 
 
 
 But it’s not year clear how we might tap into the condensed, compressed, and expanded varieties in CSS, or if there is even a plan to allow that. I suppose we can peek around Apple.com eventually and see how they do it if they start using them there.Doesn’t this make perfect sense to construct as a variable font and ship the whole kit and kaboodle that way?
 
 
 
 Turns out, yes. It does make perfect sense. Chris follows up in a new post:
 
 
 
 But just yesterday I randomly stumbled across the fact that the built-in San Francisco font (on the Apple devices that have it built-in) is already variable (!!). See, I was derping around with Roboto Flex, and had system-ui as the fallback font, and I was noticing that during the FOUT, the font-variation-settings I was using had an effect on the fallback font, which renders as San Francisco on my Mac. Which… unless I’m daft… means that San Francisco is a variable font.
 
 
 
 So, as for using it? Chris has a demo, of course:
 
 
 
 CodePen Embed Fallback
 
 
 
 There are some gotchas to all this, the most significant being fallbacks for non-Apple devices. After all, that demo is simply calling system-ui for the font family — it’s not telling the browser to download a font file or anything and who knows if Apple is gonna ever ship a variable font file we can serve up as an actual custom web font.
 
 
 
 The other interesting thing? Chris did some sleuthing and counted 35 layout featured included in that system font. Go read the rest of the post to see ’em all (and to get a good ol’ dose of Chris-isms — I know I miss them!).
 To Shared Link — Permalink on CSS-Tricks
 Actually, the San Francisco Typeface Does Ship as a Variable Font originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Converting Speech to PDF with NextJS and ExpressJS</title>
         <link href="https://css-tricks.com/converting-speech-to-pdf-with-nextjs-and-expressjs/"/>
       <updated>2022-08-04T12:55:39.000Z</updated>
       <content type="text">With speech interfaces becoming more of a thing, it’s worth exploring some of the things we can do with speech interactions. Like, what if we could say something and have that transcribed and pumped out as a downloadable PDF?
 
 
 
 Well, spoiler alert: we absolutely can do that! There are libraries and frameworks we can cobble together to make it happen, and that’s what we’re going to do together in this article.
 
 
 
 
 
 
 
 
 Server repo 
 
 
 
 Client repo
 
 
 
 These are the tools we‘re using
 
 
 First off, these are the two big players: Next.js and Express.js.
 
 
 
 Next.js tacks on additional functionalities to React, including key features for building static sites. It’s a go-to for many developers because of what it offers right out of the box, like dynamic routing, image optimization, built-in-domain and subdomain routing, fast refreshes, file system routing, and API routes… among many, many other things.
 
 
 
 In our case, we definitely need Next.js for its API routes on our client server. We want a route that takes a text file, converts it to PDF, writes it to our filesystem, then sends a response to the client.
 
 
 
 Express.js allows us to get a little Node.js app going with routing, HTTP helpers, and templating. It’s a server for our own API, which is what we’ll need as we pass and parse data between things.
 
 
 
 We have some other dependencies we’ll be putting to use:
 
 
 
 react-speech-recognition: A library for converting speech to text, making it available to React components.regenerator-runtime: A library for troubleshooting the “regeneratorRuntime is not defined” error that shows up in Next.js when using react-speech-recognitionhtml-pdf-node: A library for converting an HTML page or public URL into a PDFaxios: A library for making HTTP requests in both the browser and Node.jscors: A library that allows cross-origin resource sharing
 
 
 Setting up
 
 
 The first thing we want to do is create two project folders, one for the client and one for the server. Name them whatever you’d like. I’m naming mine audio-to-pdf-client and audio-to-pdf-server, respectively.
 
 
 
 The fastest way to get started with Next.js on the client side is to bootstrap it with create-next-app. So, open your terminal and run the following command from your client project folder:
 
 
 
 npx create-next-app client
 
 
 
 Now we need our Express server. We can get it by cd-ing into the server project folder and running the npm init command. A package.json file will be created in the server project folder once it’s done.
 
 
 
 We still need to actually install Express, so let’s do that now with npm install express. Now we can create a new index.js file in the server project folder and drop this code in there:
 
 
 
 const express &#x3D; require(&quot;express&quot;)
 const app &#x3D; express()
 
 app.listen(4000, () &#x3D;&gt; console.log(&quot;Server is running on port 4000&quot;))
 
 
 
 Ready to run the server?
 
 
 
 node index.js
 
 
 
 We’re going to need a couple more folders and and another file to move forward:
 
 
 
 Create a components folder in the client project folder.Create a SpeechToText.jsx file in the components subfolder.
 
 
 
 Before we go any further, we have a little cleanup to do. Specifically, we need to replace the default code in the pages/index.js file with this:
 
 
 
 import Head from &quot;next/head&quot;;
 import SpeechToText from &quot;../components/SpeechToText&quot;;
 
 export default function Home() {
   return (
     &lt;div className&#x3D;&quot;home&quot;&gt;
       &lt;Head&gt;
         &lt;title&gt;Audio To PDF&lt;/title&gt;
         &lt;meta
           name&#x3D;&quot;description&quot;
           content&#x3D;&quot;An app that converts audio to pdf in the browser&quot;
         /&gt;
         &lt;link rel&#x3D;&quot;icon&quot; href&#x3D;&quot;/favicon.ico&quot; /&gt;
       &lt;/Head&gt;
 
       &lt;h1&gt;Convert your speech to pdf&lt;/h1&gt;
 
       &lt;main&gt;
         &lt;SpeechToText /&gt;
       &lt;/main&gt;
     &lt;/div&gt;
   );
 }
 
 
 
 The imported SpeechToText component will eventually be exported from components/SpeechToText.jsx.
 
 
 Let’s install the other dependencies
 
 
 Alright, we have the initial setup for our app out of the way. Now we can install the libraries that handle the data that’s passed around.
 
 
 
 We can install our client dependencies with:
 
 
 
 npm install react-speech-recognition regenerator-runtime axios
 
 
 
 Our Express server dependencies are up next, so let’s cd into the server project folder and install those:
 
 
 
 npm install html-pdf-node cors
 
 
 
 Probably a good time to pause and make sure the files in our project folders are in tact. Here’s what you should have in the client project folder at this point:
 
 
 
 /audio-to-pdf-web-client
 ├─ /components
 |  └── SpeechToText.jsx
 ├─ /pages
 |  ├─ _app.js
 |  └── index.js
 └── /styles
     ├─globals.css
     └── Home.module.css
 
 
 
 And here’s what you should have in the server project folder:
 
 
 
 /audio-to-pdf-server
 └── index.js
 
 
 Building the UI
 
 
 Well, our speech-to-PDF wouldn’t be all that great if there’s no way to interact with it, so let’s make a React component for it that we can call &lt;SpeechToText&gt;.
 
 
 
 You can totally use your own markup. Here’s what I’ve got to give you an idea of the pieces we’re putting together:
 
 
 
 import React from &quot;react&quot;;
 
 const SpeechToText &#x3D; () &#x3D;&gt; {
   return (
     &lt;&gt;
       &lt;section&gt;
         &lt;div className&#x3D;&quot;button-container&quot;&gt;
           &lt;button type&#x3D;&quot;button&quot; style&#x3D;{{ &quot;--bgColor&quot;: &quot;blue&quot; }}&gt;
             Start
           &lt;/button&gt;
           &lt;button type&#x3D;&quot;button&quot; style&#x3D;{{ &quot;--bgColor&quot;: &quot;orange&quot; }}&gt;
             Stop
           &lt;/button&gt;
         &lt;/div&gt;
         &lt;div
           className&#x3D;&quot;words&quot;
           contentEditable
           suppressContentEditableWarning&#x3D;{true}
         &gt;&lt;/div&gt;
         &lt;div className&#x3D;&quot;button-container&quot;&gt;
           &lt;button type&#x3D;&quot;button&quot; style&#x3D;{{ &quot;--bgColor&quot;: &quot;red&quot; }}&gt;
             Reset
           &lt;/button&gt;
           &lt;button type&#x3D;&quot;button&quot; style&#x3D;{{ &quot;--bgColor&quot;: &quot;green&quot; }}&gt;
             Convert to pdf
           &lt;/button&gt;
         &lt;/div&gt;
       &lt;/section&gt;
     &lt;/&gt;
   );
 };
 
 export default SpeechToText;
 
 
 
 This component returns a React fragment that contains an HTML &lt;&#x60;&#x60;section&#x60;&#x60;&gt; element that contains three divs:
 
 
 
 .button-container contains two buttons that will be used to start and stop speech recognition..words has contentEditable and suppressContentEditableWarning attributes to make this element editable and suppress any warnings from React.Another .button-container holds two more buttons that will be used to reset and convert speech to PDF, respectively.
 
 
 
 Styling is another thing altogether. I won’t go into it here, but you’re welcome to use some styles I wrote either as a starting point for your own styles/global.css file.
 
 
 
 
   
           View Full CSS      
   
 
 html,
 body {
   padding: 0;
   margin: 0;
   font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
     Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
 }
 
 a {
   color: inherit;
   text-decoration: none;
 }
 
 * {
   box-sizing: border-box;
 }
 
 .home {
   background-color: #333;
   min-height: 100%;
   padding: 0 1rem;
   padding-bottom: 3rem;
 }
 
 h1 {
   width: 100%;
   max-width: 400px;
   margin: auto;
   padding: 2rem 0;
   text-align: center;
   text-transform: capitalize;
   color: white;
   font-size: 1rem;
 }
 
 .button-container {
   text-align: center;
   display: flex;
   justify-content: center;
   gap: 3rem;
 }
 
 button {
   color: white;
   background-color: var(--bgColor);
   font-size: 1.2rem;
   padding: 0.5rem 1.5rem;
   border: none;
   border-radius: 20px;
   cursor: pointer;
 }
 
 button:hover {
   opacity: 0.9;
 }
 
 button:active {
   transform: scale(0.99);
 }
 
 .words {
   max-width: 700px;
   margin: 50px auto;
   height: 50vh;
   border-radius: 5px;
   padding: 1rem 2rem 1rem 5rem;
   background-image: -webkit-gradient(
     linear,
     0 0,
     0 100%,
     from(#d9eaf3),
     color-stop(4%, #fff)
   ) 0 4px;
   background-size: 100% 3rem;
   background-attachment: scroll;
   position: relative;
   line-height: 3rem;
   overflow-y: auto;
 }
 
 .success,
 .error {
   background-color: #fff;
   margin: 1rem auto;
   padding: 0.5rem 1rem;
   border-radius: 5px;
   width: max-content;
   text-align: center;
   display: block;
 }
 
 .success {
   color: green;
 }
 
 .error {
   color: red;
 }
 
 
 
 
 The CSS variables in there are being used to control the background color of the buttons.
 
 
 
 
 
 Let’s see the latest changes! Run npm run dev in the terminal and check them out.
 
 
 
 You should see this in browser when you visit http://localhost:3000:
 
 
 
 
 
 
 Our first speech to text conversion!
 
 
 The first action to take is to import the necessary dependencies into our &lt;SpeechToText&gt; component:
 
 
 
 import React, { useRef, useState } from &quot;react&quot;;
 import SpeechRecognition, {
   useSpeechRecognition,
 } from &quot;react-speech-recognition&quot;;
 import axios from &quot;axios&quot;;
 
 
 
 Then we check if speech recognition is supported by the browser and render a notice if not supported:
 
 
 
 const speechRecognitionSupported &#x3D;
   SpeechRecognition.browserSupportsSpeechRecognition();
 
 if (!speechRecognitionSupported) {
   return &lt;div&gt;Your browser does not support speech recognition.&lt;/div&gt;;
 }
 
 
 
 Next up, let’s extract transcript and resetTranscript from the useSpeechRecognition() hook:
 
 
 
 const { transcript, resetTranscript } &#x3D; useSpeechRecognition();
 
 
 
 This is what we need for the state that handles listening:
 
 
 
 const [listening, setListening] &#x3D; useState(false);
 
 
 
 We also need a ref for the div with the contentEditable attribute, then we need to add the ref attribute to it and pass transcript as children:
 
 
 
 const textBodyRef &#x3D; useRef(null);
 
 
 
 …and:
 
 
 
 &lt;div
   className&#x3D;&quot;words&quot;
   contentEditable
   ref&#x3D;{textBodyRef}
   suppressContentEditableWarning&#x3D;{true}
   &gt;
   {transcript}
 &lt;/div&gt;
 
 
 
 The last thing we need here is a function that triggers speech recognition and to tie that function to the onClick event listener of our button. The button sets listening to true and makes it run continuously. We’ll disable the button while it’s in that state to prevent us from firing off additional events.
 
 
 
 const startListening &#x3D; () &#x3D;&gt; {
   setListening(true);
   SpeechRecognition.startListening({
     continuous: true,
   });
 };
 
 
 
 …and:
 
 
 
 &lt;button
   type&#x3D;&quot;button&quot;
   onClick&#x3D;{startListening}
   style&#x3D;{{ &quot;--bgColor&quot;: &quot;blue&quot; }}
   disabled&#x3D;{listening}
 &gt;
   Start
 &lt;/button&gt;
 
 
 
 Clicking on the button should now start up the transcription.
 
 
 More functions
 
 
 OK, so we have a component that can start listening. But now we need it to do a few other things as well, like stopListening, resetText and handleConversion. Let’s make those functions.
 
 
 
 const stopListening &#x3D; () &#x3D;&gt; {
   setListening(false);
   SpeechRecognition.stopListening();
 };
 
 const resetText &#x3D; () &#x3D;&gt; {
   stopListening();
   resetTranscript();
   textBodyRef.current.innerText &#x3D; &quot;&quot;;
 };
 
 const handleConversion &#x3D; async () &#x3D;&gt; {}
 
 
 
 Each of the functions will be added to an onClick event listener on the appropriate buttons:
 
 
 
 &lt;button
   type&#x3D;&quot;button&quot;
   onClick&#x3D;{stopListening}
   style&#x3D;{{ &quot;--bgColor&quot;: &quot;orange&quot; }}
   disabled&#x3D;{listening &#x3D;&#x3D;&#x3D; false}
 &gt;
   Stop
 &lt;/button&gt;
 
 &lt;div className&#x3D;&quot;button-container&quot;&gt;
   &lt;button
     type&#x3D;&quot;button&quot;
     onClick&#x3D;{resetText}
     style&#x3D;{{ &quot;--bgColor&quot;: &quot;red&quot; }}
   &gt;
     Reset
   &lt;/button&gt;
   &lt;button
     type&#x3D;&quot;button&quot;
     style&#x3D;{{ &quot;--bgColor&quot;: &quot;green&quot; }}
     onClick&#x3D;{handleConversion}
   &gt;
     Convert to pdf
   &lt;/button&gt;
 &lt;/div&gt;
 
 
 
 The handleConversion function is asynchronous because we will eventually be making an API request. The “Stop” button has the disabled attribute that would be be triggered when listening is false.
 
 
 
 If we restart the server and refresh the browser, we can now start, stop, and reset our speech transcription in the browser.
 
 
 
 Now what we need is for the app to transcribe that recognized speech by converting it to a PDF file. For that, we need the server-side path from Express.js.
 
 
 Setting up the API route
 
 
 The purpose of this route is to take a text file, convert it to a PDF, write that PDF to our filesystem, then send a response to the client.
 
 
 
 To setup, we would open the server/index.js file and import the html-pdf-node and fs dependencies that will be used to write and open our filesystem.
 
 
 
 const HTMLToPDF &#x3D; require(&quot;html-pdf-node&quot;);
 const fs &#x3D; require(&quot;fs&quot;);
 const cors &#x3D; require(&quot;cors)
 
 
 
 Next, we will setup our route:
 
 
 
 app.use(cors())
 app.use(express.json())
 
 app.post(&quot;/&quot;, (req, res) &#x3D;&gt; {
   // etc.
 })
 
 
 
 We then proceed to define our options required in order to use html-pdf-node inside the route:
 
 
 
 let options &#x3D; { format: &quot;A4&quot; };
 let file &#x3D; {
   content: &#x60;&lt;html&gt;&lt;body&gt;&lt;pre style&#x3D;&#x27;font-size: 1.2rem&#x27;&gt;${req.body.text}&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&#x60;,
 };
 
 
 
 The options object accepts a value to set the paper size and style. Paper sizes follow a much different system than the sizing units we typically use on the web. For example, A4 is the typical letter size.
 
 
 
 The file object accepts either the URL of a public website or HTML markup. In order to generate our HTML page, we will use the html, body, pre HTML tags and the text from the req.body.
 
 
 
 You can apply any styling of your choice.
 
 
 
 Next, we will add a trycatch to handle any errors that might pop up along the way:
 
 
 
 try {
 
 } catch(error){
   console.log(error);
   res.status(500).send(error);
 }
 
 
 
 Next, we will use the generatePdf from the html-pdf-node library to generate a pdfBuffer (the raw PDF file) from our file and create a unique pdfName:
 
 
 
 HTMLToPDF.generatePdf(file, options).then((pdfBuffer) &#x3D;&gt; {
   // console.log(&quot;PDF Buffer:-&quot;, pdfBuffer);
   const pdfName &#x3D; &quot;./data/speech&quot; + Date.now() + &quot;.pdf&quot;;
 
   // Next code here
 }
 
 
 
 From there, we use the filesystem module to write, read and (yes, finally!) send a response to the client app:
 
 
 
 fs.writeFile(pdfName, pdfBuffer, function (writeError) {
   if (writeError) {
     return res
       .status(500)
       .json({ message: &quot;Unable to write file. Try again.&quot; });
   }
 
   fs.readFile(pdfName, function (readError, readData) {
     if (!readError &amp;&amp; readData) {
       // console.log({ readData });
       res.setHeader(&quot;Content-Type&quot;, &quot;application/pdf&quot;);
       res.setHeader(&quot;Content-Disposition&quot;, &quot;attachment&quot;);
       res.send(readData);
       return;
     }
 
     return res
       .status(500)
       .json({ message: &quot;Unable to write file. Try again.&quot; });
   });
 });
 
 
 
 Let’s break that down a bit:
 
 
 
 The writeFile filesystem module accepts a file name, data and a callback function that can returns an error message if there’s an issue writing to the file. If you’re working with a CDN that provides error endpoints, you could use those instead.The readFile filesystem module accepts a file name and a callback function that is capable or returning a read error as well as the read data. Once we have no read error and the read data is present, we will construct and send a response to the client. Again, this can be replaced with your CDN’s endpoints if you have them.The res.setHeader(&quot;Content-Type&quot;, &quot;application/pdf&quot;); tells the browser that we are sending a PDF file.The res.setHeader(&quot;Content-Disposition&quot;, &quot;attachment&quot;); tells the browser to make the received data downloadable.
 
 
 
 Since the API route ready, we can use it in our app at http://localhost:4000. We can the proceed to the client part of our application to complete the handleConversion function.
 
 
 Handling the conversion
 
 
 Before we can start working on a handleConversion function, we need to create a state that handles our API requests for loading, error, success, and other messages. We’re going use React’s useState hook to set that up:
 
 
 
 const [response, setResponse] &#x3D; useState({
   loading: false,
   message: &quot;&quot;,
   error: false,
   success: false,
 });
 
 
 
 In the handleConversion function, we will check for when the web page has been loaded before running our code and make sure the div with the editable attribute is not empty:
 
 
 
 if (typeof window !&#x3D;&#x3D; &quot;undefined&quot;) {
 const userText &#x3D; textBodyRef.current.innerText;
   // console.log(textBodyRef.current.innerText);
 
   if (!userText) {
     alert(&quot;Please speak or write some text.&quot;);
     return;
   }
 }
 
 
 
 We proceed by wrapping our eventual API request in a trycatch, handling any error that may arise, and updating the response state:
 
 
 
 try {
 
 } catch(error){
   setResponse({
     ...response,
     loading: false,
     error: true,
     message:
       &quot;An unexpected error occurred. Text not converted. Please try again&quot;,
     success: false,
   });
 }
 
 
 
 Next, we set some values for the response state and also set config for axios and make a post request to the server:
 
 
 
 setResponse({
   ...response,
   loading: true,
   message: &quot;&quot;,
   error: false,
   success: false,
 });
 const config &#x3D; {
   headers: {
     &quot;Content-Type&quot;: &quot;application/json&quot;,
   },
   responseType: &quot;blob&quot;,
 };
 
 const res &#x3D; await axios.post(
   &quot;http://localhost:4000&quot;,
   {
     text: textBodyRef.current.innerText,
   },
   config
 );
 
 
 
 Once we have gotten a successful response, we set the response state with the appropriate values and instruct the browser to download the received PDF:
 
 
 
 setResponse({
   ...response,
   loading: false,
   error: false,
   message:
     &quot;Conversion was successful. Your download will start soon...&quot;,
   success: true,
 });
 
 // convert the received data to a file
 const url &#x3D; window.URL.createObjectURL(new Blob([res.data]));
 // create an anchor element
 const link &#x3D; document.createElement(&quot;a&quot;);
 // set the href of the created anchor element
 link.href &#x3D; url;
 // add the download attribute, give the downloaded file a name
 link.setAttribute(&quot;download&quot;, &quot;yourfile.pdf&quot;);
 // add the created anchor tag to the DOM
 document.body.appendChild(link);
 // force a click on the link to start a simulated download
 link.click();
 
 
 
 And we can use the following below the contentEditable div for displaying messages:
 
 
 
 &lt;div&gt;
   {response.success &amp;&amp; &lt;i className&#x3D;&quot;success&quot;&gt;{response.message}&lt;/i&gt;}
   {response.error &amp;&amp; &lt;i className&#x3D;&quot;error&quot;&gt;{response.message}&lt;/i&gt;}
 &lt;/div&gt;
 
 
 Final code
 
 
 I’ve packaged everything up on GitHub so you can check out the full source code for both the server and the client.
 
 
 
 
 Server repo 
 
 
 
 Client repo
 
 
 Converting Speech to PDF with NextJS and ExpressJS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Implicit Grids, Repeatable Layout Patterns, and Danglers</title>
         <link href="https://css-tricks.com/implicit-grids-repeatable-layout-patterns-and-danglers/"/>
       <updated>2022-08-02T13:10:49.000Z</updated>
       <content type="text">Dave Rupert with some modern CSS magic that tackles one of those classic conundrums: what happens when the CSS for component is unable to handle the content we throw at it?
 
 
 
 The specific situation is when a layout grid expects an even number of items, but is supplied with an odd number instead. We’re left with a “dangling” element at the end that throws off the layout. Sounds like what’s needed is some Defensive CSS and Dave accomplishes it.
 
 
 
 
 
 
 
 He reaches for :has() to write a nifty selector that sniffs out the last item in a grid that contains an odd number of items:
 
 
 
 .items:has(.item:last-of-type:nth-of-type(odd)) .item:first-of-type { }
 
 
 
 Breaking that down:
 
 
 
 We have a parent container of .items.If the container :has() an .item child that is the last of its type,…and that .item happens to be an odd-numbered instance,…then select the first .item element of that type and style it!
 
 
 
 In this case, that last .item can be set to go full-width to prevent holes in the layout.
 
 
 
 If… then… CSS has conditional logic powers! We’re only talking about support for Safari TP and Edge/Chrome Canary at the moment, but that’s pretty awesome.
 
 
 
 As chance has it, Temani Afif recently shared tricks he learned while experimenting with implicit grids. By taking advantage of CSS Grid’s auto-placement algorithm, we don’t even have to explicitly declare a fixed number of columns and rows for a grid — CSS will create them for us if they’re needed!
 
 
 
 No, Temani’s techniques aren’t alternative solutions to Dave’s “dangler” dilemma. But combining Temani’s approach to repeatable grid layout patterns with Dave’s defensive CSS use of :has(), we get a pretty powerful and complex-looking grid that’s lightweight and capable of handling any number of items while maintaining a balanced, repeatable pattern.
 
 
 
 CodePen Embed Fallback
 
 Implicit Grids, Repeatable Layout Patterns, and Danglers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Exploring CSS Grid’s Implicit Grid and Auto-Placement Powers</title>
         <link href="https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/"/>
       <updated>2022-08-01T13:44:13.000Z</updated>
       <content type="text">When working with CSS Grid, the first thing to do is to set display: grid on the element that we want to be become a grid container. Then we explicitly define the grid using a combination of grid-template-columns, grid-template-rows, and grid-template-areas. And from there, the next step is to place items inside the grid.
 
 
 
 This is the classic approach that should be used and I also recommend it. However, there is another approach for creating grids without any explicit definition. We call this the implicit grid.
 
 
 
 
 
 
 Table of Contents
 
 “Explicit, implicit? What the heck is going on here?”
 Dynamic sidebar
 Image grid
 Dynamic layouts
 Grid patterns
 Want more?
 Wrapping up
 
 “Explicit, implicit? What the heck is going on here?”
 
 
 Strange terms, right? Manuel Matuzovic already has a good explanation of what we may by “implicit” and “explicit” in CSS Grid, but let’s dig straight into what the specification says:
 
 
 
 The grid-template-rows, grid-template-columns, and grid-template-areas properties define a fixed number of tracks that form the explicit grid. When grid items are positioned outside of these bounds, the grid container generates implicit grid tracks by adding implicit grid lines to the grid. These lines together with the explicit grid form the implicit grid.
 
 
 
 So, in plain English, the browser auto-generates extra rows and columns in case any elements happen to be placed outside the defined grid.
 
 
 
 What about auto-placement?
 
 
 
 Similar to the concept of implicit grid, auto-placement is the ability of the browser to automatically place the items inside the grid. We don’t always need to give the position of each item.
 
 
 
 Through different use cases, we are going to see how such features can help us create complex and dynamic grid with a few lines of code.
 
 
 Dynamic sidebar
 
 
 CodePen Embed Fallback
 
 
 
 Here, we have three different layouts but we only have one grid configuration that works for all of them.
 
 
 
 main {
   display: grid;
   grid-template-columns: 1fr;
 }
 
 
 
 Only one column is taking up all the free space. This is our “explicit” grid. It’s set up to fit one grid item in the main grid container. That’s all. One column and one row:
 
 
 
 CodePen Embed Fallback
 
 
 
 But what if we decided to drop another element in there, say an aside (our dynamic sidebar). As it’s currently (and explicitly) defined, our grid will have to adjust automatically to find a place for that element. And if we do nothing else with our CSS, here’s what DevTools tells us is happening.
 
 
 
 The element takes up the entire column that is explicitly set on the container. Meanwhile, the falls onto a new row between implicit grid lines labeled 2 and 3. Note that I’m using a 20px gap to help separate things visually.
 
 
 
 We can move the &lt;aside&gt; to a column beside the &lt;section&gt;:
 
 
 
 aside {
   grid-column-start: 2;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 And here’s what DevTools tells us now:
 
 
 
 The element is between the grid container’s first and second grid column lines. The starts at the second grid column line and ends at a third line we never declared.
 
 
 
 We place our element in the second column but… we don’t have a second column. Weird, right? We never declared a second column on the &lt;main&gt; grid container, but the browser created one for us! This is the key part from the specification we looked at:
 
 
 
 When grid items are positioned outside of these bounds, the grid container generates implicit grid tracks by adding implicit grid lines to the grid.
 
 
 
 This powerful feature allows us to have dynamic layouts. If we only have the &lt;section&gt; element, all we get is one column. But if we add an &lt;aside&gt; element to the mix, an extra column is created to contain it.
 
 
 
 We could place the &lt;aside&gt; before the &lt;section&gt; instead like this:
 
 
 
 aside {
   grid-column-end: -2;
 } 
 
 
 
 This creates the implicit column at the start of the grid, unlike the previous code that places the implicit column at the end.
 
 
 
 We can have either a right or left sidebar
 
 
 
 We can do the same thing more easily using the grid-auto-flow property to set any and all implicit tracks to flow in a column direction:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now there’s no need to specify grid-column-start to place the &lt;aside&gt; element to the right of the &lt;section&gt;! In fact, any other grid item we decide to throw in there at any time will now flow in a column direction, each one placed in its own implicit grid tracks. Perfect for situations where the number of items in the grid isn’t known in advance!
 
 
 
 That said, we do still need grid-column-end if we want to place it in a column to the left of it because, otherwise, the &lt;aside&gt; will occupy the explicit column which, in turn, pushes the &lt;section&gt; outside the explicit grid and forces it to take the implicit column.
 
 
 
 I know, I know. That’s a little convoluted. Here is another example we can use to better understand this little quirk:
 
 
 
 CodePen Embed Fallback
 
 
 
 In the first example, we didn’t specify any placement. In this case, the browser will first place the &lt;aside&gt; element in the explicit column since it comes first in the DOM. The &lt;section&gt;, meanwhile, is automatically placed in the grid column the browser automatically (or implicitly) creates for us.
 
 
 
 In the second example, we set the &lt;aside&gt; element outside of the explicit grid:
 
 
 
 aside {
   grid-column-end: -2;
 }
 
 
 
 Now it doesn’t matter that &lt;aside&gt; comes first in the HTML. By reassigning &lt;aside&gt; somewhere else, we’ve made the &lt;section&gt; element available to take the explicit column.
 
 
 Image grid
 
 
 Let’s try something different with a grid of images where we have a big image and a few thumbnails beside it (or under it).
 
 
 
 CodePen Embed Fallback
 
 
 
 We have two grid configurations. But guess what? I am not defining any grid at all! All I am doing is this:
 
 
 
 .grid img:first-child {
   grid-area: span 3 / span 3;
 }
 
 
 
 It’s surprising we only need one line of code to pull off something like this, so let’s dissect what’s going on and you will see that it’s easier than you may think. First of all, grid-area is a shorthand property that combines the following properties into a single declaration:
 
 
 
 grid-row-startgrid-row-endgrid-column-startgrid-column-end
 
 
 
 Wait! Isn’t grid-area the property we use to define named areas instead of where elements start and end on the grid?
 
 
 
 Yes, but it also does more. We could write a whole lot more about grid-area, but in this particular case:
 
 
 
 .grid img:first-child {
   grid-area: span 3 / span 3;
 }
 
 /* ...is equivalent to: */
 .grid img:first-child {
   grid-row-start: span 3;
   grid-column-start: span 3;
   grid-row-end: auto;
   grid-column-end: auto;
 }
 
 
 
 We can see the same thing when cracking open DevTools to expand the shorthand version:
 
 
 
 
 
 
 
 This means that the first image element in the grid needs to span three columns and three rows. But since we didn’t define any columns or rows, the browser does it for us.
 
 
 
 
 
 
 
 We’ve essentially placed the first image in the HTML to take up a 3⨉3 grid. That means that any other images will be placed automatically in those same three columns without the need to specify anything new.
 
 
 
 
 
 
 
 To summarize, we told the browser that the first image needs take up the space of three columns and three rows that we never explicitly defined when setting up the grid container. The browser set those columns and rows up for us. As a result, the remaining images in the HTML flow right into place using the same three columns and rows. And since the first image takes up all three columns in the first row, the remaining images flow into additional rows that each contain three columns, where each image takes up a single column.
 
 
 
 All this from one line of CSS! That’s the power of “implicit” grid” and auto-placement.
 
 
 
 For the second grid configuration in that demo, all I’ve done is change the automatic flow direction using grid-auto-flow: column the same way we did earlier when placing an &lt;aside&gt; element next to a &lt;section&gt;. This forces the browser to create a fourth column it can use to place the remaining images. And since we have three rows, the remaining images get placed inside the same vertical column.
 
 
 
 
 
 
 
 We need to add a few properties to the images to make sure they fit nicely inside the grid without any overflow:
 
 
 
 .grid {
   display: grid;
   grid-gap: 10px;
 }
 
 /* for the second grid configuration */
 .horizontal {
   grid-auto-flow: column;
 }
 
 /* The large 3⨉3 image */
 .grid img:first-child {
   grid-area: span 3 / span 3;
 }
 
 /* Help prevent stretched or distorted images */
 img {
   width: 100%;
   height: 100%;
   object-fit: cover;
 }
 
 
 
 And of course, we can easily update the grid to consider more images by adjusting one value. That would be the 3 in the styles for the large image. We have this:
 
 
 
 .grid img:first-child {
   grid-area: span 3 / span 3;
 }
 
 
 
 But we could add a fourth column simply by changing it to 4 instead:
 
 
 
 .grid img:first-child {
   grid-area: span 4 / span 4;
 }
 
 
 
 Even better: let’s set that up as a custom property to make things even easier to update.
 
 
 
 CodePen Embed Fallback
 
 
 Dynamic layouts
 
 
 The first use case with the sidebar was our first dynamic layout. Now we will tackle more complex layouts where the number of elements will dictate the grid configuration.
 
 
 
 CodePen Embed Fallback
 
 
 
 In this example, we can have anywhere from one to four elements where the grid adjusts in way that nicely fits the number of elements without leaving any awkward gaps or missing spaces.
 
 
 
 When we have one element, we do nothing. The element will stretch to fill the only row and column automatically created by the grid.
 
 
 
 Bit when we add the second element, we create another (implicit) column using grid-column-start: 2.
 
 
 
 When we add a third element, it should take up the width of two columns — that’s why we used grid-column-start: span 2, but only if it’s the :last-child because if (and when) we add a fourth element, that one should only take up a single column.
 
 
 
 Adding that up, we have four grid configurations with only two declarations and the magic of implicit grid:
 
 
 
 .grid {
   display: grid;
 }
 .grid :nth-child(2) {
   grid-column-start: 2;
 }
 .grid :nth-child(3):last-child {
   grid-column-start: span 2;
 }
 
 
 
 Let’s try another one:
 
 
 
 CodePen Embed Fallback
 
 
 
 We’re doing nothing for the first and second cases where we have only one or two elements. When we add a third element, though, we tell the browser that — as long as it’s the :last-child — it should span two columns. When we add a fourth element, we tell the browser that element needs to be placed in the second column.
 
 
 
 .grid {
   display: grid;
 }
 .grid :nth-child(3):last-child {
   grid-column-start: span 2;
 }
 .grid :nth-child(4) {
   grid-column-start: 2;
 }
 
 
 
 Are you starting to get the trick? We give the browser specific instructions based on the number of elements (using :nth-child) and, sometimes, one instruction can change the layout completely.
 
 
 
 It should be noted that the sizing will not be the same when we work with different content:
 
 
 
 CodePen Embed Fallback
 
 
 
 Since we didn’t define any sizes for our items, the browser automatically sizes them for us based on their contents and we may end up with different sizing than what we just saw. To overcome this, we have to explicitly specify that all the columns and rows are equally sized:
 
 
 
 grid-auto-rows: 1fr;
 grid-auto-columns: 1fr;
 
 
 
 Hey, we haven’t played with those properties yet! grid-auto-rows and grid-auto-columns set the size of implicit rows and columns, respectively, in a grid container. Or, as the spec explains it:
 
 
 
 The grid-auto-columns and grid-auto-rows properties specify the size of tracks not assigned a size by grid-template-rows or grid-template-columns.
 
 
 
 CodePen Embed Fallback
 
 
 
 Here is another example where we can go up to six elements. This time I will let you dissect the code. Don’t worry, the selectors may look complex but the logic is pretty straightforward.
 
 
 
 CodePen Embed Fallback
 
 
 
 Even with six elements, we only needed two declarations. Imagine all the complex and dynamic layouts we can achieve with a few lines of code!
 
 
 
 What’s going on with that grid-auto-rows and why does it take three values? Are we defining three rows?
 
 
 
 No, we are not defining three rows. But we are defining three values as a pattern for our implicit rows. The logic is as follows:
 
 
 
 If we have one row, it will get sized with the first value.If we have two rows, the first one gets the first value and the second one the second value.If we have three rows, the three values will get used.If we have four rows (and here comes the interesting part), we use the three values for the first three rows and we reuse the first value again for the fourth row. That’s why it’s a kind of pattern that we repeat to size all the implicit rows.If we have 100 rows, they will be sized three-by-three to have 2fr 2fr 1fr 2fr 2fr 1fr 2fr 2fr 1fr, etc.
 
 
 
 Unlike grid-template-rows which defines the number of rows and their sizes, grid-auto-rows only sizes row that may get created along the way.
 
 
 
 If we get back to our example, the logic is to have equal size when two rows are created (we will use the 2fr 2fr), but if a third row is created we make it a bit smaller.
 
 
 Grid patterns
 
 
 For this last one, we are going to talk about patterns. You have probably seen those two column layouts where one column is wider than the other, and each row alternates the placement of those columns.
 
 
 
 This sort layout can be difficult too pull off without knowing exactly how much content we’re dealing with, but CSS Grid’s auto-placement powers makes it a relative cinch.
 
 
 
 CodePen Embed Fallback
 
 
 
 Take a peek at the code. It may look complex but let’s break it down because it winds up being pretty straightforward.
 
 
 
 The first thing to do is to identify the pattern. Ask yourself: “After how many elements should the pattern repeat?” In this case it’s after every four elements. So, let’s look at using only four elements for now:
 
 
 
 
 
 
 
 Now, let’s define the grid and set up the general pattern using the :nth-child selector for alternating between elements:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr; /* all the columns are equal */
   grid-auto-rows: 100px; /* all the rows equal to 100px */
 }
 .grid :nth-child(4n + 1) { /* ?? */ }
 .grid :nth-child(4n + 2) { /* ?? */ }
 .grid :nth-child(4n + 3) { /* ?? */ }
 .grid :nth-child(4n + 4) { /* ?? */ }
 
 
 
 We said that our pattern repeats every four elements, so we will logically use 4n + x where x ranges from 1 to 4. It’s a little easier to explain the pattern this way:
 
 
 
 4(0) + 1 &#x3D; 1 &#x3D; 1st element /* we start with n &#x3D; 0 */
 4(0) + 2 &#x3D; 2 &#x3D; 2nd element
 4(0) + 3 &#x3D; 3 &#x3D; 3rd element
 4(0) + 4 &#x3D; 4 &#x3D; 4th element
 4(1) + 1 &#x3D; 5 &#x3D; 5th element /* our pattern repeat here at n &#x3D; 1 */
 4(1) + 2 &#x3D; 6 &#x3D; 6th element
 4(1) + 3 &#x3D; 7 &#x3D; 7th element
 4(1) + 4 &#x3D; 8 &#x3D; 8th element
 4(2) + 1 &#x3D; 9 &#x3D; 9th element /* our pattern repeat again here at n &#x3D; 2 */
 etc.
 
 
 
 Perfect, right? We have four elements, and repeat the pattern on the fifth element, the ninth element and so on.
 
 
 
 Those :nth-child selectors can be tricky! Chris has a super helpful explanation of how it all works, including recipes for creating different patterns.
 
 
 
 Now we configure each element so that:
 
 
 
 The first element needs to take two columns and start at column one (grid-column: 1/span 2).The second element is placed in the third column (grid-column-start: 3).The third element is placed at the first column: (grid-column-start: 1).The fourth element takes two columns and starts at the second column: (grid-column: 2/span 2).
 
 
 
 Here that is in CSS:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr; /* all the columns are equal */
   grid-auto-rows: 100px; /* all the rows are equal to 100px */
 }
 .grid :nth-child(4n + 1) { grid-column: 1/span 2; }
 .grid :nth-child(4n + 2) { grid-column-start: 3; }
 .grid :nth-child(4n + 3) { grid-column-start: 1; }
 .grid :nth-child(4n + 4) { grid-column: 2/span 2; }
 
 
 
 We could stop here and be done… but we can do better! Specifically, we can remove some declarations and rely grid’s auto-placement powers to do the job for us. This is the trickiest part to grok and requires a lot of practice to be able to identify what can be removed.
 
 
 
 The first thing we can do is update grid-column: 1 /span 2 and use only grid-column: span 2 since, by default, the browser will place the first item into the first column. We can also remove this:
 
 
 
 .grid :nth-child(4n + 3) { grid-column-start: 1; }
 
 
 
 By placing the first, second, and fourth items, the grid automatically places the third item in the correct place. That means we’re left with this:
 
 
 
 .grid {
   display: grid;
   grid-auto-rows: 100px; /* all the rows are equal to 100px */
   grid-auto-columns: 1fr; /* all the columns are equal */
 }
 .grid :nth-child(4n + 1) { grid-column: span 2; }
 .grid :nth-child(4n + 2) { grid-column-start: 3; }
 .grid :nth-child(4n + 4) { grid-column: 2/span 2; }
 
 
 
 But c’mon we can stroll do better! We can also remove this:
 
 
 
 .grid :nth-child(4n + 2) { grid-column-start: 3; }
 
 
 
 Why? If we place the fourth element in the second column while allowing it to take up two full columns, we’re forcing the grid to create a third implicit column, giving us a total of three columns without explicitly telling it to. The fourth element cannot go into the first row since the first item is also taking two columns, so it flows to the next row. This configuration leave us with an empty column in the first row and an empty one in the second row.
 
 
 
 
 
 
 
 I think you know the end of the story. The browser will automatically place the second and third items in those empty spots. So our code becomes even simpler:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr; /* all the columns are equal */
   grid-auto-rows: 100px; /* all the rows are equal to 100px */
 }
 .grid :nth-child(4n + 1) { grid-column: span 2; }
 .grid :nth-child(4n + 4) { grid-column: 2/span 2; }
 
 
 
 All it takes is five declarations to create a very cool and very flexible pattern. The optimization part may be tricky, but you get used to it and gain some tricks with practice.
 
 
 
 Why not use grid-template-columns to define explicit columns since we know the number of columns?
 
 
 
 We can do that! Here’s the code for it:
 
 
 
 .grid {
   display: grid;
   grid-template-columns: repeat(3, 1fr); /* all the columns are equal */
   grid-auto-rows: 100px; /* all the rows are equal to 100px */
 }
 .grid :nth-child(4n + 1),
 .grid :nth-child(4n + 4) {
   grid-column: span 2;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 As you can see, the code is definitely more intuitive. We define three explicit grid columns and we tell the browser that the first and fourth elements need to take two columns. I highly recommend this approach! But the goal of this article is to explore new ideas and tricks that we get from CSS Grid’s implicit and auto-placement powers.
 
 
 
 The explicit approach is more straightforward, while an implicit grid requires you to — pardon the pun — fill in the gaps where CSS is doing additional work behind the scenes. In the end, I believe that having a solid understanding of implicit grids will help you better understand the CSS Grid algorithm. After all, we are not here to study what’s obvious — we are here to explore wild territories!
 
 
 
 Let’s try another pattern, a bit quicker this time:
 
 
 
 CodePen Embed Fallback
 
 
 
 Our pattern repeats every six elements. The third and fourth elements each need to occupy two full rows. If we place the third and the fourth elements, it seems that we don’t need to touch the others, so let’s try the following:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr;
   grid-auto-rows: 100px;
 }
 .grid :nth-child(6n + 3) {
   grid-area: span 2/2; /* grid-row-start: span 2 &amp;&amp; grid-column-start: 2 */
 }
 .grid :nth-child(6n + 4) {
   grid-area: span 2/1; /* grid-row-start: span 2 &amp;&amp; grid-column-start: 1 */
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Hmm, no good. We need to place the second element in the first column. Otherwise, the grid will automatically place it in the second column.
 
 
 
 .grid :nth-child(6n + 2) {
   grid-column: 1; /* grid-column-start: 1 */
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Better, but there’s still more work, We need to shift the third element to the top. It’s tempting to try placing it in the first row this way:
 
 
 
 .grid :nth-child(6n + 3) {
   grid-area: 1/2/span 2; 
     /* Equivalent to:
        grid-row-start: 1;
        grid-row-end: span 2;
        grid-column-start: 2 
      */
 }
 
 
 
 But this doesn’t work because it forces all the 6n + 3 elements to get placed in the same area which makes a jumbled layout. The real solution is to keep the initial definition of the third element and add grid-auto-flow: dense to fill the gaps. From MDN:
 
 
 
 [The] “dense” packing algorithm attempts to fill in holes earlier in the grid, if smaller items come up later. This may cause items to appear out-of-order, when doing so would fill in holes left by larger items. If it is omitted, a “sparse” algorithm is used, where the placement algorithm only ever moves “forward” in the grid when placing items, never backtracking to fill holes. This ensures that all of the auto-placed items appear “in order”, even if this leaves holes that could have been filled by later items.
 
 
 
 I know this property is not very intuitive but never forget it when you face a placement issue. Before trying different configurations in vain, add it because it may fix your layout with no additional effort.
 
 
 
 Why not always add this property by default?
 
 
 
 I don’t recommend it because, in some cases, we don’t want that behavior. Note how the MDN’s explanation there mentions it causes items to flow “out-of-order” to fill holes left by larger items. Visual order is usually just as important as the source order, particularly when it comes to accessible interfaces, and grid-auto-flow: dense can sometimes cause a mismatch between the visual and source order.
 
 
 
 Our final code is then:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr;
   grid-auto-flow: dense;
   grid-auto-rows: 100px;
 }
 .grid :nth-child(6n + 2) { grid-column: 1; }
 .grid :nth-child(6n + 3) { grid-area: span 2/2; }
 .grid :nth-child(6n + 4) { grid-row: span 2; }
 
 
 
 Another one? Let’s go!
 
 
 
 CodePen Embed Fallback
 
 
 
 For this one, I will not talk too much and instead show you an illustration of the code I have used. Try to see if you get how I reached that code:
 
 
 
 
 
 
 
 The items in black are implicitly placed in the grid. It should be noted that we can get the same layout more ways than how I got there. Can you figure those out, too? What about using grid-template-columns? Share your works in the comment section.
 
 
 
 I am gonna leave you with a last pattern:
 
 
 
 
 
 
 
 I do have a solution for this one but it’s your turn to practice. Take all that we have learned and try to code this by yourself and then compare it with my solution. Don’t worry if you end with something verbose — the most important thing is finding a working solution.
 
 
 Want more?
 
 
 Before we end I want to share a few Stack Overflow questions related to CSS Grid where I jumped in with answers that use many of the techniques we covered here together. It’s a good list that shows just how many real use cases and real-world situations come up where these things come in handy:
 
 
 
 Change the number of columns and rows in a grid as the number of items increaseCSS Grid – 2×2 grid always taking up the full width when possibleHow to repeat a CSS grid layout pattern?Create CSS grid layout with pure CSSCSS Grid vs dynamic definition list autoplacementCSS Grid – alternate order of elements only on DesktopImage Tile Using CSS GridHow to fix this complex CSS grid of photos based on 4 columns?Repeating grid layout with unknown amount of itemsCreating a repeating CSS Grid layoutIs it possible to make every second row in a CSS Grid to have different number of columns?Place items in pairs in two rows using css gridHow to set up a dynamic grid based on flex or gridCSS complex grid auto layoutCan I stack a right-hand set of columns with CSS Grid instead of Flex?Change grid layout depending on number of elements
 
 
 Wrapping up
 
 
 CSS Grid has been around for years, but there are still a lot of little-known and used tricks that aren’t widely discussed. The implicit grid and auto-placement features are two of them!
 
 
 
 And yes, this can get challenging! It has taken me a lot of time to grok the logic behind implicit grids and I still struggle with auto-placement. If you want to spend more time wrapping your head around explicit and implicit grids, here are a couple of additional explanations and examples worth checking out:
 
 
 
     		
     
       
 
   
     
                 
         Article
       
 
     on
 
     Oct 22, 2018  
 
   
     
       Understanding the difference between grid-template and grid-auto    
   
 
   
       
       grid grid-auto-flow grid-template-columns grid-template-rows implicit grid    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Article
       
 
     on
 
     Jul 28, 2017  
 
   
     
       A Collection of Interesting Facts about CSS Grid Layout    
   
 
   
       
       grid grid-auto-flow grid-template-columns grid-template-rows implicit grid    
   
   
     
           
   
     
       Manuel Matuzovic    
   
 
 
     
   
 
 
 
 Similarly, you might want to read about grid-auto-columns in the CSS-Tricks Almanac because Mojtaba Seyedi goes into great detail and includes incredibly helpful visuals to help explain the behavior.
 
 
 
 Like I said when we started, the methods we covered here are not meant to replace the common ways you already know for building grids. I am simply exploring different ways that can be helpful in some cases.
 
 Exploring CSS Grid’s Implicit Grid and Auto-Placement Powers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Scroll Shadows? Pure CSS Parallax? Game Back On.</title>
         <link href="https://css-tricks.com/scroll-shadows-pure-css-parallax-game-back-on/"/>
       <updated>2022-07-29T14:55:31.000Z</updated>
       <content type="text">Chris calls scroll shadows one his favorite CSS-Tricks of all time. Lea Verou popularized the pure CSS approach using four layered background gradients with some clever background-attachment magic. The result is a slick scrolling interaction that gives users a hint that additional content is available in a scrollable container.
 
 
 
 CodePen Embed Fallback
 
 
 
 Just one problem: it broke in Safari iOS 13. One day it was all good. The next, not so much. And that wasn’t the only thing affected. Keith Clark’s CSS-only parallax effect also stopped working right about then.
 
 
 
 Well, reader Ronald wrote in to say that all is working once again! In fact, I’m writing this on my iPad (Safari 15.5) right now and Chris’s demo is looking sharp as ever. So is Keith’s original demo.
 
 
 
 So, what broke it? We still don’t know. But the Safari 13 release notes offer clues:
 
 
 
 Added support for one-finger accelerated scrolling to all frames and overflow:scroll elements eliminating the need to set-webkit-overflow-scrolling: touch.Changed the default behavior on iPad for wide web pages with responsive meta-tags that require horizontal scrolling. Pages are scaled to prevent horizontal scrolling and any text is resized to preserve legibility.
 
 
 
 When was it fixed and what fixed it? Well, on the scroll shadow side, the Safari 15.4 included some work on background-attachment: local that may have done the trick. On the parallax side, Safari 14.1 added support for individual transform properties… so maybe that?
 
 Scroll Shadows? Pure CSS Parallax? Game Back On. originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Recreating MDN’s Truncated Text Effect</title>
         <link href="https://css-tricks.com/recreating-mdns-truncated-text-effect/"/>
       <updated>2022-07-28T17:18:46.000Z</updated>
       <content type="text">It’s no secret that MDN rolled out a new design back in March. It’s gorgeous! And there are some sweet CSS-y gems in it that are fun to look at. One of those gems is how card components handle truncated text.
 
 
 
 
 
 
 
 
 
 
 
 Pretty cool, yeah? I wanna tear that apart in just a bit, but a couple of things really draw me into this approach:
 
 
 
 It’s an example of intentionally cutting off content. We’ve referred to that as CSS data loss in other places. And while data loss is generally a bad thing, I like how it’s being used here since excerpts are meant to be a teaser for the full content.This is different than truncating text with text-overflow: ellipsis, a topic that came up rather recently when Eric Eggert shared his concerns with it. The main argument against it is that there is no way to recover the text that gets cut off in the truncation — assistive tech will announce it, but sighted users have no way to recover it. MDNs approach provides a bit more control in that department since the truncation is merely visual.
 
 
 
 So, how did MDN do it? Nothing too fancy here as far the HTML goes, just a container with a paragraph.
 
 
 
 &lt;div class&#x3D;&quot;card&quot;&gt;
   &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Inventore consectetur temporibus quae aliquam nobis nam accusantium, minima quam iste magnam autem neque laborum nulla esse cupiditate modi impedit sapiente vero?&lt;/p&gt;
 &lt;/div&gt;
 
 
 
 We can drop in a few baseline styles to shore things up.
 
 
 
 CodePen Embed Fallback
 
 
 
 Again, nothing too fancy. Our goal is cut the content off after, say, the third line. We can set a max-height on the paragraph and hide the overflow for that:
 
 
 
 .card p {
   max-height: calc(4rem * var(--base)); /* Set a cut-off point for the content */
   overflow: hidden; /* Cut off the content */
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Whoa whoa, what’s up with that calc() stuff? Notice that I set up a --base variable up front that can be used as a common multiplier. I’m using it to compute the font-size, line-height, padding for the card, and now the max-height of the paragraph. I find it easier to work with a constant values especially when the sizing I need is really based on scale like this. I noticed MDN uses a similar --base-line-height variable, probably for the same purpose.
 
 
 
 Getting that third line of text to fade out? It’s a classic linear-gradient() on the pargraph’s :after pseudo-element, which is pinned to the bottom-right corner of the card. So, we can set that up:
 
 
 
 .card p:after {
   content: &quot;&quot;; /* Needed to render the pseudo */
   background-image: linear-gradient(to right, transparent, var(--background) 80%);
   position: absolute;
   inset-inline-end: 0; /* Logical property equivalent to &#x60;right: 0&#x60; */
 }
 
 
 
 Notice I’m calling a --background variable that’s set to the same background color value that’s used on the .card itself. That way, the text appears to fade into the background. And I found that I needed to tweak the second color stop in the gradient because the text isn’t completely hidden when the gradient blends all the way to 100%. I found 80% to be a sweet spot for my eyes.
 
 
 
 And, yes, :after needs a height and width. The height is where that --base variables comes back into play because we want that scaled to the paragraph’s line-height in order to cover the text with the height of :after.
 
 
 
 .card p:after {
   /* same as before */
   height: calc(1rem * var(--base) + 1px);
   width: 100%; /* relative to the .card container */
 }
 
 
 
 Adding one extra pixel of height seemed to do the trick, but MDN was able to pull it off without it when I peeked at DevTools. Then again, I’m not using top (or inset-block-start) to offset the gradient in that direction either. 🤷‍♂️
 
 
 
 Now that p:after is absolutely positioned, we need to explicitly declare relative positioning on the paragraph to keep :after in its flow. Otherwise, :after would be completely yanked from the document flow and wind up outside of the card. This becomes the full CSS for the .card paragraph:
 
 
 
 .card p {
   max-height: calc(4rem * var(--base)); /* Set a cut-off point for the content */
   overflow: hidden; /* Cut off the content */
   position: relative; /* needed for :after */
 }
 
 
 
 We’re done, right? Nope! The dang gradient just doesn’t seem to be in the right position.
 
 
 
 CodePen Embed Fallback
 
 
 
 I’ll admit I brain-farted on this one and fired up DevTools on MDN to see what the heck I was missing. Oh yeah, :after needs to be displayed as a block element. It’s clear as day when adding a red border to it.🤦‍♂️
 
 
 
 CodePen Embed Fallback
 
 
 
 .card p:after {
   content: &quot;&quot;;
   background: linear-gradient(to right, transparent, var(--background) 80%);
   display: block;
   height: calc(1rem * var(--base) + 1px);
   inset-block-end: 0;
   position: absolute;
   width: 100%;
 }
 
 
 
 All together now!
 
 
 
 CodePen Embed Fallback
 
 
 
 And, yep, looks sounds like VoiceOver respects the full text. I haven’t tested any other screen readers though.
 
 
 
 
 
 
 
 I also noticed that MDN’s implementation removes pointer-events from p:after. Probably a good defensive tactic to prevent odd behaviors when selecting text. I added it in and selecting text does feel a little smoother, at least in Safari, Firefox, and Chrome.
 
 Recreating MDN’s Truncated Text Effect originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Why I Chose Angular to Build a URL Shortener</title>
         <link href="https://css-tricks.com/why-i-chose-angular-to-build-a-url-shortener/"/>
       <updated>2022-07-22T14:00:19.000Z</updated>
       <content type="text">URL Shorteners are tools we use to make links shorter than they actually are. With a URL Shortener, you can transform a long link (maybe for a registration form or article) into a shorter version.
 
 
 
 Behind the scenes, the long and short versions of a given link have been stored in some database. Then when a user visits the short link in a browser, the URL Shortener will redirect the user to the long version of the link (where the actual content is found).
 
 
 
 Shortened links from URL shorteners are commonly used when the long version of those links would be too long to use. Sharing links on social media or when designing flyers and adverts is a popular use of URL shorteners.
 
 
 
 For one of my projects, I created a personal URL shortener. My intention was to use it for links to articles I write or videos I make. I used Firebase to build the backend of the URL shortener. Specifically, I used the Firestore database to store short and long versions of any given link.
 
 
 
 To create links, I had to use the Firebase console. This wasn’t a problem but it was cumbersome for the high frequency of editing links. The user experience (UX) was not ideal. Now I was faced with a problem. How do I create, edit, and delete links? I needed to build a frontend for the URL shortener. I needed a website for this.
 
 
 
 In this article, we’ll review the available tools used for building this frontend, decision choices, and factors that influenced why they were made.
 
 
 
 
 
 
 Problem statement
 
 
 The project requirements were:
 
 
 
 Platform/Architecture. The engineering and structure of the coding process.UI Toolkit. Components to use for the various parts of the UI.Convenience. Building the backend was not tough, so this frontend should not be either. I wanted clean code and fast development.
 
 
 The First Decision Choice: Angular
 
 
 Many ideas come to mind when starting out to build a frontend. In a broad sense, we could categorize frontend building options into 3 platforms:
 
 
 
 Website Builders – like WordPress, Wix, Squarespace, etc.Vanilla Building – using plain HTML, CSS, and JavaScript.JavaScript Framework – like React, Vue, Angular, etc.
 
 
 
 In my experience, website builders provide a very restricted collection of widgets, components, and templates. Most website builders don’t provide an easy way to integrate an entire custom backend like Firebase. While it is possible to build impressive sites by connecting these pieces together, the degree of complexity of my project was likely beyond what these services typically provide.
 
 
 
 Using the no-framework style or vanilla would have been a possibility. However, the deciding factor that made me not choose the pure vanilla route was that the latest non-CDN version of the Firebase JavaScript SDK (Version 9) is designed with installation via npm or yarn and module bundling in mind.
 
 
 
 JavaScript frameworks handle frontend core parts (like routing, backend-linking, etc.) to reduce developer efforts. There are many of them and choosing which to use seemed to be a harder choice to make.
 
 
 
 There are many JavaScript frameworks for frontend development. Examples include Angular, React, Vue, etc.
 
 
 
 Of the available frameworks, I have the most familiarity with Angular. This is because I have used it on previous projects like:
 
 
 
 Choir Carol Quiz: Portal where Quiz participants competed in two online rounds of timed multiple choice questions on select Bible chapters.Genesys AE-FUNAI Community: Custom Form where members of Genesys Campus Club AE-FUNAI (my community) report their progress and share their achievements.Tutorial Management System: Simple session management dashboard between students and tutors.
 
 
 
 This familiarity allows me to build quickly with Angular. Being able to build quickly should not be underestimated.
 
 
 
 I chose Angular because of its Object-Oriented Programming (OOP) ability. OOP is a programming paradigm that focuses more on classes, data, or state being managed, rather than on the logic controlling the data, as is the case with functional programming. Separation of concerns is one advantage of using OOP. In other words, OOP permits encapsulation. It permits you to scope aspects of the program to peculiar domains or classes.
 
 
 
 In Angular, components (and their lifecycle methods) are scoped to TypeScript classes. This makes you think the OOP way. The OOP advantage reflects in how Angular components serve as reusable UI units in the Angular framework. That way you see an Angular component as some self-sufficient entity that is yet part of a whole. This makes frontend development easy as various parts of the frontend app can be scoped to components and hence can be used where needed.
 
 
 
 I also chose Angular because it uses TypeScript. TypeScript is JavaScript with features of a typed programming language. Typing in this context means a variable can’t change the kind of value it holds all through its life. For example, a variable holding a string will not all of a sudden hold a number while it is used in that program. Typing increases code quality and reduces bugs.
 
 
 
 As a result of its type system, TypeScript reduces the time spent debugging Angular apps. It gives developer experience as the developer will have more time to build the frontend app. Debugging also becomes easy for the developer.
 
 
 
 Note: Here is more on Object-Oriented Programming with TypeScript
 
 
 
 Still, on Angular’s advantages, Angular apps come as a complete setup. They handle important features like bundling CSS preprocessors or Angular services by themselves. That said, when using Angular, you don’t need to configure each library independently, Angular takes care of this.
 
 
 
 An Angular service is what Angular uses to configure dependency injection. In simple terms, dependency injection is providing an application with what it needs to function (dependencies) without the application having to take care of how the dependencies were gotten. I also chose Angular because of its out-of-the-box handling of services. So Firebase, for example, will be auto-provided to all Angular components that need without any extra configuration.
 
 
 
 The benefits of Object-Oriented Programming, TypeScript, and dependency injection make Angular a go-to for frontend development. Coupled with the fact I was already familiar with Angular, Angular was more convenient for this URL shortener project.
 
 
 
 Angular articles on CSS-Tricks are also part of the story. They gave me more confidence with using Angular.
 
 
 The Second Decision Choice: Material Design
 
 
 After choosing Angular, my next task was to consider how I would handle the user interface (UI).
 
 
 
 I could ignore and do vanilla CSS instead but why reinvent the wheel? After all, this would defeat the reason for using a JavaScript framework – convenience.
 
 
 
 With choosing a UI toolkit, there seems to be an ocean of options. To name a few, one can use Bootstrap, Bulma, Semantic UI, Tailwind, etc. Each toolkit has its own specifications and motivations.
 
 
 
 For the use case of my project, Material Design led the pack.
 
 
 
 One of the most important factors was the support for Angular and Material Design. There is an entire Angular-only specification for Material on material.angular.io (that is as a subdomain to the Angular docs itself).
 
 
 
 I settled for Material Design because it focuses on components. Unlike other CSS frameworks, it doesn’t have CSS utility classes. This was okay because I only wanted some component kit (buttons, icons, inputs, sidebars, snack bars, etc.) Material also adds animations, ripple, and shadow effects by itself; making it more convenient than other libraries.
 
 
 
 Furthermore, Angular Material has out-of-the-box theming support, when initializing Angular Material, you have the option of choosing a pre-defined theme for the entire Angular app or creating a custom one.
 
 
 
 
 
 
 
 For the sake of convenience, I chose a dark theme while setting up Angular Material.
 
 
 The Third Decision Choice: Reactive Forms
 
 
 With a framework and toolkit decided, I turned my attention to one of the most important features of the URL shortener. The core of the URL shortener’s frontend is the form for creating and updating links.
 
 
 
 Let’s call this form the links editor. The links editor form has only two inputs, one for the short version of a link and the other for the full URL the short version will redirect to.
 
 
 
 For managing forms, Angular comes with two mechanisms. So instead of creating a form and handling its validation and submission as is done in vanilla HTML and JavaScript, you have to use either of the two ways Angular provides. The two methods are:
 
 
 
 Template-driven formsReactive forms
 
 
 
 Template-driven forms as the name imply, involve the HTML (template) code controlling the greater part of the Angular form. This approach is preferable when your form does not do much or is for one-time usage.
 
 
 
 Reactive forms, on the other hand, provide a model-driven approach to handling form inputs whose values change over time. I needed reactive forms because it is the same form that I will use to edit different links at any point in time.
 
 
 
 Note: Here is more material on using Reactive Forms.
 
 
 
 At this point, the benefits of previous choices began playing out. Angular Material has form-field components. The form-field wraps the input as a component and provides animations, ripple effects, and error messages if necessary.
 
 
 
 
 
 
 
 So I used it for the two inputs of the editor form.
 
 
 The Fourth Decision Choice: Angular Material Bottom Sheet and Drawer
 
 
 The final decision involved how to improve the user experience. The URL shortener would need other features like viewing all created links and their analytics. These features would require space on the screen that required me to rethink if there were better solutions to display the links editor form to the user.
 
 
 
 If the user has no current need for the links editor form, it makes sense for the links editor form to not always be in view. This would free up space on the UI for other elements.
 
 
 
 However, splitting this user experience into two separate pages felt disruptive. Instead, to open the links editor when needed, I added a floating action button on the page for creating links. When clicked, the button will cause the editor form to be opened in any fitting UI component.
 
 
 
 A bottom sheet, as the name implies, is a UI component that opens from the bottom of the screen. It has interactive content the user can work it. It overlays the current view of a mobile screen (but doesn’t fully block it).
 
 
 
 
 
 
 
 Bottom sheets are usually used in place of pop-ups if the user will spend a long time interacting with their content. So, bottom sheets are a good fit to open the editor on mobile screens. However, interacting with a bottom sheet is hard when the screen is wide. I needed a different UI component for the links editor form on wide screens.
 
 
 
 Drawers open by the side. Using a drawer to open the links editor form on a wide screen was the go-to option. Drawers won’t be good for the editor on mobile screens. The screen’s width would be relatively small and the drawer might completely block the screen (which is not a desirable UX).
 
 
 
 
 
 
 
 I selected these two UI components from Material Design for the form to have some responsive effect. So whether on my phone or laptop creating links would be done in a fitting UI component.
 
 
 
 In the code, Angular checks if the device is of small screen width. If so, it opens a bottom sheet containing the links editor form. On the other hand, if the screen is wide, Angular opens a drawer containing the same form.
 
 
 
 Using these two components brought about a minor complication. If my phone is rotated or my laptop’s browser window’s width is reduced, the form opens on the contrary UI component. That is instead of opening in a drawer in a laptop, it will open in a bottom sheet (because the browser’s width was reduced).
 
 
 Maintenance, Future-proofing, Future Releases
 
 
 When I thought of opportunities to iterate on this project, I ran into limitations with the current use case designed to support a single administrator. But with authentication and user accounts, it can support additional users managing links and accessing analytics.
 
 
 
 In that case, the above choices of components will still be appropriate. The links editor is responsive so on any device, users will have a good user experience.
 
 
 
 If I had to do it all over again, I think I would have tried out the vanilla method. Building entirely without any helpers like Angular, Material, or UI components. I would try building from scratch in HTML, CSS, and JavaScript and see if I didn’t lose out on convenience as I thought I would.
 
 
 Conclusion
 
 
 You can access the final Angular code here on GitHub.
 
 
 
 This was a review of some of the main choices I made when developing my project. Of course, there is more to building the frontend of a URL shortener. But for a start, these UI components made the building process convenient. They made the links editor form responsive and could be of similar use to you in your projects (not necessarily a URL shortener).
 
 
 
 There are many other UI components from various libraries you can use for any such project. But as with my case, if convenience is a deciding factor, you would make the right decision choice that would be fitting for the UI.
 
 
 
 Ultimately, what shaped my decisions was understanding what my project required, knowledge of tools I had used from previous projects, and expectations with time constraints. My past experience — successes and mistakes — helped guide me too.
 
 
 
 Cheers!
 
 Why I Chose Angular to Build a URL Shortener originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Roundup of Recent Document Outline Chatter</title>
         <link href="https://css-tricks.com/roundup-of-recent-document-outline-chatter/"/>
       <updated>2022-07-21T14:04:34.000Z</updated>
       <content type="text">It’s not everyday that HTML headings are the topic de jour, but my folder of saved links is accumulating articles about the recently merged removal of the document outline algorithm in the WHATWG Living Standard.
 
 
 
 First off, you should know that the algorithm never really existed. Sure, it was in the spec. And sure, there was a warning about using it in the spec. But no browser ever implemented it, as Bruce Lawson reminded us. We have been living in a flat document structure the whole time.
 
 
 
 
 
 
 
 This is very old news. Adrian Roselli has been writing about the document outline myth since 2013. But it’s his 2016 post titled “There Is No Document Outline Algorithm” that comprehensively spells it out and has been updated regularly with extra nuggets of context about the conversations and struggles that got us here. This is really the best timeline of the saga. Amelia Bellamy-Royds has also delved into the roots of the dilemma in the past here on CSS-Tricks.
 
 
 
 My mind instantly goes to all the work that’s gone into the making of a document outline algorithm that supports sectioning. Removing it from the spec is the right call for sure, but it doesn’t take away from the herculean efforts that went into it even if it is now buried in some version history. I also think about all the well-intentioned folks who have written about the algorithm erroneously over time (including on this very site!) with the expectation that it was just around the corner. There’s nearly seven years of mental and technical debt that we’ve accrued from what appear to be a lack of action.
 
 
 
 Looking past the “news” that the algorithm is officially no more, Bruce laments that there is no generic &lt;h&gt; element or the like that can be sectioned to produce the correct heading level. I agree. Having an &lt;h1&gt; element essentially exist as an exposed &lt;title&gt; is constraining, particularly since pages are so rarely structured around a single article with a single top-level heading. I often find myself wincing every time I’m making some sort of card component where using &lt;h3&gt; might be technically correct, but feels out of order. And that’s before we even talk about the styling considerations where a lower heading level now needs to look like a distinct higher heading level.
 
 
 
 Speaking of heading level management, Steve Faulkner (who authored the PR that plucked the algorithm from the spec) has a super practical overview of using the &lt;hgroup&gt; element to handle heading patterns that involve subheadings, subtitles, alternative titles, snd taglines. I’m sure you’ve seen markup like this in the wild:
 
 
 
 &lt;h1&gt;Disappointingly Average&lt;/h1&gt;
 &lt;h2&gt;The Autobiography of Geoff Graham&lt;/h2&gt;
 &lt;h3&gt;by Geoff Graham&lt;/h3&gt;
 
 
 
 That doesn’t jive with a flat document outline that’s driven by heading levels. Each one of those headings represents a section that forms a hierarchy of information:
 
 
 
 Disappointingly Average
 └── The Autobiography of Geoff Graham
     └── by Geoff Graham
 
 
 
 What we want instead is a group of headings. Cue the &lt;hgroup&gt; element:
 
 
 
 When nested within a &lt;hgroup&gt; element, the &lt;p&gt; element’s content represents a subheading, alternative title, or tagline which are not included in the document outline.
 
 
 
 So, we get this structure:
 
 
 
 &lt;hgroup&gt;
   &lt;h1&gt;Disappointingly Average&lt;/h1&gt;
   &lt;p&gt;The Autobiography of Geoff Graham&lt;/p&gt;
   &lt;p&gt;by Geoff Graham&lt;/p&gt;
 &lt;/hgroup&gt;
 
 
 
 &lt;hgroup&gt; is role&#x3D;generic at the moment, but Steve points to a proposal that could map it to role&#x3D;group. If that happens, the accessibility tree will allow assistive tech to assign more semantic meaning to those paragraphs as the subtitle and tagline pieces that they are. Sounds easy but Steve notes challenges that are in the way. He also demos how this sort of pattern could be implemented today with ARIA attributes.
 
 
 
 As long as we’re rounding things up, Matthias Ott published a few tips on creating a structured outline with headings. Check out the end for a great list of tools to check your heading outlines.
 
 Roundup of Recent Document Outline Chatter originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Logical Properties for Useful Shorthands</title>
         <link href="https://css-tricks.com/logical-properties-for-useful-shorthands/"/>
       <updated>2022-07-20T16:16:34.000Z</updated>
       <content type="text">Michelle Barker with my favorite sorta blog post: short, practical, and leaves you with a valuable nugget for your time. Here, she gets into logical property shorthands in CSS, particularly those that set lengths just on a single axis, say only the block (vertical) axis or just the inline (horizontal) axis.
 
 
 
 I say “block” and ”inline”  because, as far as logical properties are concerned, the x-axis could just as well behave like a vertical axis depending on the current writing-mode.
 
 
 
 So, where we’ve always had padding, margin, and border shorthands that can support a multi-value syntax, none of them allow us to declare lengths on a specific axis without also setting a length on the other axis.
 
 
 
 
 
 
 
 For example:
 
 
 
 /* This gives us margin on the inline axis */
 margin: 0 3rem;
 
 
 
 …but we had to set the other axis in order to get there. With logical properties, however, we have additional shorthands for each axis meaning we can cue up the margin-inline shorthand to work specifically on the inline axis:
 
 
 
 margin-inline: 3rem;
 
 
 
 Michelle mentions my favorite logical property shorthand in passing. How many times do you position something to this sort of tune:
 
 
 
 .position-me {
   position: absolute;
   top: 0;
   right: 0;
   bottom: 0;
   left: 0;
 }
 
 
 
 We can get those four lines into in with inset: 0. Or we could target the block and inline axis directly with inset-block and inset-inline, respectively.
 
 
 
 While we’re talking shorthands, I always like to put a word of caution about ”accidental” CSS resets. Just one of the common CSS mistakes I make.
 To Shared Link — Permalink on CSS-Tricks
 Logical Properties for Useful Shorthands originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How stroke-dasharray Patterns Work</title>
         <link href="https://css-tricks.com/how-stroke-dasharray-patterns-work/"/>
       <updated>2022-07-15T19:43:40.000Z</updated>
       <content type="text">Say you have a line in SVG:
 
 
 
 &lt;svg&gt;
   &lt;line x1&#x3D;&quot;0&quot; y1&#x3D;&quot;30&quot; x2&#x3D;&quot;500&quot; y2&#x3D;&quot;30&quot; stroke-color&#x3D;&quot;#f8a100&quot; /&gt;
 &lt;/svg&gt;
 
 
 
 You can use the stroke-dasharray property in CSS to make dashes:
 
 
 
 line {
   stroke-dasharray: 5;
 }
 
 
 
 That 5 value is a relative unit based on the size of the SVG’s viewBox. We could use any CSS length, really. But what it does is make a pattern of dashes that are 5 units long with 5 unit gaps between them.
 
 
 
 CodePen Embed Fallback
 
 
 
 So far, so good. We can use two values where the second value individually sets the gap length:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now we have dashes that are 5 units and gaps that are 10. Let’s try a third value:
 
 
 
 CodePen Embed Fallback
 
 
 
 See how we’re forming a pattern here? It goes:
 
 
 
 Dash: 5 unitsGap: 10 unitsDash: 15 units
 
 
 
 You’d think it repeats after that in the exact same cadence. But no! It if did, we’d have dashes bumping into one another:
 
 
 
 Dash: 5 unitsGap: 10 unitsDash: 15 unitsDash: 5 unitsGap: 10 unitsDash: 15 units…and so on.
 
 
 
 Instead, stroke-dasharray gets all smart and duplicates the pattern if there are an odd number of values So…
 
 
 
 stroke-dasharray: 5 10 15;
 
 /* is the same as */
 stroke-dasharray: 5 10 15 5 10 15;
 
 
 
 That’s actually why a single value works! Earlier, we declared a single 5 value. That’s really the same as saying stroke-dasharray: 5 5. Without the second value, stroke-dasharray implicitly duplicates the first value to get a repeatable pattern. Otherwise, it’d just be a solid line of dashes that are 5 units long, but no gaps between them!
 
 
 
 The pattern also depends on the size of the shape itself. Our SVG line is 500 units. Let’s set larger stroke-dasharray values and add them up:
 
 
 
 stroke-dasharray: 10 20 30 40 50; /* 150 units */
 
 
 
 If the pattern runs four times (150 units ⨉ 4 iterations), we’re dealing with 600 total units. That additional 100 units is lopped off to prevent the pattern from overflowing itself.
 
 
 
 That’s all.
 
 
 
 CodePen Embed Fallback
 
 
 
 🎩 Hat tip to Joshua Dance for calling this out!
 
 How stroke-dasharray Patterns Work originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Office Spaces</title>
         <link href="https://css-tricks.com/office-spaces/"/>
       <updated>2022-07-14T14:07:01.000Z</updated>
       <content type="text">I think it’s super timely that Jim Nielsen wrote about his office space the other day. My family recently re-rooted in Colorado and I was up late last night setting up my desk and everything around it. So late, in fact, that reading these words now bites me:
 
 
 
 My workspace isn’t what life revolves around.
 
 
 
 I’ve spent years trying to live up to that. I remember how important my desk was to me when I began freelancing in 2013. Remote working was an outlier then and having a desk made me feel better whenever I told someone I worked from home and I got the inevitable “Oh, you’ll get a real job one day,” look.
 
 
 
 
 
 
 
 It doesn’t look like much, but that minimalism took me forever to figure out (circa October 2013).
 
 
 
 That helped my ego, sure. But it didn’t stop my 6-month old daughter from climbing the stairs to find me. We lived in an open concept condo at the time, and the living room stairs bled straight into my office as the landing.
 
 
 
 To be fair, it’s not like I was stopping her either.
 
 
 
 That meant I sometimes had a tiny art director looking over my shoulder.
 
 
 
 
 
 
 
 …but it also forced me to find different spots to get some work done:
 
 
 
 
 
 
 
 Yanking the power cord from my office wall made me realize I could work anywhere I really needed to.
 
 
 
 
 
 
 
 Thankfully, I lived in an urban downtown that had plenty of cafés I could use as an office in a pinch.
 
 
 
 I used to love Zurb’s templates for sketching wireframes.
 
 
 
 If I’m being honest, I’ve probably done more work outside of my office than I ever have in it. It was right around this time that I had clients plugging me into various accounts for Slack, Zoom, Dropbox, Google Drive, and other tools that we now credit for creating asynchronous working environments. Other than a new banging set of Beats, there was nothing else I really needed to invest in to work this way.
 
 
 
 These were all things I was already using for myself, but it was my clients buying into them that really felt like the sea change that allowed me to call anywhere I was sitting “my” desk.
 
 
 
 Fast-forward to 2019. We moved to the ‘burbs into a house that gave me the luxury of a large dedicated office space.
 
 
 
 Check out that killer poster on the wall.
 
 
 
 My desk started to grow into the larger space.
 
 
 
 I was recording a lot of screencasts and lectures at the time. Thankfully, Chris had a bunch of practical recommendations for a homespun studio.
 
 
 
 I really lucked out when we moved because the extra space came in handy when my wife, Marcia, starting working exclusively from home following the start of the pandemic. It also meant we had enough space for when my daughters (yep, we had another along the way!) needed a homeschooling hub.
 
 
 
 
 
 
 
 So, back-of-the-napkin math tells me we had four humans in one office heading into 2020. I can’t overstate just how lucky we were to have an office like this at a time like that. It was often hectic, yes, but still gave us everything we needed (and more) to be a truly home-based family without becoming meme fodder.
 
 
 
 
 
 
 
 All of this leads me back to Jim’s post and why his comment about life revolving around desks bit me so hard. After spending so many years unraveling my life from the office, I found myself spending too much time last night curating the desk at my new home. I was essentially letting it re-establish itself as a sacred anchor in my life.
 
 
 
 So here I am trying to put Jim’s next piece of advice into action:
 
 
 
 It’s ok to have a bit of humility in your space. Perhaps a dose of it is even deserved.
 
 
 
 That means my desk is not the center of the room that it’s in. It’s a work in progress, but so far  the desk is pushed off to the side up against a wall. Behind it is a reclaimed sofa I can easily retreat to. Across from that are my guitars and ukuleles for mental breaks where I get to use my hands more than my mind. Next to those is my record collection and turntable — another refuge that encourages me to step away from the screen and indulge other interests.
 
 
 
 I’ll get some artwork up on the walls at some point.
 
 
 
 And all of it is in a space large and welcoming enough to invite life in if it needs to — family, friends, fiddling around, whatever. It’s also conveniently located right off the family room for such distractions  moments.
 
 
 What’s on my desk
 
 
 It feels odd to sign off without showing you what’s actually on my desk. It’s fun knowing what people use and how they’re set up. Here’s what I’ve got.
 
 
 
 
 
 
 
 First off, the desk itself is this one from IKEA.
 
 
 
 16″ MacBook Pro (2019)Apple Magic Keyboard (no charging or TouchID)Apple Magic Trackpad (with charging)27″ LG UltraFine 4K external monitor (2016, discontinued)27″ Dell UltraSharp 4K USB-C monitor (thank you, DigitalOcean!)Shure SM7B microphone (with mount)Focusrite Scarlett 2i2 microphone preampDBX 286s microphone preamp processorUBeesize 12’’ Ring Light with Tripod (the room is super dark)Grogu (aka Baby Yoda) and Bob Belcher figuresOrange cup for pens and a Seth Godin action figureSammy stress ball
 
 
 What’s your office like?
 
 
 Is it a traditional office you commute to? A room that’s a few steps away from your bedroom? Maybe it’s even in your bedroom? Where do you work when you’re not there? What’s in there?
 
 
 
 Inquiring minds want to know (namely mine).
 
 Office Spaces originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>React Hooks: The Deep Cuts</title>
         <link href="https://css-tricks.com/react-hooks-the-deep-cuts/"/>
       <updated>2022-07-13T13:34:08.000Z</updated>
       <content type="text">Hooks are reusable functions. They allow you to use state and other features (e.g. lifecycle methods and so on) without writing a class. Hook functions let us “hook into” the React state lifecycle using functional components, allowing us to manipulate the state of our functional components without needing to convert them to class components.
 
 
 
 React introduced hooks back in version 16.8 and has been adding more ever since. Some are more used and popular than others, like useEffect, useState, and useContext hooks. I have no doubt that you’ve reached for those if you work with React.
 
 
 
 But what I’m interested in are the lesser-known React hooks. While all React hooks are interesting in their own way, there are five of them that I really want to show you because they may not pop up in your everyday work — or maybe they do and knowing them gives you some extra superpowers.
 
 
 
 
 
 
 
 Table of Contents
 
 useReducer
 useRef
 useImperativeHandle
 useMemo
 useCallback
 Final thoughts
 
 
 useReducer
 
 
 The useReducer hook is a state management tool like other hooks. Specifically, it is an alternative to the useState hook.
 
 
 
 If you use the useReducer hook to change two or more states (or actions), you won’t have to manipulate those states individually. The hook keeps track of all the states and collectively manages them. In other words: it manages and re-renders state changes. Unlike the useState hook, useReducer is easier when it comes to handling many states in complex projects.
 
 
 Use cases
 
 
 useReducer can help reduce the complexity of working with multiple states. Use it when you find yourself needing to track multiple states collectively, as it allows you to treat state management and the rendering logic of a component as separate concerns.
 
 
 Syntax
 
 
 useReducer accepts three arguments, one of which is optional:
 
 
 
 a reducer functioninitialStatean init function (optional)
 
 
 
 const [state, dispatch] &#x3D; useReducer(reducer, initialState)
 const [state, dispatch] &#x3D; useReducer(reducer, initialState initFunction) // in the case where you initialize with the optional 3rd argument
 
 
 Example
 
 
 The following example is an interface that contains a text input, counter, and button. Interacting with each element updates the state. Notice how useReducer allows us to define multiple cases at once rather than setting them up individually.
 
 
 
 import { useReducer } from &#x27;react&#x27;;
 const reducer &#x3D; (state, action) &#x3D;&gt; {
   switch (action.type) {
     case &#x27;INCREMENT&#x27;:
       return { ...state, count: state.count + 1 };
     case &#x27;DECREMENT&#x27;:
       return { ...state, count: state.count - 1 };
     case &#x27;USER_INPUT&#x27;:
       return { ...state, userInput: action.payload };
     case &#x27;TOGGLE_COLOR&#x27;:
       return { ...state, color: !state.color };
     default:
       throw new Error();
   }
 }
 
 function App() {
   const [state, dispatch] &#x3D; useReducer(reducer, { count: 0, userInput: &#x27;&#x27;, color: false })
 
   return (
     &lt;main className&#x3D;&quot;App, App-header&quot; style&#x3D;{{ color: state.color ? &#x27;#000&#x27; : &#x27;#FF07FF&#x27;}}&gt;
       &lt;input style&#x3D;{{margin: &#x27;2rem&#x27;}}
         type&#x3D;&quot;text&quot;
         value&#x3D;{state.userInput}
         onChange&#x3D;{(e) &#x3D;&gt; dispatch({ type: &#x27;USER_INPUT&#x27;, payload: e.target.value })}
       /&gt;
       &lt;br /&gt;&lt;br /&gt;
       &lt;p style&#x3D;{{margin: &#x27;2rem&#x27;}} &gt;{state.count}&lt;/p&gt;
       &lt;section style&#x3D;{{margin: &#x27;2rem&#x27;}}&gt;
         &lt;button  onClick&#x3D;{(() &#x3D;&gt; dispatch({ type: &#x27;DECREMENT&#x27; }))}&gt;-&lt;/button&gt;
         &lt;button onClick&#x3D;{(() &#x3D;&gt; dispatch({ type: &#x27;INCREMENT&#x27; }))}&gt;+&lt;/button&gt;
         &lt;button onClick&#x3D;{(() &#x3D;&gt; dispatch({ type: &#x27;TOGGLE_COLOR&#x27; }))}&gt;Color&lt;/button&gt;
       &lt;/section&gt;
       &lt;br /&gt;&lt;br /&gt;
       &lt;p style&#x3D;{{margin: &#x27;2rem&#x27;}}&gt;{state.userInput}&lt;/p&gt;
     &lt;/main&gt;
   );
 }
 export default App;
 
 
 
 
 
 
 
 From the code above, noticed how we are able to easily managed several states in the reducer (switch-case), this shows the benefit of the useReducer. This is the power it gives when working in complex applications with multiple states.
 
 
 useRef
 
 
 The useRef hook is used to create refs on elements in order to access the DOM. But more than that, it returns an object with a .current property that can be used throughout a component’s entire lifecycle, allowing data to persist without causing a re-render. So, the useRef value stays the same between renders; updating the reference does not trigger a re-render.
 
 
 Use cases
 
 
 Reach for the useRef hook when you want to:
 
 
 
 Manipulate the DOM with stored mutable information.Access information from child components (nested elements).Set focus on an element.
 
 
 
 It’s most useful when storing mutatable data in your app without causing a re-render.
 
 
 Syntax
 
 
 useRef only accepts one argument, which is the initial value.
 
 
 
 const newRefComponent &#x3D; useRef(initialValue);
 
 
 Example
 
 
 Here I used the useRef and useState hook to show the amount of times an application renders an updated state when typing in a text input.
 
 
 
 import &#x27;./App.css&#x27;
 
 function App() {
   const [anyInput, setAnyInput] &#x3D; useState(&quot; &quot;);
   const showRender &#x3D; useRef(0);
   const randomInput &#x3D; useRef();
   const toggleChange &#x3D; (e) &#x3D;&gt; {
     setAnyInput (e.target.value);
     showRender.current++;
   
   }
   const focusRandomInput &#x3D; () &#x3D;&gt; {
     randomInput.current.focus();
   }
 
   return (
     &lt;div className&#x3D;&quot;App&quot;&gt;
       &lt;input className&#x3D;&quot;TextBox&quot; 
         ref &#x3D;{randomInput} type&#x3D;&quot;text&quot; value&#x3D;{anyInput} onChange&#x3D;{toggleChange}
       /&gt;
       &lt;h3&gt;Amount Of Renders: {showRender.current}&lt;/h3&gt;
       &lt;button onClick&#x3D;{focusRandomInput}&gt;Click To Focus On Input &lt;/button&gt;
     &lt;/div&gt;
   );
 }
 
 export default App;
 
 
 
 Notice how typing each character in the text field updates the app’s state, but never triggers a complete re-render.
 
 
 
 
 
 
 useImperativeHandle
 
 
 You know how a child component has access to call functions passed down to them from the parent component? Parents pass those down via props, but that transfer is “unidirectional” in the sense that the parent is unable to call a function that’s in the child.
 
 
 
 Well, useImperativeHandle makes it possible for a parent to access a child component’s functions.
 
 
 
 How does that work?
 
 
 
 A function is defined in the child component.A ref is added in the parent.We use forwardRef, allowing the ref that was defined to be passed to the child.useImperativeHandle exposes the child’s functions via the ref.
 
 
 Use cases
 
 
 useImperativeHandle works well when you want a parent component to be affected by changes in the child. So, things like a changed focus, incrementing and decrementing, and blurred elements may be situations where you find yourself reaching for this hook so the parent can be updated accordingly.
 
 
 Syntax
 
 
 useImperativeHandle (ref, createHandle, [dependencies])
 
 
 Example
 
 
 In this example, we have two buttons, one that’s in a parent component and one that’s in a child. Clicking on the parent button retrieves data from the child, allowing us to manipulate the parent component. It’s set up so that clicking the child button does not pass anything from the parent component to the child to help illustrate how we are passing things in the opposite direction.
 
 
 
 // Parent component
 import React, { useRef } from &quot;react&quot;;
 import ChildComponent from &quot;./childComponent&quot;;
 import &#x27;./App.css&#x27;;
 
 function useImperativeHandle() {
   const controlRef &#x3D; useRef(null);
   return (
     onClick&#x3D;{
       () &#x3D;&gt; {
         controlRef.current.controlPrint();
       }
     }
     &gt;
     Parent Box
   );
 }
 export default useImperativeHandle;
 
 
 
 // Child component
 import React, { forwardRef, useImperativeHandle, useState } from &quot;react&quot;;
 
 const ChildComponent &#x3D; forwardRef((props, ref) &#x3D;&gt; {
   const [print, setPrint] &#x3D; useState(false);
   useImperativeHandle(ref, () &#x3D;&gt; ({
     controlPrint() 
     { setPrint(!print); },
   })
   );
 
   return (
     &lt;&gt;
     Child Box
     { print &amp;&amp; I am from the child component }
   );
 });
 
 export default ChildComponent;
 
 
 Output
 
 
 
 
 
 useMemo
 
 
 useMemo is one of the least-used but most interesting React hooks. It can improve performance and decrease latency, particularly on large computations in your app. How so? Every time a component’s state updates and components re-render, the useMemo hook prevents React from having to recalculate values.
 
 
 
 You see, functions respond to state changes. The useMemo hook takes a function and returns the return value of that function. It caches that value to prevent spending additional effort re-rendering it, then returns it when one of the dependencies has changed.
 
 
 
 This process is called memoization and it’s what helps to boost performance by remembering the value from a previous request so it can be used again without repeating all that math.
 
 
 Use cases
 
 
 The best use cases are going to be any time you’re working with heavy calculations where you want to store the value and use it on subsequent state changes. It can be a nice performance win, but using it too much can have the exact opposite effect by hogging your app’s memory.
 
 
 Syntax
 
 
 useMemo( () &#x3D;&gt; 
   { // Code goes here },
   []
 )
 
 
 Example
 
 
 When clicking the button, this mini-program indicates when a number is even or odd, then squares the value. I added lots of zeros to the loop to increase its computation power. It returns the value in spilt seconds and still works well due to the useMemo hook.
 
 
 
 // UseMemo.js
 import React, { useState, useMemo } from &#x27;react&#x27;
 
 function Memo() {
   const [memoOne, setMemoOne] &#x3D; useState(0);
   const incrementMemoOne &#x3D; () &#x3D;&gt; { setMemoOne(memoOne + 1) }
   const isEven &#x3D; useMemo(() &#x3D;&gt; { 
     let i &#x3D; 0 while (i &lt; 2000000000) i++ return memoOne % 2 &#x3D;&#x3D;&#x3D; 0
   },
   [memoOne]);
   
   const square &#x3D; useMemo(()&#x3D;&gt; { 
     console.log(&quot;squared the number&quot;); for(var i&#x3D;0; i &lt; 200000000; i++);
     return memoOne * memoOne;
   },
   [memoOne]);
 
   return (
     Memo One - 
     { memoOne }
     { isEven ? &#x27;Even&#x27; : &#x27;Odd&#x27; } { square } 
   );
 }
 export default Memo
 
 
 Output
 
 
 
 
 
 
 useMemo is a little like the useCallback hook, but the difference is that useMemo can store a memorized value from a function, where useCallback stores the memorized function itself.
 
 
 useCallback
 
 
 The useCallback hook is another interesting one and the last section was sort of a spoiler alert for what it does.
 
 
 
 As we just saw, useCallback works like the useMemo hook in that they both use memoization to cache something for later use. While useMemo stores a function’s calculation as a cached value, useCallback stores and returns a function.
 
 
 Use cases
 
 
 Like useMemo, useCallback is a nice performance optimization in that it stores and returns a memoized callback and any of its dependencies without a re-render.
 
 
 Syntax
 
 
 const getMemoizedCallback &#x3D; useCallback (
   () &#x3D;&gt; { doSomething () }, []
 );
 
 
 Example
 
 
 
 { useCallback, useState } from &quot;react&quot;;
 import CallbackChild from &quot;./UseCallback-Child&quot;;
 import &quot;./App.css&quot;
 
 export default function App() {
   const [toggle, setToggle] &#x3D; useState(false);
   const [data, setData] &#x3D; useState(&quot;I am a data that would not change at every render, thanks to the useCallback&quot;);
   const returnFunction &#x3D; useCallback(
     (name) &#x3D;&gt; 
     { return data + name; }, [data]
   );
   return (
     onClick&#x3D;{() &#x3D;&gt; {
       setToggle(!toggle);
     }}
     &gt;
     {&quot; &quot;}
 
     // Click To Toggle
     { toggle &amp;&amp; h1. Toggling me no longer affects any function } 
   ); 
 }
 
 
 
 // The Child component
 import React, { useEffect } from &quot;react&quot;;
 
 function CallbackChild(
   { returnFunction }
 ) {
   useEffect(() &#x3D;&gt; 
     { console.log(&quot;FUNCTION WAS CALLED&quot;); },
     [returnFunction]);
   return { returnFunction(&quot; Hook!&quot;) };
 }
 export default CallbackChild;
 
 
 Output
 
 
 
 
 
 Final thoughts
 
 
 There we go! We just looked at five super handy React hooks that I think often go overlooked. As with many roundups like this, we’re merely scratching the surface of these hooks. They each have their own nuances and considerations to take into account when you use them. But hopefully you have a nice high-level idea of what they are and when they might be a better fit than another hook you might reach for more often.
 
 
 
 The best way to fully understand them is by practice. So I encourage you to practice using these hooks in your application for better understanding. For that, you can get way more in depth by checking out the following resources:
 
 
 
 Intro to React Hooks (Kingsley Silas)Hooks at a Glance (React documentation)Hooks Cheatsheet (Ohans Emmanuel)The Circle of a React Lifecycle (Kingsley Silas)Hooks of React Router (Agney Menon)Testing React Hooks With Enzyme and React Testing Library (Kingsley Silas)
 
 React Hooks: The Deep Cuts originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>In Praise of Shadows</title>
         <link href="https://css-tricks.com/in-praise-of-shadows/"/>
       <updated>2022-07-12T17:08:49.000Z</updated>
       <content type="text">Our dear friend Robin has a new essay called In Praise of Shadows. Now, before you hop over there looking for nuggets on CSS box shadows, text shadows, and shadow filters… this is not that. It’s an essay on photography and what Robin has learned about handing shadows with a camera.
 
 
 
 So, why share this? Because it’s cool as heck that he made an article directed page dedicated to one essay. And you’ll learn a lot about CSS if you crack open DevTools on it:
 
 
 
 
 
 
 
 Centering techniques. Notice how CSS Grid is used on the &lt;body&gt; simply to center the pamphlet. Then Robin reaches for it again on each .frame of the essay to do the same thing with the content.“Faux” background images. Robin could have made a lot of work for himself by creating a CSS class for each .frame to get the background images. Instead, he uses object-fit: cover on inlined HTML &lt;img&gt;s to maintain the aspect ratio while filling the .frame container. (He’s actually written about this before.) That sure saves a lot of CSS’ing, but it also allows him to use alt text if needed. I sorta wonder if a &lt;figure&gt;/&lt;figcaption&gt; structure could’ve worked here instead but I doubt it would provide much additional benefit for what’s going on.Stacking contexts. Another perk of those faux background images? They use absolute positioning which creates a stacking context, allowing Robin to set a z-index: 0 on the images. That way, the text stacks directly on top with z-index: 1. Again, CSS Grid is handling all the centering so things are nicely aligned.Scroll snapping. I always love it when I see CSS scroll snapping in the wild. Robin made a nice choice to use it here, as it really lends to the whole page-turning experience while scrolling through frames. Horizontal scrolling can be maddening, but also extremely elegant when executed well as it is here in how it enhances the narrow-column design. If you want a nice explanation of how it all works, Robin has also written about horizontal scroll snapping.
 
 
 
 If nothing else, Robin is an excellent writer and it’s worth reading anything he publishes, CSS and beyond.
 To Shared Link — Permalink on CSS-Tricks
 In Praise of Shadows originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Technical Writing for Developers</title>
         <link href="https://css-tricks.com/technical-writing-for-developers/"/>
       <updated>2022-07-11T12:50:13.000Z</updated>
       <content type="text">HTML, CSS, JavaScript, Python, PHP, C++, Dart — there are so many programming languages out there and you may even be totally fluent in several of them! But as we aim to write more and better code, the way we write and communicate in everyday language becomes more and more important… and perhaps even overlooked.
 
 
 
 The way we write about and around code is arguably as important as the code itself. And despite where you fall on that line, we can all agree that our words have the potential to both help and hurt code’s effectiveness.
 
 
 
 In this article, I want to outline how these two seemingly distinct fields — programming and writing — can come together and take our developer skills to the next level.
 
 
 
 
 
 
 
 Wait, technical writing? Yes, that’s exactly what I mean. I truly believe we are all writers in one sense or another. And I’m here to give you a primer with writing tips, advice, and examples for how it can make you both a better developer and communicator.
 
 
 
 Table of contents
 
 
 
 Table of contents
 Technical writing is everywhere
 What is good grammar?
 Writing code comments
 Writing pull requests 
 Reporting bugs
 Communicating with clients
 Writing microcopy
 Writing accessible markup
 Conclusion
 Technical writing resources
 
 
 Technical writing is everywhere
 
 
 Last year, the team behind the popular Mac Git client, Tower, polled more than 4,000 developers and found that nearly 50% of them spent between 3-6 hours a day writing code.
 
 
 
 
 
 
 
 And yes, that’s one survey polling a pretty niche group, but I imagine many of us fall somewhere in that range. Whatever the case, a developer isn’t writing code 24/7, because as this poll suggests, we’re spending plenty of time doing other things.
 
 
 
 That might include:
 
 
 
 demoing a new feature,documenting that new feature,updating a work ticket related to that new feature, orbacklogging work to support that new feature.
 
 
 
 Of course, there’s always time for bathroom breaks and Wordle too.
 
 
 
 Anyway, most of the things we typically do involve communicating with people like your team, colleagues, clients, users, and other developers.
 
 
 
 So we do spend a good chunk of our time communicating with humans through words in addition to the communication we have with computers through code. Words are written language. And if we wrote our words better, we’d communicate better. When we communicate better, we’re more likely to get what we want.
 
 
 
 That’s Technical Writing 101.
 
 
 
 
 
 
 
 And it doesn’t even end here.. Some programmers also like to make their own products, which means they need to make marketing part of their job. Technical writing plays a huge role in that too. So, yeah. I think it’s pretty fair to say that technical writing is indeed everywhere.
 
 
 What is good grammar?
 
 
 With so many programming languages out there, the last thing we want is to learn another one.
 
 
 
 Grammar is an integral part of English, and it unlocks the full potential of communication. It makes us more formal, professional, and coherent.
 
 
 
 Let me give you a quick rundown on language.
 
 
 The English syntax
 
 
 Just like programming languages, English has a well-defined syntax, and it starts with words.
 
 
 
 Words are the building blocks of English, and they fall into eight buckets:
 
 
 
 
 
 
 
 
 
 Nouns
 
 
 These can be names of people, animals, places, concepts, and objects.
 
 
 
 Example:CSS is one of the core languages of front-end development.
 
 
 
 
 
 
 Verbs
 
 
 Verbs convey action. Even “is” can be considered an action.
 
 
 
 Example:Marcia codes in the morning and answers emails in the afternoon.
 
 
 
 
 
 
 
 
 Adjectives
 
 
 Adjectives are how we describe nouns. They’re like meta that adds more detail to a sentence to paint a vivid picture.
 
 
 
 Examples:
 
 
 
 CSS is an elegant and poetic language.The HTML for tables is complex and cumbersome.The Box Model is important to understand CSS.
 
 
 
 
 
 
 Prepositions
 
 
 Prepositions create a relationship between a noun and other words, often indicating direction, time, location, and space.
 
 
 
 Examples:
 
 
 
 Did you commit your work to the repo?What is the best approach for this component?We conducted interviews with real users.
 
 
 
 
 
 
 
 
 Adverbs
 
 
 Sometimes actions need to be more specific, so we use adverbs such as “runs fast” and “compiles slowly.” They often end in “-ly.”
 
 
 
 Examples:
 
 
 
 This is easily the best idea of them all.Chip waited patiently for Dale’s feedback.The team worked diligently on the project.
 
 
 
 
 
 
 Conjunctions
 
 
 Conjunctions connect phrases in a sentence. Remember this classic song from the show School House Rocks?
 
 
 
 Examples:
 
 
 
 CSS for styling while HTML is for markup.Yes, I write code, but I also work on design.That fixes the bug. Yet it introduced a new one.
 
 
 
 
 
 
 
 
 Transitions
 
 
 Paragraphs are made of sentences that are connected to each other using transitions.
 
 
 
 Examples:
 
 
 
 There are many programming languages. However, only a few are used in the web industry.First, clone the directory.I like this approach but on the other hand, I know another one.
 
 
 
 
 
 
 Pronouns
 
 
 When nouns become repetitive, we replace them with pronouns such as: “he,” “it,” and “that.”
 
 
 
 Examples:
 
 
 
 CSS is a stylesheet language. We use it to style websites.Tony loves to code and he practices every day.Our customers are tech-savvy because they know code.
 
 
 
 
 
 
 Think of these like UI components: they are modular pieces you can move around to construct a complete and robust sentence, the same way you might piece together a complete and robust UI. Do all of the components need to be there all of the time? Certainly not! Assemble a sentence with the pieces you need to complete the experience, just as you would with an interface.
 
 
 Voice and tone
 
 
 Vocabulary, punctuation, sentence structure, and word choice. These are all the ingredients of English. We use them to share ideas, communicate with our friends and family, and send emails to our coworkers.
 
 
 
 But it’s crucial to consider the sound of our messages. It’s amazing how one exclamation point can completely shift the tone of a message:
 
 
 
 I like programming.I like programming! :)
 
 
 
 It’s easy to confuse voice for tone, and vice versa.
 
 
 
 Voice is what concerns our choice of words, which depends on context. For example, a tutorial for beginners is more likely to use slang and informal language to convey a friendly voice, whereas documentation might be written in a formal, serious, and professional manner in an effort to get straight to the point.
 
 
 
 The same message, written in two different voices:
 
 
 
 Fun: “Expand your social network and stay updated on what’s trending now.”Serious: “Find jobs on one of the largest social networking apps and online jobs market.”
 
 
 
 It’s not unusual to accidentally write messages that come across as condescending, offensive, and unprofessional. This is where tone comes into play. Read your messages out loud, get other people to read them for you, and experiment with your punctuation and sentence structure. That’s how you hone your tone.
 
 
 
 Here’s another way to think of it: your voice never changes, but your tone does. Your voice is akin to who you are as a person, whereas tone is how you respond in a given situation.
 
 
 Active and passive voice
 
 
 A sentence always contains an actor, a verb, and a target. The order in which these come determines if the sentence is written in an active or passive voice.
 
 
 
 The actor comes first in an active voice. For example: “CSS paints the background.”
 
 
 
 Sentences that use an active voice are more straightforward than their counterparts. They’re clearer, shorter, and more understandable — perfect for a more professional voice that gets straight to the point.
 
 
 
 With a passive voice, the actor comes last. (See what I did there?) That means our actor — CSS in this case — comes at the end like this: “The background is painted by CSS.”
 
 
 
 Readers usually convert a passive voice to an active voice in their heads, resulting in more processing time. If you’ve ever heard that writing in an active voice is better, this is usually the reason why. Tech writers prefer the active voice most of the time, with very few exceptions such as citing research: “It has been suggested that …”
 
 
 
 But that doesn’t mean you should always strive for an active voice. Switching from one to the other — even in the same paragraph — can make your content flow more seamlessly from one sentence to another if used effectively.
 
 
 Avoiding mistakes
 
 
 Grammar is all about the structure and correctness of language, and there’s nothing better to achieve that than a quick proofreading of your document. It’s very important to rid your writings of spelling mistakes, grammar issues, and semantic imperfections.
 
 
 
 At the end of this article, I’ll show you the invaluable tools that professionals use to avoid writing mistakes. Obviously, there are built-in spell checkers in just about everything these days; our code editors even have spell-checking and linting plugins to help prevent mistakes. 
 
 
 
 But if you’re looking for a one-stop tool for all-things grammar, Grammarly is one of the most widely-used tools. I’m not getting a kickback for that or anything. It’s just a really great tool that many editors and writers use to write clean and clear content — similar to how you might use Emmet, eslint, or any other linter to write clean and clear code.
 
 
 Writing code comments
 
 
 The things we write for other developers can have a big impact on the overall quality of our work, whether it’s what we write in the code, how we explain the code, or how we give feedback on a piece of code.
 
 
 
 It’s interesting that every programming language comes with a standard set of features to write a comment. They should explain what the code is doing. By that, I don’t mean vague comments like this:
 
 
 
 red *&#x3D; 1.2 // Multiply &#x60;red&#x60; by 1.2 and re-assign it
 
 
 
 Instead, use comments that provide more information:
 
 
 
 red *&#x3D; 1.2 // Apply a &#x27;reddish&#x27; effect to the image
 
 
 
 It’s all about context. “What kind of program am I building?” is exactly the kind of question you should be asking yourself.
 
 
 Comments should add value
 
 
 Before we look at what makes a “good” code comment, here are two examples of lazy comments:
 
 
 
 const age &#x3D; 32 // Initialize &#x60;age&#x60; to 32
 
 
 
 filter: blur(32px); /* Create a blur effect with a 32px radius */
 
 
 
 Remember that the purpose of a comment is to add value to a piece of code, not to repeat it. If you can’t do that, you’re better off just leaving the code as-is. What makes these examples “lazy” is that they merely restate what the code is obviously doing. In this case, the comments are redundant because they tell us what we already know — they aren’t adding value!
 
 
 Comments should reflect the current code
 
 
 Out-of-date comments are no rare sight in large projects; dare I say in most projects.
 
 
 
 Let’s imagine David, a programmer and an all-around cool guy to hang out with. David wants to sort a list of strings alphabetically from A to Z, so he does the obvious in JavaScript:
 
 
 
 cities &#x3D; sortWords(cities) // sort cities from A to Z
 
 
 
 David then realizes that sortWords() actually sorts lists from Z to A. That’s not a problem, as he can simply reverse the output:
 
 
 
 cities &#x3D; sortWords(cities) // sort cities from A to Z
 cities &#x3D; reverse(cities)
 
 
 
 Unfortunately, David didn’t update his code comment.
 
 
 
 Now imagine that I didn’t tell you this story, and all you saw was the code above. You’d naturally think that after running that second line of code, &#x60;cities&#x60; would be sorted from Z to A! This whole confusion fiasco was caused by a stale comment.
 
 
 
 While this might be an exaggerated example, something similar can (and often does) happen if you’re racing against a close deadline. Thankfully, this can be prevented by following one simple rule… change your comments the same time you change the code.
 
 
 
 That’s one simple rule that will save you and your team from a lot of technical debt.
 
 
 
 Now that we know what poorly written comments look like, let’s look at some good examples.
 
 
 Comments should explain unidiomatic code
 
 
 Sometimes, the natural way of doing things isn’t right. Programmers might have to “break” the standards a bit, but when they do, it’s advisable to leave a little comment explaining their rationale:
 
 
 
  function addSetEntry(set, value) {    
   /* Don&#x27;t return &#x60;set.add&#x60; because it&#x27;s not chainable in IE 11. */  
   set.add(value);
   return set;
 }
 
 
 
 That’s helpful, right? If you were responsible for reviewing this code, you may have been tempted to correct it without that comment there explaining what’s up.
 
 
 Comments can identify future tasks
 
 
 Another useful thing to do with comments is to admit that there’s more work to be done.
 
 
 
 // TODO: use a more efficient algorithm
 linearSort(ids)
 
 
 
 This way, you can stay focused on your flow. And at a later date, you (or someone else) can come back and fix it.
 
 
 Comments can link back to the source
 
 
 So, you just found a solution to your problem on StackOverflow. After copy-pasting that code, it’s sometimes a good thing to keep a link to the answer that helped you out so you can come back to it for future reference.
 
 
 
 
 
 
 
 // Adds handling for legacy browsers
 // https://stackoverflow.com/a/XXXXXXX
 
 
 
 This is important because solutions can change. It’s always good to know where your code came from in case it ever breaks.
 
 
 Writing pull requests 
 
 
 Pull requests (PRs) are a fundamental aspect of any project. They sit at the heart of code reviews. And code reviews can quickly become a bottleneck in your team’s performance without good wording.
 
 
 
 A good PR description summarizes what change is being made and why it’s being made. Large projects have a pull request template, like this one adapted from a real example:
 
 
 
 ## Proposed changes
 Describe the big picture of your changes here to communicate to the maintainers why we should accept this pull request.
 
 ## Types of changes
 What types of changes does your code introduce to Appium?
  - [ ] Bugfix (non-breaking change which fixes an issue)
  - [ ] New feature (non-breaking change which adds functionality)
  - ...
 
 ## Checklist
  - [ ] I have read the CONTRIBUTING doc
  - [ ] I have signed the CLA
  - [ ] Lint and unit tests pass locally with my changes
 
 ## Further comments
 If this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did and what alternatives you considered, etc…
 
 
 Avoid vague PR titles
 
 
 Please avoid titles that look like this:
 
 
 
 Fix build.Fix bug.Add patch.
 
 
 
 These don’t even attempt to describe what build, bug, or patch it is we’re dealing with. A little extra detail on what part of the build was fixed, which bug was squashed, or what patch was added can go a long way to establishing better communication and collaboration with your colleagues. It level-sets and gets folks on the same page.
 
 
 
 PR titles are traditionally written in imperative tense. They’re a one-line summary of the entire PR, and they should describe what is being done by the PR.
 
 
 
 Here are some good examples:
 
 
 
 Support custom srcset attributes in NgOptimizedImageDefault image config to 75% image qualityAdd explicit selectors for all built-in ControlValueAccessors
 
 
 Avoid long PRs
 
 
 A large PR means a huge description, and no one wants to review hundreds or thousands of lines of code, sometimes just to end-up dismissing the whole thing!
 
 
 
 Instead, you could:
 
 
 
 communicate with your team through Issues,make a plan,break down the problem into smaller pieces, orwork on each piece separately with its own PR.
 
 
 
 Isn’t it much cleaner now?
 
 
 Provide details in the PR body
 
 
 Unlike the PR title, the body is the place for all the details, including:
 
 
 
 Why is the PR being done?Why is this the best approach?Any shortcomings to the approach, and ideas to solve them if possibleThe bug or ticket number, benchmark results, etc.
 
 
 Reporting bugs
 
 
 Bug reports are one of the most important aspects of any project. And all great projects are built on user feedback. Usually, even after countless tests, it’s the users that find most bugs. Users are also great idealists, and sometimes they have feature ideas; please listen to them!
 
 
 
 For technical projects, all of this stuff is done by reporting issues. A well-written issue is easy for another developer to find and respond to.
 
 
 
 For example, most big projects come with a template:
 
 
 
  &lt;!-- Modified from angular-translate/angular-translate --&gt;
  ### Subject of the issue
  Describe your issue here.
 
  ### Your environment
  * version of angular-translate
  * version of angular
  * which browser and its version
 
  ### Steps to reproduce
  Tell us how to reproduce this issue.
 
  ### Expected behavior
  Tell us what should happen.
 
  ### Actual behavior
  Tell us what happens instead.
 
 
 Gather screenshots
 
 
 Capture the issue using your system’s screen-shooting utility.
 
 
 
 If it’s a screenshot of a CLI program, make sure that the text is clear. If it’s a UI program, make sure the screenshot captures the right elements and states.
 
 
 
 You may need to capture an actual interaction to demonstrate the issue. If that’s the case, try to record GIFs using a screen-recording tool.
 
 
 How to reproduce the problem
 
 
 It’s much easier for programmers to solve a bug when it’s live on their computer. That’s why a good commit message should come with the steps to precisely reproduce the problem.
 
 
 
 Here’s an example:
 
 
 
 Update: you can actually reproduce this error with objects:
 
  &#x60;&#x60;&#x60;html
  &lt;div *ngFor&#x3D;&quot;let value of objs; let i &#x3D; index&quot;&gt;
    &lt;input [ngModel]&#x3D;&quot;objs[i].v&quot; (ngModelChange)&#x3D;&quot;setObj(i, $event)&quot; /&gt;
  &lt;/div&gt;
  &#x60;&#x60;&#x60;
 
  &#x60;&#x60;&#x60;js
  export class OneComponent {
    obj &#x3D; {v: &#x27;0&#x27;};
    objs &#x3D; [this.obj, this.obj, this.obj, this.obj];
  ​
   setObj(i: number, value: string) {
      this.objs[i] &#x3D; {v: value};
   }
  }
  &#x60;&#x60;&#x60;
 
  The bug is reproducible as long as the trackBy function returns the same value for any two entries in the array. So weird behavior can occur with any duplicate values.
 
 
 
 Suggest a cause
 
 
 You’re the one who caught the bug, so maybe you can suggest some potential causes for why it’s there. Maybe the bug only happens after you encounter a certain event, or maybe it only happens on mobile.
 
 
 
 It also can’t hurt to explore the codebase, and maybe identify what’s causing the problem. Then, your Issue will be closed much quicker and you’re likely to be assigned to the related PR.
 
 
 Communicating with clients
 
 
 You may work as a solo freelancer, or perhaps you’re the lead developer on a small team. In either case, let’s say you’re responsible for interfacing with clients on a project. 
 
 
 
 Now, the programmer stereotype is that we’re poor communicators. We’ve been known to use overly technical jargon, tell others what is and is not possible, and even get defensive when someone questions our approach.
 
 
 
 So, how do we mitigate that stereotype? Ask clients what they want, and always listen to their feedback. Here’s how to do that.
 
 
 Ask the right questions
 
 
 Start by making sure that you and the client are on the same page:
 
 
 
 Who is your target audience?What is the goal of the site?Who is your closest competitor and what are they doing right?
 
 
 
 Asking questions is also a good way to write positively, particularly in situations when you disagree with a client’s feedback or decision. Asking questions forces that person to support their own claims rather than you attacking them by defending your own position:
 
 
 
 Are you OK with that even if it comes with an additional performance cost?Does moving the component help us better accomplish our objective?Great, who is responsible to maintain that after launch? Do you know offhand if the contrast between those two colors passes WCAG AA standards?
 
 
 
 Questions are a lot more innocent and promote curiosity over animosity.
 
 
 Sell yourself
 
 
 If you’re making a pitch to a prospective client, you’re going to need to convince them to hire you. Why should the client choose you? It’s important to specify the following:
 
 
 
 Who you areWhat you doWhy you’re a good fit for the jobLinks to relevant work you’ve done
 
 
 
 And once you get the job and need to write up a contract, remember that there’s no content more intimidating than a bunch of legalese. Even though it’s written for design projects, the Contract Killer can be a nice starting point for writing something much friendlier.
 
 
 
 Your attention to detail could be the difference between you and another developer trying to win the same project. In my experience, clients will just as easily hire a develop they think they will enjoy working with than the one who is technically the most competent or experienced for the job.
 
 
 Writing microcopy
 
 
 Microcopy is the art of writing user-friendly UI messages, such as errors. I’ll bet there have been times where you as a developer had to write error messages because they were put on the backburner all the way to launch time.
 
 
 
 That may be why we sometimes see errors like this:
 
 
 
 Error: Unexpected input (Code 693)
 
 
 
 Errors are the last thing that you want your users to deal with. But they do happen, and there’s nothing we can do about it. Here are some tips to improve your microcopy skills.
 
 
 Avoid technical jargon
 
 
 Most people don’t know what a server is, while 100% of programmers do. That’s why it’s not unusual to see uncommon terms written in an error message, like API or “timeout execution.”
 
 
 
 Unless you’re dealing with a technical client or user base, It’s likely that most of your users didn’t take a computer science course, and don’t know how the Internet works, and why a particular thing doesn’’t work. Hence, the error.
 
 
 
 Therefore, a good error message shouldn’t explain why something went wrong, because such explanations might require using scary technical terms. That’s why it’s very important to avoid using technical jargon.
 
 
 Never blame the user
 
 
 Imagine this: I’m trying to log into your platform. So I open my browser, visit your website, and enter my details. Then I’m told: “Your email/password is incorrect.”
 
 
 
 Even though it seems dramatic to think that this message is hostile, it subconsciously makes me feel stupid. Microcopy says that it’s never okay to blame the user. Try changing your message to something less finger-pointy, like this this example adapted from Mailchimp’s login: “Sorry, that email-password combination isn’t right. We can help you recover your account.”
 
 
 
 I’d also like to add the importance of avoiding ALL CAPS and exclamation points! Sure, they can be used to convey excitement, but in microcopy they create a sense of hostility towards the user.
 
 
 Don’t overwhelm the user
 
 
 Using humor in your microcopy is a good idea! It can lighten up the mood, and it’s an easy way to curb the negativity caused by even the worst errors.
 
 
 
 But if you don’t use it perfectly, it can come across as condescending and insulting to the user. That’s just a big risk to take.
 
 
 
 Mailchimp says it well:
 
 
 
 [D]on’t go out of your way to make a joke — forced humor can be worse than none at all. If you’re unsure, keep a straight face.(Emphasis mine)
 
 
 Writing accessible markup
 
 
 We could easily spend an entire article about accessibility and how it relates to technical writing. Heck, accessibility is often included in content style guides, including those for Microsoft and Mailchimp.
 
 
 
 You’re a developer and probably already know so much about accessibility. You may even be one of the more diligent developers that makes accessibility a core part of your workflow. Still, it’s incredible how often accessibility considerations are put on the back burner, no matter how important we all know it is to make accessible online experiences that are inclusive of all abilities.
 
 
 
 So, if you find yourself implementing someone else’s copywriting into your code, writing documentation for other developers, or even writing UI copy yourself, be mindful of some fundamental accessibility best practices, as they round out all the other advice for technical writing.
 
 
 
 Things like:
 
 
 
 Using semantic tags where possible (e.g. &lt;nav&gt;, &lt;header&gt;, &lt;article&gt;, etc.)Following a logical heading structureAdding alt text to imagesWatching for inline semantics (Mandy Michael has an exceptional article on this)
 
 
 
 Andy Bell offers some relatively small things you can do to make content more accessible, and it’s worth your time checking them out. And, just for kicks, John Rhea shows off some neat editing tricks that are possible when we’re working with semantic HTML elements.
 
 
 Conclusion
 
 
 Those were six ways that demonstrate how technical writing and development coincide. While the examples and advice may not be rocket science, I hope that you found them useful, whether it’s collaborating with other developers, maintaining your own work, having to write your own copy in a pinch, or even drafting a project proposal, among other things.
 
 
 
 The bottom line: sharpening your writing skills and putting a little extra effort into your writing can actually make you a better developer.
 
 
 Technical writing resources
 
 
 If you’re interested in technical writing:
 
 
 
 Advice for Technical Writing (Chris Coyier)Google’s Technical Writing GuideTechnical Writing Fundamentals (GitLab)UX Writing: Study Guide (Nielson Norman Group)Write the Docs (Technical writing community)
 
 
 
 If you’re interested in copywriting:
 
 
 
 Copywriting 101 (Copyblogger)What is Copywriting? (Ionos)SEO Copywriting Guide (Semrush)Copywriting is Still Writing (The Guardian)
 
 
 
 If you’re interested in microcopy:
 
 
 
 Introduction to Microcopy (UX Planet)Apple’s Human Interface GuidelinesMicrosoft’s Writing Style GuideMailchimp Content Style Guide
 
 
 
 If you’re interested in using a professional style guide to improve your writing:
 
 
 
 MLA Writing Style GuideAP Writing Style GuideAPA Writing Style GuideChicago Writing Style Guide
 
 
 
 If you’re interested in writing for accessibility:
 
 
 
 Improve the readability of the content on your website (Andy Bell)15 Practices to Improve Your Website Accessibility (Bruce Lawson)Accessibility Testing Tools (Chris Coyier)Why Don’t Developers Tke Accessibility Seriously? (Melanie Sumner)Naming things to improve accessibility (Hidde de Vries)
 
 Technical Writing for Developers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Collective Nouns for the Web</title>
         <link href="https://css-tricks.com/collective-nouns-for-the-web/"/>
       <updated>2022-07-01T19:15:00.000Z</updated>
       <content type="text">Melanie Sumner has this super-specific collection of web-related nouns for describing a group or set of something. You know how there’s a school or fish or a herd of cows? Same sort of thing, but for funny web jargon.
 
 
 
 
 
 
 
 Things like:
 
 
 
 A vanity is ten (10) or more domains owned by a single person, where very few are in use.A parade of RSS feeds is when you have so many RSS feeds that you have to scroll to see them all.
 
 
 
 Don’t lie, Melanie — you’ve gotta vanity go domains, don’t ya? 😂
 
 
 
 A few off the top of my head:
 
 
 
 A braintrust is a meeting of company bigwigs indirectly related to a project but with the power to “swoop and poop” on your work.A diatribe is a Pull Request with so many comments that the original scope of the work has changed.A gommit is a group of commits (group + commit) submitted as a single commit.A hot minute is the number of hours spent fixing a bug that winds up being a simple typo.A roost is four (4) or more levels of nesting in Sass.A tababyte is a unit that represents ten (10) open browser tabs in the same window. For example, two tababytes are equal to 20 open tabs.
 
 
 
 Fun times! Anything you’d add to the list? You can submit ideas to the repo. 
 To Shared Link — Permalink on CSS-Tricks
 Collective Nouns for the Web originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: Going 3D!</title>
         <link href="https://css-tricks.com/single-element-loaders-going-3d/"/>
       <updated>2022-07-01T13:24:09.000Z</updated>
       <content type="text">For this fourth and final article of our little series on single-element loaders, we are going to explore 3D patterns. When creating a 3D element, it’s hard to imagine that just one HTML element is enough to simulate something like all six faces of a cube. But  maybe we can get away with something more cube-like instead by showing only the front three sides of the shape — it’s totally possible and that’s what we’re going to do together.
 
 
 
 
 
 
 
 Article series
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — you are here
 
 
 
 The split cube loader
 
 
 Here is a 3D loader where a cube is split into two parts, but is only made with only a single element:
 
 
 
 CodePen Embed Fallback
 
 
 
 Each half of the cube is made using a pseudo-element:
 
 
 
 
 
 
 
 Cool, right?! We can use a conic gradient with CSS clip-path on the element’s ::before and ::after pseudos to simulate the three visible faces of a 3D cube. Negative margin is what pulls the two pseudos together to overlap and simulate a full cube. The rest of our work is mostly animating those two halves to get neat-looking loaders!
 
 
 
 Let’s check out a visual that explains the math behind the clip-path points used to create this cube-like element:
 
 
 
 
 
 
 
 We have our variables and an equation, so let’s put those to work. First, we’ll establish our variables and set the sizing for the main .loader element:
 
 
 
 .loader {
   --s: 150px; /* control the size */
   --_d: calc(0.353 * var(--s)); /* 0.353 &#x3D; sin(45deg)/2 */
 
   width: calc(var(--s) + var(--_d)); 
   aspect-ratio: 1;
   display: flex;
 }
 
 
 
 Nothing too crazy so far. We have a 150px square that’s set up as a flexible container. Now we establish our pseudos:
 
 
 
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   flex: 1;
 }
 
 
 
 Those are two halves in the .loader container. We need to paint them in, so that’s where our conic gradient kicks in:
 
 
 
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   flex: 1;
   background:
     conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),
     #fff 135deg, #666 0 270deg, #aaa 0);
 }
 
 
 
 The gradient is there, but it looks weird. We need to clip it to the element:
 
 
 
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   flex: 1;
   background:
     conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),
     #fff 135deg, #666 0 270deg, #aaa 0);
   clip-path:
     polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));
 }
 
 
 
 Let’s make sure the two halves overlap with a negative margin:
 
 
 
 .loader::before {
   margin-right: calc(var(--_d) / -2);
 }
 
 .loader::after {
   margin-left: calc(var(--_d) / -2);
 }
 
 
 
 Now let’s make ‘em move!
 
 
 
 .loader::before,
 .loader::after {
   /* same as before */
   animation: load 1.5s infinite cubic-bezier(0, .5, .5, 1.8) alternate;
 }
 
 .loader::after {
   /* same as before */
   animation-delay: -.75s
 }
 
 @keyframes load{
   0%, 40%   { transform: translateY(calc(var(--s) / -4)) }
   60%, 100% { transform: translateY(calc(var(--s) / 4)) }
 }
 
 
 
 Here’s the final demo once again:
 
 
 
 CodePen Embed Fallback
 
 
 The progress cube loader
 
 
 Let’s use the same technique to create a 3D progress loader. Yes, still only one element!
 
 
 
 CodePen Embed Fallback
 
 
 
 We’re not changing a thing as far as simulating the cube the same way we did before, other than changing the loader’s height and aspect ratio. The animation we’re making relies on a surprisingly easy technique where we update the width of the left side while the right side fills the remaining space, thanks to flex-grow: 1.
 
 
 
 The first step is to add some transparency to the right side using opacity:
 
 
 
 CodePen Embed Fallback
 
 
 
 This simulates the effect that one side of the cube is filled in while the other is empty. Then we update the color of the left side. To do that, we either update the three colors inside the conic gradient or we do it by adding a background color with a background-blend-mode:
 
 
 
 .loader::before {
   background-color: #CC333F; /* control the color here */
   background-blend-mode: multiply;
 }
 
 
 
 This trick only allows us to update the color only once. The right side of the loader blends in with the three shades of white from the conic gradient to create three new shades of our color, even though we’re only using one color value. Color trickery!
 
 
 
 CodePen Embed Fallback
 
 
 
 Let’s animate the width of the loader’s left side:
 
 
 
 CodePen Embed Fallback
 
 
 
 Oops, the animation is a bit strange at the beginning! Notice how it sort of starts outside of the cube? This is because we’re starting the animation at the 0% width. But due to the clip-path and negative margin we’re using, what we need to do instead is start from our --_d variable, which we used to define the clip-path points and the negative margin:
 
 
 
 @keyframes load {
   0%,
   5% {width: var(--_d); }
   95%,
   100% {width: 100%; }
 }
 
 
 
 That’s a little better:
 
 
 
 CodePen Embed Fallback
 
 
 
 But we can make this animation even smoother. Did you notice we’re missing a little something? Let me show you a screenshot to compare what the final demo should look like with that last demo:
 
 
 
 
 
 
 
 It’s the bottom face of the cube! Since the second element is transparent, we need to see the bottom face of that rectangle as you can see in the left example. It’s subtle, but should be there!
 
 
 
 We can add a gradient to the main element and clip it like we did with the pseudos:
 
 
 
 background: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;
 
 
 
 Here’s the full code once everything is pulled together:
 
 
 
 .loader {
   --s: 100px; /* control the size */
   --_d: calc(0.353*var(--s)); /* 0.353 &#x3D; sin(45deg) / 2 */
 
   height: var(--s); 
   aspect-ratio: 3;
   display: flex;
   background: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;
   clip-path: polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));
 }
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   clip-path: inherit;
   background:
     conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),
      #fff 135deg, #666 0 270deg, #aaa 0);
 }
 .loader::before {
   background-color: #CC333F; /* control the color here */
   background-blend-mode: multiply;
   margin-right: calc(var(--_d) / -2);
   animation: load 2.5s infinite linear;
 }
 .loader:after {
   flex: 1;
   margin-left: calc(var(--_d) / -2);
   opacity: 0.4;
 }
 
 @keyframes load {
   0%,
   5% { width: var(--_d); }
   95%,
   100% { width: 100%; }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 That’s it! We just used a clever technique that uses pseudo-elements, conic gradients, clipping, background blending, and negative margins to get, not one, but two sweet-looking 3D loaders with nothing more than a single element in the markup.
 
 
 More 3D
 
 
 We can still go further and simulate an infinite number of 3D cubes using one element — yes, it’s possible! Here’s a grid of cubes:
 
 
 
 CodePen Embed Fallback
 
 
 
 This demo and the following demos are unsupported in Safari at the time of writing.
 
 
 
 Crazy, right? Now we’re creating a repeated pattern of cubes made using a single element… and no pseudos either! I won’t go into fine detail about the math we are using (there are very specific numbers in there) but here is a figure to visualize how we got here:
 
 
 
 
 
 
 
 We first use a conic-gradient to create the repeating cube pattern. The repetition of the pattern is controlled by three variables:
 
 
 
 --size: True to its name, this controls the size of each cube.--m: This represents the number of columns.--n: This is the number of rows.--gap: this the gap or distance between the cubes
 
 
 
 .cube {
   --size: 40px; 
   --m: 4; 
   --n: 5;
   --gap :10px;
 
   aspect-ratio: var(--m) / var(--n);
   width: calc(var(--m) * (1.353 * var(--size) + var(--gap)));
   background:
     conic-gradient(from -90deg at var(--size) calc(0.353 * var(--size)),
       #249FAB 135deg, #81C5A3 0 270deg, #26609D 0) /* update the colors here */
     0 0 / calc(100% / var(--m)) calc(100% / var(--n));
 }
 
 
 
 Then we apply a mask layer using another pattern having the same size. This is the trickiest part of this idea. Using a combination of a linear-gradient and a conic-gradient we will cut a few parts of our element to keep only the cube shapes visible.
 
 
 
 .cube {
   /* etc. */
   mask: 
     linear-gradient(to bottom right,
        #0000 calc(0.25 * var(--size)),
        #000 0 calc(100% - calc(0.25 * var(--size)) - 1.414 * var(--gap)),
        #0000 0),
     conic-gradient(from -90deg at right var(--gap) bottom var(--gap), #000 90deg, #0000 0);  
   mask-size: calc(100% / var(--m)) calc(100% / var(--n));
   mask-composite: intersect;
 }
 
 
 
 The code may look a bit complex but thanks to CSS variables all we need to do is to update a few values to control our matrix of cubes. Need a 10⨉10 grid? Update the --m and --n variables to 10. Need a wider gap between cubes? Update the --gap value. The color values are only used once, so update those for a new color palette!
 
 
 
 Now that we have another 3D technique, let’s use it to build variations of the loader by playing around with different animations. For example, how about a repeating pattern of cubes sliding infinitely from left to right?
 
 
 
 CodePen Embed Fallback
 
 
 
 This loader defines four cubes in a single row. That means our --n value is 4 and --m is equal to 1 . In other words, we no longer need these!
 
 
 
 Instead, we can work with the --size and --gap variables in a grid container:
 
 
 
 .loader {
   --size: 70px;
   --gap: 15px;  
 
   width: calc(3 * (1.353 * var(--size) + var(--gap)));
   display: grid;
   aspect-ratio: 3;
 }
 
 
 
 This is our container. We have four cubes, but only want to show three in the container at a time so that we always have one sliding in as one is sliding out. That’s why we are factoring the width by 3 and have the aspect ratio set to 3 as well.
 
 
 
 Let’s make sure that our cube pattern is set up for the width of four cubes. We’re going to do this on the container’s ::before pseudo-element:
 
 
 
 .loader::before { 
   content: &quot;&quot;;
   width: calc(4 * 100% / 3);
   /*
      Code to create four cubes
   */
 }
 
 
 
 Now that we have four cubes in a three-cube container, we can justify the cube pattern to the end of the grid container to overflow it, showing the last three cubes:
 
 
 
 .loader {
   /* same as before */
   justify-content: end;
 }
 
 
 
 Here’s what we have so far, with a red outline to show the bounds of the grid container:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now all we have to do is to move the pseudo-element to the right by adding our animation:
 
 
 
 @keyframes load {
   to { transform: translate(calc(100% / 4)); }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Did you get the trick of the animation? Let’s finish this off by hiding the overflowing cube pattern and by adding a touch of masking to create that fading effect that the start and the end:
 
 
 
 .loader {
   --size: 70px;
   --gap: 15px;  
   
   width: calc(3*(1.353*var(--s) + var(--g)));
   display: grid;
   justify-items: end;
   aspect-ratio: 3;
   overflow: hidden;
   mask: linear-gradient(90deg, #0000, #000 30px calc(100% - 30px), #0000);
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 We can make this a lot more flexible by introducing a variable, --n, to set how many cubes are displayed in the container at once. And since the total number of cubes in the pattern should be one more than --n, we can express that as calc(var(--n) + 1).
 
 
 
 Here’s the full thing:
 
 
 
 CodePen Embed Fallback
 
 
 
 OK, one more 3D loader that’s similar but has the cubes changing color in succession instead of sliding:
 
 
 
 CodePen Embed Fallback
 
 
 
 We’re going to rely on an animated background with background-blend-mode for this one:
 
 
 
 .loader {
   /* ... */
   background:
     linear-gradient(#ff1818 0 0) 0% / calc(100% / 3) 100% no-repeat,
     /* ... */;
   background-blend-mode: multiply;
   /* ... */
   animation: load steps(3) 1.5s infinite;
 }
 @keyframes load {
   to { background-position: 150%; }
 }
 
 
 
 I’ve removed the superfluous code used to create the same layout as the last example, but with three cubes instead of four. What I am adding here is a gradient defined with a specific color that blends with the conic gradient, just as we did earlier for the progress bar 3D loader.
 
 
 
 From there, it’s animating the background gradient’s background-position as a three-step animation to make the cubes blink colors one at a time.
 
 
 
 If you are not familiar with the values I am using for background-position and the background syntax, I highly recommend one of my previous articles and one of my Stack Overflow answers. You will find a very detailed explanation there.
 
 
 
 Can we update the number of cubes to make it variables?
 
 
 
 Yes, I do have a solution for that, but I’d like you to take a crack at it rather than embedding it here. Take what we have learned from the previous example and try to do the same with this one — then share your work in the comments!
 
 
 Variations galore!
 
 
 Like the other three articles in this series, I’d like to leave you with some inspiration to go forth and create your own loaders. Here is a collection that includes the 3D loaders we made together, plus a few others to get your imagination going:
 
 
 
 CodePen Embed Fallback
 
 
 That’s a wrap
 
 
 I sure do hope you enjoyed spending time making single element loaders with me these past few weeks. It’s crazy that we started with seemingly simple spinner and then gradually added new pieces to work ourselves all the way up to 3D techniques that still only use a single element in the markup. This is exactly what CSS looks like when we harness its powers: scalable, flexible, and reusable.
 
 
 
 Thanks again for reading this little series! I’ll sign off by reminding you that I have a collection of more than 500 loaders if you’re looking for more ideas and inspiration.
 
 
 
 Article series
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — you are here
 
 
 Single Element Loaders: Going 3D! originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Bunny Fonts</title>
         <link href="https://css-tricks.com/bunny-fonts/"/>
       <updated>2022-06-30T17:28:57.000Z</updated>
       <content type="text">Bunny Fonts bills itself as the “privacy-first web font platform designed to put privacy back into the internet.” According to its FAQ:
 
 
 
 With a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user’s personal data into their own hands.
 
 
 
 Hard for my mind not to go straight to Google Fonts. Bunny Fonts even says they are a drop-in replacement for Google Fonts. It offers the same open source fonts and holds the same API structure used by Google Fonts. 
 
 
 
 
 
 
 
 Now, I’m no GDPR expert but the possibility of Google collecting data through its Fonts API is hardly unsurprising or even unexpected. I was curious to check out Google’s privacy statement for Fonts:
 
 
 
 The Google Fonts API logs the details of the HTTP request, which includes the timestamp, requested URL, and all HTTP headers (including referrer and user agent string) provided in connection with the use of our CSS API.IP addresses are not logged.
 
 
 
 Comparing that to what Bunny Fonts says in its FAQ:
 
 
 
 When using Bunny Fonts, no personal data or logs are stored. All the requests are processed completely anonymously.
 
 
 
 Or perhaps more thoroughly explained on the bunny.net GDPR statement:
 
 
 
 In most cases, the data held and collected by bunny.net does not contain any user identifiable data. In some cases, which depend on how you are using bunny.net and how your website is structured, personal data may be collected from your users. Such information includes hosting user uploaded content as well as personal data that might be transmitted in the URL, User-Agent or Referer headers of the HTTP protocol.
 
 
 
 Sounds pretty similar, right? Well, it may not have been that similar earlier this year when a German court ruled that embedded Google Fonts violated GDPR compliance. It appears that one line in the Google Fonts privacy statement about IP addresses came after the ruling, once the API scrubbed them from collected data.
 
 
 
 So, do you need to ditch Google Fonts to be GDPR compliant? I would imagine not if IP addresses were the sole concern, but I’ll leave that for folks who know the rules to comment on that.
 
 
 
 But if you are concerned about Google Font’s GDPR compliance, I guess Bunny Fonts is worth a look! And seeing that it’s powered by bunny.net’s CDN services, you should get pretty comparable performance marks.
 To Shared Link — Permalink on CSS-Tricks
 Bunny Fonts originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Text-overflow: ellipsis considered harmful</title>
         <link href="https://css-tricks.com/text-overflow-ellipsis-considered-harmful/"/>
       <updated>2022-06-30T13:38:16.000Z</updated>
       <content type="text">Eric Eggert:
 
 
 
 There are a few legitimate use cases for this technique. For example, you might have a table with titles and descriptions. To preserve more space for the title, you constrain the description to one line on small viewports to the one-line and you repeat the description on the detail page for this item.However, I often see it used on items like buttons or even form labels to make them look nicer(?) or when aligning them vertically. But once you change the viewport or resize the text, the end of the text disappears.
 
 
 
 I think “… if used in certain situations” belongs there, but it certainly makes for a better blog post title without it. As Eric says, there are legitimate use cases for truncating text. Maybe only a few, but legitimate nonetheless.
 
 
 
 
 
 
 
 The ultimate goal is to prevent “losing” data, something that can certainly happen in CSS. Text that inadvertently overflows a container is lost in the sense that it’s simply not there. And if that text is simply not there, users will miss it, even if it is the best and most well-crafted call to action ever published to the web.
 
 
 
 Eric points out that there is no way to make the text truncated by text-overflow: ellipsis visible. Once it’s gone, it’s gone (although screen readers seem to announce it). It’s practically lost data. You might be OK with that. That’s cool as long as you know what’s happening and it’s intended.
 
 
 
 But here’s what Eric says that made me want to share this:
 
 
 
 Don’t constrain the content to fit your design, make your CSS flexible to handle longer words gracefully.
 
 
 
 Again, you might want to conform content to the design. But I’d probably argue, like Eric, that the design should adapt to the content rather than the other way around. I have a hard time recalling any situation where the text on a page is unimportant or without purpose to the extent that I’d be cool cutting if off at any arbitrary point determined by a CSS property. Maybe an archive of blog posts where each post shows an excerpt of the post content before truncating, but that’s not exactly a use case for text-overflow: ellipse.
 
 
 
 CSS has the tools to make a flexible design that accounts for varying lengths of text. So maybe err on the side of writing defensive CSS… CSS that anticipates issues and knows how to gracefully handle different content scenarios. text-overflow: ellipsis might be part of your CSS arsenal for that. But it might also be throwing the baby out with the bath water. Worth asking whether losing that data is worth the cost of what that content is supposed to do before giving giving it a haircut.
 
 
 
 While we’re talking about truncating text…
 
 
 
     		
     
       
 
   
     
                 
         Link
       
 
     on
 
     Oct 1, 2021  
 
   
     
       Line Clampin’ (Truncating Multiple Line Text)    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Link
       
 
     on
 
     Sep 20, 2021  
 
   
     
       Embracing Asymmetrical Design    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Link
       
 
     on
 
     Jul 21, 2020  
 
   
     
       Using Flexbox and text ellipsis together    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Link
       
 
     on
 
     Sep 4, 2019  
 
   
     
       Multiline truncated text with “show more” button    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
     
   
 To Shared Link — Permalink on CSS-Tricks
 Text-overflow: ellipsis considered harmful originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How I Chose an Animation Library for My Solitaire Game</title>
         <link href="https://css-tricks.com/choosing-an-animation-library-for-solitaire/"/>
       <updated>2022-06-29T12:55:44.000Z</updated>
       <content type="text">There is an abundance of both CSS and JavaScript libraries for animation libraries out there. So many, in fact, that choosing the right one for your project can seem impossible. That’s the situation I faced when I decided to build an online Solitaire game. I knew I’d need an animation library, but which was the right one to choose?
 
 
 
 In this article, I’ll go through which considerations I made, what to look out for and present you with some of the most popular libraries available. I’ll go through some real-world examples with you to illustrate my points, and in the end, hopefully, you’ll be better equipped than me when I first had to choose an animation library.
 
 
 
 
 
 
 
 Your mileage with this advice may vary, of course. Everything I’m sharing here is specific to a thing I wanted to build. Your project may have completely different requirements and priorities and that’s OK. I think what’s important here is getting a first-hand account of thinking like a front-end developer with a particular goal.
 
 
 
 Speaking of which, I do consider myself a front-end developer but my background is super heavy in design. So I know code, but not to the extent of someone who is a JavaScript engineer. Just wanted to clear that up because experience can certainly impact the final decision.
 
 
 Here’s the goal
 
 
 Before we get into any decision-making let’s take a look at the sorts of animations I needed to make in this CSS-Tricks-ified version of the game:
 
 
 
 
   
     @media (max-width: 800px) {
       #solitaire_embed &gt; div {
         padding-bottom: 90% !important; /* Change aspect ratio on mobile */
       }
     }
     @media (max-width: 568px) {
       #solitaire_embed &gt; div {
         padding-bottom: 100% !important; /* Change aspect ratio on mobile */
       }
     }
     @media (max-width: 414px) {
       #solitaire_embed &gt; div {
         padding-bottom: 120% !important; /* Change aspect ratio on mobile */
       }
     }
   
   
     
     
   
 
 
 
 
 Pretty sweet, right? There’s nothing exactly trivial about these animations. There’s a lot going on — sometimes simultaneously — and a lot to orchestrate. Plus, a majority of the animations are triggered by user interactions. So, that left me with a few priorities heading into my decision:
 
 
 
 Smooth animations: The way animations are applied can have a big impact on whether they run smoothly, or display a little choppiness.Performance: Adopting any library is going to add weight to a project and I wanted my game to be as lean as possible.Convenience: I wanted a nice, clean syntax that makes it easier to write and manage the animations. I’d even trade a little extra convenience for a small performance cost if it allows me to write better, more maintainable code. Again, this bodes well for a designer-turned-developer.Browser support: Of course I wanted my game to work on any modern browser using some form of progressive enhancement to prevent completely borking legacy browsers. Plus, I definitely wanted  some future-proofing.
 
 
 
 That’s what I took with me as I went in search of the right tool for this particular job.
 
 
 Choosing between CSS or JavaScript animation libraries
 
 
 The first thing I considered when choosing an animation library was whether to go with a CSS or JavaScript-based library. There are lots of great CSS libraries, many of them with excellent performance which was a high priority for me. I was looking to do some heavy-duty animations, like the  ability to sequence animations and get callbacks on animation completion. That’s all totally possible with pure CSS — still, it’s a lot less smooth than what most JavaScript libraries offer.
 
 
 
 Let’s see how a simple sequenced animation looks in CSS and compare it to jQuery, which has plenty of built-in animation helpers:
 
 
 
 CodePen Embed Fallback
 
 
 
 The animations look the same but are created differently. To make the CSS animation, first, we have to define the keyframe animation in our CSS and attach it to a class:
 
 
 
 .card.move {
   animation : move 2s;
 }
 
 @keyframes move {
   0% { left: 0 }
   50% { left: 100px }
   100% { left: 0 }
 }
 
 
 
 We then execute the animation using JavaScript and listen for a CSS callback on the element:
 
 
 
 var cardElement &#x3D; document.getElementsByClassName(&quot;card&quot;)[0];
 var statusElement &#x3D; document.getElementsByClassName(&quot;status&quot;)[0];
 
 cardElement.classList.add(&quot;move&quot;);
 statusElement.innerHTML &#x3D; &quot;Animating&quot;
 
 var animationEndCallback &#x3D; function() {
   cardElement.classList.remove(&quot;move&quot;);
   statusElement.innerHTML &#x3D; &quot;Inactive&quot;
 }
 
 cardElement.addEventListener(&quot;webkitAnimationEnd&quot;, animationEndCallback);
 cardElement.addEventListener(&quot;oAnimationEnd&quot;, animationEndCallback); 
 cardElement.addEventListener(&quot;antionend&quot;, animationEndCallback);
 
 
 
 Having things happen in different places might be fine in a simple example like this, but it can become very confusing once things get a bit more complex. 
 
 
 
 Compare this to how the animation is done with jQuery:
 
 
 
 $(&quot;.status&quot;).text(&quot;Animating&quot;)
 $( &quot;.card&quot; ).animate({
   left: &quot;100px&quot;
 }, 1000);
 $( &quot;.card&quot; ).animate({
   left: 0
 }, 1000, function() {
   $(&quot;.status&quot;).text(&quot;Inactive&quot;)
 });
 
 
 
 Here, everything happens in the same place, simplifying things should the animations grow more complex in the future.
 
 
 
 It seemed clear that a JavaScript library was the right way to go, but which was the right one to choose for my Solitaire game? I mean, jQuery is great and still widely used even today, but that’s not something I want to hang my hat on. There are plenty of JavaScript animation libraries, so I wanted to consider something built specifically to handle the type of heavy animations I had in mind.
 
 
 Choosing a JavaScript animation library
 
 
 It quickly became apparent to me that there’s no lack of JavaScript animation libraries and new, exciting technologies. They all have benefits and drawbacks, so let’s go through some of the ones I considered and why.
 
 
 
 The Web Animations API is one such case that might replace many JavaScript animation libraries in the future. With it, you’ll be able to create complex staggered animations without loading any external libraries and with the same performance as CSS animations. The only drawback is that not all browsers support it yet. 
 
 
 
 The &lt;canvas&gt; element presents another exciting opportunity. In it, we can animate things with JavaScript, as we would with the DOM, but the animation is rendered as raster, which means we can make some high-performance animations. The only drawback is that the canvas element is essentially rendered as an image in the DOM, so if we’re looking for pixel-perfection, we might be out of luck. As someone acutely in tune with design, this was a dealbreaker for me.
 
 
 
 I needed something tried and tested, so I knew I probably had to go with one of the many JavaScript libraries. I started looking at libraries and narrowed my choices to Anime.js and GSAP. They both seemed to handle complex animations well and had excellent notes on performance. Anime is a well-maintained library with over 42.000 stars on GitHub, while GSAP is a super popular, battle-tested library with a thriving community.
 
 
 
 An active community was critical to me since I needed a place to ask for help, and I didn’t want to use a library that might later be abandoned. I considered this as part of my convenience requirements.
 
 
 Sequencing animations and callbacks
 
 
 Once I had my choices narrowed down, the next step was to implement a complex animation using my two libraries. A recurrent animation in a solitaire game is that of a card moving somewhere and then turning over, so let’s see how that looks:
 
 
 
 CodePen Embed Fallback
 
 
 
 Both animations look great! They’re smooth, and implementing both of them was pretty straightforward. Both libraries had a timeline function that made creating sequences a breeze. This is how the implementation looks in AnimeJS:
 
 
 
 var timeline &#x3D; anime.timeline({
   begin: function() {
     $(&quot;.status&quot;).text(&quot;Animating&quot;)
   },
   complete: function() {
     $(&quot;.status&quot;).text(&quot;Inactive&quot;)
   }
 });
 
 timeline.add({
   targets: &#x27;.card&#x27;,
   left: [0, 300],
   easing: &#x27;easeInOutSine&#x27;,
   duration: 500
 }).add({
   targets: &#x27;.card .back&#x27;,
   rotateY: [0, 90],
   easing: &#x27;easeInSine&#x27;,
   duration: 200
 }).add({
   targets: &#x27;.card .front&#x27;,
   rotateY: [-90, 0],
   easing: &#x27;easeOutSine&#x27;,
   duration: 200
 })
 
 
 
 Anime’s timeline() function comes built-in with callbacks on beginning and ending the animation, and creating the sequence is as easy as appending the sequential animations. First, I move the card, then I turn my back-image 90 degrees, so it goes out of view, and then I turn my front-image 90 degrees, so it comes into view.
 
 
 
 The same implementation using GSAP’s timeline() function looks very similar:
 
 
 
 var timeline &#x3D; gsap.timeline({
   onStart: function() {
     $(&quot;.status&quot;).text(&quot;Animating&quot;)
   },
   onComplete: function() {
     $(&quot;.status&quot;).text(&quot;Inactive&quot;)
   }
 });
 
 timeline.fromTo(&quot;.card&quot;, {
   left: 0
 }, {
   duration: 0.5,
   left: 300
 }).fromTo(&quot;.card .back&quot;, {
   rotationY: 0
 }, {
   rotationY: 90,
   ease: &quot;power1.easeIn&quot;,
   duration: 0.2
 }).fromTo(&quot;.card .front&quot;, {
   rotationY: -90
 }, {
   rotationY: 0,
   ease: &quot;power1.easeOut&quot;,
   duration: 0.2
 })
 
 
 Decision time
 
 
 The main difference between Anime and GSAP appears to be the syntax, where GSAP might be a little more elaborate. I was stuck with two great libraries that had very similar functionality, were able to deal with complex animation, and had a thriving community. It seemed like I had a tie race!
 
 
 
 PriorityAnimeGSAPSmooth animations✅✅Performance✅✅Convenience✅✅Browser support✅✅
 
 
 
 So, what made me choose one library over the other?
 
 
 
 I was very concerned about how the library would act under pressure. Having laggy animations in a game like Solitaire can greatly impact how fun it is to play the game. I knew I wouldn’t be able to fully see how the library performed before I created the game. Luckily, GSAP had made a stress test that compared different animation libraries to each other, including Anime.
 
 
 
 CodePen Embed Fallback
 
 
 
 Looking at that, GSAP certainly looked to be the superior library for dealing with loads of complex animations. GSAP was giving me upwards of 26 frames per second on a heavy animation that Anime was only able to top out at 19.  After reading up on GSAP more and looking into their forums, it became clear that performance was of the highest priority to the guys behind GSAP.
 
 
 
 And even though both GSAP and Anime have been around a while, Anime’s repo has been sitting somewhat dormant a couple of years while GSAP had made commits in the past couple of months.
 
 
 
 I ended up using GSAP and haven’t regretted my decision!
 
 
 
 How about you? Does any of this square with how you evaluate and compare front-end tooling? Are there other priorities you might have considered (e.g. accessibility, etc.) in a project like this? Or do you have a project where you had to pare down your choices from a bunch of different options? Please share in the comments because I’d like to know! 
 
 
 
 Oh, and if you want to see how it looks when animating a whole deck of cards, you can head over to my site and play a game of Solitaire. Have fun!
 
 How I Chose an Animation Library for My Solitaire Game originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Help Shape the Future of CSS-Tricks!</title>
         <link href="https://css-tricks.com/help-shape-the-future-of-css-tricks/"/>
       <updated>2022-06-28T19:52:48.000Z</updated>
       <content type="text">Head’s up! The survey closed on July 12, 2022. We got tons of responses — thanks to everyone for helping us out!
 
 
 
 Hey, so it’s been a minute since we announced that CSS-Tricks is now part of the DigitalOcean family. Things are pretty much business as usual and hopefully it feels that way to you, too. Now that we’re getting settled, we’re eager to start poking at the future of this site.
 
 
 
 What sort of things are we poking at? Well, that’s where you come in. You see, there’s no shortage of ideas for CSS-Tricks, but we only want to work on things that continue to make CSS-Tricks one of the spots you come to time and again for all things front-end (including actual CSS tricks).
 
 
 
 So, we put together a short little survey for you. Nothing intense, just a few questions to help us vet those ideas and ultimately shape the future of CSS-Tricks.
 
 
 
 
 
 
 
 
 Take the survey!
 
 
 
 
 Thanks so much for your help! And while I have you, thanks for continuing to hang with us. In the seven years I’ve been working here at CSS-Tricks, I know this site wouldn’t even be here today without y’all. Here’s to the future of CSS-Tricks and learning together!
 
 
 
 CSS-Tricks Newsletter
 
 
 Oh, and one more update for all of you who miss the newsletter: it will be back! But we had to drop a ton of you off the list (seriously, like 80% of all subscribers) to be compliant with legal stuff that’s over my head. No worries, though, because you can re-subscribe right down here with your email address.
 
 
 Help Shape the Future of CSS-Tricks! originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>My Dumbest CSS Mistakes</title>
         <link href="https://css-tricks.com/my-dumbest-css-mistakes/"/>
       <updated>2022-06-28T15:10:31.000Z</updated>
       <content type="text">We all make mistakes in our code. It happens! I know if I had one of those “Days Since Last Mistake” signs hanging over my desk, a big ol’ goose egg would be hovering above me all the time. It doesn’t have to be big mistakes, either. My clumsy self has committed small errors to repos ranging from typos all the way to complete npm module directories.
 
 
 
 Whooooooops.
 
 
 
 That’s one of the things I really love about CSS: it’s forgiving as heck. If it doesn’t understand a typo, it keeps looking up the cascade in search of a match. None of that stuff where one out of place characters breaks a site and takes no prisoners. But it’s still embarrassing when CSS mistakes pop up!
 
 
 
 
 
 
 
 Like this one I find myself making way more times than I’d like to admit:
 
 
 
 .element {
   display: flexbox; /* 🤦‍♂️ */
 }
 
 
 
 Or when I try setting a gradient without a background property:
 
 
 
 .gradient {
   linear-gradient(45deg, rgb(50% 100% 90%), rgb(62% 85% 93%));
 }
 
 
 
 I hate how close X and C are on a keyboard because I can’t count how many times I’m blazing through something and mistake px for pc units.
 
 
 
 .element {
   font-size: 16pc; /* I meant pixels! */
 }
 
 
 
 Another CSS mistake I catch every so often is one I know many other folks make because I spot it too often in blog posts with code snippets:
 
 
 
 // This is not a CSS comment.
 .element {
   /* This is a CSS comment. */
 }
 
 
 
 Have you ever forgotten to use var() around a CSS variable? I sure have.
 
 
 
 .element {
   color: --primary-color;
 }
 
 
 
 Speaking of CSS variables, naming them is hard (like everything else) and I often use some incorrect version of a variable that I named!
 
 
 
 :root {
   --color-primary: #FF5722;
   --color-secondary: #3E2723;
 }
 
 /* Much later on... */
 
 .element {
   color: var(--primary-color); /* 🙃 */
 }
 
 
 
 Yes, I have indeed copied a snippet of CSS before only to have fancy quotes get in the way of making it work:
 
 
 
 .element::before {
   content: “”; /* Should be &quot;&quot; */
 }
 
 
 
 And, yes, I have spent way too long figuring out those quotes were the culprit.
 
 
 
 Looking at that last one reminds me that I sometimes forget to set the content property when I’m working with ::before or ::after. Which reminds me of how I’ve forgotten to set an element’s position before trying to offset it or change its z-index. Seriously, these things happen!
 
 
 It’s hard talking about mistakes
 
 
 Have you ever finished reading some blog post sharing some amazing trick and felt some sort of Imposter Syndrome? I think that’s largely because blog posts often mask the real work — and failures — that go into amazing tricks. As someone who reads posts like that for a living, I can tell you that many, if not the vast majority, go through many rounds of editing where potentially embarrassing mistakes are weeded out and smoothed over.
 
 
 
 Even those ridiculously awesome articles have to fail before they get all those ooooos and ahhhhhs.
 
 
 
 The same is true of any app, website, demo, or whatever you happen to come across. The chances any of them came out perfect the first time is next to nothin’.
 
 
 
 But if I’m being totally honest with you, I’m often more amazed (and interested) in the journey it takes to accomplish something, warts and all. The journey is a glimpse into what it’s like to think like a front-end developer. That’s where real (and most valuable) learning happens.
 
 
 
 And all of this is merely building up to what I really want to ask…
 
 
 What are your dumbest CSS mistakes?
 
 
 C’mon, we all know you’ve made some! Let us learn from them!
 
 My Dumbest CSS Mistakes originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Great (and Free!) Web Development Books You Can Get Online</title>
         <link href="https://css-tricks.com/web-development-books-you-can-get-for-free/"/>
       <updated>2022-06-27T13:27:49.000Z</updated>
       <content type="text">Right after “Where is the best place to learn?” perhaps the most commonly asked question I hear from folks getting into code is “What web development books should I get to learn?” Well, consider this an answer to that question as I’ve curated a list of books that are not only great for getting into front-end development but also freely available.
 
 
 
 
 
 
 Table of Contents
 
 Books on CSS
 Books on HTML &amp; CSS
 Books on process
 Books on JavaScript
 Wrapping up
 
 Books on CSS
 
 
 This is the bulk of where we’re going to hang out because, well, this is a site mostly about CSS!
 
 
 The Magic of CSS by Adam Schwartz
 
 
 Perfect for: Next steps in your CSS journeyLearning level: IntermediateRequires: Some basic understanding of CSS
 
 
 
 Adam Schwartz covers six CSS concepts in this book, including the box model, layout, tables, color, typography, and transitions. These are things even stump some seasoned CSSers, some of these concepts might be confusing. Adam has gone to a great length to demystify each.
 
 
 
 In addition to the book being a great primer on complex CSS concepts, I love how each of the CSS properties mentioned throughout the book is clickable so you can always click on them to see how each is applied. There are many illustrative examples and recommendations for further reading, should you desire to learn more about each chapter.
 
 
 
 I found the chapter on colors very interesting not only because it gets into the best practices for using color accessibly, but also because there’s super practical applications, like when Adam gets into using CSS to support an organization’s branding.
 
 
 
 
 Direct link
 
 
 
 Resilient Web Design by Jeremy Keith
 
 
 Perfect for: Developing strategies for writing codeLearning level: IntermediateRequires: Some basic understanding of CSS
 
 
 
 Straight from the introduction:
 
 
 
 You won’t find any code in here to help you build better websites. But you will find ideas and approaches. Ideas are more resilient than code. I’ve tried to combine the most resilient ideas from the history of web design into an approach for building the websites of the future.
 
 
 
 What Jeremy does so well is describing soft skills, like planning, outlining, and approaches for writing code. So, rather than dropping in code snippets throughout the book, what you’ll find are details about code strategies, such as progressive enhancement, deciding on what tooling to use, and the challenges of writing future-friendly code.
 
 
 
 And for those of you who have not had the pleasure of listening to Jeremy narrate content (like he does in the Web History series), there’s an audio file available to download.
 
 
 
 
 Direct link
 
 
 
 Beginning CSS Web Development: From Novice to Professional by Simon Collison
 
 
 Perfect for: The fundamentals of CSSLearning level: Absolute beginnersRequires: Nothing but time and motivation
 
 
 
 It may be written in 2006, but Simon’s coverage of web standards and accessibility is timeless and relevant today. He provides an understanding of interoperability as well as approaches for building web applications, including the early planning phases that often go overlooked.
 
 
 
 The book has two broad parts which are further divided into 16 chapters. Part 1 covers CSS topics, like working with text, links, lists, backgrounds, images, tables, and forms. It really doesn’t skimp on the details either.
 
 
 
 Part 2 is all about layout, shedding light on usability and layout manipulation, plus a handy case study. The chapters are arranged in such a way that one chapter naturally flows into the next. Each chapter also contains a concluding section that highlights all the important concepts covered in the chapter.
 
 
 
 Indeed, the book provides novice developers a solid background in CSS and helps them gradually with more advanced concepts. It will make your CSS journey easier.
 
 
 
 
 Direct link
 
 
 
 Books on HTML &amp; CSS
 
 
 CSS and HTML are often taught together, which can be especially helpful when you’re writing your first lines of code and want to know how the two languages interact with one another.
 
 
 Learn to Code HTML &amp; CSS by Shay Howe
 
 
 Perfect for: Starting your front-end journeyLearning level: BeginnersRequires: No prior experience at all
 
 
 
 Shay refers to this book as a simple and comprehensive guide dedicated to helping beginners learn HTML and CSS. He does this by focusing on common elements of front-end design and development. Some of the lessons covered are Box Model, Positioning, Typography, Background and Gradients, Lists, Media, Forms, and Tables. In the first chapter *Building Your First Web Page, Shay analyzed the contents of a typical website including elements, attributes and setting up the HTML document structure, code validation, selectors and CSS resets. I find the book very instructive especially as it went beyond the surface to address many key concepts with code samples, which you can follow along.
 
 
 
 One profound thing about this great book is that, Shay built a complete project from scratch throughout the 12 lessons and at the end of each lesson, he provided a summary and links to the current state of that website (so you can compare with yours if you follow along) and the source code at every stage of the lessons.
 
 
 
 If you’re a learner who learns by doing, you will find this material very useful and by the time you’re done, you will have developed a multi page functional website.
 
 
 
 An advanced sequel of the course is also available free via the same link.
 
 
 
 
 Direct link
 
 
 
 HTML &amp; CSS: Learn the Fundamentals in 7 Days by Michael Knapp
 
 
 Perfect for: Starting your front-end journeyLearning level: BeginnersRequires: No prior experience at all
 
 
 
 Can you possibly learn everything there is to know about the HTML and CSS in seven days? Probably not, but that’s why this 2017 book by Michael Knapp is focused straight on the fundamentals. Michael delves into a brief history lesson before launching into HTML and CSS structure, logic, and presentation. You’re going to get all up to speed to the point where you should feel pretty confident about putting a basic webpage together, plus a few extras along the way as the book touches on SEO and analytics.
 
 
 
 The book is comprised of simple programs that you can run on your computer if you wish to follow along.
 
 
 
 The ebook version is available for free on Apple Books, but there is a Kindle version as well if you already have a subscription there.
 
 
 
 
 Apple Books
 
 
 
 Kindle
 
 
 
 The Greatest CSS Tricks Vol. 1 by Chris Coyier
 
 
 Perfect for: Marveling at what CSS can doLearning level: IntermediateRequires: Some CSS experience
 
 
 
 Did you know that CSS-Tricks has a book on CSS too? It would be silly to leave that off this list because what you get is a collection of classic CSS trickery that’s explained by none other than Chris Coyier. In fact, Chris handpicked all of the examples covered in the book from his many, many (many!) years running this here site from the plentitude of tricks that have crossed his desk.
 
 
 
 Each trick solves a particular pain point. For instance, the first “Pin Scrolling to Bottom” trickdemonstrates how the overflow-anchor CSS property can be used to create the same chat-like interface of a tool like Slack, where the screen is anchored at the bottom in a way that feels as though the page is scrolling for you as new items are added.
 
 
 
 
 Direct Link
 
 
 
 Books on process
 
 
 Code is just as much about how we write code and collaborate on projects with others as it is about the actual code we write. The following books are great starting points for everything from planning and project management to communicating and collaborating with others.
 
 
 Collaborate: Bring People Together Around Digital Projects by Ellen De Vries
 
 
 Perfect for: Being a better collaboratorLearning level: N/ARequires: An open mind to working well with others!
 
 
 
 Ellen addresses something in this book that we all have to deal with: collaborating with others. And it’s no small deal — the book is divided into four parts that go super deep into things we can go to work well with others:
 
 
 
 Know how to prepare the ground and create the right conditions for collaboration.Nurture the group culture in the early stages of collaboration.Maintain a healthy collaborative process.Reap the rewards of a collaboration.
 
 
 
 As a content strategist, Ellen has the right kind of experience to help anyone be part of a collaborative project, or get the most from a collaboration.
 
 
 
 
 Direct link
 
 
 
 The Modern Web Design Process by webflow
 
 
 Perfect for: Senior designers, project managersLearning level: N/ARequires: Some basic understanding of CSS
 
 
 
 This free ebook features a seven-step design process that’s meant to help define the workflow for today’s brand of web design.
 
 
 
 That includes:
 
 
 
 Setting goalsDefining scopeSitemaps and wireframesWorking with contentHandling visual elementsTestingShipping
 
 
 
 Anyone starting a new design project or in the middle of a design project will find the invaluable insights throughout the book. And what’s most remarkable is how this is written in a way that almost feels as though you are being hand-held through an entire project from concept to completion.
 
 
 
 
 Direct link
 
 
 
 Designing for the Web by Mark Boulton
 
 
 Perfect for: Learning to work with clientsLearning level: BeginnersRequires: A genuine interest in design
 
 
 
 It seems many organizations tackle design differently. But author Mark Boulton documents a thorough design workflow in Designing for the Web that de-mystifies many challenges and covers everything you need to know.
 
 
 
 What’s unique about this book is that it’s really about work. Sure, there’s a bunch of hugely valuable information on design best practices for things like typography, color, and layout, but what you’re really going to take away from this book is how these fit into a design workflow. It teaches you how to research, the technologies we have to implement ideas, and ultimately, how to work with others as well as clients — perfect fodder for folks including design leads, project managers, freelancers, or anyone who’s involved in the project delivery process.
 
 
 
 
 Direct Link
 
 
 
 Learn Version Control with Git by Tower
 
 
 Perfect for: Mastering GitLearning level: All levels welcomeRequires: No prior knowledge at all
 
 
 
 In this book, the team behind the popular Tower client for Git introduce learners to the crux of version control system using Git. Developers who work in teams will particularly find this very useful, as it helps in effectively collaborating with team members building different features of a project even when you’re thousands of miles apart. That said, it’s still really great for anyone who might be shy of the command line and wants to build confidence there.
 
 
 
 And since the book is by the maker of an application that interacts with Git, you’re going to get a nice dose of using Tower as a GUI in addition to working directly on the command line.
 
 
 
 So, whether it’s committing, branching, merging, pull requests, forking work, or handling merge conflicts, you’re going to get a whole lot from this book.
 
 
 
 
 Direct Link
 
 
 
 Books on JavaScript
 
 
 Learning JavaScript always seems to be en vogue. In fact, Jason Rodriguez wrote about the JavaScript learning landscape in 2018 and provided a nice list of free books. Not too much has cropped up since then, but here are my thoughts on the following books.
 
 
 Eloquent JavaScript by Marijn Haverbeke
 
 
 Perfect for: Getting better at writing JavaScriptLearning level: Intermediate to seasoned developersRequires: Prior JavaScript experience
 
 
 
 Eloquent JavaScript really lives up to its name. Personally, I consider this one of the best-written JavaScript books I have ever come across. Marjin’s writing style is engaging, especially with how he introduces programming concepts and carries the reader along. In his words, the book is simply about instructing computers and making them do what you want them to do.
 
 
 
 The book is a deep dive into JavaScript spread across three parts and 21 chapters. You’re going to read a bunch about basic programming concepts, such as values, types, operators and functions, to advanced concepts like regular expressions, modules, the DOM, and asynchronous programming. He starts every chapter with a somewhat philosophical quote to prepare the reader for what lies ahead and then dives straight into the topic.
 
 
 
 Plus, there’s three projects to help you practice your newfound skills.
 
 
 
 
 Direct link
 
 
 
 Understanding JavaScript Promises by Nicholas C. Zakas
 
 
 Perfect for: Those who want to learn all about asynchronous programming with promises in JavaScript.Learning level: IntermediateRequires: Basic JavaScript chops
 
 
 
 JavaScript promises were introduced in 2015 as part of the ES6 specification to handle asynchronous functions in JavaScript. According to MDN:
 
 
 
 A promise is an object representing the eventual completion or failure of an asynchronous operation
 
 
 
 In this 51-page book, Nicholas explains the concept of Promises over three chapters: Basics, Chaining Promises, and Working with Multiple Promises. Although the link to the book we’re providing is the free community version, the full version (available on Amazon) has two more chapters on Async Functions and Unhandled Rejection Tracking. Nicholas simplified the concept of Promises with several illustrations and examples. You will learn how to use then(), catch(), and finally() and understand how to chain multiple promises together. Nicholas also covers the assignment of rejection and settlement handlers. You may want to give the book a read to solidify your understanding of the topic.
 
 
 
 Nicholas is a veteran JavaScript book author who has been writing about JavaScript for over 15 years. He brings his wealth of experience to bear in this book (just as he has in his work here at CSS-Tricks).
 
 
 
 
 Direct link
 
 
 
 Speaking JavaScript by Axel Rauschmayer
 
 
 Perfect for: Leveling up from beginning JavaScriptLearning level: IntermediateRequires: Knowledge of object oriented programming
 
 
 
 This book is presented in four chapters covering more than 30 topics. Here’s how it breaks down:
 
 
 
 The first chapter is a nice refresher on syntax, variable types, functions and exception handling.The second chapter offers historical perspective into JavaScript as a prelude for the types of features covered throughout the rest of the book.Chapter 3 is presented as more or less a reference book with short, clean examples.The final chapter outlines tips, tools and libraries to help write better JavaScript and follow best practices.
 
 
 
 
 Direct Link
 
 
 
 Secrets of the JavaScript Ninja by John Resig and Bear Bibeault
 
 
 Perfect for: Creating a cross-browser JavaScript library from the ground upLearning level: IntermediateRequires: Some prior programming experience
 
 
 
 There’s actually a newer edition of this book, but the 2012 edition is the one that’s free. Either way, it’s a good opportunity to learn from John Resig; you know, the guy who created jQuery.
 
 
 
 The techniques covered here include closures, functions, the DOM, object orientation with prototypes, and cross-browser strategies. One nice perk is that each chapter is followed by a brief recap that’s perfect for a reference once you’ve finished the book.
 
 
 
 
 Direct Link
 
 
 
 Learning JavaScript Design Patterns by Addy Osmani
 
 
 Perfect for: Learning to write more efficient JavaScriptLearning level: IntermediateRequires: A decent level of JavaScript experience
 
 
 
 The concept of design pattern refers to a reusable solution to a commonly recurring problem in application development. In this book, Addy Osmani covers the implementation of common design patterns using ES6 and beyond, as well as React-specific design patterns, which can be super handy when working on complex React apps where maintainability is a primary goal.
 
 
 
 Some of the patterns covered include Singleton, Proxy, Provider, Prototype and Observer patterns. In some cases, Addy includes pros and cons of using some of these patterns and how they may affect the performance of your application.
 
 
 
 
 Direct Link
 
 
 
 You Don’t Know JS by Kyle Simpson
 
 
 Perfect for: Mastering JavaScriptLearning level: BeginnerRequires: Little or no prior programming experience
 
 
 
 While the title might be a bit provocative, what Kyle is implying here is that he writes this book assuming you have no prior JavaScript experience whatsoever.
 
 
 
 Kyle begins starts by going through the rudiments of programming as seen through the lens of JavaScript. He then proceeds, in subsequent chapters, to introduce more advanced concepts like scope and closure, the this keyword, object prototypes, async, and performance.
 
 
 
 There’s a lot of excellent details and explanations in here, and Kyle makes it super easy to understand by avoiding super technical jargon. There is also many exercises designed to reinforce your learning. This book will definitely get you up to speed with JavaScript. There’s second edition of the book in the works that you can track in GitHub.
 
 
 
 
 Direct link
 
 
 
 The JavaScript Beginner’s Handbook by Flavio Copes
 
 
 Perfect for: A beginner’s referenceLearning level: Just getting startedRequires: Email sign-up, maybe some prior experience
 
 
 
 Flavio has put together a very useful JavaScript reference for those just starting out. It’s more like a quick reference guide than a textbook, so those of you just starting out might want to consider this as something you keep on your desk rather than something you sit with for long periods of time.
 
 
 
 
 Direct link
 
 
 
 JavaScript for Data Science by Gans, Hodges &amp; Wilson
 
 
 Perfect for: Getting into data visualizationsLearning level: Intermediate to advancedRequires: A decent handle on JavaScript
 
 
 
 The authors cover core features of modern JavScript, including callbacks, promises, inheritance, objects and classes. They also get into testing using Mocha, React, and data vizualization, all of which are great for anyone looking to level up their code and how its written. The book doesn’t get as deep into many the concepts as some of the other books, but it really shines when it gets into data science.
 
 
 
 The book uses Data-Forge; a JavaScript library designed for working with tabular data. There are numerous exercises to help readers keep up to speed with the subject of discussion. The last chapter also includes a capstone project that pulls everything together.
 
 
 
 
 Direct Link
 
 
 
 Wrapping up
 
 
 I sure hope this collection of books help you, whether you’re taking your first steps in front-end web development, have a dozen years under your belt, or you fall somewhere in between. I know how hard it is to get into something new for the first time and the feeling of not knowing where to look. I also know how it feels to hit a plateau and need something to level me up. There should be something for everyone here, regardless of where you are in your learning journey.
 
 
 
 And, hey, if you have any other books that are available to snag for free online, please share them in the comments! I bet we can get an even bigger list going.
 
 Great (and Free!) Web Development Books You Can Get Online originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: The Bars</title>
         <link href="https://css-tricks.com/single-element-loaders-the-bars/"/>
       <updated>2022-06-24T20:00:29.000Z</updated>
       <content type="text">We’ve looked at spinners. We’ve looked at dots. Now we’re going to tackle another common pattern for loaders: bars. And we’re going to do the same thing in this third article of the series as we have the others by making it with only one element and with flexible CSS that makes it easy to create variations.
 
 
 
 
 
 
 
 Article series
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D
 
 
 
 
 Let’s start with not one, not two, but 20 examples of bar loaders.
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 What?! Are you going to detail each one of them? That’s too much for an article!
 
 
 
 It might seem like that at first glance! But all of them rely on the same code structure and we only update a few values to create variations. That’s all the power of CSS. We don’t learn how to create one loader, but we learn different techniques that allow us to create as much loader as we want using merely the same code structure.
 
 
 Let’s make some bars!
 
 
 We start by defining the dimensions for them using width (or height) with aspect-ratio to maintain proportion:
 
 
 
 .bars {
   width: 45px;
   aspect-ratio: 1;
 }
 
 
 
 We sort of “fake” three bars with a linear gradient on the background — very similar to how we created dot loaders in Part 2 of this series.
 
 
 
 .bars {
   width: 45px;
   aspect-ratio: 1;
   --c: no-repeat linear-gradient(#000 0 0); /* we define the color here */
   background: 
     var(--c) 0%   50%,
     var(--c) 50%  50%,
     var(--c) 100% 50%;
   background-size: 20% 100%; /* 20% * (3 bars + 2 spaces) &#x3D; 100% */
 }
 
 
 
 The above code will give us the following result:
 
 
 
 
 
 
 
 Like the other articles in this series, we are going to deal with a lot of background trickery. So, if you ever feel like we’re jumping around too fast or feel you need a little more detail, please do check those out. You can also read my Stack Overflow answer where I give a detailed explanation on how all this works.
 
 
 Animating the bars
 
 
 We either animate the element’s size or position to create the bar loader. Let’s animate the size by defining the following animation keyframes:
 
 
 
 @keyframes load {
   0%   { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 1 */
   33%  { background-size: 20% 10% , 20% 100%, 20% 100%; }  /* 2 */
   50%  { background-size: 20% 100%, 20% 10% , 20% 100%; }  /* 3 */
   66%  { background-size: 20% 100%, 20% 100%, 20% 10%;  }  /* 4 */
   100% { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 5 */
 }
 
 
 
 See what’s happening there? Between 0% and 100%, the animation changes the background-size of the element’s background gradient. Each keyframe sets three background sizes (one for each gradient).
 
 
 
 
 
 
 
 And here’s what we get:
 
 
 
 CodePen Embed Fallback
 
 
 
 Can you start to imagine all the possible variations we can get by playing with different animation configurations for the sizes or the positions?
 
 
 
 Let’s fix the size to 20% 50% and update the positions this time:
 
 
 
 .loader {
   width: 45px;
   aspect-ratio: .75;
   --c: no-repeat linear-gradient(#000 0 0);
   background: 
     var(--c),
     var(--c),
     var(--c);
   background-size: 20% 50%;
   animation: load 1s infinite linear;
 }
 @keyframes load {
   0%   { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 1 */
   20%  { background-position: 0% 50% , 50% 100%, 100% 100%; } /* 2 */
   40%  { background-position: 0% 0%  , 50% 50% , 100% 100%; } /* 3 */
   60%  { background-position: 0% 100%, 50% 0%  , 100% 50%;  } /* 4 */
   80%  { background-position: 0% 100%, 50% 100%, 100% 0%;   } /* 5 */ 
   100% { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 6 */
 }
 
 
 
 
 
 
 
 …which gets us another loader!
 
 
 
 CodePen Embed Fallback
 
 
 
 You’ve probably got the trick by now. All you need is to define a timeline that you translate into a keyframe. By animating the size, the position — or both! — there’s an infinite number of loader possibilities at our fingertips.
 
 
 
 And once we get comfortable with such a technique we can go further and use a more complex gradient to create even more loaders.
 
 
 
 CodePen Embed Fallback
 
 
 
 Expect for the last two examples in that demo, all of the bar loaders use the same underlying markup and styles and different combinations of animations. Open the code and try to visualize each frame independently; you’ll see how relatively trivial it is to make dozens — if not hundreds — of variations.
 
 
 Getting fancy
 
 
 Did you remember the mask trick we did with the dot loaders in the second article of this series? We can do the same here!
 
 
 
 If we apply all the above logic inside the mask property we can use any background configuration to add a fancy coloration to our loaders.
 
 
 
 Let’s take one demo and update it:
 
 
 
 CodePen Embed Fallback
 
 
 
 All I did is updating all the background-* with mask-* and I added a gradient coloration. As simple as that and yet we get another cool loader.
 
 
 
 So there is no difference between the dots and the bars?
 
 
 
 No difference! I wrote two different articles to cover as many examples as possible but in both, I am relying on the same techniques:
 
 
 
 Gradients to create the shapes (dots or bars or maybe something else)Animating background-size and/or background-position to create the loader animationAdding mask to add a touch of colors
 
 
 Rounding the bars
 
 
 Let’s try something different this time where we can round the edges of our bars.
 
 
 
 CodePen Embed Fallback
 
 
 
 Using one element and its ::before and ::after pseudos, we define three identical bars:
 
 
 
 .loader {
   --s: 100px; /* control the size */
 
   display: grid;
   place-items: center;
   place-content: center;
   margin: 0 calc(var(--s) / 2); /* 50px */
 }
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   grid-area: 1/1;
 }
 .loader,
 .loader::before,
 .loader::after {
   height: var(--s);
   width: calc(var(--s) / 5); /* 20px */
   border-radius: var(--s);
   transform: translate(calc(var(--_i, 0) * 200%));
 }
 .loader::before { --_i: -1; }
 .loader::after { --_i:  1; }
 
 
 
 That gives us three bars, this time without relying on a linear gradient:
 
 
 
 
 
 
 
 Now the trick is to fill in those bars with a lovely gradient. To simulate a continuous gradient, we need to play with background properties. In the above figure, the green area defines the area covered by the loader. That area should be the size of the gradient and, if we do the math, it’s equal to multiplying both sides labeled S in the diagram, or background-size: var(--s) var(--s).
 
 
 
 Since our elements are individually placed, we need to update the position of the gradient inside each one to make sure all of them overlap. This way, we’re simulating one continuous gradient even though it’s really three of them.
 
 
 
 For the main element (placed at the center), the background needs to be at the center. We use the following:
 
 
 
 .loader {
   /* etc. */
   background: linear-gradient() 50% / var(--s) var(--s);
 }
 
 
 
 For the pseudo-element on the left, we need the background on the left
 
 
 
 .loader::before {
   /* etc. */
   background: linear-gradient() 0% / var(--s) var(--s);
 }
 
 
 
 And for the pseudo on the right, the background needs to be positioned to the right:
 
 
 
 .loader::after {
   background: linear-gradient() 100% / var(--s) var(--s);
 }
 
 
 
 Using the same CSS variable, --_i, that we used for the translate, we can write the code like this:
 
 
 
 .loader {
   --s: 100px; /* control the size */
   --c: linear-gradient(/* etc. */); /* control the coloration */
 
   display: grid;
   place-items: center;
   place-content: center;
 }
 .loader::before,
 .loader::after{
   content: &quot;&quot;;
   grid-area: 1/1;
 }
 .loader,
 .loader::before,
 .loader::after{
   height: var(--s);
   width: calc(var(--s) / 5);
   border-radius: var(--s);
   background: var(--c) calc(50% + var(--_i, 0) * 50%) / var(--s) var(--s);
   transform: translate(calc(var(--_i, 0) * 200%));
 }
 .loader::before { --_i: -1; }
 .loader::after  { --_i:  1; }
 
 
 
 Now, all we have to do is to animate the height and add some delays! Here are three examples where all that’s different are the colors and sizes:
 
 
 
 CodePen Embed Fallback
 
 
 Wrapping up
 
 
 I hope so far you are feeling super encouraged by all the powers you have to make complex-looking loading animations. All we need is one element, either gradients or pseudos to draw the bars, then some keyframes to move things around. That’s the entire recipe for getting an endless number of possibilities, so go out and starting cooking up some neat stuff!
 
 
 
 Until the next article, I will leave you with a funny collection of loaders where I am combining the dots and the bars!
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 Article series
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D
 
 
 Single Element Loaders: The Bars originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Different Ways to Write CSS in React</title>
         <link href="https://css-tricks.com/different-ways-to-write-css-in-react/"/>
       <updated>2022-06-22T14:24:37.000Z</updated>
       <content type="text">We’re all familiar with the standard way of linking up a stylesheet to the &lt;head&gt; of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things in a single-page application (SPA), say in a React project?
 
 
 
 Turns out there are several ways to go about styling a React application. Some overlap with traditional styling, others not so much. But let’s count all the ways we can do it.
 
 
 
 
 
 
 
 Importing external stylesheets
 
 
 
 As the name suggests, React can import CSS files. The process is similar to how we link up CSS file in the HTML &lt;head&gt;:
 
 
 
 Create a new CSS file in your project directory.Write CSS.Import it into the React file.
 
 
 
 Like this:
 
 
 
 import &quot;./style.css&quot;;
 
 
 
 That usually goes at the top of the file where other imports happen:
 
 
 
 import { React } from &quot;react&quot;;
 import &quot;./Components/css/App.css&quot;;
 function App() {
   return (
     &lt;div className&#x3D;&quot;main&quot;&gt;
     &lt;/div&gt;
   );
 }
 export default App;
 
 
 
 In this example, a CSS file is imported into an App.js from the /Components/css folder.
 
 
 
 Write inline styles
 
 
 
 You may be used to hearing that inline styling isn’t all that great for maintainability and whatnot, but there are definitely situations (here’s one!) where it makes sense. And maintainability is less of an issue in React, as the CSS often already sits inside the same file anyway.
 
 
 
 This is a super simple example of inline styling in React:
 
 
 
 &lt;div className&#x3D;&quot;main&quot; style&#x3D;{{color:&quot;red&quot;}}&gt;
 
 
 
 A better approach, though, is to use objects:
 
 
 
 First, create an object that contains styles for different elements.Then add it to an element using the style attribute and then select the property to style.
 
 
 
 Let’s see that in context:
 
 
 
 import { React } from &quot;react&quot;;
 function App() {
   const styles &#x3D; {
     main: {
       backgroundColor: &quot;#f1f1f1&quot;,
       width: &quot;100%&quot;,
     },
     inputText: {
       padding: &quot;10px&quot;,
       color: &quot;red&quot;,
     },
   };
   return (
     &lt;div className&#x3D;&quot;main&quot; style&#x3D;{styles.main}&gt;
       &lt;input type&#x3D;&quot;text&quot; style&#x3D;{styles.inputText}&gt;&lt;/input&gt;
     &lt;/div&gt;
   );
 }
 export default App;
 
 
 
 This example contains a styles object containing two more objects, one for the .main class and the other for a text input, which contain style rules similar to what we’d expect to see in an external stylesheet. Those objects are then applied to the style attribute of elements that are in the returned markup.
 
 
 
 Note that curly brackets are used when referencing styles rather than the quotation marks we’d normally use in plain HTML.
 
 
 
 Use CSS Modules
 
 
 
 CSS Modules… what the heck happened to those, right? They have the benefit of locally scoped variables and can be used right alongside React. But what are they, again, exactly?
 
 
 
 Quoting the repo’s documentation:
 
 
 
 CSS Modules works by compiling individual CSS files into both CSS and data. The CSS output is normal, global CSS, which can be injected directly into the browser or concatenated together and written to a file for production use. The data is used to map the human-readable names you’ve used in the files to the globally-safe output CSS.
 
 
 
 In simpler terms, CSS Modules allows us to use the same class name in multiple files without clashes since each class name is given a unique programmatic name. This is especially useful in larger applications. Every class name is scoped locally to the specific component in which it is being imported.
 
 
 
 A CSS Module stylesheet is similar to a regular stylesheet, only with a different extension (e.g. styles.module.css). Here’s how they’re set up:
 
 
 
 Create a file with .module.css as the extension.Import that module into the React app (like we saw earlier)Add a className to an element or component and reference the particular style from the imported styles.
 
 
 
 Super simple example:
 
 
 
 /* styles.module.css */
 .font {
   color: #f00;
   font-size: 20px;
 }
 
 import { React } from &quot;react&quot;;
 import styles from &quot;./styles.module.css&quot;;
 function App() {
   return (
     &lt;h1 className&#x3D;{styles.heading}&gt;Hello World&lt;/h1&gt;
   );
 }
 export default App;
 
 
 
 Use styled-components
 
 
 
 Have you used styled-components? It’s quite popular and allows you to build custom components using actual CSS in your JavaScript. A styled-component is basically a React component with — get ready for it — styles. Some of the features include unique class names, dynamic styling and better management of the CSS as each component has its own separate styles.
 
 
 
 Install the styled-components npm package in the command line:
 
 
 
 npm install styled-components
 
 
 
 Next up, import it into the React app:
 
 
 
 import styled from &#x27;styled-components&#x27;
 
 
 
 Create a component and assign a styled property to it. Note the use of template literals denoted by backticks in the Wrapper object:
 
 
 
 import { React } from &quot;react&quot;;
 import styled from &quot;styled-components&quot;;
 function App() {
   const Wrapper &#x3D; styled.div&#x60;
     width: 100%;
     height: 100px;
     background-color: red;
     display: block;
   &#x60;;
   return &lt;Wrapper /&gt;;
 }
 export default App;
 
 
 
 The above Wrapper component will be rendered as a div that contains those styles.
 
 
 
 Conditional styling
 
 
 
 One of the advantages of styled-components is that the components themselves are functional, as in you can use props within the CSS. This opens the door up to conditional statements and changing styles based on a state or prop.
 
 
 
 Here’s a demo showing that off:
 
 
 
 
 
 
 
 Here, we are manipulating the div’s display property on the display state. This state is controlled by a button that toggles the div’s state when clicked. This, in turn, toggles between the styles of two different states.
 
 
 
 In inline if statements, we use a ? instead of the usual if/else syntax. The else part is after the semicolon. And remember to always call or use the state after it has been initialized. In that last demo, for example, the state should be above the Wrapper component’s styles.
 
 
 
 Happy React styling!
 
 
 
 That’s a wrap, folks! We looked at a handful of different ways to write styles in a React application. And it’s not like one is any better than the rest; the approach you use depends on the situation, of course. Hopefully now you’ve got a good understanding of them and know that you have a bunch of tools in your React styling arsenal.
 
 Different Ways to Write CSS in React originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: The Dots</title>
         <link href="https://css-tricks.com/single-element-loaders-the-dots/"/>
       <updated>2022-06-17T14:47:55.000Z</updated>
       <content type="text">We’re looking at loaders in this series. More than that, we’re breaking down some common loader patterns and how to re-create them with nothing more than a single div. So far, we’ve picked apart the classic spinning loader. Now, let’s look at another one you’re likely well aware of: the dots.
 
 
 
 Dot loaders are all over the place. They’re neat because they usually consist of three dots that sort of look like a text ellipsis (…) that dances around.
 
 
 
 
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 
 
 Our goal here is to make this same thing out of a single div element. In other words, there is no one div per dot or individual animations for each dot.
 
 
 
 CodePen Embed Fallback
 
 
 
 That example of a loader up above is made with a single div element, a few CSS declarations, and no pseudo-elements. I am combining two techniques using CSS background and mask. And when we’re done, we’ll see how animating a background gradient helps create the illusion of each dot changing colors as they move up and down in succession.
 
 
 
 The background animation
 
 
 
 Let’s start with the background animation:
 
 
 
 .loader {
   width: 180px; /* this controls the size */
   aspect-ratio: 8/5; /* maintain the scale */
   background: 
     conic-gradient(red   50%, blue   0) no-repeat, /* top colors */
     conic-gradient(green 50%, purple 0) no-repeat; /* bottom colors */
   background-size: 200% 50%; 
   animation: back 4s infinite linear; /* applies the animation */
 }
 
 /* define the animation */
 @keyframes back {
   0%,                       /* X   Y , X     Y */
   100% { background-position: 0%   0%, 0%   100%; }
   25%  { background-position: 100% 0%, 0%   100%; }
   50%  { background-position: 100% 0%, 100% 100%; }
   75%  { background-position: 0%   0%, 100% 100%; }
 }
 
 
 
 I hope this looks pretty straightforward. What we’ve got is a 180px-wide .loader element that shows two conic gradients sporting hard color stops between two colors each — the first gradient is red and blue along the top half of the .loader, and the second gradient is green and purple along the bottom half.
 
 
 
 The way the loader’s background is sized (200% wide), we only see one of those colors in each half at a time. Then we have this little animation that pushes the position of those background gradients left, right, and back again forever and ever.
 
 
 
 When dealing with background properties — especially background-position — I always refer to my Stack Overflow answer where I am giving a detailed explanation on how all this works. If you are uncomfortable with CSS background trickery, I highly recommend reading that answer to help with what comes next.
 
 
 
 In the animation, notice that the first layer is Y&#x3D;0% (placed at the top) while X is changes from 0% to 100%. For the second layer, we have the same for X but Y&#x3D;100% (placed at the bottom).
 
 
 
 CodePen Embed Fallback
 
 
 
 Why using a conic-gradient() instead of linear-gradient()?
 
 
 
 Good question! Intuitively, we should use a linear gradient to create a two-color gradients like this:
 
 
 
 linear-gradient(90deg, red 50%, blue 0)
 
 
 
 But we can also reach for the same using a conic-gradient() — and with less of code. We reduce the code and also learn a new trick in the process!
 
 
 
 Sliding the colors left and right is a nice way to make it look like we’re changing colors, but it might be better if we instantly change colors instead — that way, there’s no chance of a loader dot flashing two colors at the same time. To do this, let’s change the animation‘s timing function from linear to steps(1)
 
 
 
 CodePen Embed Fallback
 
 
 
 The loader dots
 
 
 
 If you followed along with the first article in this series, I bet you know what comes next: CSS masks! What makes masks so great is that they let us sort of “cut out” parts of a background in the shape of another element. So, in this case, we want to make a few dots, show the background gradients through the dots, and cut out any parts of the background that are not part of a dot.
 
 
 
 We are going to use radial-gradient() for this:
 
 
 
 .loader {
   width: 180px;
   aspect-ratio: 8/5;
   mask:
     radial-gradient(#000 68%, #0000 71%) no-repeat,
     radial-gradient(#000 68%, #0000 71%) no-repeat,
     radial-gradient(#000 68%, #0000 71%) no-repeat;
   mask-size: 25% 40%; /* the size of our dots */
 }
 
 
 
 There’s some duplicated code in there, so let’s make a CSS variable to slim things down:
 
 
 
 .loader {
   width: 180px;
   aspect-ratio: 8/5;
   --_g: radial-gradient(#000 68%, #0000 71%) no-repeat;
   mask: var(--_g),var(--_g),var(--_g);
   mask-size: 25% 40%;
 }
 
 
 
 Cool cool. But now we need a new animation that helps move the dots up and down between the animated gradients.
 
 
 
 .loader {
   /* same as before */
   animation: load 2s infinite;
 }
 
 @keyframes load {      /* X  Y,     X   Y,    X   Y */
   0%     { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */
   16.67% { mask-position: 0% 100%, 50% 0%  , 100% 0%; }
   33.33% { mask-position: 0% 100%, 50% 100%, 100% 0%; }
   50%    { mask-position: 0% 100%, 50% 100%, 100% 100%; } /* all of them at the bottom */
   66.67% { mask-position: 0% 0%  , 50% 100%, 100% 100%; }
   83.33% { mask-position: 0% 0%  , 50% 0%  , 100% 100%; }
   100%   { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */
 }
 
 
 
 Yes, that’s a total of three radial gradients in there, all with the same configuration and the same size — the animation will update the position of each one. Note that the X coordinate of each dot is fixed. The mask-position is defined such that the first dot is at the left (0%), the second one at the center (50%), and the third one at the right (100%). We only update the Y coordinate from 0% to 100% to make the dots dance.
 
 
 
 
 
 
 
 Here’s what we get:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now, combine this with our gradient animation and magic starts to happen:
 
 
 
 CodePen Embed Fallback
 
 
 
 Dot loader variations
 
 
 
 The CSS variable we made in the last example makes it all that much easier to swap in new colors and create more variations of the same loader. For example, different colors and sizes:
 
 
 
 CodePen Embed Fallback
 
 
 
 What about another movement for our dots?
 
 
 
 CodePen Embed Fallback
 
 
 
 Here, all I did was update the animation to consider different positions, and we get another loader with the same code structure!
 
 
 
 The animation technique I used for the mask layers can also be used with background layers to create a lot of different loaders with a single color. I wrote a detailed article about this. You will see that from the same code structure we can create different variations by simply changing a few values. I am sharing a few examples at the end of the article.
 
 
 
 Why not a loader with one dot?
 
 
 
 CodePen Embed Fallback
 
 
 
 This one should be fairly easy to grok as I am using the same technique but with a more simple logic:
 
 
 
 CodePen Embed Fallback
 
 
 
 Here is another example of loader where I am also animating radial-gradient combined with CSS filters and mix-blend-mode to create a blobby effect:
 
 
 
 CodePen Embed Fallback
 
 
 
 If you check the code, you will see that all I am really doing there is animating the background-position, exactly like we did with the previous loader, but adding a dash of background-size to make it look like the blob gets bigger as it absorbs dots.
 
 
 
 If you want to understand the magic behind that blob effect, you can refer to these interactive slides (Chrome only) by Ana Tudor because she covers the topic so well!
 
 
 
 Here is another dot loader idea, this time using a different technique:
 
 
 
 CodePen Embed Fallback
 
 
 
 This one is only 10 CSS declarations and a keyframe. The main element and its two pseudo-elements have the same background configuration with one radial gradient. Each one creates one dot, for a total of three. The animation moves the gradient from top to bottom by using different delays for each dot..
 
 
 
 Oh, and take note how this demo uses CSS Grid. This allows us to leverage the grid’s default stretch alignment so that both pseudo-elements cover the whole area of their parent. No need for sizing! Push the around a little with translate() and we’re all set.
 
 
 
 More examples!
 
 
 
 Just to drive the point home, I want to leave you with a bunch of additional examples that are really variations of what we’ve looked at. As you view the demos, you’ll see that the approaches we’ve covered here are super flexible and open up tons of design possibilities.
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 Next up…
 
 
 
 OK, so we covered dot loaders in this article and spinners in the last one. In the next article of this four-part series, we’ll turn our attention to another common type of loader: the bars. We’ll take a lot of what we learned so far and see how we can extend them to create yet another single element loader with as little code and as much flexibility as possible.
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 Single Element Loaders: The Dots originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Conditionally Styling Selected Elements in a Grid Container</title>
         <link href="https://css-tricks.com/conditionally-styling-selected-elements-in-a-grid-container/"/>
       <updated>2022-06-15T14:15:50.000Z</updated>
       <content type="text">Calendars, shopping carts, galleries, file explorers, and online libraries are some situations where selectable items are shown in grids (i.e. square lattices). You know, even those security checks that ask you to select all images with crosswalks or whatever.
 
 
 
 
 
 
 
 🧐
 
 
 
 I found a neat way to display selectable options in a grid. No, not recreating that reCAPTCHA, but simply being able to select multiple items. And when two or more adjoining items are selected, we can use clever :nth-of-type combinators, pseudo elements, and the :checked pseudo-class to style them in a way where they look grouped together.
 
 
 
 CodePen Embed Fallback
 
 
 
 The whole idea of combinators and pseudos to get the rounded checkboxes came from a previous article I wrote. It was a simple single-column design:
 
 
 
 CodePen Embed Fallback
 
 
 
 This time, however, the rounding effect is applied to elements along both the vertical and horizontal axes on a grid. You don’t have to have read my last article on checkbox styling for this since I’m going to cover everything you need to know here. But if you’re interested in a slimmed down take on what we’re doing in this article, then that one is worth checking out.
 
 
 
 Before we start…
 
 
 
 It’ll be useful for you to take note of a few things. For example, I’m using static HTML and CSS in my demo for the sake of simplicity. Depending on your application you might have to generate the grid and the items in it dynamically. I’m leaving out practical checks for accessibility in order to focus on the effect, but you would definitely want to consider that sort of thing in a production environment.
 
 
 
 Also, I’m using CSS Grid for the layout. I’d recommend the same but, of course, it’s only a personal preference and your mileage may vary. For me, using grid allows me to easily use sibling-selectors to target an item’s ::before and ::after pseudos.
 
 
 
 Hence, whatever layout standard you might want to use in your application, make sure the pseudos can still be targeted in CSS and ensure the layout stays in tact across different browsers and screens.
 
 
 
 Let’s get started now
 
 
 
 As you may have noticed in the earlier demo, checking and unchecking a checkbox element modifies the design of the boxes, depending on the selection state of the other checkboxes around it. This is possible because I styled each box using the pseudo-elements of its adjacent elements instead of its own element.
 
 
 
 The following figure shows how the ::before pseudo-elements of boxes in each column (except the first column) overlap the boxes to their left, and how the ::after pseudo-elements of boxes in each row (except the first row) overlap the boxes above.
 
 
 
 
 
 
 
 Here’s the base code
 
 
 
 The markup is pretty straightforward:
 
 
 
 &lt;main&gt;
   &lt;input type&#x3D;checkbox&gt; 
   &lt;input type&#x3D;checkbox&gt; 
   &lt;input type&#x3D;checkbox&gt;
   &lt;!-- more boxes --&gt;
 &lt;/main&gt;
 
 
 
 There’s a little more going on in the initial CSS. But, first, the grid itself:
 
 
 
 /* The grid */
 main {
   display: grid;
   grid:  repeat(5, 60px) / repeat(4, 85px);
   align-items: center;
   justify-items: center;
   margin: 0;
 }
 
 
 
 That’s a grid of five rows and four columns that contain checkboxes. I decided to wipe out the default appearance of the checkboxes, then give them my own light gray background and super rounded borders:
 
 
 
 /* all checkboxes */
 input {
   -webkit-appearance: none;
   appearance: none;
   background: #ddd;
   border-radius: 20px;
   cursor: pointer;
   display: grid;
   height: 40px;
   width: 60px;
   margin: 0;
 }
 
 
 
 Notice, too, that the checkboxes themselves are grids. That’s key for placing their ::before and ::after pseudo-elements. Speaking of which, let’s do that now:
 
 
 
 /* pseudo-elements except for the first column and first row */
 input:not(:nth-of-type(4n+1))::before,
 input:nth-of-type(n+5)::after {
   content: &#x27;&#x27;;        
   border-radius: 20px;
   grid-area: 1 / 1;
   pointer-events: none;
 }
 
 
 
 We’re only selecting the pseudo-elements of checkboxes that are not in the first column or the first row of the grid. input:not(:nth-of-type(4n+1)) starts at the first checkbox, then selects the ::before of every fourth item from there. But notice we’re saying :not(), so really what we’re doing is skipping the ::before pseudo-element of every fourth checkbox, starting at the first. Then we’re applying styles to the ::after pseudo of every checkbox from the fifth one.
 
 
 
 Now we can style both the ::before and ::after pseudos for each checkbox that is not in the first column or row of the grid, so that they are moved left or up, respectively, hiding them by default.
 
 
 
 /* pseudo-elements other than the first column */
 input:not(:nth-of-type(4n+1))::before { 
   transform: translatex(-85px);
 }
 
 /* pseudo-elements other than the first row */
 input:nth-of-type(n+5)::after {
  transform: translatey(-60px); 
 }
 
 
 
 Styling the :checked state
 
 
 
 Now comes styling the checkboxes when they are in a :checked state. First, let’s give them a color, say a limegreen background:
 
 
 
 input:checked { background: limegreen; }
 
 
 
 A checked box should be able to re-style all of its adjacent checked boxes. In other words, if we select the eleventh checkbox in the grid, we should also be able to style the boxes surrounding it at the top, bottom, left, and right.
 
 
 
 
 
 
 
 This is done by targeting the correct pseudo-elements. How do we do that? Well, it depends on the actual number of columns in the grid. Here’s the CSS if two adjacent boxes are checked in a 5⨉4 grid:
 
 
 
 /* a checked box&#x27;s right borders (if the element to its right is checked) */
 input:not(:nth-of-type(4n)):checked + input:checked::before { 
   border-top-right-radius: 0; 
   border-bottom-right-radius: 0; 
   background: limegreen;
 }
 /* a checked box&#x27;s bottom borders (if the element below is checked) */
 input:nth-last-of-type(n+5):checked + * + * + * + input:checked::after {
   border-bottom-right-radius: 0;
   border-bottom-left-radius: 0;
   background: limegreen;
 }
 /* a checked box&#x27;s adjacent (right side) checked box&#x27;s left borders */
 input:not(:nth-of-type(4n)):checked + input:checked + input::before {         
   border-top-left-radius: 0; 
   border-bottom-left-radius: 0; 
   background: limegreen;
 }
 /* a checked box&#x27;s adjacent (below) checked box&#x27;s top borders */
 input:not(:nth-of-type(4n)):checked + * + * + * +  input:checked + input::before { 
   border-top-left-radius: 0; 
   border-top-right-radius: 0; 
   background: limegreen;
 }
 
 
 
 If you prefer you can generate the above code dynamically. However, a typical grid, say an image gallery, the number of columns will be small and likely a fixed number of items, whereas the rows might keep increasing. Especially if designed for mobile screens. That’s why this approach is still an efficient way to go. If for some reason your application happens to have limited rows and expanding columns, then consider rotating the grid sideways because, with a stream of items, CSS Grid arranges them left-to-right and top-to-bottom (i.e. row by row).
 
 
 
 We also need to add styling for the last checkboxes in the grid — they’re not all covered by pseudo-elements as they are the last items in each axis.
 
 
 
 /* a checked box&#x27;s (in last column) left borders */
 input:nth-of-type(4n-1):checked + input:checked {
   border-top-left-radius: 0;
   border-bottom-left-radius: 0;
 }
 /* a checked box&#x27;s (in last column) adjacent (below) checked box&#x27;s top borders */
 input:nth-of-type(4n):checked + * + * + * + input:checked {
   border-top-left-radius: 0;
   border-top-right-radius: 0;
 }
 
 
 
 Those are some tricky selectors! The first one…
 
 
 
 input:nth-of-type(4n-1):checked + input:checked
 
 
 
 …is basically saying this:
 
 
 
 A checked &lt;input&gt; element next to a checked &lt;input&gt; in the second last column.
 
 
 
 And the nth-of-type is calculated like this:
 
 
 
 4(0) - 1 &#x3D; no match
 4(1) - 1 &#x3D; 3rd item
 4(2) - 1 &#x3D; 7th item
 4(3) - 1 &#x3D; 11th item
 etc.
 
 
 
 So, we’re starting at the third checkbox and selecting every fourth one from there. And if a checkbox in that sequence is checked, then we style the checkboxes adjacent, too, if they are also checked.
 
 
 
 And this line:
 
 
 
 input:nth-of-type(4n):checked + * + * + * + input:checked
 
 
 
 Is saying this:
 
 
 
 An &lt;input&gt; element provided that is checked, is directly adjacent to an element, which is directly adjacent to another element, which is also directly adjacent to another element, which, in turn, is directly adjacent to an &lt;input&gt; element that is in a checked state.
 
 
 
 What that means is we’re selecting every fourth checkbox that is checked. And if a checkbox in that sequence is checked, then we style the next fourth checkbox from that checkbox if it, too, is checked.
 
 
 
 CodePen Embed Fallback
 
 
 
 Putting it to use
 
 
 
 What we just looked at is the general principle and logic behind the design. Again, how useful it is in your application will depend on the grid design.
 
 
 
 I used rounded borders, but you can try other shapes or even experiment with background effects (Temani has you covered for ideas). Now that you know how the formula works, the rest is totally up to your imagination.
 
 
 
 Here’s an instance of how it might look in a simple calendar:
 
 
 
 CodePen Embed Fallback
 
 
 
 Again, this is merely a rough prototype using static markup. And, there would be lots and lots of accessibility considerations to consider in a calendar feature.
 
 
 
 
 
 
 
 That’s a wrap! Pretty neat, right? I mean, there’s nothing exactly “new” about what’s happening. But it’s a good example of selecting things in CSS. If we have a handle on more advanced selecting techniques that use combinators and pseudos, then our styling powers can reach far beyond the styling one item — as we saw, we can conditionally style items based on the state of another element.
 
 Conditionally Styling Selected Elements in a Grid Container originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>De-Mystifying IndieWeb on a WordPress Site</title>
         <link href="https://css-tricks.com/de-mystifying-indieweb-on-a-wordpress-site/"/>
       <updated>2022-06-14T16:48:34.000Z</updated>
       <content type="text">Well, sheesh. I opened a little can of worms when sharing Miriam’s “Am I on the IndieWeb yet?” with a short post bemoaning my own trouble getting on the IndieWeb train. But it’s a good can of worms.
 
 
 
 I think it was something like the next day after publishing that short post that David Shanske reached out and offered to help wrap my head around IndieWeb and the components that it comprises. And gosh dang if it wasn’t ridiculously helpful! So much so that I’d like to link you up to a new post David wrote after we talked, then summarize things here as best as I can because (1) it’s helpful to write things down and (2) have a reference for later.
 
 
 
 
 
 
 
 Yes, IndieWeb is confusing.
 
 
 
 David had actually helped someone get their WordPress site all set up with IndieWeb powers. That person, too, was struggling to understand how the various pieces fit together. So, David already had this top of mind when Miriam and I were writing.
 
 
 
 “IndieWeb” is a new term for many folks and that’s where a lot of confusion breeds. Is it a framework? A philosophy? A set of standards? Depending on which one it is, the expectations shift as far as what it looks like to be a part of it.
 
 
 
 It’s sort of all of the above. And that needs to be solidified a bit. There’s nothing inherently confusing about IndieWeb itself once you view it through those different lenses. After reading David’s post my understanding is that IndieWeb is more of a set of protocols. Sorta like working with structured data or OpenGraph in markup. There’s nothing to install per se, but there are standards for how to integrate them into your work.
 
 
 
 Your identity powers IndieWeb. In other words, your site establishes your identity and can be used to do lots of things, like:
 
 
 
 Notify other IndieWeb-supported sites when they are mentionedReceive notifications from other IndieWeb sites when you are mentionedFetch information from a mention and format it for displayAuthenticate your identity through your own website (a là a Google sign-in button but connected to your site)…among other things.
 
 
 
 If that sorta sounds like pingbacks, well, it sorta is. But much more robust and maintained.
 
 
 
 It’s different (and perhaps easier) to implement IndieWeb features on WordPress than it is a static site.
 
 
 
 The big difference is that WordPress provides a lot of the requirements needed to do IndieWeb-y things. I like how David explains it:
 
 
 
 The IndieWeb implementation on WordPress is a [series] of building blocks that you can or cannot choose to use, which is what makes it wonderful, but sometimes confusing. WordPress has a philosophy of decisions, not options. But the IndieWeb is all about options…about building the features that are right for you.
 
 
 
 Those building blocks are plugins that you install to add IndieWeb protocols and technologies to WordPress. It’s awesome those are readily available because that takes a a lot of the work out of things. Running a static site, though, you’re on the hook for establishing most of that yourself.
 
 
 
 David’s post is 100% focused on the WordPress implementation. Your mileage may vary, but you will certainly walk away with a better idea of what protocols are available and how they fit together after reading his post — and hopefully this one as well.
 
 
 
 The IndieWeb WordPress plugin establishes your identity.
 
 
 
 
 
 
 
 I thought it was doing so much stuff behind the scenes, but it’s a lot more simple than that:
 
 
 
 The plugin by itself handles establishing your identity as the IndieWeb sees it. It offers an h-card template and widget. H-Card is the markup for marking up information about a person or place. So, this is an element many people opt to put on their site anyway.
 
 
 
 So, really, it’s possible to get the same sort of thing by correctly marking up a WordPress theme. The convenience here is that you get a handy little template that’s marked up to support the h-card open format and a widget to drop it into a theme’s widget area.
 
 
 
 Here’s a super detailed example of the h-card markup pulled from the documentation for Microformats2:
 
 
 
 &lt;div class&#x3D;&quot;h-card&quot;&gt;
   &lt;img class&#x3D;&quot;u-photo&quot; alt&#x3D;&quot;photo of Mitchell&quot;
        src&#x3D;&quot;https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg&quot;/&gt;
   &lt;a class&#x3D;&quot;p-name u-url&quot;
      href&#x3D;&quot;http://blog.lizardwrangler.com/&quot; 
     &gt;Mitchell Baker&lt;/a&gt;
  (&lt;a class&#x3D;&quot;u-url&quot; 
      href&#x3D;&quot;https://twitter.com/MitchellBaker&quot;
     &gt;@MitchellBaker&lt;/a&gt;)
   &lt;span class&#x3D;&quot;p-org&quot;&gt;Mozilla Foundation&lt;/span&gt;
   &lt;p class&#x3D;&quot;p-note&quot;&gt;
     Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.
   &lt;/p&gt;
   &lt;span class&#x3D;&quot;p-category&quot;&gt;Strategy&lt;/span&gt;
   &lt;span class&#x3D;&quot;p-category&quot;&gt;Leadership&lt;/span&gt;
 &lt;/div&gt;
 
 
 
 See those class names? Classes like .h-card, u-photo, p-name, etc. all provide contextual meaning for a person’s identity which it then parsed as JSON:
 
 
 
 {
   &quot;items&quot;: [{ 
     &quot;type&quot;: [&quot;h-card&quot;],
     &quot;properties&quot;: {
       &quot;photo&quot;: [&quot;https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg&quot;],
       &quot;name&quot;: [&quot;Mitchell Baker&quot;],
       &quot;url&quot;: [
         &quot;http://blog.lizardwrangler.com/&quot;,
         &quot;https://twitter.com/MitchellBaker&quot;
       ],
       &quot;org&quot;: [&quot;Mozilla Foundation&quot;],
       &quot;note&quot;: [&quot;Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.&quot;],
       &quot;category&quot;: [
         &quot;Strategy&quot;,
         &quot;Leadership&quot;
       ]
     }
   }]
 }
 
 
 
 The plugin isn’t doing the sending, receiving, or parsing. Instead, it provides a WordPress site with a way to verify your identity in the markup.
 
 
 
 Not all WordPress themes support Microformats
 
 
 
 
 
 
 
 If you scratched your head first time you saw “Microformats” like I did, David defines it nicely:
 
 
 
 […] Microformats…a way of marking up HTML to allow elements to be identified. It is one of several ways of doing this, but is a very simple and readable one, which is why it is popular in the IndieWeb community.
 
 
 
 The problem, as David continues, is that many themes aren’t marked up in a Microformats-friendly way — which is what the Microformats2 plugin is designed to fix.  That said, David is quick to call out that the plugin is extremely limited in how it accomplishes this, and he recommends instead marking up a theme by hand.
 
 
 
 According to David, the next major release of the Webmention plugin will likely include smarter ways of detecting content and images it can use and formatting them for Microformats2 support.
 
 
 
 Webmentions send and receive notifications.
 
 
 
 
 
 
 
 OK, so if you’ve established your identity through your site so you are discoverable, and your site is marked up for h-card support using Microformats2. Great! You still need something in the middle working as an operator that sends and receives notifications. In other words, when another site mentions you — called a Webmention — the site mentioning you needs a way to support sending that mention to you, and your site needs a way to accept it (or vice versa).
 
 
 
 That’s what the Webmention plugin is for. It’s also probably the source of most of my IndieWeb confusion. I thought it was formatting data and needed an additional service to send and receive it. Nope! It’s actually sending and receiving the data rather than creating the mention. Back to David:
 
 
 
 Back when it was built, the plugin handled only the business of receiving and sending webmentions, not handling display to any degree. Semantic Linkbacks, a separate plugin handled that for not only webmentions, but the older pingback and trackback protocols.
 
 
 
 So, the Webmention plugin is communicating notifications. Meanwhile, another plugin called Semantic Linkbacks is what handles the data. And what the heck are Semantic Linkbacks?
 
 
 
 Semantic Linkbacks fetch and handle data.
 
 
 
 
 
 
 
 Semantic Linkbacks is another plugin that handles another piece of the process. There’s no way I can explain it better than David already does:
 
 
 
 Semantic Linkbacks takes a webmention, which is a notification that another site has linked to something on your site, fetches the other site, and tries to render a display of the information. How that is done can vary from just a profile photo (if it can find one), to interpreting it as a full comment.It does this using Microformats.
 
 
 
 I expected that the main IndieWeb plugin was already doing this since it handles other markup. But it only provides the template and widget to get your identity on your site. Once the Semantic Linkbacks plugin fetches an incoming webmention, it takes the data, formats it, then attempts to display it.
 
 
 
 Sounds like the plugin will be somewhat merged with (or replaced by) an upcoming version of the Webmention plugin:
 
 
 
 Since many people are not inclined, or not comfortable modifying a theme, the new version of Webmentions will include several different alternative ways to try to find an image or summary to display…from OpenGraph (which Facebook and Twitter use to display URLs provided to it) to detecting the WordPress REST API version of a page and using that to get the author name and profile image. None of them will provided as much context as Microformats, but the experience will still be something worth installing.
 
 
 
 That’s certainly nice as it taps into the WordPress REST API for the JSON response and formats that for display.
 
 
 
 Brid.gy is a service to help display interactions.
 
 
 
 A Webmention can be an interaction, say someone likes your post on Twitter or retweets it.
 
 
 
 
 
 
 
 Differentiating a like from a repost from a comment from a whatever needs to happen, and you’d need to implement the Twitter (or whatever) API to draw those distinctions.
 
 
 
 That’s something you can certainly do! But if you’d rather plug and play, one of the IndieWeb community members made a service called Brid.gy. You create an account, hook up your site, and give app permissions to the service… then you’re done!
 
 
 
 What Brid.gy has done is essentially implement the APIs for Twitter, Facebook, Instagram, and others, so that when it detects that a post in those services that interacts with your syndicated post, a Webmention is sent to your site and goes through the process of publishing on your own site.
 
 
 
 There’s so much more!
 
 
 
 Quick hits:
 
 
 
 IndieAuth: This is a protocol based on OAuth 2. The plugin establishes an endpoint in the WordPress REST API that can be used to authenticate your identity through your own self-hosted site — essentially your own Google sign-in button but without establishing that endpoint yourself or needing to rely on a separate hosted API.Micropub: For those who use WordPress but prefer a different editor can install the Micropub plugin. This adds an endpoint that allows you to publish content to your site and using a Micropub-supported editor create items in a Microformats2 feed, giving you way more options for writing content outside of the WordPress Block Editor.Simple Location: David wrote this plugin and I was super impressed when he demoed it for me. The idea is it pulls in data from your current location that can used for everything from displaying the weather at the time you wrote a post, to creating an entire archive of posts on an embedded map based on the post location. I’d honestly love to see something like this baked directly into WordPress.
 
 
 
 The updated flow
 
 
 
 I attempted to make an illustration that outlines the various pieces in my last post, but let’s try again with an updated understanding of what’s happening:
 
 
 
 (Full size)
 
 
 
 Is this all making sense?
 
 
 
 High fives to David for both reaching out and taking the time to show me what it looks like to implement IndieWeb on WordPress. I can’t claim I fully understand all the nuances, but I at least feel like I have a decent grasp of the pieces — the philosophy, protocols, and tech — that are required to make it happen.
 
 
 
 I’d like to turn it around to you! Does this help clarify things for you? Is there anything you’re struggling to understand? Think you’re able to configure a WordPress site with IndieWeb features now? Let’s take it to the comments!
 
 De-Mystifying IndieWeb on a WordPress Site originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Useful Tools for Visualizing Databases on a Budget</title>
         <link href="https://css-tricks.com/useful-tools-for-visualizing-databases-on-a-budget/"/>
       <updated>2022-06-13T19:15:26.000Z</updated>
       <content type="text">A diagram is a graphical representation of information that depicts the structure, relationship, or operation of anything. Diagrams enable your audience to visually grasp hidden information and engage with them in ways that words alone cannot. Depending on the type of project, there are numerous ways to use diagrams. For example, if you want to depict the relationship between distinct pieces, we usually use an Entity Relationship Diagram (ERD). There are many great tools that can help you sketch out your database designs beautifully.
 
 
 
 In this article, I will be sharing some of my favorite tools that I use to curate my data structures and bring my ideas to life.
 
 
 
 
 
 
 
 Google Docs Drawing
 
 
 
 The drawing function in Google Docs allows you to add illustrations to your pages. You can add custom shapes, charts, graphs, infographics, and text boxes to your document with the built-in drawing tool.
 
 
 
 
 
 
 
 Sketching with Google Docs
 
 
 
 Although it is simple to add a graphic to your Google Docs, the procedure is not totally visible. Here’s how:
 
 
 
 1 . Open a new document on Google Docs.
 
 
 
 
 
 
 
 2 . Click on the insert button and select Drawing . Then, from the drop-down option, choose New to open the drawing screen.
 
 
 
 
 
 
 
 3 . You can use the toolbox on this screen to add text boxes, select lines, and shapes, and modify the colors of your drawing.
 
 
 
 
 
 
 
 4 . You may also use the cursor to adjust the size of your drawings and the color of your designs by using the toolbox at the top of your screen.
 
 
 
 
 
 
 
 5 . When finished, click the Save and close button. You can click on the “File” toolbar displayed on the top of your screen to download your document.
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?Online.Requires an Account?Yes, a Google account is required.Collaborative Editing?Yes, with Google Drive sharing.Import SQLNot Applicable.Export SQLNot Applicable.Export Formats.doc, .pdf, .rtf, .odt, .txt, .html, .epubGenerate Shareable URLYes.
 
 
 
 Google Docs offers amazing convenience. However, diagramming databases is not something it was intended for. You may find yourself frustrated with redrawing arrows and relationships if you are making frequent edits to your model.
 
 
 
 Graphviz
 
 
 
 Graphviz is a free graph visualization software that allows us to express information diagrammatically.
 
 
 
 
 
 
 
 Graphviz implements the DOT language. The DOT language is an abstract grammar that makes use of terminals, non terminals, parentheses, square brackets, and vertical bars. More information about the DOT language can be found in its documentation.
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?CLI.Visual Studio Code, Eclipse, and Notepad++.Graphical Interfaces.Requires an Account?No.Collaborative Editing?Not Applicable.Import SQLYes, using SQL Graphviz.Export SQLYes, using SQL Graphviz.Export Formats.gif, .png, .jpeg, .json, .pdf and moreGenerate Shareable URLNot Applicable.
 
 
 
 Graphviz has an impressive and supportive community. However, a high level of SQL support is only available when you install additional third-party software. This overhead may make it less approachable to users that are not comfortable setting up their computer to support these tools.
 
 
 
 ERDPlus
 
 
 
 ERDPlus is a database modeling tool that allows you to create Entity Relationship Diagrams, Relational Schemas, Star Schemas, and SQL DDL statements.
 
 
 
 
 
 
 
 It includes a brief guide on how to create your ER diagrams, which is especially useful for beginners. You can also easily convert your created ER diagrams to relation schemas.
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Not Applicable.Import SQLNo.Export SQLYes, with the support of SQL DDL statements.Export Formats.pngGenerate Shareable URLNot Applicable.
 
 
 
 ERDPlus is suited for SQL. It does lack additional export formats and ability to share with teams, but these features are not necessary with import and export.
 
 
 
 Diagrams.net
 
 
 
 Diagrams.net (previously Draw.io) is a free online diagramming tool that can be used to create flowcharts, UML diagrams, database models, and other types of diagrams.
 
 
 
 
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?Desktop and Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Sharing requires Google Drive or OneDrive.Import SQLYes.Export SQLNo.Export Formats.png, .jpeg, .svg, .pdf, .html and more.Generate Shareable URLYes, export as URL an option.
 
 
 
 Diagrams.net is designed to support many different workflows. Its ability to easily integrate with third-party integrations such as Trello, Quip, Notion, and others distinguishes it from the other options. The ability to share and collaborate may make it work well for collaborative teams.
 
 
 
 Conclusion
 
 
 
 This article is based on using free database tools that could help visualize your ideas and their capabilities with limitations to great details on how to use these tools.
 
 
 
 In my research, I also came across other excellent tools with free trials available for creating database diagrams like Lucidchart, EDrawMax, and, DrawSQL. However, these free trials have limitations which may make them less suited for developers working on multiple projects.
 
 
 
 I strongly recommend that you read the documentation for each of these tools to determine what works best for you and, most importantly, to avoid any difficulties in using these tools.
 
 
 
 Thank you for taking the time to read this far, and I hope you found what you were looking for. Have a wonderful day!
 
 Useful Tools for Visualizing Databases on a Budget originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: The Spinner</title>
         <link href="https://css-tricks.com/single-element-loaders-the-spinner/"/>
       <updated>2022-06-10T14:26:06.000Z</updated>
       <content type="text">Making CSS-only loaders is one of my favorite tasks. It’s always satisfying to look at those infinite animations. And, of course, there are lots of techniques and approaches to make them — no need to look further than CodePen to see just how many. In this article, though, we will see how to make a single element loader writing as little code as possible.
 
 
 
 
 
 
 
 I have made a collection of more than 500 single div loaders and in this four-part series, I am going to share the tricks I used to create many of them. We will cover a huge number of examples, showing how small adjustments can lead to fun variations, and how little code we need to write to make it all happen!
 
 
 
 
 Single-Element Loaders series:
 
 
 
 Single Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 
 
 For this first article, we are going to create a one of the more common loader patterns: spinning bars:
 
 
 
 CodePen Embed Fallback
 
 
 
 Here’s the approach
 
 
 
 A trivial implementation for this loader is to create one element for each bar wrapped inside a parent element (for nine total elements), then play with opacity and transform to get the spinning effect.
 
 
 
 My implementation, though, requires only one element:
 
 
 
 &lt;div class&#x3D;&quot;loader&quot;&gt;&lt;/div&gt;
 
 
 
 …and 10 CSS declarations:
 
 
 
 .loader {
   width: 150px; /* control the size */
   aspect-ratio: 1;
   display: grid;
   mask: conic-gradient(from 22deg, #0003, #000);
   animation: load 1s steps(8) infinite;
 }
 .loader,
 .loader:before {
   --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */
   background: 
     var(--_g)/34% 8%  space no-repeat,
     var(--_g)/8%  34% no-repeat space;
 }
 .loader:before {
   content: &quot;&quot;;
   transform: rotate(45deg);
 }
 @keyframes load {
   to { transform: rotate(1turn); }
 }
 
 
 
 Let’s break that down
 
 
 
 At first glance, the code may look strange but you will see that it’s more simple than what you might think. The first step is to define the dimension of the element. In our case, it’s a 150px square. We can put aspect-ratio to use so the element stays square no matter what.
 
 
 
 .loader {
   width: 150px; /* control the size */
   aspect-ratio: 1; /* make height equal to width */
 }
 
 
 
 When building CSS loaders, I always try to have one value for controlling the overall size. In this case, it’s the width and all the calculations we cover will refer to that value. This allows me to change a single value to control the loader. It’s always important to be able to easily adjust the size of our loaders without the need to adjust a lot of additional values.
 
 
 
 Next, we will use gradients to create the bars. This is the trickiest part! Let’s use one gradient to create two bars like the below:
 
 
 
 background: linear-gradient(#17177c 0 0) 50%/34% 8% space no-repeat;
 
 
 
 
 
 
 
 Our gradient is defined with one color and two color stops. The result is a solid color with no fading or transitions. The size is equal to 34% wide and 8% tall. It’s also placed in the center (50%). The trick is the use of the keyword value space — this duplicates the gradient, giving us two total bars.
 
 
 
 From the specification:
 
 
 
 The image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area.
 
 
 
 I am using a width equal to 34% which means we cannot have more than two bars (3*34% is greater than 100%) but with two bars we will have empty spaces (100% - 2 * 34% &#x3D; 32%). That space is placed in the center between the two bars. In other words, we use a width for the gradient that is between 33% and 50% to make sure we have at least two bars with a little bit of space between them. The value space is what correctly places them for us.
 
 
 
 We do the same and make a second similar gradient to get two more bars at the top and bottom, which give us a background property value of:
 
 
 
 background: 
  linear-gradient(#17177c 0 0) 50%/34% 8%  space no-repeat,
  linear-gradient(#17177c 0 0) 50%/8%  34% no-repeat space;
 
 
 
 We can optimize that using a CSS variable to avoid repetition:
 
 
 
 --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */
 background: 
  var(--_g)/34% 8%  space no-repeat,
  var(--_g)/8%  34% no-repeat space;
 
 
 
 So, now we have four bars and, thanks to CSS variables, we can write the color value once which makes it easy to update later (like we did with the size of the loader).
 
 
 
 To create the remaining bars, let’s tap into the .loader element and its ::before pseudo-element to get four more bars for a grand total of eight in all.
 
 
 
 .loader {
   width: 150px; /* control the size */
   aspect-ratio: 1;
   display: grid;
 }
 .loader,
 .loader::before {
   --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */
   background: 
     var(--_g)/34% 8%  space no-repeat,
     var(--_g)/8%  34% no-repeat space;
 }
 .loader::before {
   content: &quot;&quot;;
   transform: rotate(45deg);
 }
 
 
 
 Note the use of display: grid. This allows us to rely on the grid’s default stretch alignment to make the pseudo-element cover the whole area of its parent; thus there’s no need to specify a dimension on it — another trick that reduces the code and avoid us to deal with a lot of values!
 
 
 
 Now let’s rotate the pseudo-element by 45deg to position the remaining bars. Hover the following demo to see the trick:
 
 
 
 CodePen Embed Fallback
 
 
 
 Setting opacity
 
 
 
 What we’re trying to do is create the impression that there is one bar that leaves a trail of fading bars behind it as it travels a circular path. What we need now is to play with the transparency of our bars to make that trail, which we are going to do with CSS mask combined with a conic-gradient as follows:
 
 
 
 mask: conic-gradient(from 22deg,#0003,#000);
 
 
 
 To better see the trick, let’s apply this to a full-colored box:
 
 
 
 CodePen Embed Fallback
 
 
 
 The transparency of the red color is gradually increasing clockwise. We apply this to our loader and we have the bars with different opacity:
 
 
 
 
 
 
 
 In reality, each bar appears to fade because it’s masked by a gradient and falls between two semi-transparent colors. It’s hardly noticeable when this runs, so it’s sort of like being able to say that all the bars have the same color with a different level of opacity.
 
 
 
 The rotation
 
 
 
 Let’s apply a rotation animation to get our loader. Note, that we need a stepped animation and not a continuous one that’s why I am using steps(8). 8 is nothing but the number of the bars, so that value can be changed depending on how many bars are in use.
 
 
 
 .loader {
   animation: load 3s steps(8) infinite;
 }
 
 /* Same as before: */
 @keyframes load {
   to { transform: rotate(1turn) }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 That’s it! We have our loader with only one element and a few lines of CSS. We can easily control its size and color by adjusting one value.
 
 
 
 CodePen Embed Fallback
 
 
 
 Since we only used the ::before pseudo-element, we can add four more bars by using ::after to end with 12 bars in total and almost the same code:
 
 
 
 CodePen Embed Fallback
 
 
 
 We update the rotation of our pseudo-elements to consider 30deg and 60deg instead of 45deg while using an twelve-step animation, rather than eight. I also decreased the height to 5% instead of 8% to make the bars a little thinner.
 
 
 
 Notice, too, that we have grid-area: 1/1 on the pseudo-elements. This allows us to place them in the same area as one another, stacked on top of each other.
 
 
 
 Guess what? We can reach for the same loader using another implementation:
 
 
 
 CodePen Embed Fallback
 
 
 
 Can you figure out the logic behind the code? Here is a hint: the opacity is no longer handled with a CSS mask but inside the gradient and is also using the opacity property.
 
 
 
 Why not dots instead?
 
 
 
 We can totally do that:
 
 
 
 CodePen Embed Fallback
 
 
 
 If you check the code, you will see that we’re now working with a radial gradient instead of a linear one. Otherwise, the concept is exactly the same where the mask creates the impression of opacity, but we made the shapes as circles instead of lines.
 
 
 
 Below is a figure to illustrate the new gradient configuration:
 
 
 
 
 
 
 
 If you’re using Safari, note that the demo may be buggy. That’s because Safari currently lacks support for the at syntax in radial gradients. But we can reconfigure the gradient a bit to overcome that:
 
 
 
 .loader,
 .loader:before,
 .loader:after {
   background:
     radial-gradient(
       circle closest-side,
       currentColor 90%,
       #0000 98%
     ) 
     50% -150%/20% 80% repeat-y,
     radial-gradient(
       circle closest-side,
       currentColor 90%,
       #0000 98%
     ) 
     -150% 50%/80% 20% repeat-x;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 More loader examples
 
 
 
 Here is another idea for a spinner loader similar to the previous one.
 
 
 
 CodePen Embed Fallback
 
 
 
 For this one, I am only relying on background and mask to create the shape (no pseudo-elements needed). I am also defining the configuration with CSS variables to be able to create a lot of variations from the same code — another example of just the powers of CSS variables. I wrote another article about this technique if you want to more details.
 
 
 
 Note that some browsers still rely on a -webkit- prefix for mask-composite with its own set of values, and will not display the spinner in the demo. Here is a way to do it without mast-composite for more browser support.
 
 
 
 I have another one for you:
 
 
 
 CodePen Embed Fallback
 
 
 
 For this one, I am using a background-color to control the color, and use mask and mask-composite to create the final shape:
 
 
 
 
 
 
 
 Before we end, here are some more spinning loaders I made a while back. I am relying on different techniques but still using gradients, masks, pseudo-element, etc. It could be a good exercise to figure out the logic of each one and learn new tricks at the same time. This said, if you have any question about them, the comment section is down below.
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 Wrapping up
 
 
 
 See, there’s so much we can do in CSS with nothing but a single div, a couple of gradients, pseudo-elements, variables. It seems like we created a whole bunch of different spinning loaders, but they’re all basically the same thing with slight modifications.
 
 
 
 This is only the the beginning. In this series, we will be looking at more ideas and advanced concepts for creating CSS loaders.
 
 
 
 
 Single-Element Loaders series:
 
 
 
 Single Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 Single Element Loaders: The Spinner originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Am I on the IndieWeb yet?</title>
         <link href="https://css-tricks.com/am-i-on-the-indieweb-yet/"/>
       <updated>2022-06-09T15:32:50.000Z</updated>
       <content type="text">Can’t smash the Like button hard enough for what Miriam Suzanne has to say on the challenging technical hurdles of implementing Webmentions:
 
 
 
 The first round required several online services along with HTML &amp; JS changes to my static site, just to verify my indieweb identity. Then more changes to the site and more online services to help fetch any mentions (so far, nothing to see, but that’s probably expected). It seems the only way to test the setup is to launch all those changes publicly, and then ask for other devs to send you mentions.[…]I’m an experienced web developer, and I can figure it out. But the steps aren’t simple, and most of my friends are not web developers. So, to me, this all feels like the prototype of an idea – a proof of concept.
 
 
 
 A proof of concept for sure. And one that has been around for quite some time. The IndieWeb idea of owning your own data and using your website as a social hub is right up my alley — and likely yours, too, as someone working on the front end.
 
 
 
 
 
 
 
 Update! David Shanske is one of the developers of the WordPress plugins that support IndieWeb features and he not only published a wonderful explanation of how everything fits together, but also reached out directly and helped me wrap it all around my head.
 
 
 
 Yet, I’ve tinkered on and off with it — specifically Webmentions — over the past like three years with little to show for it. The problem isn’t so much the documentation of getting started because it’s all there. It’s more a combination of things…
 
 
 
 The wiki is confusing. Wikis are super cool in general, but the non-linear nature of it makes it tough to know where to start and where to end.The plugin ecosystem is complex. My personal site is on WordPress and there’s a plugin designed to make it easy to integrate IndieWeb features on it. Except that it’s really one plugin that steers you to install several others, each one introducing a technology that I honestly struggle to understand.There’s a bunch of terms to learn. I mean, “IndieWeb” and “Webmention” are already difficult to grok. Toss in things like “Micropub,” “Microformats,” “IndieAuth,” and “Semantic Linkbacks,” and suddenly it feels like a bunch of puzzle pieces from different puzzles trying to fit together.Some middleware seems necessary? For example, I had to give a service called Bridgy access to my Twitter to get that activity going. It apparently has something to do with Twitter’s shortened t.co URLs and making them play well with microformats.
 
 
 
 But, like Miriam, I struggled my way through it and got something working in the end. This is the sort of visual I wish I had when I was first getting started, and maybe it’ll help you too.
 
 
 
 
 
 
 
 Feels like a lot to get Webmentions going, but maybe that’s only because I have such a light grasp of the tech and how it all fits together. All the pieces are there, though, and even with the initial struggle, I love the IndieWeb concept, er prototype.
 To Shared Link — Permalink on CSS-Tricks
 Am I on the IndieWeb yet? originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
 
 </feed>