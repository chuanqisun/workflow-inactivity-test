<?xml version="1.0" encoding="utf-8"?>
   <feed xmlns="http://www.w3.org/2005/Atom">
 
 
   <title>osmosfeed starter test 3</title>
   <link href="https://chuanqisun.github.io/workflow-inactivity-test/"/>
   <updated>2022-08-17T02:23:42.948Z</updated>
   <id>https://chuanqisun.github.io/workflow-inactivity-test/</id>
   <generator uri="https://github.com/osmoscraft/osmosfeed" version="0.0.14">osmosfeed</generator>
 
     <entry>
       <title>CSS Grid and Custom Shapes, Part 1</title>
         <link href="https://css-tricks.com/css-grid-and-custom-shapes-part-1/"/>
       <updated>2022-08-15T13:13:47.000Z</updated>
       <content type="text">In a previous article, I looked at CSS Grid’s ability to create complex layouts using its auto-placement powers. I took that one step further in another article that added a zooming hover effect to images in a grid layout. This time, I want to dive into another type of grid, one that works with shapes.
 
 
 
 
 
 
 
 Like, what if the images aren’t perfectly square but instead are shaped like hexagons or rhombuses? Spoiler alert: we can do it. In fact, we’re going to combine CSS Grid techniques we’ve looked at and drop in some CSS clip-path and mask magic to create fancy grids of images for just about any shape you can imagine!
 
 
 Let’s start with some markup
 
 
 Most of the layouts we are going to look at may look easy to achieve at first glance, but the challenging part is to achieve them with the same HTML markup. We can use a lot of wrappers, divs, and whatnot, but the goal of this post is to use the same and smallest amount of HTML code and still get all the different grids we want. After all, what’s CSS but a way to separate styling and markup? Our styling should not depend on the markup, and vice versa.
 
 
 
 This said, let’s start with this:
 
 
 
 &lt;div class&#x3D;&quot;gallery&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;
   &lt;!-- as many times as we want --&gt;
 &lt;/div&gt;
 
 
 
 A container with images is all that we need here. Nothing more!
 
 
 CSS Grid of Hexagons
 
 
 This is also sometimes referred to as a “honeycomb” grid.
 
 
 
 CodePen Embed Fallback
 
 
 
 There are already plenty of other blog posts out there that show how to make this. Heck, I wrote one here on CSS-Tricks! That article is still good and goes way deep on making a responsive layout. But for this specific case, we are going to rely on a much simpler CSS approach.
 
 
 
 First, let’s use clip-path on the images to create the hexagon shape and we place all of them in the same grid area so they overlap.
 
 
 
 .gallery {
   --s: 150px; /* controls the size */
   display: grid;
 }
 
 .gallery &gt; img {
   grid-area: 1/1;
   width: var(--s);
   aspect-ratio: 1.15;
   object-fit: cover;
   clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%);
 }
 
 
 
 clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%)
 
 
 
 Nothing fancy yet. All the images are hexagons and above each other. So it looks like all we have is a single hexagon-shaped image element, but there are really seven.
 
 
 
 CodePen Embed Fallback
 
 
 
 The next step is to apply a translation to the images to correctly place them on the grid.
 
 
 
 
 
 
 
 Notice that we still want one of the images to remain in the center. The rest are placed around it using CSS translate and good ol’ fashioned geometry. Here’s are the mock formulas I came up with for each image in the grid:
 
 
 
 translate((height + gap)*sin(0deg), (height + gap)*cos(0))
 translate((height + gap)*sin(60deg), (height + gap)*cos(60deg))
 translate((height + gap)*sin(120deg), (height + gap)*cos(120deg))
 translate((height + gap)*sin(180deg), (height + gap)*cos(180deg))
 translate((height + gap)*sin(240deg), (height + gap)*cos(240deg))
 translate((height + gap)*sin(300deg), (height + gap)*cos(300deg))
 
 
 
 A few calculations and optimization later (let’s skip that boring part, right?) we get the following CSS:
 
 
 
 .gallery {
   --s: 150px; /* control the size */
   --g: 10px;  /* control the gap */
   display: grid;
 }
 .gallery &gt; img {
   grid-area: 1/1;
   width: var(--s);
   aspect-ratio: 1.15;
   object-fit: cover;
   clip-path: polygon(25% 0%, 75% 0%, 100% 50% ,75% 100%, 25% 100%, 0 50%);
   transform: translate(var(--_x,0), var(--_y,0));
 }
 .gallery &gt; img:nth-child(1) { --_y: calc(-100% - var(--g)); }
 .gallery &gt; img:nth-child(7) { --_y: calc( 100% + var(--g)); }
 .gallery &gt; img:nth-child(3),
 .gallery &gt; img:nth-child(5) { --_x: calc(-75% - .87*var(--g)); }
 .gallery &gt; img:nth-child(4),
 .gallery &gt; img:nth-child(6) { --_x: calc( 75% + .87*var(--g)); }
 .gallery &gt; img:nth-child(3),
 .gallery &gt; img:nth-child(4) { --_y: calc(-50% - .5*var(--g)); }
 .gallery &gt; img:nth-child(5), 
 .gallery &gt; img:nth-child(6) { --_y: calc( 50% + .5*var(--g)); }
 
 
 
 Maybe that’ll be easier when we get real trigonometry functions in CSS!
 
 
 
 Each image is translated by the --_x and --_y variables that are based on those formulas. Only the second image (nth-child(2)) is undefined in any selector because it’s the one in the center. It can be any image if you decide to use a different order. Here’s the order I’m using:
 
 
 
 
 
 
 
 With only a few lines of code, we get a cool grid of images. To this, I added a little hover effect to the images to make things fancier.
 
 
 
 Guess what? We can get another hexagon grid by simply updating a few values.
 
 
 
 CodePen Embed Fallback
 
 
 
 If you check the code and compare it with the previous one you will notice that I have simply swapped the values inside clip-path and I switched between --x and --y. That’s all!
 
 
 CSS Grid of Rhombuses
 
 
 Rhombus is such a fancy word for a square that’s rotated 45 degrees.
 
 
 
 CodePen Embed Fallback
 
 
 
 Same HTML, remember? We first start by defining a 2×2 grid of images in CSS:
 
 
 
 .gallery {
   --s: 150px; /* controls the size */
 
   display: grid;
   gap: 10px;
   grid: auto-flow var(--s) / repeat(2, var(--s));
   place-items: center;
 }
 .gallery &gt; img {
   width: 100%; 
   aspect-ratio: 1;
   object-fit: cover;
 }
 
 
 
 The first thing that might catch your eye is the grid property. It’s pretty uncommonly used but is super helpful in that it’s a shorthand that lets you define a complete grid in one declaration. It’s not the most intuitive — and not to mention readable — property, but we are here to learn and discover new things, so let’s use it rather than writing out all of the individual grid properties.
 
 
 
 grid: auto-flow var(--s) / repeat(2,var(--s));
 
 /* is equivalent to this: */
 grid-template-columns: repeat(2, var(--s));
 grid-auto-rows: var(--s);
 
 
 
 This defines two columns equal to the --s variable and sets the height of all the rows to --s as well. Since we have four images, we will automatically get a 2×2 grid.
 
 
 
 Here’s another way we could have written it:
 
 
 
 grid-template-columns: repeat(2, var(--s));
 grid-template-rows: repeat(2, var(--s));
 
 
 
 …which can be reduced with the grid shorthand:
 
 
 
 grid: repeat(2,var(--s)) / repeat(2,var(--s));
 
 
 
 After setting the grid, we rotate it and the images with CSS transforms and we get this:
 
 
 
 CodePen Embed Fallback
 
 
 
 Note how I rotate them both by 45deg, but in the opposite direction.
 
 
 
 .gallery {
   /* etc. */
   transform: rotate(45deg);
 }
 .gallery &gt; img {
   /* etc. */
   transform: rotate(-45deg);
 }
 
 
 
 Rotating the images in the negative direction prevents them from getting rotated with the grid so they stay straight. Now, we apply a clip-path to clip a rhombus shape out of them.
 
 
 
 clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%)
 
 
 
 CodePen Embed Fallback
 
 
 
 We are almost done! We need to rectify the size of the image to make them fit together. Otherwise, they’re spaced far apart to the point where it doesn’t look like a grid of images.
 
 
 
 
 
 
 
 The image is within the boundary of the green circle, which is the inscribed circle of the grid area where the image is placed. What we want is to make the image bigger to fit inside the red circle, which is the circumscribed circle of the grid area.
 
 
 
 Don’t worry, I won’t introduce any more boring geometry. All you need to know is that the relationship between the radius of each circle is the square root of 2 (sqrt(2)). This is the value we need to increase the size of our images to fill the area. We will use 100%*sqrt(2) &#x3D; 141% and be done!
 
 
 
 .gallery {
   --s: 150px; /* control the size */
 
   display: grid;
   grid: auto-flow var(--s) / repeat(2,var(--s));
   gap: 10px;
   place-items: center;
   transform: rotate(45deg);
 }
 .gallery &gt; img {
   width: 141%; /* 100%*sqrt(2) &#x3D; 141% */
   aspect-ratio: 1;
   object-fit: cover;
   transform: rotate(-45deg);
   clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
 }
 
 
 
 Like the hexagon grid, we can make things fancier with that nice zooming hover effect:
 
 
 
 CodePen Embed Fallback
 
 
 CSS Grid of Triangular Shapes
 
 
 CodePen Embed Fallback
 
 
 
 You probably know by now that the big trick is figuring out the clip-path to get the shapes we want. For this grid, each element has its own clip-path value whereas the last two grids worked with a consistent shape. So, this time around, it’s like we’re working with a few different triangular shapes that come together to form a rectangular grid of images.
 
 
 
 The three images at the top
 
 
 
 The three images at the bottom
 
 
 
 We place them inside a 3×2 grid with the following CSS:
 
 
 
 .gallery {
   display: grid;
   gap: 10px; 
   grid-template-columns: auto auto auto; /* 3 columns */
   place-items: center;
 }
 .gallery &gt; img {
   width: 200px; /* controls the size */
   aspect-ratio: 1;
   object-fit: cover;
 }
 /* the clip-path values */
 .gallery &gt; img:nth-child(1) { clip-path: polygon(0 0, 50% 0, 100% 100% ,0 100%); }
 .gallery &gt; img:nth-child(2) { clip-path: polygon(0 0, 100% 0, 50% 100%); }
 .gallery &gt; img:nth-child(3) { clip-path: polygon(50% 0, 100% 0, 100% 100%, 0 100%); }
 .gallery &gt; img:nth-child(4) { clip-path: polygon(0 0, 100% 0, 50% 100%, 0 100%); }
 .gallery &gt; img:nth-child(5) { clip-path: polygon(50% 0, 100% 100%, 0% 100%); }
 .gallery &gt; img:nth-child(6) { clip-path: polygon(0 0, 100% 0 ,100% 100%, 50% 100%); } }
 
 
 
 Here’s what we get:
 
 
 
 CodePen Embed Fallback
 
 
 
 The final touch is to make the width of the middle column equal 0 to get rid of the spaces between the images. The same sort of spacing problem we had with the rhombus grid, but with a different approach for the shapes we’re using:
 
 
 
 grid-template-columns: auto 0 auto;
 
 
 
 I had to fiddle with the clip-path values to make sure they would all appear to fit together nicely like a puzzle. The original images overlap when the middle column has zero width, but after slicing the images, the illusion is perfect:
 
 
 
 
 
 
 CSS Pizza Pie Grid
 
 
 Guess what? We can get another cool grid by simply adding border-radius and overflow to our grid or triangular shapes. 🎉
 
 
 
 CodePen Embed Fallback
 
 
 CSS Grid of Puzzle Pieces
 
 
 This time we are going to play with the CSS mask property to make the images look like pieces of a puzzle.
 
 
 
 CodePen Embed Fallback
 
 
 
 If you haven’t used mask with CSS gradients, I highly recommend this other article I wrote on the topic because it’ll help with what comes next. Why gradients? Because that’s what we’re using to get the round notches in the puzzle piece shapes.
 
 
 
 Setting up the grid should be a cinch by now, so let’s focus instead on the mask part.
 
 
 
 CodePen Embed Fallback
 
 
 
 As illustrated in the above demo, we need two gradients to create the final shape. One gradient creates a circle (the green part) and the other creates the right curve while filling in the top part.
 
 
 
 --g: 6px; /* controls the gap */
 --r: 42px;  /* control the circular shapes */
 
 background: 
   radial-gradient(var(--r) at left 50% bottom var(--r), green 95%, #0000),
   radial-gradient(calc(var(--r) + var(--g)) at calc(100% + var(--g)) 50%, #0000 95%, red)
   top/100% calc(100% - var(--r)) no-repeat;
 
 
 
 Two variables control the shape. The --g variable is nothing but the grid gap. We need to account for the gap to correctly place our circles so they overlap perfectly when the whole puzzle is assembled. The --r variable controls the size of circular parts of the puzzle shape.
 
 
 
 
 
 
 
 Now we take the same CSS and update a few values in it to create the three other shapes:
 
 
 
 CodePen Embed Fallback
 
 
 
 We have the shapes, but not the overlapping edges we need to make them fit together. Each image is limited to the grid cell it’s in, so it makes sense why the shapes are sort of jumbled at the moment:
 
 
 
 
 
 
 
 We need to create an overflow by increasing the height/width of the images. From the above figure, we have to increase the height of the first and fourth images while we increase the width of the second and third ones. You have probably already guessed that we need to increase them using the --r variable.
 
 
 
 .gallery &gt; img:is(:nth-child(1),:nth-child(4)) {
   width: 100%;
   height: calc(100% + var(--r));
 }
 .gallery &gt; img:is(:nth-child(2),:nth-child(3)) {
   height: 100%;
   width: calc(100% + var(--r));
 }
 
 
 
 We are getting closer!
 
 
 
 CodePen Embed Fallback
 
 
 
 We created the overlap but, by default, our images either overlap on the right (if we increase the width) or the bottom (if we increase the height). But that’s not what we want for the second and fourth images. The fix is to use place-self: end on those two images and our full code becomes this:
 
 
 
 CodePen Embed Fallback
 
 
 
 Here is another example where I am using a conic gradient instead of a radial gradient. This gives us triangular puzzle pieces while keeping the same underlying HTML and CSS.
 
 
 
 CodePen Embed Fallback
 
 
 
 A last one! This time I am using clip-path and since it’s a property we can animate, we get a cool hover by simply updating the custom property that controls the shape.
 
 
 
 CodePen Embed Fallback
 
 
 Wrapping up
 
 
 That’s all for this first part! By combining the things we’ve already learned about CSS Grid with some added clip-path and mask magic, we were able to make grid layouts featuring different kinds of shapes. And we used the same HTML markup each time! And the markup itself is nothing more than a container with a handful of image elements!
 
 
 
 In the second part, we are going to explore more complex-looking grids with more fancy shapes and hover effects.
 
 
 
 I’m planning to take the demo of expanding image panels we made together in this other article:
 
 
 
 CodePen Embed Fallback
 
 
 
 …and transform it into a zig-zag image panels! And this is only one example among the many we will discover in the next article.
 
 
 
 
 
 
 
 CSS Grid and Custom Shapes, Part 1 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Quick Tip: Clear VS Code Cache for Open Files</title>
         <link href="https://css-tricks.com/quick-tip-clear-vs-code-cache-for-open-files/"/>
       <updated>2022-08-11T13:35:56.000Z</updated>
       <content type="text">If you use VS Code, you might have enabled the setting for re-opening a previously open file next time the app launches. I do. I like that.
 
 
 
 
 
 
 
 Hey, thanks for remembering, buddy! 🤗
 
 
 
 But sometimes you really, really don’t want that to happen.
 
 
 
 I recently ran into one of those times! I had to reinstall my local copy of this site and, with it, the 3GB+ database that accompanies it. Being a WordPress site and all, I needed to open up the SQL database file to search-and-replace some stuff.
 
 
 
 If you’ve ever tried to open a super duper large file in VS Code, then you know you might need to jiggle a few settings that increase the memory limit and all that. The app is super flexible like that. There’s even a nice extension that’ll both increase the memory and perform a search-and-replace on open.
 
 
 
 
 
 
 
 Anyway, that big ol’ database file crashed VS Code several times and I wound up finding another way to go about things. However, VS Code keeps trying to open that file and inevitably crashes even though I nuked the file. And that means I wait for the MacOS beachball of fun to spin around before the app crashes and I can reopen it again for reals.
 
 
 
 Well, I finally decided to fix that today and spent a little time searching around. One Stack Overflow thread suggests disabling extensions and increasing the memory limit via the command line. I’m glad that worked for some folks, but I had to keep looking.
 
 
 
 Another thread suggests clearing the app’s cache from the command palette.
 
 
 
 
 
 
 
 Nice, but no dice. 🎲
 
 
 
 I wound up going with a scorched earth strategy shared by Jie Jenn in a helpful YouTube video. You’ve gotta manually trash the cached files from VS Code. The video walks through it in Windows, but it’s pretty darn similar in MacOS. The VS Code cache is located in your user folder.
 
 
 
 
 
 
 
 Notice that I have the Backups folder highlighted there. Jie removed the files from the CachedData folder, but all that did was trigger a prompt for me to re-install the app. So, I took a risk and deleted what appeared to be a 3GB+ file in Backups. I showed that file the door and VS Code has been happy ever since.
 
 
 
 Ask me again in a week and maybe I’ll find out that I really screwed something up. But so far, so good!
 
 Quick Tip: Clear VS Code Cache for Open Files originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Designing for Long-Form Articles</title>
         <link href="https://css-tricks.com/designing-for-long-form-articles/"/>
       <updated>2022-08-10T14:30:01.000Z</updated>
       <content type="text">Designing a beautiful “article” is wrought with tons of considerations. Unlike, say, a homepage, a long-form article is less about designing an interface than it is designing text in a way that creates a relaxed and comfortable reading experience.
 
 
 
 That’s because articles deal with long-form content which, in turn, tends to be valued by a ”time on page” interaction with users. We want someone to read a complete narrative. There’s a natural space between the time someone lands on an article and reads all the words. And hopefully, that space is immersive enough to not only hold a user’s, but provoke thoughts, ideas, and, possibly, actions. At least that’s what I’m hoping as I have your attention and you make your way through the very article you’re reading.
 
 
 
 There’s a balance. On one hand, we hear that “no one reads the Internet.” On the other, a long-form article demands careful attention. Considering the current value of content marketing and the growing impatience in users, captivating readers for as long as possible should be a key concern. Let’s take a look at some best practices and examples of incredible article pages to get a better idea of what makes a visually appealing reading experience for long-form articles (without sacrificing user experience), and how we can replicate the effects.
 
 
 
 
 
 
 Quick wins
 
 
 Let me quickly list out what I think might already be obvious to many of you, but are effective things for content legibility:
 
 
 
 Increase the font size: We know that 16px is the default and is perfectly fine in many designs, but a larger font size is inviting in that it implies the user is free to lean back and settle in without having to angle forward with the screen in their face to read.Aim for characters per line: Very few people I know like to work harder than they need to, and that goes for reading too. Rather than using the full viewport width, try to narrow things down and balance that with your larger font size to get fewer characters on each line of text. Your sweet spot may vary, though many folks suggest somewhere between 45-75 characters per line to help limit how far the reader’s eye has to work to go from left to right. Chris has a bookmarklet to help count characters, but we also have the ch unit in CSS to get predictable results.Bump up the line height: A default line height is going to feel smashed. It’s funny, but more space between lines (up to a point, of course) is less work for eyes, which seems antithetical to the characters-per-line advice where we generally want eyes to travel a shorter distance. A line height between 1.2 and 1.5 seems to be a pretty typical range for long-form content.
 
 
 
 If you haven’t seen it before, Pierrick Calvez has a great “five-minute” guide to typography that packs in a bunch of low-hanging fruit like these.
 
 
 Design for extra breathing room
 
 
 You may be accustomed to designing “above the fold” where real estate is a prime commodity. That’s sort of like beach-front property in the web world because it’s where we’re used to packing in high-value things, like hero banners, calls to action, and anything else to help sell a thing. Above the fold can be a lot like a dense urban downtown with high traffic and high-rise buildings.
 
 
 
 Articles are different. They allow you to stretch out a bit. If we want to take the city development analogy a little further, articles have the acreage to lean into a “less is more” sort of design approach. That’s what makes seemingly small design choices — like type — so important to the overall experience.
 
 
 
 Check out the example below. The link underlines have a little more room to breathe (specifically, they appear below the descenders). This is actually something that you can enable sitewide but looks especially nice on article pages since it increases readability. That’s the sort of subtle design choice that contributes to extra breathing room.
 
 
 
 
 
 
 
 text-underline-position: under; is the line of CSS that makes this work. Naturally, text-decoration must be set to something other than none (underline in this case), too.
 
 
 
 The example above also features text-decoration-thickness, which alters the thickness of underlines (and other line types). You can use this CSS property to match a line’s thickness to a font’s size and/or weight.
 
 
 
 Here’s a full example:
 
 
 
 a {
   text-decoration: underline;
   text-decoration-thickness: 2px;
 
   /* or */
   text-decoration: underline 2px;
   text-underline-position: under;
 }
 
 
 
 But before you reach for the text-decoration shorthand, Šime Vidas has a few “gotchas” when it comes to using it that are worth reviewing.
 
 
 Leading into the content
 
 
 Drop caps are stylized letters that can be placed at the beginning of a document or document section. They were once used in Latin texts, but today they’re mostly used for decorative reasons.
 
 
 
 
 
 
 
 Personally, I think that drop caps hinder readability. However, they can be a nice way to “lead” a reader into the main content, and they shouldn’t introduce any serious accessibility issues as long as you’re using the ::first-letter pseudo-element. There are other (older) methods that involve more HTML and CSS as well as the use of ARIA attributes in order for the content to remain accessible.
 
 
 
 Using ::first-letter, the CSS would look something like this:
 
 
 
 /* select the first letter of the first paragraph */
 article &gt; p:first-child::first-letter {
   color: #903;
   float: left;
   font-family: Georgia;
   font-size: 75px;
   line-height: 60px;
   padding-top: 4px;
   padding-right: 8px;
   padding-left: 3px;
 }
 
 
 
 It sure would be nice if we could use the initial-letter property, but there’s pretty much no support for it at the time I’m writing this. If we had it, all that math for font size and line height would be calculated for us!
 
 
 
 CodePen challenged folks to show off their drop-cap-styling skills several years ago and you can see a whole bunch of neat examples from it in this collection.
 
 
 Skip to main content
 
 
 Screen readers allow users to skip to the main content as long as it wraps it within a &lt;main&gt; element. However, those who navigate websites by tabbing don’t benefit from this. Instead, we must create a “skip to main content” anchor link. This link is customarily hidden but revealed once the user makes their first tab (i.e. show on focus).
 
 
 
 
 
 
 
 It would look something like this:
 
 
 
 &lt;!-- anchor --&gt;
 &lt;a id&#x3D;&quot;skip-link&quot; href&#x3D;&quot;#main&quot;&gt;Skip to main content&lt;/a&gt;
 
 &lt;!-- target --&gt;
 &lt;main class&#x3D;&quot;main&quot;&gt;
   &lt;!-- main content --&gt;
 &lt;/main&gt;
 
 
 
 #skip-link {
   position: absolute; /* remove it from the flow */
   transform: translateX(-100%); /* move it off-screen so that it appears hidden but remains focusable */
 }
 #skip-link:focus {
   position: unset; /* insert it back into the flow */
   transform: unset; /* move it back onto the screen */
 }
 
 .main {
   scroll-margin: 1rem; /* adds breathing room above the scroll target */
 }
 
 
 
 There are other ways to go about it, of course. Here are a couple of deeper dives on creating skip links.
 
 
 
     		
     
       
 
   
     
                 
         Article
       
 
     on
 
     Aug 3, 2021  
 
   
     
       A Deep Dive on Skipping to Content    
   
 
   
       
       design design principles editorial typography    
   
   
     
           
   
     
       Paul Ratcliffe    
   
 
 
 
 
   
     
                 
         Article
       
 
     on
 
     Aug 25, 2021  
 
   
     
       How to Create a “Skip to Content” Link    
   
 
   
       
       design design principles editorial typography    
   
   
     
           
   
     
       Paul Ryan    
   
 
 
     
   
 
 
 Seamless visuals
 
 
 I love the illustrations in this article. Despite how incredible they look, they don’t demand too much cognitive attention. They introduce brief moments of delight but also suggest that the article itself has something more important to say. Partly, this comes down to the use of transparency, whereas rectangular images capture more negative space and therefore demand more attention (which is fine if that’s the desired effect and images are crucial to the story).
 
 
 
 
 
 
 
 However, it’s important to know that the images aren’t actually transparent at all, but instead are non-transparent JPEGs with the same background color as the content. I’m presuming that’s to keep the size of the images smaller compared to PNGs that support transparency.
 
 
 
 
 
 
 
 The downside to “faking” a transparent background like this is that it would require additional trickery (and maintenance) to support a dark mode UI if your site happens to offer one. If the illustrations are pretty flat and simple, then SVG might be the way to go instead since it’s small, scalable, and capable of blending into whatever background it’s on.
 
 
 
 But if you’re bound to using raster images and would rather work with PNG files for transparency, you’ll want to look into using responsive images and the loading&#x3D;&quot;lazy&quot; attribute for faster loading times.
 
 
 Put the focus on the type and semantics
 
 
 You may have very little say over how or where someone reads content on the web these days. Whether the user receives it in an RSS feed, gets it delivered by email, sees it copy-and-pasted from a colleague, finds it on a scraped site, or whatnot, your content might look different than you prefer. You could design what you think is the most gorgeous article in all the land and the user still might smash that Reader Mode button to your dismay.
 
 
 
 That’s ok! The discoverability of content is very much as important as the design of it, and many users have their own ways of discovering content and preferences for what makes a good reading experience.
 
 
 
 But there are reasons why someone would want a Reader Mode. For one, it’s like “not seeing any CSS” at all. By that, I mean Safari’s Reader Mode or Brave SpeedReader, which use machine learning to detect articles. There’s no fetching or executing of CSS, JavaScript, or non-article images, which boosts performance and also blocks ads and tracking.
 
 
 
 
 
 
 
 This sort of “brute minimalism” puts the focus on the content rather than the styles. So, you might actually want to embrace a browser’s opinionated reading styles specifically for that purpose.
 
 
 
 The way to do that is not by using CSS, but by paying closer attention to your HTML. Reader modes work best with markup that uses simple, semantic, article-related HTML. You’ve got to do more than simply slapping &lt;article&gt; tags around the article to get the most from it.
 
 
 
 You might just find that a minimal design that emphasizes legibility over slickness is actually a good strategy to use in your site’s design. I’d strongly suggest reading Robin’s post on the “smallest CSS” for a solid reading experience.
 
 
 Roundup of long-form articles!
 
 
 I’ve shared a lot of what I think makes for a great reading experience for long-form articles on the web. But seeing is believing and I’ve rounded up a bunch of examples that showcase what we’ve covered.
 
 
 
 Polygon uses a strong, provacative visual to hook readers into the ain content. Notice how the drop cap, larger font size, and increased line height make this feel like a page you can sit back with and relax.The TASTE website uses transparent images that blend into the background color of the content. There’s plenty of space between elements and bold accents — like thick borders and a heavy drop cap — pull the reader’s eye down the page.The Outline is a prime example of minimalism. Notice how something as subtle as a squiggly horizontal rule can be an eye-catching embellishment when there are fewer things competing for attention.The brutalist style of the Dropbox blog is probably a controversial one. The colors, fonts, and use of space are all over the place, and the content being floated to the right just feels unfamiliar. But does it break any design ‘rules’? Nope. I could grow to like it in time, especially in a milder form.Urban Beardsman’s design is extremely linear. As somebody that has difficulty concentrating and is easily distracted by sidebars, in-article CTA boxes, and even blockquotes, I very much enjoy how easy it is to read this blog like a book. The perfect example of “less is more.”There’s nothing unique about the GoSquared blog, but it managed to include pretty much all of the things we discussed in the article — a better underline design, seamless images, and some very readable typography. Quite impressive.The Smart Passive Income blog proves how far you can get just by choosing a legible font and using readable font sizes, line heights, letter spacings, and paragraph spacings.Recipe pages are consistently sucky, but not Little Fat Boy. The lack of sameness throughout the page makes it easy jump to different parts of the recipe without getting lost. Plus, the ingredients are pinned to the top-right for your convenience.
 
 Designing for Long-Form Articles originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Committing CSS Crimes</title>
         <link href="https://css-tricks.com/committing-css-crimes/"/>
       <updated>2022-08-09T13:01:44.000Z</updated>
       <content type="text">The time for CSS-Tricks is over. Now is the time for CSS Crimes!
 
 
 
 In this current landscape of content service providers, users are often limited to expressing themselves in text, links, and images. Sanitization rules tend to strip out HTML, JavaScript, and various attributes.
 
 
 
 Social media service Cohost allows users to have greater freedom with markup and inline styles than we may be typically used to. Some users have taken advantage of this freedom to commit CSS Crimes! It has resulted in creative recreations of familiar interfaces and interactive games by using properties in unconventional ways.
 
 
 
 
 
 
 
 Blackle Mori created a contraption where pulling a handle slowly turns a series of gears, pulleys, and chains. Eventually an aperture opens to reveal the site’s mascot (“eggbug”) and the proclamation “Good Job!”. I have stared at this in Developer Tools and it is an amazing combination of grid, resize, transform, and calc(). I ended up adding a border to all &lt;div&gt;s to try and get a better understanding of how each individual element moved.
 
 
 
 Several other CSS Crimes use resize to allow viewers rudimentary click and drag functionality.Blackle Mori explains this technique here!Other CSS Crimes create limited interaction through &lt;details&gt; and &lt;summary&gt;.Blackle Mori explains this technique here!Some members of the community have taken Andrew Siller’s technique from “Night of the Living GIF: Making Interactive Multiplayer Experiences” to create a multiplayer Pokemon experience!
 
 
 
 There have been situations in the past where I have been restricted from using the full toolkit of HTML, JavaScript, and CSS. There have been many instances of using decorative CSS shapes to get around images. I have used :hover as a workaround for mouseenter and mouseleave. I have used input:checked as a sibling selector for toggling.
 
 
 
 While CSS Crimes are probably not something you would want to employ on a regular basis, we should embrace experiments within constraints that can foster creative solutions.
 To Shared Link — Permalink on CSS-Tricks
 Committing CSS Crimes originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Zooming Images in a Grid Layout</title>
         <link href="https://css-tricks.com/zooming-images-in-a-grid-layout/"/>
       <updated>2022-08-08T12:55:49.000Z</updated>
       <content type="text">Creating a grid of images is easy, thanks to CSS Grid. But making the grid do fancy things after the images have been placed can be tricky to pull off.
 
 
 
 Say you want to add some fancy hover effect to the images where they grow and zoom beyond the rows and columns where they sit? We can do that!
 
 
 
 
 
 
 
 CodePen Embed Fallback
 
 
 
 Cool, right? If you check the code, you won’t find any JavaScript, complex selectors, or even magic numbers. And this is only one example among many we will explore!
 
 
 Building the grid
 
 
 The HTML code to create the grid is as simple as a list of images within a container. We don’t need more than that.
 
 
 
 &lt;div class&#x3D;&quot;gallery&quot;&gt;
   &lt;img&gt;
   &lt;img&gt;
   &lt;img&gt;
   &lt;!-- etc. --&gt;
 &lt;/div&gt;
 
 
 
 For the CSS, we first start by setting the grid using the following:
 
 
 
 .gallery {
   --s: 150px; /* controls the size */
   --g: 10px;  /* controls the gap */
 
   display: grid;
   gap: var(--g);
   width: calc(3*var(--s) + 2*var(--g)); /* 3 times the size plus 2 times the gap */
   aspect-ratio: 1;
   grid-template-columns: repeat(3, auto);
 }
 
 
 
 In short, we have two variables, one that controls the size of the images and one that sets the size of the gap between images. aspect-ratio helps keep things in proportion.
 
 
 
 You might be wondering why we are only defining three columns but no rows. No, I didn’t forget the rows — we just don’t need to explicitly set them. CSS Grid is capable of automatically placing items on implicit rows and columns, meaning we get as many rows as needed to any number of images we throw at it. We can explicitly define the rows instead but we need to add grid-auto-flow: column to make sure the browser will create the needed columns for us.
 
 
 
 Here is an example to illustrate both cases. The difference is that one flows in a row direction an the other in a column direction.
 
 
 
 CodePen Embed Fallback
 
 
 
 Check out this other article I wrote for more about the implicit grids and the auto-placement algorithm.
 
 
 
 Now that we have our grid, it’s time to style the images:
 
 
 
 .gallery &gt; img {
   width: 0;
   height: 0;
   min-height: 100%;
   min-width: 100%;
   object-fit: cover;
 }
 
 
 
 The hover effect we’re making relies on this CSS. It probably looks weird to you that we’re making images that have both no width or height but have a minimum width and height of 100%. But you will see that it’s a pretty neat trick for what we are trying to achieve.
 
 
 
 What I’m doing here is telling the browser that the images need to have 0 width and height but also need to have a minimum height equal to 100%… but 100% of what? When using percentages, the value is relative to something else. In this case, our image is placed inside a grid cell and we need to know that size to know what’s 100% is relative to.
 
 
 
 The browser will first ignore min-height: 100% to calculate the size of the grid cells, but it will use the height: 0 in its calculation. That means our images will not contribute to the size of the grid cells… because they technically have no physical size. This will result in three equal columns and rows that are based on the size of the grid (which we defined on the .gallery’s width and aspect-ratio). The height of each grid cell is nothing but the variable --s we defined (same for the width).
 
 
 
 
 
 
 
 Now that we have the dimensions of our grid’s cells, the browser will use it with min-height: 100% (and min-width: 100%) which will force the images to completely fill the space of each grid cell. The whole thing may look a bit confusing but the main idea is to make sure that the grid defines the size of the images rather than the other way around. I don’t want the image to define the size of the grid and you will understand why after adding the hover effect.
 
 
 Creating the hover effect
 
 
 What we need to do is increase the scale of the images when they’re hovered. We can do that by adjusting an image’s width and height on :hover:
 
 
 
 .gallery {
   --f: 1.5; /* controls the scale factor */
 }
 
 .gallery img:hover{
   width:  calc(var(--s) * var(--f));
   height: calc(var(--s) * var(--f));
 }
 
 
 
 I added a new custom variable, --f, to the mix as a scale factor to control the size on hover. Notice how I’m multiplying the size variable, --s, by it to calculate the new image size.
 
 
 
 But you said that the image size needs to be 0. What is going on? I am lost…
 
 
 
 What I said is still true but I am making an exception for the hovered image. I am telling the browser that only one image will have a size that’s not equal to zero — so it will contribute to the dimension of the grid — while all the others remain equal to 0.
 
 
 
 
 
 
 
 The left side shows the grid in its natural state without any hovered images, which is what the right side is showing. All the grid cells on the left side are equal in size since all the images have no physical dimensions.
 
 
 
 On the right side, the second image in the first row is hovered, which gives it dimensions that affect the grid cell’s size. The browser will make that specific grid cell bigger on hover, which contributes to the overall size. And since the size of the whole grid is set (because we set a fixed width on the .gallery), the other grid cells will logically respond by becoming smaller in order to keep the .gallery‘s overall size in tact.
 
 
 
 That’s our zoom effect in action! By increasing the size of only one image we affect the whole grid configuration, and we said before that the grid defines the size of the images so that each image stretches inside its grid cell to fill all the space.
 
 
 
 To this, we add a touch of transition and use object-fit to avoid image distortion and the illusion is perfect!
 
 
 
 I know that the logic behind the trick is not easy to grasp. Don’t worry if you don’t fully understand it. The most important is to understand the structure of the code used and how to modify it to get more variations. That’s what we will do next!
 
 
 Adding more images
 
 
 We created a 3×3 grid to explain the main trick, but you have probably guessed that we there’d no need to stop there. We can make the number of columns and rows variables and add as many images as we want.
 
 
 
 CodePen Embed Fallback
 
 
 
 .gallery {
   --n: 3; /* number of rows*/
   --m: 4; /* number of columns */
   --s: 150px; /* control the size */
   --g: 10px;  /* control the gap */
   --f: 1.5;   /* control the scale factor */
 
   display: grid;
   gap: var(--g);
   width:  calc(var(--m)*var(--s) + (var(--m) - 1)*var(--g));
   height: calc(var(--n)*var(--s) + (var(--n) - 1)*var(--g));
   grid-template-columns: repeat(var(--m),auto);
 }
 
 
 
 We have two new variables for the number of rows and columns. Then we simply define the width and height of our grid using them. Same for grid-template-columns which uses the --m variable. And just like before, we don’t need to explicitly define the rows since the CSS Grid’s auto-placement feature will do the job for us no matter how many image elements we’re using.
 
 
 
 Why not different values for the width and height? We can do that:
 
 
 
 CodePen Embed Fallback
 
 
 
 .gallery {
   --n: 3; /* number of rows*/
   --m: 4; /* number of columns */
   --h: 120px; /* control the height */
   --w: 150px; /* control the width */
   --g: 10px;  /* control the gap */
   --f: 1.5;   /* control the scale factor */
 
   display: grid;
   gap: var(--g);
   width:  calc(var(--m)*var(--w) + (var(--m) - 1)*var(--g));
   height: calc(var(--n)*var(--h) + (var(--n) - 1)*var(--g));
   grid-template-columns: repeat(var(--m),auto);
 }
 
 .gallery img:hover{
   width:  calc(var(--w)*var(--f));
   height: calc(var(--h)*var(--f));
 }
 
 
 
 We replace --s with two variables, one for the width, --w, and another one for the height, --h. Then we adjust everything else accordingly.
 
 
 
 So, we started with a grid with a fixed size and number of elements, but then we made a new set of variables to get any configuration we want. All we have to do is to add as many images as we want and adjust the CSS variables accordingly. The combinations are limitless!
 
 
 A full-screen gallery of images
 
 
 What about a full-screen version? Yes, that’s also possible. All we need is to know what values we need to assign to our variables. If we want N rows of images and we want our grid to be full screen, we first need to solve for a height of 100vh:
 
 
 
 var(--n) * var(--h) + (var(--n) - 1) * var(--g) &#x3D; 100vh
 
 
 
 Same logic for the width, but using vw instead of vh:
 
 
 
 var(--m) * var(--w) + (var(--m) - 1) * var(--g) &#x3D; 100vw
 
 
 
 We do the math to get:
 
 
 
 --w: (100vw - (var(--m) - 1) * var(--g)) / var(--m)
 --h: (100vh - (var(--n) - 1) * var(--g)) / var(--n)
 
 
 
 Done!
 
 
 
 CodePen Embed Fallback
 
 
 
 It’s the same exact HTML but with some updated variables that change the grid’s sizing and behavior.
 
 
 
 Note that I have omitted the formula we previously set on the .gallery‘s width and height and replaced them with 100vw and 100vh, respectively. The formula will give us the same result but since we know what value we want, we can ditch all that added complexity.
 
 
 
 We can also simplify the --h and --w by removing the gap from the equation in favor of this:
 
 
 
 --h: calc(100vh / var(--n)); /* Viewport height divided by number of rows */
 --w: calc(100vw / var(--m)); /* Viewport width divided by number of columns */
 
 
 
 This will make the hovered image grow a bit more than the previous example, but it is no big deal since we can control the scale with the --f variable we’re using as a multiplier.
 
 
 
 And since the variables are used in one place we can still simplify the code by removing them altogether:
 
 
 
 CodePen Embed Fallback
 
 
 
 It’s important to note this optimization applies only to the full-screen example and not to the examples we’ve covered. This example is a particular case where we can make the code lighter by removing some of the complex calculation work we needed in the other examples.
 
 
 
 We actually have everything we need to create the popular pattern of expanding panels:
 
 
 
 CodePen Embed Fallback
 
 
 Let’s dig even deeper
 
 
 Did you notice that our scale factor can be less than 1? We can define the size of the hovered image to be smaller than --h or --w but the image gets bigger on hover.
 
 
 
 The initial grid cell size is equal to --w and --h, so why do a smaller values make the grid cell bigger? Shouldn’t the cell get smaller, or at least maintain its initial size? And what is the final size of the grid cell?
 
 
 
 We need to dig deeper into how the CSS Grid algorithm calculates the size of the grid cells. And this is involves understanding CSS Grid’s default stretch alignment.
 
 
 
 Here’s an example to understand the logic.
 
 
 
 CodePen Embed Fallback
 
 
 
 On the left side of the demo, I defined a two-column with auto width. We get the intuitive result: two equal columns (and two equal grid cells). But the grid I set up on the right side of the demo, where I am updating the alignment using place-content: start, appears to have nothing.
 
 
 
 DevTools helps show us what’s really happening in both cases:
 
 
 
 
 
 
 
 In the second grid, we have two columns, but their widths equal zero, so we get two grid cells that are collapsed at the top-left corner of the grid container. This is not a bug but the logical result of the grid’s alignment. When we size a column (or row) with auto, it means that its content dictates its size — but we have an empty div with no content to make room for.
 
 
 
 But since stretch is the default alignment and we have enough space inside our grid, the browser will stretch both grid cells equally to cover all that area. That’s how the grid on the left winds up with two equal columns.
 
 
 
 From the specification:
 
 
 
 Note that certain values of justify-content and align-content can cause the tracks to be spaced apart (space-around, space-between, space-evenly) or to be resized (stretch).
 
 
 
 Note the “to be resized” which is the key here. In the last example, I used place-content which is the shorthand for justify-content and align-content
 
 
 
 And this is buried somewhere in the Grid Sizing algorithm specs:
 
 
 
 This step expands tracks that have an auto max track sizing function by dividing any remaining positive, definite free space equally amongst them. If the free space is indefinite, but the grid container has a definite min-width/height, use that size to calculate the free space for this step instead.
 
 
 
 “Equally” explains why we wind up with equal grid cells, but it applies to “the free space” which is very important.
 
 
 
 Let’s take the previous example and add content to one of the divs:
 
 
 
 CodePen Embed Fallback
 
 
 
 We added a square 50px image. Here’s an illustration of how each grid in our example responds to that image:
 
 
 
 
 
 
 
 In the first case, we can see that the first cell (in red) is bigger than the second one (in blue). In the second case, the size of the first cell changes to fit the physical size of the image while the second cell remains with no dimensions. The free space is divided equally, but the first cell has more content inside which makes it bigger.
 
 
 
 This is the math to figure out our free space:
 
 
 
 (grid width) - (gap) - (image width) &#x3D; (free space)
 200px - 5px - 50px &#x3D; 145px 
 
 
 
 Divided by two — the number of columns — we get a width of 72.5px for each column. But we add the size of the image, 50px, to the first column which leaves us with one column at 122.5px and the second one equal to 72.5px.
 
 
 
 The same logic applies to our grid of images. All the images have a size equal to 0 (no content) while the hovered image contributes to size — even if it’s just 1px — making its grid cell bigger than the others. For this reason, the scale factor can be any value bigger than 0 even decimals between 0 and 1.
 
 
 
 To get the final width of the grid cells, we do the same calculation to get the following:
 
 
 
 (container width) - (sum of all gaps) - (hovered image width) &#x3D; (free space)
 
 
 
 The width of container is defined by:
 
 
 
 var(--m)*var(--w) + (var(--m) - 1)*var(--g)
 
 
 
 …and all the gaps are equal to:
 
 
 
 (var(--m) - 1)*var(--g)
 
 
 
 …and for the hovered image we have:
 
 
 
 var(--w)*var(--f)
 
 
 
 We can calculate all of that with our variables:
 
 
 
 var(--m)*var(--w) - var(--w)*var(--f) &#x3D; var(--w)*(var(--m) - var(--f))
 
 
 
 The number of columns is defined by --m ,so we divide that free space equally to get:
 
 
 
 var(--w)*(var(--m) - var(--f))/var(--m)
 
 
 
 …which gives us the size of the non-hovered images. For hovered images, we have this:
 
 
 
 var(--w)*(var(--m) - var(--f))/var(--m) + var(--w)*var(--f)
 var(--w)*((var(--m) - var(--f))/var(--m) + var(--f))
 
 
 
 If we want to control the final size of the hovered image, we consider the above formula to get the exact size we want. If, for example, we want the image to be twice as big:
 
 
 
 (var(--m) - var(--f))/var(--m) + var(--f) &#x3D; 2
 
 
 
 So, the value of our scale multiplier, --f, needs to be equal to:
 
 
 
 var(--m)/(var(--m) - 1)
 
 
 
 For three columns we will have 3/2 &#x3D; 1.5 and that’s the scale factor I used in the first demo of this article because I wanted to make the image twice as big on hover!
 
 
 
 The same logic applies to the height calculation and in case we want to control both of them independently we will need to consider two scale factors to make sure we have a specific width and height on hover.
 
 
 
 .gallery {
   /* same as before */
    --fw: 1.5; /* controls the scale factor for the width */
    --fh: 1.2; /* controls the scale factor for the height */
 
   /* same as before */
 }
 
 .gallery img:hover{
   width:  calc(var(--w)*var(--fw));
   height: calc(var(--h)*var(--fh));
 }
 
 
 
 Now, you know all the secrets to create any kind of image grid with a cool hover effect while also having control of the sizing you want using the math we just covered.
 
 
 Wrapping up
 
 
 In my last article, we created a complex-looking grid with a few lines of CSS that put CSS Grid’s implicit grid and auto-placement features to use. In this article, we relied on some CSS Grid sizing trickery to create a fancy grid of images that zoom on hover and cause the grid to adjust accordingly. All of this with a simplified code that is easy to adjust using CSS variables!
 
 
 
 In the next article, we will play with shapes! We will combine CSS grid with mask and clip-path to get fancy grid of images.
 
 Zooming Images in a Grid Layout originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How I Added Scroll Snapping To My Twitter Timeline</title>
         <link href="https://css-tricks.com/how-i-added-scroll-snapping-to-my-twitter-timeline/"/>
       <updated>2022-08-05T13:10:09.000Z</updated>
       <content type="text">CSS Scroll Snap allows websites to snap the web page or any other scroll container to a specific scroll position when the user performs a scrolling operation. This feature has been supported in all modern browsers for over two years, but many websites that could benefit from it are still not using it.
 
 
 
 Scroll snapping is probably most associated with horizontal carousels (see Chris’s CSS-only approach) and particular web pages divided into full-screen slides. But why stop there? I believe that snapping can improve the scrolling experience on any web page that lays out items in a grid or feed.
 
 
 
 
 
 
 
 For example, most shopping websites show products in a grid. Ideally, the user would like to jump between the grid rows with minimal effort. The user can press Space to scroll the page by roughly one screen (viewport height), but depending on the height of the grid rows, the scroll position will eventually get “out of sync” with the grid, and the user will have to re-adjust it manually.
 
 
 
 
 
 
 
 
 
 If we add scroll snapping to this page, the user can consistently scroll to the next row with the Space key (pressing Shift + Space will scroll to the previous row). It’s pretty effortless.
 
 
 
 
 
 
 
 
 
 I think that scroll snapping would be a welcome addition to this website. And it’s not even that complicated to implement. The CSS code that I used for this example is relatively simple:
 
 
 
 html {
   scroll-snap-type: y proximity;
 }
 
 .product-item {
   scroll-snap-align: start;
   scroll-margin-top: 75px; /* height of web page’s sticky header */
 }
 
 
 
 You don’t have to wait if a website you visit regularly hasn’t yet added scroll snapping and you think it would improve your scrolling experience. You can add scroll snapping yourself — with user styles.
 
 
 Adding user styles to websites
 
 
 In the video above, you can see that I selected a user.css file in Safari’s advanced preferences. This file is a user style sheet. It contains CSS styles that I’ve written, stored in a local .css file, and added to Safari. These “user styles” are then applied to every web page I open in Safari.
 
 
 
 Chrome and Firefox do not allow users to select a user style sheet. Firefox supported a similar feature called userContent.css in the past, but that feature was deprecated and disabled by default in 2019. I recommend the Stylus browser extension for these two browsers (and other Chromium-based browsers).
 
 
 
 One significant advantage of Stylus is that it allows you to write user styles for specific websites and URLs. Safari’s user style sheet applies to all websites, but this can be worked around, e.g., by using the new :has() pseudo-class to create selectors that only match specific websites.
 
 
 
 The Stylus extension has been reviewed by both Chrome and Firefox teams and received a badge that denotes high standards.
 
 
 
 The CSS Cascading module defines a User Origin for styles the user adds. Safari’s user style sheet belongs to this origin, but the Stylus extension injects user styles to the Author Origin, where the website’s style sheets live. Specifically, Stylus inserts user styles directly to the page via a &lt;style&gt; element at the end of &lt;html&gt; which makes it the final style sheet on the page. Technically, this means styles added via Stylus are classified as author styles since they’re not in the User Origin, but I will continue to call them user styles because the user adds them.
 
 
 
 However, it’s worth keeping this distinction in mind because it affects the cascade. When selector specificity is equal, a real user style is weaker than the page’s own style. This makes user styles an excellent fit for user defaults. Under the same conditions, a style added via Stylus is stronger than the page‘s style, so Stylus cannot as easily be used to define user defaults.
 
 
 
 If we add !important to the mix, both real user styles and styles added via Stylus are stronger than the page’s styles. So when you want to impose your user styles on a website, it doesn’t matter if you use Safari’s “Style sheet” option or the Stylus extension. Your !important styles will win either way.
 
 
 
 In the next section, I will use a set of !important user styles to enforce scroll snapping on the timeline page of Twitter’s website. My goal is to speed up the process of reading my Twitter timeline by avoiding awkward scroll positions where the topmost tweet is only partially on screen.
 
 
 Scroll snap for Twitter’s timeline
 
 
 After some experimentation, I’ve settled on the following CSS code. These styles work well in Firefox, but I’ve experienced some issues in Chrome and Safari. I will describe these issues in more detail later in the article, but for now, let’s focus on the behavior in Firefox.
 
 
 
 html {
   scroll-snap-type: y mandatory !important;
 }
 
 /* tweets in the timeline are &lt;article&gt; elements */
 article {
   scroll-snap-align: start !important;
 }
 
 /* un-stick the sticky header and make it “snappable” as well */
 [aria-label&#x3D;&quot;Home timeline&quot;] &gt; :first-child {
   position: static !important;
   scroll-snap-align: start !important;
 }
 
 /* hide the “new Tweets available” floating toast notification */
 [aria-label&#x3D;&quot;New Tweets are available.&quot;] {
   display: none !important;
 }
 
 
 
 It is necessary to add !important to each declaration because all the user styles must win over the web page’s own styles for our custom scroll snapping implementation to work correctly. I wish that instead of repeatedly writing !important, I could just put my user styles in an “important layer,” but such a CSS feature does not exist (yet).
 
 
 
 Watch the video below to see my scroll snap user styles in action. Notice how each press on the Space key scrolls the next set of tweets into view, and the first tweet of each set is aligned to the top edge of the viewport. This allows me to read my timeline more quickly. When I need to go back to the previous set of tweets, I can press Shift + Space.
 
 
 
 
 
 
 
 
 
 What I like about this type of scroll snapping is that it allows me to predict how far the page will scroll whenever I press Space. Each scroll distance equals the combined heights of the visible tweets that are entirely on the screen. In other words, the partially visible tweet at the bottom of the screen will move to the top of the screen, which is precisely what I want.
 
 
 
 I know in advance that pressing Space will scroll Dave’s tweet to the top of the screen.
 
 
 
 To try out my scroll snap user styles on your own Twitter timeline, follow these steps:
 
 
 
 Install the Stylus extension with Firefox Add-ons or the Chrome Web Store.Navigate to your Twitter timeline at https://twitter.com/home.Click the Stylus icon in the browser’s toolbar and click “this URL” in the pop-up.Stylus will open a code editor in a new browser tab. Copy-paste my scroll snap user styles into the editor and press the Save button in the sidebar on the left. The styles will be applied to your Twitter timeline immediately (no need to reload the page).You can update the styles at any time. Click the Stylus icon and the Pencil icon to open the editor again.
 
 
 Inability to override snapping
 
 
 My implementation of scroll snapping for Twitter’s timeline has one major flaw. If a tweet is taller than the viewport, it is impossible to scroll the page to reveal the bottom part of that tweet (e.g., if you want to like or retweet that tweet) because the browser forcefully snaps the page to show the top of the tweet (or the top of the following tweet).
 
 
 
 
 
 
 
 
 
 The severity of this problem depends on the user’s display. Viewing Twitter’s timeline on a large desktop monitor at a small page zoom factor, you may not encounter any tweets taller than the viewport.
 
 
 
 I have asked the CSS Working Group if it would be possible to add a mechanism allowing the user to override the browser’s mandatory scroll snapping. I should probably mention that this problem could, at least in theory, be resolved by switching from mandatory to proximity snapping. I’ve tested proximity snapping in Chrome and Firefox, and I found it inconsistent and confusing. The browser would often snap when I didn’t expect it to, and vice versa. Maybe Twitter’s code is interfering with the proximity algorithm, the browsers are still a bit buggy, or perhaps I’m just “scrolling it wrong,” if that’s even possible. I don’t know.
 
 
 
 But the main reason why I went with mandatory snapping is that I wanted to avoid situations where the topmost tweet is only partially on screen after a scroll. The type of fast-scrolling between sets of tweets that I’ve shown in the video above is only possible with mandatory snapping.
 
 
 
 If you, like me, prefer mandatory snapping, I can suggest the following two workarounds for the “tall tweet” problem:
 
 
 
 You can open the tweet on its own page and return to the timeline afterward.If you only want to click the Like or Retweet buttons, you can Shift-click the tweet to select it and then press L to like it, or T followed by Enter to retweet it.
 
 
 Issues in Chrome and Safari
 
 
 My scroll snap user styles produce noticeably different scroll snapping behaviors in Chrome, Safari, and Firefox. Those differences are in part since the exact implementation of the snapping mechanism is left up to the browser:
 
 
 
 The CSS Scroll Snap Module intentionally does not specify nor mandate any precise animations or physics used to enforce snap positions; this is left up to the user agent.
 
 
 
 The current version of Safari has a bug that prevents scroll snapping from working correctly on the Twitter timeline. I have reported this bug.
 
 
 
 In Chrome, I have encountered the following problems:
 
 
 
 The scrolling operations animate inconsistently. Sometimes the animation is slow, sometimes it’s instant, and sometimes it starts slow but is then cut short. I found this irritating.The scrolling operations animate too slowly in general. I performed a test in Chrome and Firefox (20 Space presses), and it took me 70% more time to cover the same distance on my Twitter timeline in Chrome than in Firefox (18.5 seconds in Chrome vs. 11 seconds in Firefox).When I scroll using my laptop’s trackpad, the page flickers a lot. When I attempt to scroll fast by holding down the Space key, the page scrolls very slowly and oscillates. I suspect that both issues are caused by the same algorithm. It seems that Chrome re-snaps at a very high rate in these cases. I have reported this bug.
 
 
 
 These browser bugs and differences between browsers can be a problem for websites considering implementing scroll snapping. For example, a web developer might hold back because they don’t like how scroll snapping behaves in one particular browser. Browsers can mitigate this problem by becoming more interoperable. In fact, Scroll Snap is one of the areas of focus of the cross-browser Interop 2022 effort.
 
 
 
 Another way the situation could be improved is by introducing new CSS properties that would make scroll snapping more configurable. This could include the duration of the snapping animation, the length of the proximity threshold for snapping, and a mechanism to override mandatory snapping.
 
 
 To snap or not to snap?
 
 
 I’ve been using my scroll snap user styles on Twitter’s timeline for a couple of weeks, and I don’t want to go back. The ability to quickly flip through my feed with only the Space key is just on another level.
 
 
 
 However, I consider this an advanced feature that probably isn’t for everyone. There’s a reason why I’ve enabled it only on the timeline (/home path) and nowhere else on Twitter’s website. Snapping is a significant change in how the page scrolls, and it takes some time to get used to. It can work great for a specific use case, but it can also get in the way and frustrate the user.
 
 
 
 Websites with feeds should therefore consider offering scroll snapping only as an optional feature, after careful consideration and plenty of testing in different browsers and with different input methods (mouse, keyboard, trackpad, touch screen, etc.).
 
 
 Before you go…
 
 
 Finally, I highly recommend installing and trying out the Stylus browser extension. Web developers (or anyone who knows CSS) have the power to style any website in their browser. You can apply minor improvements and fixes to your favorite websites. I mostly use it to hide page elements that I find annoying, such as sticky headers, video pop-ups, and vote counts.
 
 
 
 But more importantly, Stylus allows you to quickly test new CSS features on any website and report browser bugs, if necessary. By doing this, you can help make the web platform a little better.
 
 How I Added Scroll Snapping To My Twitter Timeline originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Actually, the San Francisco Typeface Does Ship as a Variable Font</title>
         <link href="https://css-tricks.com/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/"/>
       <updated>2022-08-04T20:20:28.000Z</updated>
       <content type="text">Apple unveiled an expanded version of its San Francisco system font at WWDC 2022. Then, last month, Jim Nielsen zeroed in on the font’s variations, explaining how the font provides a spectrum of variations based on the width and weight. It’s a remarkable read if you haven’t checked it.
 
 
 
 
 
 
 
 
 
 
 
 With all of these great new options, you might be tempted to use them in a web design. Chris was ogling over the expanded sets as well over on his personal blog and pondered:
 
 
 
 But it’s not year clear how we might tap into the condensed, compressed, and expanded varieties in CSS, or if there is even a plan to allow that. I suppose we can peek around Apple.com eventually and see how they do it if they start using them there.Doesn’t this make perfect sense to construct as a variable font and ship the whole kit and kaboodle that way?
 
 
 
 Turns out, yes. It does make perfect sense. Chris follows up in a new post:
 
 
 
 But just yesterday I randomly stumbled across the fact that the built-in San Francisco font (on the Apple devices that have it built-in) is already variable (!!). See, I was derping around with Roboto Flex, and had system-ui as the fallback font, and I was noticing that during the FOUT, the font-variation-settings I was using had an effect on the fallback font, which renders as San Francisco on my Mac. Which… unless I’m daft… means that San Francisco is a variable font.
 
 
 
 So, as for using it? Chris has a demo, of course:
 
 
 
 CodePen Embed Fallback
 
 
 
 There are some gotchas to all this, the most significant being fallbacks for non-Apple devices. After all, that demo is simply calling system-ui for the font family — it’s not telling the browser to download a font file or anything and who knows if Apple is gonna ever ship a variable font file we can serve up as an actual custom web font.
 
 
 
 The other interesting thing? Chris did some sleuthing and counted 35 layout featured included in that system font. Go read the rest of the post to see ’em all (and to get a good ol’ dose of Chris-isms — I know I miss them!).
 To Shared Link — Permalink on CSS-Tricks
 Actually, the San Francisco Typeface Does Ship as a Variable Font originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Converting Speech to PDF with NextJS and ExpressJS</title>
         <link href="https://css-tricks.com/converting-speech-to-pdf-with-nextjs-and-expressjs/"/>
       <updated>2022-08-04T12:55:39.000Z</updated>
       <content type="text">With speech interfaces becoming more of a thing, it’s worth exploring some of the things we can do with speech interactions. Like, what if we could say something and have that transcribed and pumped out as a downloadable PDF?
 
 
 
 Well, spoiler alert: we absolutely can do that! There are libraries and frameworks we can cobble together to make it happen, and that’s what we’re going to do together in this article.
 
 
 
 
 
 
 
 
 Server repo 
 
 
 
 Client repo
 
 
 
 These are the tools we‘re using
 
 
 First off, these are the two big players: Next.js and Express.js.
 
 
 
 Next.js tacks on additional functionalities to React, including key features for building static sites. It’s a go-to for many developers because of what it offers right out of the box, like dynamic routing, image optimization, built-in-domain and subdomain routing, fast refreshes, file system routing, and API routes… among many, many other things.
 
 
 
 In our case, we definitely need Next.js for its API routes on our client server. We want a route that takes a text file, converts it to PDF, writes it to our filesystem, then sends a response to the client.
 
 
 
 Express.js allows us to get a little Node.js app going with routing, HTTP helpers, and templating. It’s a server for our own API, which is what we’ll need as we pass and parse data between things.
 
 
 
 We have some other dependencies we’ll be putting to use:
 
 
 
 react-speech-recognition: A library for converting speech to text, making it available to React components.regenerator-runtime: A library for troubleshooting the “regeneratorRuntime is not defined” error that shows up in Next.js when using react-speech-recognitionhtml-pdf-node: A library for converting an HTML page or public URL into a PDFaxios: A library for making HTTP requests in both the browser and Node.jscors: A library that allows cross-origin resource sharing
 
 
 Setting up
 
 
 The first thing we want to do is create two project folders, one for the client and one for the server. Name them whatever you’d like. I’m naming mine audio-to-pdf-client and audio-to-pdf-server, respectively.
 
 
 
 The fastest way to get started with Next.js on the client side is to bootstrap it with create-next-app. So, open your terminal and run the following command from your client project folder:
 
 
 
 npx create-next-app client
 
 
 
 Now we need our Express server. We can get it by cd-ing into the server project folder and running the npm init command. A package.json file will be created in the server project folder once it’s done.
 
 
 
 We still need to actually install Express, so let’s do that now with npm install express. Now we can create a new index.js file in the server project folder and drop this code in there:
 
 
 
 const express &#x3D; require(&quot;express&quot;)
 const app &#x3D; express()
 
 app.listen(4000, () &#x3D;&gt; console.log(&quot;Server is running on port 4000&quot;))
 
 
 
 Ready to run the server?
 
 
 
 node index.js
 
 
 
 We’re going to need a couple more folders and and another file to move forward:
 
 
 
 Create a components folder in the client project folder.Create a SpeechToText.jsx file in the components subfolder.
 
 
 
 Before we go any further, we have a little cleanup to do. Specifically, we need to replace the default code in the pages/index.js file with this:
 
 
 
 import Head from &quot;next/head&quot;;
 import SpeechToText from &quot;../components/SpeechToText&quot;;
 
 export default function Home() {
   return (
     &lt;div className&#x3D;&quot;home&quot;&gt;
       &lt;Head&gt;
         &lt;title&gt;Audio To PDF&lt;/title&gt;
         &lt;meta
           name&#x3D;&quot;description&quot;
           content&#x3D;&quot;An app that converts audio to pdf in the browser&quot;
         /&gt;
         &lt;link rel&#x3D;&quot;icon&quot; href&#x3D;&quot;/favicon.ico&quot; /&gt;
       &lt;/Head&gt;
 
       &lt;h1&gt;Convert your speech to pdf&lt;/h1&gt;
 
       &lt;main&gt;
         &lt;SpeechToText /&gt;
       &lt;/main&gt;
     &lt;/div&gt;
   );
 }
 
 
 
 The imported SpeechToText component will eventually be exported from components/SpeechToText.jsx.
 
 
 Let’s install the other dependencies
 
 
 Alright, we have the initial setup for our app out of the way. Now we can install the libraries that handle the data that’s passed around.
 
 
 
 We can install our client dependencies with:
 
 
 
 npm install react-speech-recognition regenerator-runtime axios
 
 
 
 Our Express server dependencies are up next, so let’s cd into the server project folder and install those:
 
 
 
 npm install html-pdf-node cors
 
 
 
 Probably a good time to pause and make sure the files in our project folders are in tact. Here’s what you should have in the client project folder at this point:
 
 
 
 /audio-to-pdf-web-client
 ├─ /components
 |  └── SpeechToText.jsx
 ├─ /pages
 |  ├─ _app.js
 |  └── index.js
 └── /styles
     ├─globals.css
     └── Home.module.css
 
 
 
 And here’s what you should have in the server project folder:
 
 
 
 /audio-to-pdf-server
 └── index.js
 
 
 Building the UI
 
 
 Well, our speech-to-PDF wouldn’t be all that great if there’s no way to interact with it, so let’s make a React component for it that we can call &lt;SpeechToText&gt;.
 
 
 
 You can totally use your own markup. Here’s what I’ve got to give you an idea of the pieces we’re putting together:
 
 
 
 import React from &quot;react&quot;;
 
 const SpeechToText &#x3D; () &#x3D;&gt; {
   return (
     &lt;&gt;
       &lt;section&gt;
         &lt;div className&#x3D;&quot;button-container&quot;&gt;
           &lt;button type&#x3D;&quot;button&quot; style&#x3D;{{ &quot;--bgColor&quot;: &quot;blue&quot; }}&gt;
             Start
           &lt;/button&gt;
           &lt;button type&#x3D;&quot;button&quot; style&#x3D;{{ &quot;--bgColor&quot;: &quot;orange&quot; }}&gt;
             Stop
           &lt;/button&gt;
         &lt;/div&gt;
         &lt;div
           className&#x3D;&quot;words&quot;
           contentEditable
           suppressContentEditableWarning&#x3D;{true}
         &gt;&lt;/div&gt;
         &lt;div className&#x3D;&quot;button-container&quot;&gt;
           &lt;button type&#x3D;&quot;button&quot; style&#x3D;{{ &quot;--bgColor&quot;: &quot;red&quot; }}&gt;
             Reset
           &lt;/button&gt;
           &lt;button type&#x3D;&quot;button&quot; style&#x3D;{{ &quot;--bgColor&quot;: &quot;green&quot; }}&gt;
             Convert to pdf
           &lt;/button&gt;
         &lt;/div&gt;
       &lt;/section&gt;
     &lt;/&gt;
   );
 };
 
 export default SpeechToText;
 
 
 
 This component returns a React fragment that contains an HTML &lt;&#x60;&#x60;section&#x60;&#x60;&gt; element that contains three divs:
 
 
 
 .button-container contains two buttons that will be used to start and stop speech recognition..words has contentEditable and suppressContentEditableWarning attributes to make this element editable and suppress any warnings from React.Another .button-container holds two more buttons that will be used to reset and convert speech to PDF, respectively.
 
 
 
 Styling is another thing altogether. I won’t go into it here, but you’re welcome to use some styles I wrote either as a starting point for your own styles/global.css file.
 
 
 
 
   
           View Full CSS      
   
 
 html,
 body {
   padding: 0;
   margin: 0;
   font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
     Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
 }
 
 a {
   color: inherit;
   text-decoration: none;
 }
 
 * {
   box-sizing: border-box;
 }
 
 .home {
   background-color: #333;
   min-height: 100%;
   padding: 0 1rem;
   padding-bottom: 3rem;
 }
 
 h1 {
   width: 100%;
   max-width: 400px;
   margin: auto;
   padding: 2rem 0;
   text-align: center;
   text-transform: capitalize;
   color: white;
   font-size: 1rem;
 }
 
 .button-container {
   text-align: center;
   display: flex;
   justify-content: center;
   gap: 3rem;
 }
 
 button {
   color: white;
   background-color: var(--bgColor);
   font-size: 1.2rem;
   padding: 0.5rem 1.5rem;
   border: none;
   border-radius: 20px;
   cursor: pointer;
 }
 
 button:hover {
   opacity: 0.9;
 }
 
 button:active {
   transform: scale(0.99);
 }
 
 .words {
   max-width: 700px;
   margin: 50px auto;
   height: 50vh;
   border-radius: 5px;
   padding: 1rem 2rem 1rem 5rem;
   background-image: -webkit-gradient(
     linear,
     0 0,
     0 100%,
     from(#d9eaf3),
     color-stop(4%, #fff)
   ) 0 4px;
   background-size: 100% 3rem;
   background-attachment: scroll;
   position: relative;
   line-height: 3rem;
   overflow-y: auto;
 }
 
 .success,
 .error {
   background-color: #fff;
   margin: 1rem auto;
   padding: 0.5rem 1rem;
   border-radius: 5px;
   width: max-content;
   text-align: center;
   display: block;
 }
 
 .success {
   color: green;
 }
 
 .error {
   color: red;
 }
 
 
 
 
 The CSS variables in there are being used to control the background color of the buttons.
 
 
 
 
 
 Let’s see the latest changes! Run npm run dev in the terminal and check them out.
 
 
 
 You should see this in browser when you visit http://localhost:3000:
 
 
 
 
 
 
 Our first speech to text conversion!
 
 
 The first action to take is to import the necessary dependencies into our &lt;SpeechToText&gt; component:
 
 
 
 import React, { useRef, useState } from &quot;react&quot;;
 import SpeechRecognition, {
   useSpeechRecognition,
 } from &quot;react-speech-recognition&quot;;
 import axios from &quot;axios&quot;;
 
 
 
 Then we check if speech recognition is supported by the browser and render a notice if not supported:
 
 
 
 const speechRecognitionSupported &#x3D;
   SpeechRecognition.browserSupportsSpeechRecognition();
 
 if (!speechRecognitionSupported) {
   return &lt;div&gt;Your browser does not support speech recognition.&lt;/div&gt;;
 }
 
 
 
 Next up, let’s extract transcript and resetTranscript from the useSpeechRecognition() hook:
 
 
 
 const { transcript, resetTranscript } &#x3D; useSpeechRecognition();
 
 
 
 This is what we need for the state that handles listening:
 
 
 
 const [listening, setListening] &#x3D; useState(false);
 
 
 
 We also need a ref for the div with the contentEditable attribute, then we need to add the ref attribute to it and pass transcript as children:
 
 
 
 const textBodyRef &#x3D; useRef(null);
 
 
 
 …and:
 
 
 
 &lt;div
   className&#x3D;&quot;words&quot;
   contentEditable
   ref&#x3D;{textBodyRef}
   suppressContentEditableWarning&#x3D;{true}
   &gt;
   {transcript}
 &lt;/div&gt;
 
 
 
 The last thing we need here is a function that triggers speech recognition and to tie that function to the onClick event listener of our button. The button sets listening to true and makes it run continuously. We’ll disable the button while it’s in that state to prevent us from firing off additional events.
 
 
 
 const startListening &#x3D; () &#x3D;&gt; {
   setListening(true);
   SpeechRecognition.startListening({
     continuous: true,
   });
 };
 
 
 
 …and:
 
 
 
 &lt;button
   type&#x3D;&quot;button&quot;
   onClick&#x3D;{startListening}
   style&#x3D;{{ &quot;--bgColor&quot;: &quot;blue&quot; }}
   disabled&#x3D;{listening}
 &gt;
   Start
 &lt;/button&gt;
 
 
 
 Clicking on the button should now start up the transcription.
 
 
 More functions
 
 
 OK, so we have a component that can start listening. But now we need it to do a few other things as well, like stopListening, resetText and handleConversion. Let’s make those functions.
 
 
 
 const stopListening &#x3D; () &#x3D;&gt; {
   setListening(false);
   SpeechRecognition.stopListening();
 };
 
 const resetText &#x3D; () &#x3D;&gt; {
   stopListening();
   resetTranscript();
   textBodyRef.current.innerText &#x3D; &quot;&quot;;
 };
 
 const handleConversion &#x3D; async () &#x3D;&gt; {}
 
 
 
 Each of the functions will be added to an onClick event listener on the appropriate buttons:
 
 
 
 &lt;button
   type&#x3D;&quot;button&quot;
   onClick&#x3D;{stopListening}
   style&#x3D;{{ &quot;--bgColor&quot;: &quot;orange&quot; }}
   disabled&#x3D;{listening &#x3D;&#x3D;&#x3D; false}
 &gt;
   Stop
 &lt;/button&gt;
 
 &lt;div className&#x3D;&quot;button-container&quot;&gt;
   &lt;button
     type&#x3D;&quot;button&quot;
     onClick&#x3D;{resetText}
     style&#x3D;{{ &quot;--bgColor&quot;: &quot;red&quot; }}
   &gt;
     Reset
   &lt;/button&gt;
   &lt;button
     type&#x3D;&quot;button&quot;
     style&#x3D;{{ &quot;--bgColor&quot;: &quot;green&quot; }}
     onClick&#x3D;{handleConversion}
   &gt;
     Convert to pdf
   &lt;/button&gt;
 &lt;/div&gt;
 
 
 
 The handleConversion function is asynchronous because we will eventually be making an API request. The “Stop” button has the disabled attribute that would be be triggered when listening is false.
 
 
 
 If we restart the server and refresh the browser, we can now start, stop, and reset our speech transcription in the browser.
 
 
 
 Now what we need is for the app to transcribe that recognized speech by converting it to a PDF file. For that, we need the server-side path from Express.js.
 
 
 Setting up the API route
 
 
 The purpose of this route is to take a text file, convert it to a PDF, write that PDF to our filesystem, then send a response to the client.
 
 
 
 To setup, we would open the server/index.js file and import the html-pdf-node and fs dependencies that will be used to write and open our filesystem.
 
 
 
 const HTMLToPDF &#x3D; require(&quot;html-pdf-node&quot;);
 const fs &#x3D; require(&quot;fs&quot;);
 const cors &#x3D; require(&quot;cors)
 
 
 
 Next, we will setup our route:
 
 
 
 app.use(cors())
 app.use(express.json())
 
 app.post(&quot;/&quot;, (req, res) &#x3D;&gt; {
   // etc.
 })
 
 
 
 We then proceed to define our options required in order to use html-pdf-node inside the route:
 
 
 
 let options &#x3D; { format: &quot;A4&quot; };
 let file &#x3D; {
   content: &#x60;&lt;html&gt;&lt;body&gt;&lt;pre style&#x3D;&#x27;font-size: 1.2rem&#x27;&gt;${req.body.text}&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&#x60;,
 };
 
 
 
 The options object accepts a value to set the paper size and style. Paper sizes follow a much different system than the sizing units we typically use on the web. For example, A4 is the typical letter size.
 
 
 
 The file object accepts either the URL of a public website or HTML markup. In order to generate our HTML page, we will use the html, body, pre HTML tags and the text from the req.body.
 
 
 
 You can apply any styling of your choice.
 
 
 
 Next, we will add a trycatch to handle any errors that might pop up along the way:
 
 
 
 try {
 
 } catch(error){
   console.log(error);
   res.status(500).send(error);
 }
 
 
 
 Next, we will use the generatePdf from the html-pdf-node library to generate a pdfBuffer (the raw PDF file) from our file and create a unique pdfName:
 
 
 
 HTMLToPDF.generatePdf(file, options).then((pdfBuffer) &#x3D;&gt; {
   // console.log(&quot;PDF Buffer:-&quot;, pdfBuffer);
   const pdfName &#x3D; &quot;./data/speech&quot; + Date.now() + &quot;.pdf&quot;;
 
   // Next code here
 }
 
 
 
 From there, we use the filesystem module to write, read and (yes, finally!) send a response to the client app:
 
 
 
 fs.writeFile(pdfName, pdfBuffer, function (writeError) {
   if (writeError) {
     return res
       .status(500)
       .json({ message: &quot;Unable to write file. Try again.&quot; });
   }
 
   fs.readFile(pdfName, function (readError, readData) {
     if (!readError &amp;&amp; readData) {
       // console.log({ readData });
       res.setHeader(&quot;Content-Type&quot;, &quot;application/pdf&quot;);
       res.setHeader(&quot;Content-Disposition&quot;, &quot;attachment&quot;);
       res.send(readData);
       return;
     }
 
     return res
       .status(500)
       .json({ message: &quot;Unable to write file. Try again.&quot; });
   });
 });
 
 
 
 Let’s break that down a bit:
 
 
 
 The writeFile filesystem module accepts a file name, data and a callback function that can returns an error message if there’s an issue writing to the file. If you’re working with a CDN that provides error endpoints, you could use those instead.The readFile filesystem module accepts a file name and a callback function that is capable or returning a read error as well as the read data. Once we have no read error and the read data is present, we will construct and send a response to the client. Again, this can be replaced with your CDN’s endpoints if you have them.The res.setHeader(&quot;Content-Type&quot;, &quot;application/pdf&quot;); tells the browser that we are sending a PDF file.The res.setHeader(&quot;Content-Disposition&quot;, &quot;attachment&quot;); tells the browser to make the received data downloadable.
 
 
 
 Since the API route ready, we can use it in our app at http://localhost:4000. We can the proceed to the client part of our application to complete the handleConversion function.
 
 
 Handling the conversion
 
 
 Before we can start working on a handleConversion function, we need to create a state that handles our API requests for loading, error, success, and other messages. We’re going use React’s useState hook to set that up:
 
 
 
 const [response, setResponse] &#x3D; useState({
   loading: false,
   message: &quot;&quot;,
   error: false,
   success: false,
 });
 
 
 
 In the handleConversion function, we will check for when the web page has been loaded before running our code and make sure the div with the editable attribute is not empty:
 
 
 
 if (typeof window !&#x3D;&#x3D; &quot;undefined&quot;) {
 const userText &#x3D; textBodyRef.current.innerText;
   // console.log(textBodyRef.current.innerText);
 
   if (!userText) {
     alert(&quot;Please speak or write some text.&quot;);
     return;
   }
 }
 
 
 
 We proceed by wrapping our eventual API request in a trycatch, handling any error that may arise, and updating the response state:
 
 
 
 try {
 
 } catch(error){
   setResponse({
     ...response,
     loading: false,
     error: true,
     message:
       &quot;An unexpected error occurred. Text not converted. Please try again&quot;,
     success: false,
   });
 }
 
 
 
 Next, we set some values for the response state and also set config for axios and make a post request to the server:
 
 
 
 setResponse({
   ...response,
   loading: true,
   message: &quot;&quot;,
   error: false,
   success: false,
 });
 const config &#x3D; {
   headers: {
     &quot;Content-Type&quot;: &quot;application/json&quot;,
   },
   responseType: &quot;blob&quot;,
 };
 
 const res &#x3D; await axios.post(
   &quot;http://localhost:4000&quot;,
   {
     text: textBodyRef.current.innerText,
   },
   config
 );
 
 
 
 Once we have gotten a successful response, we set the response state with the appropriate values and instruct the browser to download the received PDF:
 
 
 
 setResponse({
   ...response,
   loading: false,
   error: false,
   message:
     &quot;Conversion was successful. Your download will start soon...&quot;,
   success: true,
 });
 
 // convert the received data to a file
 const url &#x3D; window.URL.createObjectURL(new Blob([res.data]));
 // create an anchor element
 const link &#x3D; document.createElement(&quot;a&quot;);
 // set the href of the created anchor element
 link.href &#x3D; url;
 // add the download attribute, give the downloaded file a name
 link.setAttribute(&quot;download&quot;, &quot;yourfile.pdf&quot;);
 // add the created anchor tag to the DOM
 document.body.appendChild(link);
 // force a click on the link to start a simulated download
 link.click();
 
 
 
 And we can use the following below the contentEditable div for displaying messages:
 
 
 
 &lt;div&gt;
   {response.success &amp;&amp; &lt;i className&#x3D;&quot;success&quot;&gt;{response.message}&lt;/i&gt;}
   {response.error &amp;&amp; &lt;i className&#x3D;&quot;error&quot;&gt;{response.message}&lt;/i&gt;}
 &lt;/div&gt;
 
 
 Final code
 
 
 I’ve packaged everything up on GitHub so you can check out the full source code for both the server and the client.
 
 
 
 
 Server repo 
 
 
 
 Client repo
 
 
 Converting Speech to PDF with NextJS and ExpressJS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Implicit Grids, Repeatable Layout Patterns, and Danglers</title>
         <link href="https://css-tricks.com/implicit-grids-repeatable-layout-patterns-and-danglers/"/>
       <updated>2022-08-02T13:10:49.000Z</updated>
       <content type="text">Dave Rupert with some modern CSS magic that tackles one of those classic conundrums: what happens when the CSS for component is unable to handle the content we throw at it?
 
 
 
 The specific situation is when a layout grid expects an even number of items, but is supplied with an odd number instead. We’re left with a “dangling” element at the end that throws off the layout. Sounds like what’s needed is some Defensive CSS and Dave accomplishes it.
 
 
 
 
 
 
 
 He reaches for :has() to write a nifty selector that sniffs out the last item in a grid that contains an odd number of items:
 
 
 
 .items:has(.item:last-of-type:nth-of-type(odd)) .item:first-of-type { }
 
 
 
 Breaking that down:
 
 
 
 We have a parent container of .items.If the container :has() an .item child that is the last of its type,…and that .item happens to be an odd-numbered instance,…then select the first .item element of that type and style it!
 
 
 
 In this case, that last .item can be set to go full-width to prevent holes in the layout.
 
 
 
 If… then… CSS has conditional logic powers! We’re only talking about support for Safari TP and Edge/Chrome Canary at the moment, but that’s pretty awesome.
 
 
 
 As chance has it, Temani Afif recently shared tricks he learned while experimenting with implicit grids. By taking advantage of CSS Grid’s auto-placement algorithm, we don’t even have to explicitly declare a fixed number of columns and rows for a grid — CSS will create them for us if they’re needed!
 
 
 
 No, Temani’s techniques aren’t alternative solutions to Dave’s “dangler” dilemma. But combining Temani’s approach to repeatable grid layout patterns with Dave’s defensive CSS use of :has(), we get a pretty powerful and complex-looking grid that’s lightweight and capable of handling any number of items while maintaining a balanced, repeatable pattern.
 
 
 
 CodePen Embed Fallback
 
 Implicit Grids, Repeatable Layout Patterns, and Danglers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Exploring CSS Grid’s Implicit Grid and Auto-Placement Powers</title>
         <link href="https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/"/>
       <updated>2022-08-01T13:44:13.000Z</updated>
       <content type="text">When working with CSS Grid, the first thing to do is to set display: grid on the element that we want to be become a grid container. Then we explicitly define the grid using a combination of grid-template-columns, grid-template-rows, and grid-template-areas. And from there, the next step is to place items inside the grid.
 
 
 
 This is the classic approach that should be used and I also recommend it. However, there is another approach for creating grids without any explicit definition. We call this the implicit grid.
 
 
 
 
 
 
 Table of Contents
 
 “Explicit, implicit? What the heck is going on here?”
 Dynamic sidebar
 Image grid
 Dynamic layouts
 Grid patterns
 Want more?
 Wrapping up
 
 “Explicit, implicit? What the heck is going on here?”
 
 
 Strange terms, right? Manuel Matuzovic already has a good explanation of what we may by “implicit” and “explicit” in CSS Grid, but let’s dig straight into what the specification says:
 
 
 
 The grid-template-rows, grid-template-columns, and grid-template-areas properties define a fixed number of tracks that form the explicit grid. When grid items are positioned outside of these bounds, the grid container generates implicit grid tracks by adding implicit grid lines to the grid. These lines together with the explicit grid form the implicit grid.
 
 
 
 So, in plain English, the browser auto-generates extra rows and columns in case any elements happen to be placed outside the defined grid.
 
 
 
 What about auto-placement?
 
 
 
 Similar to the concept of implicit grid, auto-placement is the ability of the browser to automatically place the items inside the grid. We don’t always need to give the position of each item.
 
 
 
 Through different use cases, we are going to see how such features can help us create complex and dynamic grid with a few lines of code.
 
 
 Dynamic sidebar
 
 
 CodePen Embed Fallback
 
 
 
 Here, we have three different layouts but we only have one grid configuration that works for all of them.
 
 
 
 main {
   display: grid;
   grid-template-columns: 1fr;
 }
 
 
 
 Only one column is taking up all the free space. This is our “explicit” grid. It’s set up to fit one grid item in the main grid container. That’s all. One column and one row:
 
 
 
 CodePen Embed Fallback
 
 
 
 But what if we decided to drop another element in there, say an aside (our dynamic sidebar). As it’s currently (and explicitly) defined, our grid will have to adjust automatically to find a place for that element. And if we do nothing else with our CSS, here’s what DevTools tells us is happening.
 
 
 
 The element takes up the entire column that is explicitly set on the container. Meanwhile, the falls onto a new row between implicit grid lines labeled 2 and 3. Note that I’m using a 20px gap to help separate things visually.
 
 
 
 We can move the &lt;aside&gt; to a column beside the &lt;section&gt;:
 
 
 
 aside {
   grid-column-start: 2;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 And here’s what DevTools tells us now:
 
 
 
 The element is between the grid container’s first and second grid column lines. The starts at the second grid column line and ends at a third line we never declared.
 
 
 
 We place our element in the second column but… we don’t have a second column. Weird, right? We never declared a second column on the &lt;main&gt; grid container, but the browser created one for us! This is the key part from the specification we looked at:
 
 
 
 When grid items are positioned outside of these bounds, the grid container generates implicit grid tracks by adding implicit grid lines to the grid.
 
 
 
 This powerful feature allows us to have dynamic layouts. If we only have the &lt;section&gt; element, all we get is one column. But if we add an &lt;aside&gt; element to the mix, an extra column is created to contain it.
 
 
 
 We could place the &lt;aside&gt; before the &lt;section&gt; instead like this:
 
 
 
 aside {
   grid-column-end: -2;
 } 
 
 
 
 This creates the implicit column at the start of the grid, unlike the previous code that places the implicit column at the end.
 
 
 
 We can have either a right or left sidebar
 
 
 
 We can do the same thing more easily using the grid-auto-flow property to set any and all implicit tracks to flow in a column direction:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now there’s no need to specify grid-column-start to place the &lt;aside&gt; element to the right of the &lt;section&gt;! In fact, any other grid item we decide to throw in there at any time will now flow in a column direction, each one placed in its own implicit grid tracks. Perfect for situations where the number of items in the grid isn’t known in advance!
 
 
 
 That said, we do still need grid-column-end if we want to place it in a column to the left of it because, otherwise, the &lt;aside&gt; will occupy the explicit column which, in turn, pushes the &lt;section&gt; outside the explicit grid and forces it to take the implicit column.
 
 
 
 I know, I know. That’s a little convoluted. Here is another example we can use to better understand this little quirk:
 
 
 
 CodePen Embed Fallback
 
 
 
 In the first example, we didn’t specify any placement. In this case, the browser will first place the &lt;aside&gt; element in the explicit column since it comes first in the DOM. The &lt;section&gt;, meanwhile, is automatically placed in the grid column the browser automatically (or implicitly) creates for us.
 
 
 
 In the second example, we set the &lt;aside&gt; element outside of the explicit grid:
 
 
 
 aside {
   grid-column-end: -2;
 }
 
 
 
 Now it doesn’t matter that &lt;aside&gt; comes first in the HTML. By reassigning &lt;aside&gt; somewhere else, we’ve made the &lt;section&gt; element available to take the explicit column.
 
 
 Image grid
 
 
 Let’s try something different with a grid of images where we have a big image and a few thumbnails beside it (or under it).
 
 
 
 CodePen Embed Fallback
 
 
 
 We have two grid configurations. But guess what? I am not defining any grid at all! All I am doing is this:
 
 
 
 .grid img:first-child {
   grid-area: span 3 / span 3;
 }
 
 
 
 It’s surprising we only need one line of code to pull off something like this, so let’s dissect what’s going on and you will see that it’s easier than you may think. First of all, grid-area is a shorthand property that combines the following properties into a single declaration:
 
 
 
 grid-row-startgrid-row-endgrid-column-startgrid-column-end
 
 
 
 Wait! Isn’t grid-area the property we use to define named areas instead of where elements start and end on the grid?
 
 
 
 Yes, but it also does more. We could write a whole lot more about grid-area, but in this particular case:
 
 
 
 .grid img:first-child {
   grid-area: span 3 / span 3;
 }
 
 /* ...is equivalent to: */
 .grid img:first-child {
   grid-row-start: span 3;
   grid-column-start: span 3;
   grid-row-end: auto;
   grid-column-end: auto;
 }
 
 
 
 We can see the same thing when cracking open DevTools to expand the shorthand version:
 
 
 
 
 
 
 
 This means that the first image element in the grid needs to span three columns and three rows. But since we didn’t define any columns or rows, the browser does it for us.
 
 
 
 
 
 
 
 We’ve essentially placed the first image in the HTML to take up a 3⨉3 grid. That means that any other images will be placed automatically in those same three columns without the need to specify anything new.
 
 
 
 
 
 
 
 To summarize, we told the browser that the first image needs take up the space of three columns and three rows that we never explicitly defined when setting up the grid container. The browser set those columns and rows up for us. As a result, the remaining images in the HTML flow right into place using the same three columns and rows. And since the first image takes up all three columns in the first row, the remaining images flow into additional rows that each contain three columns, where each image takes up a single column.
 
 
 
 All this from one line of CSS! That’s the power of “implicit” grid” and auto-placement.
 
 
 
 For the second grid configuration in that demo, all I’ve done is change the automatic flow direction using grid-auto-flow: column the same way we did earlier when placing an &lt;aside&gt; element next to a &lt;section&gt;. This forces the browser to create a fourth column it can use to place the remaining images. And since we have three rows, the remaining images get placed inside the same vertical column.
 
 
 
 
 
 
 
 We need to add a few properties to the images to make sure they fit nicely inside the grid without any overflow:
 
 
 
 .grid {
   display: grid;
   grid-gap: 10px;
 }
 
 /* for the second grid configuration */
 .horizontal {
   grid-auto-flow: column;
 }
 
 /* The large 3⨉3 image */
 .grid img:first-child {
   grid-area: span 3 / span 3;
 }
 
 /* Help prevent stretched or distorted images */
 img {
   width: 100%;
   height: 100%;
   object-fit: cover;
 }
 
 
 
 And of course, we can easily update the grid to consider more images by adjusting one value. That would be the 3 in the styles for the large image. We have this:
 
 
 
 .grid img:first-child {
   grid-area: span 3 / span 3;
 }
 
 
 
 But we could add a fourth column simply by changing it to 4 instead:
 
 
 
 .grid img:first-child {
   grid-area: span 4 / span 4;
 }
 
 
 
 Even better: let’s set that up as a custom property to make things even easier to update.
 
 
 
 CodePen Embed Fallback
 
 
 Dynamic layouts
 
 
 The first use case with the sidebar was our first dynamic layout. Now we will tackle more complex layouts where the number of elements will dictate the grid configuration.
 
 
 
 CodePen Embed Fallback
 
 
 
 In this example, we can have anywhere from one to four elements where the grid adjusts in way that nicely fits the number of elements without leaving any awkward gaps or missing spaces.
 
 
 
 When we have one element, we do nothing. The element will stretch to fill the only row and column automatically created by the grid.
 
 
 
 Bit when we add the second element, we create another (implicit) column using grid-column-start: 2.
 
 
 
 When we add a third element, it should take up the width of two columns — that’s why we used grid-column-start: span 2, but only if it’s the :last-child because if (and when) we add a fourth element, that one should only take up a single column.
 
 
 
 Adding that up, we have four grid configurations with only two declarations and the magic of implicit grid:
 
 
 
 .grid {
   display: grid;
 }
 .grid :nth-child(2) {
   grid-column-start: 2;
 }
 .grid :nth-child(3):last-child {
   grid-column-start: span 2;
 }
 
 
 
 Let’s try another one:
 
 
 
 CodePen Embed Fallback
 
 
 
 We’re doing nothing for the first and second cases where we have only one or two elements. When we add a third element, though, we tell the browser that — as long as it’s the :last-child — it should span two columns. When we add a fourth element, we tell the browser that element needs to be placed in the second column.
 
 
 
 .grid {
   display: grid;
 }
 .grid :nth-child(3):last-child {
   grid-column-start: span 2;
 }
 .grid :nth-child(4) {
   grid-column-start: 2;
 }
 
 
 
 Are you starting to get the trick? We give the browser specific instructions based on the number of elements (using :nth-child) and, sometimes, one instruction can change the layout completely.
 
 
 
 It should be noted that the sizing will not be the same when we work with different content:
 
 
 
 CodePen Embed Fallback
 
 
 
 Since we didn’t define any sizes for our items, the browser automatically sizes them for us based on their contents and we may end up with different sizing than what we just saw. To overcome this, we have to explicitly specify that all the columns and rows are equally sized:
 
 
 
 grid-auto-rows: 1fr;
 grid-auto-columns: 1fr;
 
 
 
 Hey, we haven’t played with those properties yet! grid-auto-rows and grid-auto-columns set the size of implicit rows and columns, respectively, in a grid container. Or, as the spec explains it:
 
 
 
 The grid-auto-columns and grid-auto-rows properties specify the size of tracks not assigned a size by grid-template-rows or grid-template-columns.
 
 
 
 CodePen Embed Fallback
 
 
 
 Here is another example where we can go up to six elements. This time I will let you dissect the code. Don’t worry, the selectors may look complex but the logic is pretty straightforward.
 
 
 
 CodePen Embed Fallback
 
 
 
 Even with six elements, we only needed two declarations. Imagine all the complex and dynamic layouts we can achieve with a few lines of code!
 
 
 
 What’s going on with that grid-auto-rows and why does it take three values? Are we defining three rows?
 
 
 
 No, we are not defining three rows. But we are defining three values as a pattern for our implicit rows. The logic is as follows:
 
 
 
 If we have one row, it will get sized with the first value.If we have two rows, the first one gets the first value and the second one the second value.If we have three rows, the three values will get used.If we have four rows (and here comes the interesting part), we use the three values for the first three rows and we reuse the first value again for the fourth row. That’s why it’s a kind of pattern that we repeat to size all the implicit rows.If we have 100 rows, they will be sized three-by-three to have 2fr 2fr 1fr 2fr 2fr 1fr 2fr 2fr 1fr, etc.
 
 
 
 Unlike grid-template-rows which defines the number of rows and their sizes, grid-auto-rows only sizes row that may get created along the way.
 
 
 
 If we get back to our example, the logic is to have equal size when two rows are created (we will use the 2fr 2fr), but if a third row is created we make it a bit smaller.
 
 
 Grid patterns
 
 
 For this last one, we are going to talk about patterns. You have probably seen those two column layouts where one column is wider than the other, and each row alternates the placement of those columns.
 
 
 
 This sort layout can be difficult too pull off without knowing exactly how much content we’re dealing with, but CSS Grid’s auto-placement powers makes it a relative cinch.
 
 
 
 CodePen Embed Fallback
 
 
 
 Take a peek at the code. It may look complex but let’s break it down because it winds up being pretty straightforward.
 
 
 
 The first thing to do is to identify the pattern. Ask yourself: “After how many elements should the pattern repeat?” In this case it’s after every four elements. So, let’s look at using only four elements for now:
 
 
 
 
 
 
 
 Now, let’s define the grid and set up the general pattern using the :nth-child selector for alternating between elements:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr; /* all the columns are equal */
   grid-auto-rows: 100px; /* all the rows equal to 100px */
 }
 .grid :nth-child(4n + 1) { /* ?? */ }
 .grid :nth-child(4n + 2) { /* ?? */ }
 .grid :nth-child(4n + 3) { /* ?? */ }
 .grid :nth-child(4n + 4) { /* ?? */ }
 
 
 
 We said that our pattern repeats every four elements, so we will logically use 4n + x where x ranges from 1 to 4. It’s a little easier to explain the pattern this way:
 
 
 
 4(0) + 1 &#x3D; 1 &#x3D; 1st element /* we start with n &#x3D; 0 */
 4(0) + 2 &#x3D; 2 &#x3D; 2nd element
 4(0) + 3 &#x3D; 3 &#x3D; 3rd element
 4(0) + 4 &#x3D; 4 &#x3D; 4th element
 4(1) + 1 &#x3D; 5 &#x3D; 5th element /* our pattern repeat here at n &#x3D; 1 */
 4(1) + 2 &#x3D; 6 &#x3D; 6th element
 4(1) + 3 &#x3D; 7 &#x3D; 7th element
 4(1) + 4 &#x3D; 8 &#x3D; 8th element
 4(2) + 1 &#x3D; 9 &#x3D; 9th element /* our pattern repeat again here at n &#x3D; 2 */
 etc.
 
 
 
 Perfect, right? We have four elements, and repeat the pattern on the fifth element, the ninth element and so on.
 
 
 
 Those :nth-child selectors can be tricky! Chris has a super helpful explanation of how it all works, including recipes for creating different patterns.
 
 
 
 Now we configure each element so that:
 
 
 
 The first element needs to take two columns and start at column one (grid-column: 1/span 2).The second element is placed in the third column (grid-column-start: 3).The third element is placed at the first column: (grid-column-start: 1).The fourth element takes two columns and starts at the second column: (grid-column: 2/span 2).
 
 
 
 Here that is in CSS:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr; /* all the columns are equal */
   grid-auto-rows: 100px; /* all the rows are equal to 100px */
 }
 .grid :nth-child(4n + 1) { grid-column: 1/span 2; }
 .grid :nth-child(4n + 2) { grid-column-start: 3; }
 .grid :nth-child(4n + 3) { grid-column-start: 1; }
 .grid :nth-child(4n + 4) { grid-column: 2/span 2; }
 
 
 
 We could stop here and be done… but we can do better! Specifically, we can remove some declarations and rely grid’s auto-placement powers to do the job for us. This is the trickiest part to grok and requires a lot of practice to be able to identify what can be removed.
 
 
 
 The first thing we can do is update grid-column: 1 /span 2 and use only grid-column: span 2 since, by default, the browser will place the first item into the first column. We can also remove this:
 
 
 
 .grid :nth-child(4n + 3) { grid-column-start: 1; }
 
 
 
 By placing the first, second, and fourth items, the grid automatically places the third item in the correct place. That means we’re left with this:
 
 
 
 .grid {
   display: grid;
   grid-auto-rows: 100px; /* all the rows are equal to 100px */
   grid-auto-columns: 1fr; /* all the columns are equal */
 }
 .grid :nth-child(4n + 1) { grid-column: span 2; }
 .grid :nth-child(4n + 2) { grid-column-start: 3; }
 .grid :nth-child(4n + 4) { grid-column: 2/span 2; }
 
 
 
 But c’mon we can stroll do better! We can also remove this:
 
 
 
 .grid :nth-child(4n + 2) { grid-column-start: 3; }
 
 
 
 Why? If we place the fourth element in the second column while allowing it to take up two full columns, we’re forcing the grid to create a third implicit column, giving us a total of three columns without explicitly telling it to. The fourth element cannot go into the first row since the first item is also taking two columns, so it flows to the next row. This configuration leave us with an empty column in the first row and an empty one in the second row.
 
 
 
 
 
 
 
 I think you know the end of the story. The browser will automatically place the second and third items in those empty spots. So our code becomes even simpler:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr; /* all the columns are equal */
   grid-auto-rows: 100px; /* all the rows are equal to 100px */
 }
 .grid :nth-child(4n + 1) { grid-column: span 2; }
 .grid :nth-child(4n + 4) { grid-column: 2/span 2; }
 
 
 
 All it takes is five declarations to create a very cool and very flexible pattern. The optimization part may be tricky, but you get used to it and gain some tricks with practice.
 
 
 
 Why not use grid-template-columns to define explicit columns since we know the number of columns?
 
 
 
 We can do that! Here’s the code for it:
 
 
 
 .grid {
   display: grid;
   grid-template-columns: repeat(3, 1fr); /* all the columns are equal */
   grid-auto-rows: 100px; /* all the rows are equal to 100px */
 }
 .grid :nth-child(4n + 1),
 .grid :nth-child(4n + 4) {
   grid-column: span 2;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 As you can see, the code is definitely more intuitive. We define three explicit grid columns and we tell the browser that the first and fourth elements need to take two columns. I highly recommend this approach! But the goal of this article is to explore new ideas and tricks that we get from CSS Grid’s implicit and auto-placement powers.
 
 
 
 The explicit approach is more straightforward, while an implicit grid requires you to — pardon the pun — fill in the gaps where CSS is doing additional work behind the scenes. In the end, I believe that having a solid understanding of implicit grids will help you better understand the CSS Grid algorithm. After all, we are not here to study what’s obvious — we are here to explore wild territories!
 
 
 
 Let’s try another pattern, a bit quicker this time:
 
 
 
 CodePen Embed Fallback
 
 
 
 Our pattern repeats every six elements. The third and fourth elements each need to occupy two full rows. If we place the third and the fourth elements, it seems that we don’t need to touch the others, so let’s try the following:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr;
   grid-auto-rows: 100px;
 }
 .grid :nth-child(6n + 3) {
   grid-area: span 2/2; /* grid-row-start: span 2 &amp;&amp; grid-column-start: 2 */
 }
 .grid :nth-child(6n + 4) {
   grid-area: span 2/1; /* grid-row-start: span 2 &amp;&amp; grid-column-start: 1 */
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Hmm, no good. We need to place the second element in the first column. Otherwise, the grid will automatically place it in the second column.
 
 
 
 .grid :nth-child(6n + 2) {
   grid-column: 1; /* grid-column-start: 1 */
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Better, but there’s still more work, We need to shift the third element to the top. It’s tempting to try placing it in the first row this way:
 
 
 
 .grid :nth-child(6n + 3) {
   grid-area: 1/2/span 2; 
     /* Equivalent to:
        grid-row-start: 1;
        grid-row-end: span 2;
        grid-column-start: 2 
      */
 }
 
 
 
 But this doesn’t work because it forces all the 6n + 3 elements to get placed in the same area which makes a jumbled layout. The real solution is to keep the initial definition of the third element and add grid-auto-flow: dense to fill the gaps. From MDN:
 
 
 
 [The] “dense” packing algorithm attempts to fill in holes earlier in the grid, if smaller items come up later. This may cause items to appear out-of-order, when doing so would fill in holes left by larger items. If it is omitted, a “sparse” algorithm is used, where the placement algorithm only ever moves “forward” in the grid when placing items, never backtracking to fill holes. This ensures that all of the auto-placed items appear “in order”, even if this leaves holes that could have been filled by later items.
 
 
 
 I know this property is not very intuitive but never forget it when you face a placement issue. Before trying different configurations in vain, add it because it may fix your layout with no additional effort.
 
 
 
 Why not always add this property by default?
 
 
 
 I don’t recommend it because, in some cases, we don’t want that behavior. Note how the MDN’s explanation there mentions it causes items to flow “out-of-order” to fill holes left by larger items. Visual order is usually just as important as the source order, particularly when it comes to accessible interfaces, and grid-auto-flow: dense can sometimes cause a mismatch between the visual and source order.
 
 
 
 Our final code is then:
 
 
 
 .grid {
   display: grid;
   grid-auto-columns: 1fr;
   grid-auto-flow: dense;
   grid-auto-rows: 100px;
 }
 .grid :nth-child(6n + 2) { grid-column: 1; }
 .grid :nth-child(6n + 3) { grid-area: span 2/2; }
 .grid :nth-child(6n + 4) { grid-row: span 2; }
 
 
 
 Another one? Let’s go!
 
 
 
 CodePen Embed Fallback
 
 
 
 For this one, I will not talk too much and instead show you an illustration of the code I have used. Try to see if you get how I reached that code:
 
 
 
 
 
 
 
 The items in black are implicitly placed in the grid. It should be noted that we can get the same layout more ways than how I got there. Can you figure those out, too? What about using grid-template-columns? Share your works in the comment section.
 
 
 
 I am gonna leave you with a last pattern:
 
 
 
 
 
 
 
 I do have a solution for this one but it’s your turn to practice. Take all that we have learned and try to code this by yourself and then compare it with my solution. Don’t worry if you end with something verbose — the most important thing is finding a working solution.
 
 
 Want more?
 
 
 Before we end I want to share a few Stack Overflow questions related to CSS Grid where I jumped in with answers that use many of the techniques we covered here together. It’s a good list that shows just how many real use cases and real-world situations come up where these things come in handy:
 
 
 
 Change the number of columns and rows in a grid as the number of items increaseCSS Grid – 2×2 grid always taking up the full width when possibleHow to repeat a CSS grid layout pattern?Create CSS grid layout with pure CSSCSS Grid vs dynamic definition list autoplacementCSS Grid – alternate order of elements only on DesktopImage Tile Using CSS GridHow to fix this complex CSS grid of photos based on 4 columns?Repeating grid layout with unknown amount of itemsCreating a repeating CSS Grid layoutIs it possible to make every second row in a CSS Grid to have different number of columns?Place items in pairs in two rows using css gridHow to set up a dynamic grid based on flex or gridCSS complex grid auto layoutCan I stack a right-hand set of columns with CSS Grid instead of Flex?Change grid layout depending on number of elements
 
 
 Wrapping up
 
 
 CSS Grid has been around for years, but there are still a lot of little-known and used tricks that aren’t widely discussed. The implicit grid and auto-placement features are two of them!
 
 
 
 And yes, this can get challenging! It has taken me a lot of time to grok the logic behind implicit grids and I still struggle with auto-placement. If you want to spend more time wrapping your head around explicit and implicit grids, here are a couple of additional explanations and examples worth checking out:
 
 
 
     		
     
       
 
   
     
                 
         Article
       
 
     on
 
     Oct 22, 2018  
 
   
     
       Understanding the difference between grid-template and grid-auto    
   
 
   
       
       grid grid-auto-flow grid-template-columns grid-template-rows implicit grid    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Article
       
 
     on
 
     Jul 28, 2017  
 
   
     
       A Collection of Interesting Facts about CSS Grid Layout    
   
 
   
       
       grid grid-auto-flow grid-template-columns grid-template-rows implicit grid    
   
   
     
           
   
     
       Manuel Matuzovic    
   
 
 
     
   
 
 
 
 Similarly, you might want to read about grid-auto-columns in the CSS-Tricks Almanac because Mojtaba Seyedi goes into great detail and includes incredibly helpful visuals to help explain the behavior.
 
 
 
 Like I said when we started, the methods we covered here are not meant to replace the common ways you already know for building grids. I am simply exploring different ways that can be helpful in some cases.
 
 Exploring CSS Grid’s Implicit Grid and Auto-Placement Powers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Scroll Shadows? Pure CSS Parallax? Game Back On.</title>
         <link href="https://css-tricks.com/scroll-shadows-pure-css-parallax-game-back-on/"/>
       <updated>2022-07-29T14:55:31.000Z</updated>
       <content type="text">Chris calls scroll shadows one his favorite CSS-Tricks of all time. Lea Verou popularized the pure CSS approach using four layered background gradients with some clever background-attachment magic. The result is a slick scrolling interaction that gives users a hint that additional content is available in a scrollable container.
 
 
 
 CodePen Embed Fallback
 
 
 
 Just one problem: it broke in Safari iOS 13. One day it was all good. The next, not so much. And that wasn’t the only thing affected. Keith Clark’s CSS-only parallax effect also stopped working right about then.
 
 
 
 Well, reader Ronald wrote in to say that all is working once again! In fact, I’m writing this on my iPad (Safari 15.5) right now and Chris’s demo is looking sharp as ever. So is Keith’s original demo.
 
 
 
 So, what broke it? We still don’t know. But the Safari 13 release notes offer clues:
 
 
 
 Added support for one-finger accelerated scrolling to all frames and overflow:scroll elements eliminating the need to set-webkit-overflow-scrolling: touch.Changed the default behavior on iPad for wide web pages with responsive meta-tags that require horizontal scrolling. Pages are scaled to prevent horizontal scrolling and any text is resized to preserve legibility.
 
 
 
 When was it fixed and what fixed it? Well, on the scroll shadow side, the Safari 15.4 included some work on background-attachment: local that may have done the trick. On the parallax side, Safari 14.1 added support for individual transform properties… so maybe that?
 
 Scroll Shadows? Pure CSS Parallax? Game Back On. originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Recreating MDN’s Truncated Text Effect</title>
         <link href="https://css-tricks.com/recreating-mdns-truncated-text-effect/"/>
       <updated>2022-07-28T17:18:46.000Z</updated>
       <content type="text">It’s no secret that MDN rolled out a new design back in March. It’s gorgeous! And there are some sweet CSS-y gems in it that are fun to look at. One of those gems is how card components handle truncated text.
 
 
 
 
 
 
 
 
 
 
 
 Pretty cool, yeah? I wanna tear that apart in just a bit, but a couple of things really draw me into this approach:
 
 
 
 It’s an example of intentionally cutting off content. We’ve referred to that as CSS data loss in other places. And while data loss is generally a bad thing, I like how it’s being used here since excerpts are meant to be a teaser for the full content.This is different than truncating text with text-overflow: ellipsis, a topic that came up rather recently when Eric Eggert shared his concerns with it. The main argument against it is that there is no way to recover the text that gets cut off in the truncation — assistive tech will announce it, but sighted users have no way to recover it. MDNs approach provides a bit more control in that department since the truncation is merely visual.
 
 
 
 So, how did MDN do it? Nothing too fancy here as far the HTML goes, just a container with a paragraph.
 
 
 
 &lt;div class&#x3D;&quot;card&quot;&gt;
   &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Inventore consectetur temporibus quae aliquam nobis nam accusantium, minima quam iste magnam autem neque laborum nulla esse cupiditate modi impedit sapiente vero?&lt;/p&gt;
 &lt;/div&gt;
 
 
 
 We can drop in a few baseline styles to shore things up.
 
 
 
 CodePen Embed Fallback
 
 
 
 Again, nothing too fancy. Our goal is cut the content off after, say, the third line. We can set a max-height on the paragraph and hide the overflow for that:
 
 
 
 .card p {
   max-height: calc(4rem * var(--base)); /* Set a cut-off point for the content */
   overflow: hidden; /* Cut off the content */
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Whoa whoa, what’s up with that calc() stuff? Notice that I set up a --base variable up front that can be used as a common multiplier. I’m using it to compute the font-size, line-height, padding for the card, and now the max-height of the paragraph. I find it easier to work with a constant values especially when the sizing I need is really based on scale like this. I noticed MDN uses a similar --base-line-height variable, probably for the same purpose.
 
 
 
 Getting that third line of text to fade out? It’s a classic linear-gradient() on the pargraph’s :after pseudo-element, which is pinned to the bottom-right corner of the card. So, we can set that up:
 
 
 
 .card p:after {
   content: &quot;&quot;; /* Needed to render the pseudo */
   background-image: linear-gradient(to right, transparent, var(--background) 80%);
   position: absolute;
   inset-inline-end: 0; /* Logical property equivalent to &#x60;right: 0&#x60; */
 }
 
 
 
 Notice I’m calling a --background variable that’s set to the same background color value that’s used on the .card itself. That way, the text appears to fade into the background. And I found that I needed to tweak the second color stop in the gradient because the text isn’t completely hidden when the gradient blends all the way to 100%. I found 80% to be a sweet spot for my eyes.
 
 
 
 And, yes, :after needs a height and width. The height is where that --base variables comes back into play because we want that scaled to the paragraph’s line-height in order to cover the text with the height of :after.
 
 
 
 .card p:after {
   /* same as before */
   height: calc(1rem * var(--base) + 1px);
   width: 100%; /* relative to the .card container */
 }
 
 
 
 Adding one extra pixel of height seemed to do the trick, but MDN was able to pull it off without it when I peeked at DevTools. Then again, I’m not using top (or inset-block-start) to offset the gradient in that direction either. 🤷‍♂️
 
 
 
 Now that p:after is absolutely positioned, we need to explicitly declare relative positioning on the paragraph to keep :after in its flow. Otherwise, :after would be completely yanked from the document flow and wind up outside of the card. This becomes the full CSS for the .card paragraph:
 
 
 
 .card p {
   max-height: calc(4rem * var(--base)); /* Set a cut-off point for the content */
   overflow: hidden; /* Cut off the content */
   position: relative; /* needed for :after */
 }
 
 
 
 We’re done, right? Nope! The dang gradient just doesn’t seem to be in the right position.
 
 
 
 CodePen Embed Fallback
 
 
 
 I’ll admit I brain-farted on this one and fired up DevTools on MDN to see what the heck I was missing. Oh yeah, :after needs to be displayed as a block element. It’s clear as day when adding a red border to it.🤦‍♂️
 
 
 
 CodePen Embed Fallback
 
 
 
 .card p:after {
   content: &quot;&quot;;
   background: linear-gradient(to right, transparent, var(--background) 80%);
   display: block;
   height: calc(1rem * var(--base) + 1px);
   inset-block-end: 0;
   position: absolute;
   width: 100%;
 }
 
 
 
 All together now!
 
 
 
 CodePen Embed Fallback
 
 
 
 And, yep, looks sounds like VoiceOver respects the full text. I haven’t tested any other screen readers though.
 
 
 
 
 
 
 
 I also noticed that MDN’s implementation removes pointer-events from p:after. Probably a good defensive tactic to prevent odd behaviors when selecting text. I added it in and selecting text does feel a little smoother, at least in Safari, Firefox, and Chrome.
 
 Recreating MDN’s Truncated Text Effect originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Why I Chose Angular to Build a URL Shortener</title>
         <link href="https://css-tricks.com/why-i-chose-angular-to-build-a-url-shortener/"/>
       <updated>2022-07-22T14:00:19.000Z</updated>
       <content type="text">URL Shorteners are tools we use to make links shorter than they actually are. With a URL Shortener, you can transform a long link (maybe for a registration form or article) into a shorter version.
 
 
 
 Behind the scenes, the long and short versions of a given link have been stored in some database. Then when a user visits the short link in a browser, the URL Shortener will redirect the user to the long version of the link (where the actual content is found).
 
 
 
 Shortened links from URL shorteners are commonly used when the long version of those links would be too long to use. Sharing links on social media or when designing flyers and adverts is a popular use of URL shorteners.
 
 
 
 For one of my projects, I created a personal URL shortener. My intention was to use it for links to articles I write or videos I make. I used Firebase to build the backend of the URL shortener. Specifically, I used the Firestore database to store short and long versions of any given link.
 
 
 
 To create links, I had to use the Firebase console. This wasn’t a problem but it was cumbersome for the high frequency of editing links. The user experience (UX) was not ideal. Now I was faced with a problem. How do I create, edit, and delete links? I needed to build a frontend for the URL shortener. I needed a website for this.
 
 
 
 In this article, we’ll review the available tools used for building this frontend, decision choices, and factors that influenced why they were made.
 
 
 
 
 
 
 Problem statement
 
 
 The project requirements were:
 
 
 
 Platform/Architecture. The engineering and structure of the coding process.UI Toolkit. Components to use for the various parts of the UI.Convenience. Building the backend was not tough, so this frontend should not be either. I wanted clean code and fast development.
 
 
 The First Decision Choice: Angular
 
 
 Many ideas come to mind when starting out to build a frontend. In a broad sense, we could categorize frontend building options into 3 platforms:
 
 
 
 Website Builders – like WordPress, Wix, Squarespace, etc.Vanilla Building – using plain HTML, CSS, and JavaScript.JavaScript Framework – like React, Vue, Angular, etc.
 
 
 
 In my experience, website builders provide a very restricted collection of widgets, components, and templates. Most website builders don’t provide an easy way to integrate an entire custom backend like Firebase. While it is possible to build impressive sites by connecting these pieces together, the degree of complexity of my project was likely beyond what these services typically provide.
 
 
 
 Using the no-framework style or vanilla would have been a possibility. However, the deciding factor that made me not choose the pure vanilla route was that the latest non-CDN version of the Firebase JavaScript SDK (Version 9) is designed with installation via npm or yarn and module bundling in mind.
 
 
 
 JavaScript frameworks handle frontend core parts (like routing, backend-linking, etc.) to reduce developer efforts. There are many of them and choosing which to use seemed to be a harder choice to make.
 
 
 
 There are many JavaScript frameworks for frontend development. Examples include Angular, React, Vue, etc.
 
 
 
 Of the available frameworks, I have the most familiarity with Angular. This is because I have used it on previous projects like:
 
 
 
 Choir Carol Quiz: Portal where Quiz participants competed in two online rounds of timed multiple choice questions on select Bible chapters.Genesys AE-FUNAI Community: Custom Form where members of Genesys Campus Club AE-FUNAI (my community) report their progress and share their achievements.Tutorial Management System: Simple session management dashboard between students and tutors.
 
 
 
 This familiarity allows me to build quickly with Angular. Being able to build quickly should not be underestimated.
 
 
 
 I chose Angular because of its Object-Oriented Programming (OOP) ability. OOP is a programming paradigm that focuses more on classes, data, or state being managed, rather than on the logic controlling the data, as is the case with functional programming. Separation of concerns is one advantage of using OOP. In other words, OOP permits encapsulation. It permits you to scope aspects of the program to peculiar domains or classes.
 
 
 
 In Angular, components (and their lifecycle methods) are scoped to TypeScript classes. This makes you think the OOP way. The OOP advantage reflects in how Angular components serve as reusable UI units in the Angular framework. That way you see an Angular component as some self-sufficient entity that is yet part of a whole. This makes frontend development easy as various parts of the frontend app can be scoped to components and hence can be used where needed.
 
 
 
 I also chose Angular because it uses TypeScript. TypeScript is JavaScript with features of a typed programming language. Typing in this context means a variable can’t change the kind of value it holds all through its life. For example, a variable holding a string will not all of a sudden hold a number while it is used in that program. Typing increases code quality and reduces bugs.
 
 
 
 As a result of its type system, TypeScript reduces the time spent debugging Angular apps. It gives developer experience as the developer will have more time to build the frontend app. Debugging also becomes easy for the developer.
 
 
 
 Note: Here is more on Object-Oriented Programming with TypeScript
 
 
 
 Still, on Angular’s advantages, Angular apps come as a complete setup. They handle important features like bundling CSS preprocessors or Angular services by themselves. That said, when using Angular, you don’t need to configure each library independently, Angular takes care of this.
 
 
 
 An Angular service is what Angular uses to configure dependency injection. In simple terms, dependency injection is providing an application with what it needs to function (dependencies) without the application having to take care of how the dependencies were gotten. I also chose Angular because of its out-of-the-box handling of services. So Firebase, for example, will be auto-provided to all Angular components that need without any extra configuration.
 
 
 
 The benefits of Object-Oriented Programming, TypeScript, and dependency injection make Angular a go-to for frontend development. Coupled with the fact I was already familiar with Angular, Angular was more convenient for this URL shortener project.
 
 
 
 Angular articles on CSS-Tricks are also part of the story. They gave me more confidence with using Angular.
 
 
 The Second Decision Choice: Material Design
 
 
 After choosing Angular, my next task was to consider how I would handle the user interface (UI).
 
 
 
 I could ignore and do vanilla CSS instead but why reinvent the wheel? After all, this would defeat the reason for using a JavaScript framework – convenience.
 
 
 
 With choosing a UI toolkit, there seems to be an ocean of options. To name a few, one can use Bootstrap, Bulma, Semantic UI, Tailwind, etc. Each toolkit has its own specifications and motivations.
 
 
 
 For the use case of my project, Material Design led the pack.
 
 
 
 One of the most important factors was the support for Angular and Material Design. There is an entire Angular-only specification for Material on material.angular.io (that is as a subdomain to the Angular docs itself).
 
 
 
 I settled for Material Design because it focuses on components. Unlike other CSS frameworks, it doesn’t have CSS utility classes. This was okay because I only wanted some component kit (buttons, icons, inputs, sidebars, snack bars, etc.) Material also adds animations, ripple, and shadow effects by itself; making it more convenient than other libraries.
 
 
 
 Furthermore, Angular Material has out-of-the-box theming support, when initializing Angular Material, you have the option of choosing a pre-defined theme for the entire Angular app or creating a custom one.
 
 
 
 
 
 
 
 For the sake of convenience, I chose a dark theme while setting up Angular Material.
 
 
 The Third Decision Choice: Reactive Forms
 
 
 With a framework and toolkit decided, I turned my attention to one of the most important features of the URL shortener. The core of the URL shortener’s frontend is the form for creating and updating links.
 
 
 
 Let’s call this form the links editor. The links editor form has only two inputs, one for the short version of a link and the other for the full URL the short version will redirect to.
 
 
 
 For managing forms, Angular comes with two mechanisms. So instead of creating a form and handling its validation and submission as is done in vanilla HTML and JavaScript, you have to use either of the two ways Angular provides. The two methods are:
 
 
 
 Template-driven formsReactive forms
 
 
 
 Template-driven forms as the name imply, involve the HTML (template) code controlling the greater part of the Angular form. This approach is preferable when your form does not do much or is for one-time usage.
 
 
 
 Reactive forms, on the other hand, provide a model-driven approach to handling form inputs whose values change over time. I needed reactive forms because it is the same form that I will use to edit different links at any point in time.
 
 
 
 Note: Here is more material on using Reactive Forms.
 
 
 
 At this point, the benefits of previous choices began playing out. Angular Material has form-field components. The form-field wraps the input as a component and provides animations, ripple effects, and error messages if necessary.
 
 
 
 
 
 
 
 So I used it for the two inputs of the editor form.
 
 
 The Fourth Decision Choice: Angular Material Bottom Sheet and Drawer
 
 
 The final decision involved how to improve the user experience. The URL shortener would need other features like viewing all created links and their analytics. These features would require space on the screen that required me to rethink if there were better solutions to display the links editor form to the user.
 
 
 
 If the user has no current need for the links editor form, it makes sense for the links editor form to not always be in view. This would free up space on the UI for other elements.
 
 
 
 However, splitting this user experience into two separate pages felt disruptive. Instead, to open the links editor when needed, I added a floating action button on the page for creating links. When clicked, the button will cause the editor form to be opened in any fitting UI component.
 
 
 
 A bottom sheet, as the name implies, is a UI component that opens from the bottom of the screen. It has interactive content the user can work it. It overlays the current view of a mobile screen (but doesn’t fully block it).
 
 
 
 
 
 
 
 Bottom sheets are usually used in place of pop-ups if the user will spend a long time interacting with their content. So, bottom sheets are a good fit to open the editor on mobile screens. However, interacting with a bottom sheet is hard when the screen is wide. I needed a different UI component for the links editor form on wide screens.
 
 
 
 Drawers open by the side. Using a drawer to open the links editor form on a wide screen was the go-to option. Drawers won’t be good for the editor on mobile screens. The screen’s width would be relatively small and the drawer might completely block the screen (which is not a desirable UX).
 
 
 
 
 
 
 
 I selected these two UI components from Material Design for the form to have some responsive effect. So whether on my phone or laptop creating links would be done in a fitting UI component.
 
 
 
 In the code, Angular checks if the device is of small screen width. If so, it opens a bottom sheet containing the links editor form. On the other hand, if the screen is wide, Angular opens a drawer containing the same form.
 
 
 
 Using these two components brought about a minor complication. If my phone is rotated or my laptop’s browser window’s width is reduced, the form opens on the contrary UI component. That is instead of opening in a drawer in a laptop, it will open in a bottom sheet (because the browser’s width was reduced).
 
 
 Maintenance, Future-proofing, Future Releases
 
 
 When I thought of opportunities to iterate on this project, I ran into limitations with the current use case designed to support a single administrator. But with authentication and user accounts, it can support additional users managing links and accessing analytics.
 
 
 
 In that case, the above choices of components will still be appropriate. The links editor is responsive so on any device, users will have a good user experience.
 
 
 
 If I had to do it all over again, I think I would have tried out the vanilla method. Building entirely without any helpers like Angular, Material, or UI components. I would try building from scratch in HTML, CSS, and JavaScript and see if I didn’t lose out on convenience as I thought I would.
 
 
 Conclusion
 
 
 You can access the final Angular code here on GitHub.
 
 
 
 This was a review of some of the main choices I made when developing my project. Of course, there is more to building the frontend of a URL shortener. But for a start, these UI components made the building process convenient. They made the links editor form responsive and could be of similar use to you in your projects (not necessarily a URL shortener).
 
 
 
 There are many other UI components from various libraries you can use for any such project. But as with my case, if convenience is a deciding factor, you would make the right decision choice that would be fitting for the UI.
 
 
 
 Ultimately, what shaped my decisions was understanding what my project required, knowledge of tools I had used from previous projects, and expectations with time constraints. My past experience — successes and mistakes — helped guide me too.
 
 
 
 Cheers!
 
 Why I Chose Angular to Build a URL Shortener originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Roundup of Recent Document Outline Chatter</title>
         <link href="https://css-tricks.com/roundup-of-recent-document-outline-chatter/"/>
       <updated>2022-07-21T14:04:34.000Z</updated>
       <content type="text">It’s not everyday that HTML headings are the topic de jour, but my folder of saved links is accumulating articles about the recently merged removal of the document outline algorithm in the WHATWG Living Standard.
 
 
 
 First off, you should know that the algorithm never really existed. Sure, it was in the spec. And sure, there was a warning about using it in the spec. But no browser ever implemented it, as Bruce Lawson reminded us. We have been living in a flat document structure the whole time.
 
 
 
 
 
 
 
 This is very old news. Adrian Roselli has been writing about the document outline myth since 2013. But it’s his 2016 post titled “There Is No Document Outline Algorithm” that comprehensively spells it out and has been updated regularly with extra nuggets of context about the conversations and struggles that got us here. This is really the best timeline of the saga. Amelia Bellamy-Royds has also delved into the roots of the dilemma in the past here on CSS-Tricks.
 
 
 
 My mind instantly goes to all the work that’s gone into the making of a document outline algorithm that supports sectioning. Removing it from the spec is the right call for sure, but it doesn’t take away from the herculean efforts that went into it even if it is now buried in some version history. I also think about all the well-intentioned folks who have written about the algorithm erroneously over time (including on this very site!) with the expectation that it was just around the corner. There’s nearly seven years of mental and technical debt that we’ve accrued from what appear to be a lack of action.
 
 
 
 Looking past the “news” that the algorithm is officially no more, Bruce laments that there is no generic &lt;h&gt; element or the like that can be sectioned to produce the correct heading level. I agree. Having an &lt;h1&gt; element essentially exist as an exposed &lt;title&gt; is constraining, particularly since pages are so rarely structured around a single article with a single top-level heading. I often find myself wincing every time I’m making some sort of card component where using &lt;h3&gt; might be technically correct, but feels out of order. And that’s before we even talk about the styling considerations where a lower heading level now needs to look like a distinct higher heading level.
 
 
 
 Speaking of heading level management, Steve Faulkner (who authored the PR that plucked the algorithm from the spec) has a super practical overview of using the &lt;hgroup&gt; element to handle heading patterns that involve subheadings, subtitles, alternative titles, snd taglines. I’m sure you’ve seen markup like this in the wild:
 
 
 
 &lt;h1&gt;Disappointingly Average&lt;/h1&gt;
 &lt;h2&gt;The Autobiography of Geoff Graham&lt;/h2&gt;
 &lt;h3&gt;by Geoff Graham&lt;/h3&gt;
 
 
 
 That doesn’t jive with a flat document outline that’s driven by heading levels. Each one of those headings represents a section that forms a hierarchy of information:
 
 
 
 Disappointingly Average
 └── The Autobiography of Geoff Graham
     └── by Geoff Graham
 
 
 
 What we want instead is a group of headings. Cue the &lt;hgroup&gt; element:
 
 
 
 When nested within a &lt;hgroup&gt; element, the &lt;p&gt; element’s content represents a subheading, alternative title, or tagline which are not included in the document outline.
 
 
 
 So, we get this structure:
 
 
 
 &lt;hgroup&gt;
   &lt;h1&gt;Disappointingly Average&lt;/h1&gt;
   &lt;p&gt;The Autobiography of Geoff Graham&lt;/p&gt;
   &lt;p&gt;by Geoff Graham&lt;/p&gt;
 &lt;/hgroup&gt;
 
 
 
 &lt;hgroup&gt; is role&#x3D;generic at the moment, but Steve points to a proposal that could map it to role&#x3D;group. If that happens, the accessibility tree will allow assistive tech to assign more semantic meaning to those paragraphs as the subtitle and tagline pieces that they are. Sounds easy but Steve notes challenges that are in the way. He also demos how this sort of pattern could be implemented today with ARIA attributes.
 
 
 
 As long as we’re rounding things up, Matthias Ott published a few tips on creating a structured outline with headings. Check out the end for a great list of tools to check your heading outlines.
 
 Roundup of Recent Document Outline Chatter originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Logical Properties for Useful Shorthands</title>
         <link href="https://css-tricks.com/logical-properties-for-useful-shorthands/"/>
       <updated>2022-07-20T16:16:34.000Z</updated>
       <content type="text">Michelle Barker with my favorite sorta blog post: short, practical, and leaves you with a valuable nugget for your time. Here, she gets into logical property shorthands in CSS, particularly those that set lengths just on a single axis, say only the block (vertical) axis or just the inline (horizontal) axis.
 
 
 
 I say “block” and ”inline”  because, as far as logical properties are concerned, the x-axis could just as well behave like a vertical axis depending on the current writing-mode.
 
 
 
 So, where we’ve always had padding, margin, and border shorthands that can support a multi-value syntax, none of them allow us to declare lengths on a specific axis without also setting a length on the other axis.
 
 
 
 
 
 
 
 For example:
 
 
 
 /* This gives us margin on the inline axis */
 margin: 0 3rem;
 
 
 
 …but we had to set the other axis in order to get there. With logical properties, however, we have additional shorthands for each axis meaning we can cue up the margin-inline shorthand to work specifically on the inline axis:
 
 
 
 margin-inline: 3rem;
 
 
 
 Michelle mentions my favorite logical property shorthand in passing. How many times do you position something to this sort of tune:
 
 
 
 .position-me {
   position: absolute;
   top: 0;
   right: 0;
   bottom: 0;
   left: 0;
 }
 
 
 
 We can get those four lines into in with inset: 0. Or we could target the block and inline axis directly with inset-block and inset-inline, respectively.
 
 
 
 While we’re talking shorthands, I always like to put a word of caution about ”accidental” CSS resets. Just one of the common CSS mistakes I make.
 To Shared Link — Permalink on CSS-Tricks
 Logical Properties for Useful Shorthands originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How stroke-dasharray Patterns Work</title>
         <link href="https://css-tricks.com/how-stroke-dasharray-patterns-work/"/>
       <updated>2022-07-15T19:43:40.000Z</updated>
       <content type="text">Say you have a line in SVG:
 
 
 
 &lt;svg&gt;
   &lt;line x1&#x3D;&quot;0&quot; y1&#x3D;&quot;30&quot; x2&#x3D;&quot;500&quot; y2&#x3D;&quot;30&quot; stroke-color&#x3D;&quot;#f8a100&quot; /&gt;
 &lt;/svg&gt;
 
 
 
 You can use the stroke-dasharray property in CSS to make dashes:
 
 
 
 line {
   stroke-dasharray: 5;
 }
 
 
 
 That 5 value is a relative unit based on the size of the SVG’s viewBox. We could use any CSS length, really. But what it does is make a pattern of dashes that are 5 units long with 5 unit gaps between them.
 
 
 
 CodePen Embed Fallback
 
 
 
 So far, so good. We can use two values where the second value individually sets the gap length:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now we have dashes that are 5 units and gaps that are 10. Let’s try a third value:
 
 
 
 CodePen Embed Fallback
 
 
 
 See how we’re forming a pattern here? It goes:
 
 
 
 Dash: 5 unitsGap: 10 unitsDash: 15 units
 
 
 
 You’d think it repeats after that in the exact same cadence. But no! It if did, we’d have dashes bumping into one another:
 
 
 
 Dash: 5 unitsGap: 10 unitsDash: 15 unitsDash: 5 unitsGap: 10 unitsDash: 15 units…and so on.
 
 
 
 Instead, stroke-dasharray gets all smart and duplicates the pattern if there are an odd number of values So…
 
 
 
 stroke-dasharray: 5 10 15;
 
 /* is the same as */
 stroke-dasharray: 5 10 15 5 10 15;
 
 
 
 That’s actually why a single value works! Earlier, we declared a single 5 value. That’s really the same as saying stroke-dasharray: 5 5. Without the second value, stroke-dasharray implicitly duplicates the first value to get a repeatable pattern. Otherwise, it’d just be a solid line of dashes that are 5 units long, but no gaps between them!
 
 
 
 The pattern also depends on the size of the shape itself. Our SVG line is 500 units. Let’s set larger stroke-dasharray values and add them up:
 
 
 
 stroke-dasharray: 10 20 30 40 50; /* 150 units */
 
 
 
 If the pattern runs four times (150 units ⨉ 4 iterations), we’re dealing with 600 total units. That additional 100 units is lopped off to prevent the pattern from overflowing itself.
 
 
 
 That’s all.
 
 
 
 CodePen Embed Fallback
 
 
 
 🎩 Hat tip to Joshua Dance for calling this out!
 
 How stroke-dasharray Patterns Work originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Office Spaces</title>
         <link href="https://css-tricks.com/office-spaces/"/>
       <updated>2022-07-14T14:07:01.000Z</updated>
       <content type="text">I think it’s super timely that Jim Nielsen wrote about his office space the other day. My family recently re-rooted in Colorado and I was up late last night setting up my desk and everything around it. So late, in fact, that reading these words now bites me:
 
 
 
 My workspace isn’t what life revolves around.
 
 
 
 I’ve spent years trying to live up to that. I remember how important my desk was to me when I began freelancing in 2013. Remote working was an outlier then and having a desk made me feel better whenever I told someone I worked from home and I got the inevitable “Oh, you’ll get a real job one day,” look.
 
 
 
 
 
 
 
 It doesn’t look like much, but that minimalism took me forever to figure out (circa October 2013).
 
 
 
 That helped my ego, sure. But it didn’t stop my 6-month old daughter from climbing the stairs to find me. We lived in an open concept condo at the time, and the living room stairs bled straight into my office as the landing.
 
 
 
 To be fair, it’s not like I was stopping her either.
 
 
 
 That meant I sometimes had a tiny art director looking over my shoulder.
 
 
 
 
 
 
 
 …but it also forced me to find different spots to get some work done:
 
 
 
 
 
 
 
 Yanking the power cord from my office wall made me realize I could work anywhere I really needed to.
 
 
 
 
 
 
 
 Thankfully, I lived in an urban downtown that had plenty of cafés I could use as an office in a pinch.
 
 
 
 I used to love Zurb’s templates for sketching wireframes.
 
 
 
 If I’m being honest, I’ve probably done more work outside of my office than I ever have in it. It was right around this time that I had clients plugging me into various accounts for Slack, Zoom, Dropbox, Google Drive, and other tools that we now credit for creating asynchronous working environments. Other than a new banging set of Beats, there was nothing else I really needed to invest in to work this way.
 
 
 
 These were all things I was already using for myself, but it was my clients buying into them that really felt like the sea change that allowed me to call anywhere I was sitting “my” desk.
 
 
 
 Fast-forward to 2019. We moved to the ‘burbs into a house that gave me the luxury of a large dedicated office space.
 
 
 
 Check out that killer poster on the wall.
 
 
 
 My desk started to grow into the larger space.
 
 
 
 I was recording a lot of screencasts and lectures at the time. Thankfully, Chris had a bunch of practical recommendations for a homespun studio.
 
 
 
 I really lucked out when we moved because the extra space came in handy when my wife, Marcia, starting working exclusively from home following the start of the pandemic. It also meant we had enough space for when my daughters (yep, we had another along the way!) needed a homeschooling hub.
 
 
 
 
 
 
 
 So, back-of-the-napkin math tells me we had four humans in one office heading into 2020. I can’t overstate just how lucky we were to have an office like this at a time like that. It was often hectic, yes, but still gave us everything we needed (and more) to be a truly home-based family without becoming meme fodder.
 
 
 
 
 
 
 
 All of this leads me back to Jim’s post and why his comment about life revolving around desks bit me so hard. After spending so many years unraveling my life from the office, I found myself spending too much time last night curating the desk at my new home. I was essentially letting it re-establish itself as a sacred anchor in my life.
 
 
 
 So here I am trying to put Jim’s next piece of advice into action:
 
 
 
 It’s ok to have a bit of humility in your space. Perhaps a dose of it is even deserved.
 
 
 
 That means my desk is not the center of the room that it’s in. It’s a work in progress, but so far  the desk is pushed off to the side up against a wall. Behind it is a reclaimed sofa I can easily retreat to. Across from that are my guitars and ukuleles for mental breaks where I get to use my hands more than my mind. Next to those is my record collection and turntable — another refuge that encourages me to step away from the screen and indulge other interests.
 
 
 
 I’ll get some artwork up on the walls at some point.
 
 
 
 And all of it is in a space large and welcoming enough to invite life in if it needs to — family, friends, fiddling around, whatever. It’s also conveniently located right off the family room for such distractions  moments.
 
 
 What’s on my desk
 
 
 It feels odd to sign off without showing you what’s actually on my desk. It’s fun knowing what people use and how they’re set up. Here’s what I’ve got.
 
 
 
 
 
 
 
 First off, the desk itself is this one from IKEA.
 
 
 
 16″ MacBook Pro (2019)Apple Magic Keyboard (no charging or TouchID)Apple Magic Trackpad (with charging)27″ LG UltraFine 4K external monitor (2016, discontinued)27″ Dell UltraSharp 4K USB-C monitor (thank you, DigitalOcean!)Shure SM7B microphone (with mount)Focusrite Scarlett 2i2 microphone preampDBX 286s microphone preamp processorUBeesize 12’’ Ring Light with Tripod (the room is super dark)Grogu (aka Baby Yoda) and Bob Belcher figuresOrange cup for pens and a Seth Godin action figureSammy stress ball
 
 
 What’s your office like?
 
 
 Is it a traditional office you commute to? A room that’s a few steps away from your bedroom? Maybe it’s even in your bedroom? Where do you work when you’re not there? What’s in there?
 
 
 
 Inquiring minds want to know (namely mine).
 
 Office Spaces originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>React Hooks: The Deep Cuts</title>
         <link href="https://css-tricks.com/react-hooks-the-deep-cuts/"/>
       <updated>2022-07-13T13:34:08.000Z</updated>
       <content type="text">Hooks are reusable functions. They allow you to use state and other features (e.g. lifecycle methods and so on) without writing a class. Hook functions let us “hook into” the React state lifecycle using functional components, allowing us to manipulate the state of our functional components without needing to convert them to class components.
 
 
 
 React introduced hooks back in version 16.8 and has been adding more ever since. Some are more used and popular than others, like useEffect, useState, and useContext hooks. I have no doubt that you’ve reached for those if you work with React.
 
 
 
 But what I’m interested in are the lesser-known React hooks. While all React hooks are interesting in their own way, there are five of them that I really want to show you because they may not pop up in your everyday work — or maybe they do and knowing them gives you some extra superpowers.
 
 
 
 
 
 
 
 Table of Contents
 
 useReducer
 useRef
 useImperativeHandle
 useMemo
 useCallback
 Final thoughts
 
 
 useReducer
 
 
 The useReducer hook is a state management tool like other hooks. Specifically, it is an alternative to the useState hook.
 
 
 
 If you use the useReducer hook to change two or more states (or actions), you won’t have to manipulate those states individually. The hook keeps track of all the states and collectively manages them. In other words: it manages and re-renders state changes. Unlike the useState hook, useReducer is easier when it comes to handling many states in complex projects.
 
 
 Use cases
 
 
 useReducer can help reduce the complexity of working with multiple states. Use it when you find yourself needing to track multiple states collectively, as it allows you to treat state management and the rendering logic of a component as separate concerns.
 
 
 Syntax
 
 
 useReducer accepts three arguments, one of which is optional:
 
 
 
 a reducer functioninitialStatean init function (optional)
 
 
 
 const [state, dispatch] &#x3D; useReducer(reducer, initialState)
 const [state, dispatch] &#x3D; useReducer(reducer, initialState initFunction) // in the case where you initialize with the optional 3rd argument
 
 
 Example
 
 
 The following example is an interface that contains a text input, counter, and button. Interacting with each element updates the state. Notice how useReducer allows us to define multiple cases at once rather than setting them up individually.
 
 
 
 import { useReducer } from &#x27;react&#x27;;
 const reducer &#x3D; (state, action) &#x3D;&gt; {
   switch (action.type) {
     case &#x27;INCREMENT&#x27;:
       return { ...state, count: state.count + 1 };
     case &#x27;DECREMENT&#x27;:
       return { ...state, count: state.count - 1 };
     case &#x27;USER_INPUT&#x27;:
       return { ...state, userInput: action.payload };
     case &#x27;TOGGLE_COLOR&#x27;:
       return { ...state, color: !state.color };
     default:
       throw new Error();
   }
 }
 
 function App() {
   const [state, dispatch] &#x3D; useReducer(reducer, { count: 0, userInput: &#x27;&#x27;, color: false })
 
   return (
     &lt;main className&#x3D;&quot;App, App-header&quot; style&#x3D;{{ color: state.color ? &#x27;#000&#x27; : &#x27;#FF07FF&#x27;}}&gt;
       &lt;input style&#x3D;{{margin: &#x27;2rem&#x27;}}
         type&#x3D;&quot;text&quot;
         value&#x3D;{state.userInput}
         onChange&#x3D;{(e) &#x3D;&gt; dispatch({ type: &#x27;USER_INPUT&#x27;, payload: e.target.value })}
       /&gt;
       &lt;br /&gt;&lt;br /&gt;
       &lt;p style&#x3D;{{margin: &#x27;2rem&#x27;}} &gt;{state.count}&lt;/p&gt;
       &lt;section style&#x3D;{{margin: &#x27;2rem&#x27;}}&gt;
         &lt;button  onClick&#x3D;{(() &#x3D;&gt; dispatch({ type: &#x27;DECREMENT&#x27; }))}&gt;-&lt;/button&gt;
         &lt;button onClick&#x3D;{(() &#x3D;&gt; dispatch({ type: &#x27;INCREMENT&#x27; }))}&gt;+&lt;/button&gt;
         &lt;button onClick&#x3D;{(() &#x3D;&gt; dispatch({ type: &#x27;TOGGLE_COLOR&#x27; }))}&gt;Color&lt;/button&gt;
       &lt;/section&gt;
       &lt;br /&gt;&lt;br /&gt;
       &lt;p style&#x3D;{{margin: &#x27;2rem&#x27;}}&gt;{state.userInput}&lt;/p&gt;
     &lt;/main&gt;
   );
 }
 export default App;
 
 
 
 
 
 
 
 From the code above, noticed how we are able to easily managed several states in the reducer (switch-case), this shows the benefit of the useReducer. This is the power it gives when working in complex applications with multiple states.
 
 
 useRef
 
 
 The useRef hook is used to create refs on elements in order to access the DOM. But more than that, it returns an object with a .current property that can be used throughout a component’s entire lifecycle, allowing data to persist without causing a re-render. So, the useRef value stays the same between renders; updating the reference does not trigger a re-render.
 
 
 Use cases
 
 
 Reach for the useRef hook when you want to:
 
 
 
 Manipulate the DOM with stored mutable information.Access information from child components (nested elements).Set focus on an element.
 
 
 
 It’s most useful when storing mutatable data in your app without causing a re-render.
 
 
 Syntax
 
 
 useRef only accepts one argument, which is the initial value.
 
 
 
 const newRefComponent &#x3D; useRef(initialValue);
 
 
 Example
 
 
 Here I used the useRef and useState hook to show the amount of times an application renders an updated state when typing in a text input.
 
 
 
 import &#x27;./App.css&#x27;
 
 function App() {
   const [anyInput, setAnyInput] &#x3D; useState(&quot; &quot;);
   const showRender &#x3D; useRef(0);
   const randomInput &#x3D; useRef();
   const toggleChange &#x3D; (e) &#x3D;&gt; {
     setAnyInput (e.target.value);
     showRender.current++;
   
   }
   const focusRandomInput &#x3D; () &#x3D;&gt; {
     randomInput.current.focus();
   }
 
   return (
     &lt;div className&#x3D;&quot;App&quot;&gt;
       &lt;input className&#x3D;&quot;TextBox&quot; 
         ref &#x3D;{randomInput} type&#x3D;&quot;text&quot; value&#x3D;{anyInput} onChange&#x3D;{toggleChange}
       /&gt;
       &lt;h3&gt;Amount Of Renders: {showRender.current}&lt;/h3&gt;
       &lt;button onClick&#x3D;{focusRandomInput}&gt;Click To Focus On Input &lt;/button&gt;
     &lt;/div&gt;
   );
 }
 
 export default App;
 
 
 
 Notice how typing each character in the text field updates the app’s state, but never triggers a complete re-render.
 
 
 
 
 
 
 useImperativeHandle
 
 
 You know how a child component has access to call functions passed down to them from the parent component? Parents pass those down via props, but that transfer is “unidirectional” in the sense that the parent is unable to call a function that’s in the child.
 
 
 
 Well, useImperativeHandle makes it possible for a parent to access a child component’s functions.
 
 
 
 How does that work?
 
 
 
 A function is defined in the child component.A ref is added in the parent.We use forwardRef, allowing the ref that was defined to be passed to the child.useImperativeHandle exposes the child’s functions via the ref.
 
 
 Use cases
 
 
 useImperativeHandle works well when you want a parent component to be affected by changes in the child. So, things like a changed focus, incrementing and decrementing, and blurred elements may be situations where you find yourself reaching for this hook so the parent can be updated accordingly.
 
 
 Syntax
 
 
 useImperativeHandle (ref, createHandle, [dependencies])
 
 
 Example
 
 
 In this example, we have two buttons, one that’s in a parent component and one that’s in a child. Clicking on the parent button retrieves data from the child, allowing us to manipulate the parent component. It’s set up so that clicking the child button does not pass anything from the parent component to the child to help illustrate how we are passing things in the opposite direction.
 
 
 
 // Parent component
 import React, { useRef } from &quot;react&quot;;
 import ChildComponent from &quot;./childComponent&quot;;
 import &#x27;./App.css&#x27;;
 
 function useImperativeHandle() {
   const controlRef &#x3D; useRef(null);
   return (
     onClick&#x3D;{
       () &#x3D;&gt; {
         controlRef.current.controlPrint();
       }
     }
     &gt;
     Parent Box
   );
 }
 export default useImperativeHandle;
 
 
 
 // Child component
 import React, { forwardRef, useImperativeHandle, useState } from &quot;react&quot;;
 
 const ChildComponent &#x3D; forwardRef((props, ref) &#x3D;&gt; {
   const [print, setPrint] &#x3D; useState(false);
   useImperativeHandle(ref, () &#x3D;&gt; ({
     controlPrint() 
     { setPrint(!print); },
   })
   );
 
   return (
     &lt;&gt;
     Child Box
     { print &amp;&amp; I am from the child component }
   );
 });
 
 export default ChildComponent;
 
 
 Output
 
 
 
 
 
 useMemo
 
 
 useMemo is one of the least-used but most interesting React hooks. It can improve performance and decrease latency, particularly on large computations in your app. How so? Every time a component’s state updates and components re-render, the useMemo hook prevents React from having to recalculate values.
 
 
 
 You see, functions respond to state changes. The useMemo hook takes a function and returns the return value of that function. It caches that value to prevent spending additional effort re-rendering it, then returns it when one of the dependencies has changed.
 
 
 
 This process is called memoization and it’s what helps to boost performance by remembering the value from a previous request so it can be used again without repeating all that math.
 
 
 Use cases
 
 
 The best use cases are going to be any time you’re working with heavy calculations where you want to store the value and use it on subsequent state changes. It can be a nice performance win, but using it too much can have the exact opposite effect by hogging your app’s memory.
 
 
 Syntax
 
 
 useMemo( () &#x3D;&gt; 
   { // Code goes here },
   []
 )
 
 
 Example
 
 
 When clicking the button, this mini-program indicates when a number is even or odd, then squares the value. I added lots of zeros to the loop to increase its computation power. It returns the value in spilt seconds and still works well due to the useMemo hook.
 
 
 
 // UseMemo.js
 import React, { useState, useMemo } from &#x27;react&#x27;
 
 function Memo() {
   const [memoOne, setMemoOne] &#x3D; useState(0);
   const incrementMemoOne &#x3D; () &#x3D;&gt; { setMemoOne(memoOne + 1) }
   const isEven &#x3D; useMemo(() &#x3D;&gt; { 
     let i &#x3D; 0 while (i &lt; 2000000000) i++ return memoOne % 2 &#x3D;&#x3D;&#x3D; 0
   },
   [memoOne]);
   
   const square &#x3D; useMemo(()&#x3D;&gt; { 
     console.log(&quot;squared the number&quot;); for(var i&#x3D;0; i &lt; 200000000; i++);
     return memoOne * memoOne;
   },
   [memoOne]);
 
   return (
     Memo One - 
     { memoOne }
     { isEven ? &#x27;Even&#x27; : &#x27;Odd&#x27; } { square } 
   );
 }
 export default Memo
 
 
 Output
 
 
 
 
 
 
 useMemo is a little like the useCallback hook, but the difference is that useMemo can store a memorized value from a function, where useCallback stores the memorized function itself.
 
 
 useCallback
 
 
 The useCallback hook is another interesting one and the last section was sort of a spoiler alert for what it does.
 
 
 
 As we just saw, useCallback works like the useMemo hook in that they both use memoization to cache something for later use. While useMemo stores a function’s calculation as a cached value, useCallback stores and returns a function.
 
 
 Use cases
 
 
 Like useMemo, useCallback is a nice performance optimization in that it stores and returns a memoized callback and any of its dependencies without a re-render.
 
 
 Syntax
 
 
 const getMemoizedCallback &#x3D; useCallback (
   () &#x3D;&gt; { doSomething () }, []
 );
 
 
 Example
 
 
 
 { useCallback, useState } from &quot;react&quot;;
 import CallbackChild from &quot;./UseCallback-Child&quot;;
 import &quot;./App.css&quot;
 
 export default function App() {
   const [toggle, setToggle] &#x3D; useState(false);
   const [data, setData] &#x3D; useState(&quot;I am a data that would not change at every render, thanks to the useCallback&quot;);
   const returnFunction &#x3D; useCallback(
     (name) &#x3D;&gt; 
     { return data + name; }, [data]
   );
   return (
     onClick&#x3D;{() &#x3D;&gt; {
       setToggle(!toggle);
     }}
     &gt;
     {&quot; &quot;}
 
     // Click To Toggle
     { toggle &amp;&amp; h1. Toggling me no longer affects any function } 
   ); 
 }
 
 
 
 // The Child component
 import React, { useEffect } from &quot;react&quot;;
 
 function CallbackChild(
   { returnFunction }
 ) {
   useEffect(() &#x3D;&gt; 
     { console.log(&quot;FUNCTION WAS CALLED&quot;); },
     [returnFunction]);
   return { returnFunction(&quot; Hook!&quot;) };
 }
 export default CallbackChild;
 
 
 Output
 
 
 
 
 
 Final thoughts
 
 
 There we go! We just looked at five super handy React hooks that I think often go overlooked. As with many roundups like this, we’re merely scratching the surface of these hooks. They each have their own nuances and considerations to take into account when you use them. But hopefully you have a nice high-level idea of what they are and when they might be a better fit than another hook you might reach for more often.
 
 
 
 The best way to fully understand them is by practice. So I encourage you to practice using these hooks in your application for better understanding. For that, you can get way more in depth by checking out the following resources:
 
 
 
 Intro to React Hooks (Kingsley Silas)Hooks at a Glance (React documentation)Hooks Cheatsheet (Ohans Emmanuel)The Circle of a React Lifecycle (Kingsley Silas)Hooks of React Router (Agney Menon)Testing React Hooks With Enzyme and React Testing Library (Kingsley Silas)
 
 React Hooks: The Deep Cuts originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>In Praise of Shadows</title>
         <link href="https://css-tricks.com/in-praise-of-shadows/"/>
       <updated>2022-07-12T17:08:49.000Z</updated>
       <content type="text">Our dear friend Robin has a new essay called In Praise of Shadows. Now, before you hop over there looking for nuggets on CSS box shadows, text shadows, and shadow filters… this is not that. It’s an essay on photography and what Robin has learned about handing shadows with a camera.
 
 
 
 So, why share this? Because it’s cool as heck that he made an article directed page dedicated to one essay. And you’ll learn a lot about CSS if you crack open DevTools on it:
 
 
 
 
 
 
 
 Centering techniques. Notice how CSS Grid is used on the &lt;body&gt; simply to center the pamphlet. Then Robin reaches for it again on each .frame of the essay to do the same thing with the content.“Faux” background images. Robin could have made a lot of work for himself by creating a CSS class for each .frame to get the background images. Instead, he uses object-fit: cover on inlined HTML &lt;img&gt;s to maintain the aspect ratio while filling the .frame container. (He’s actually written about this before.) That sure saves a lot of CSS’ing, but it also allows him to use alt text if needed. I sorta wonder if a &lt;figure&gt;/&lt;figcaption&gt; structure could’ve worked here instead but I doubt it would provide much additional benefit for what’s going on.Stacking contexts. Another perk of those faux background images? They use absolute positioning which creates a stacking context, allowing Robin to set a z-index: 0 on the images. That way, the text stacks directly on top with z-index: 1. Again, CSS Grid is handling all the centering so things are nicely aligned.Scroll snapping. I always love it when I see CSS scroll snapping in the wild. Robin made a nice choice to use it here, as it really lends to the whole page-turning experience while scrolling through frames. Horizontal scrolling can be maddening, but also extremely elegant when executed well as it is here in how it enhances the narrow-column design. If you want a nice explanation of how it all works, Robin has also written about horizontal scroll snapping.
 
 
 
 If nothing else, Robin is an excellent writer and it’s worth reading anything he publishes, CSS and beyond.
 To Shared Link — Permalink on CSS-Tricks
 In Praise of Shadows originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Technical Writing for Developers</title>
         <link href="https://css-tricks.com/technical-writing-for-developers/"/>
       <updated>2022-07-11T12:50:13.000Z</updated>
       <content type="text">HTML, CSS, JavaScript, Python, PHP, C++, Dart — there are so many programming languages out there and you may even be totally fluent in several of them! But as we aim to write more and better code, the way we write and communicate in everyday language becomes more and more important… and perhaps even overlooked.
 
 
 
 The way we write about and around code is arguably as important as the code itself. And despite where you fall on that line, we can all agree that our words have the potential to both help and hurt code’s effectiveness.
 
 
 
 In this article, I want to outline how these two seemingly distinct fields — programming and writing — can come together and take our developer skills to the next level.
 
 
 
 
 
 
 
 Wait, technical writing? Yes, that’s exactly what I mean. I truly believe we are all writers in one sense or another. And I’m here to give you a primer with writing tips, advice, and examples for how it can make you both a better developer and communicator.
 
 
 
 Table of contents
 
 
 
 Table of contents
 Technical writing is everywhere
 What is good grammar?
 Writing code comments
 Writing pull requests 
 Reporting bugs
 Communicating with clients
 Writing microcopy
 Writing accessible markup
 Conclusion
 Technical writing resources
 
 
 Technical writing is everywhere
 
 
 Last year, the team behind the popular Mac Git client, Tower, polled more than 4,000 developers and found that nearly 50% of them spent between 3-6 hours a day writing code.
 
 
 
 
 
 
 
 And yes, that’s one survey polling a pretty niche group, but I imagine many of us fall somewhere in that range. Whatever the case, a developer isn’t writing code 24/7, because as this poll suggests, we’re spending plenty of time doing other things.
 
 
 
 That might include:
 
 
 
 demoing a new feature,documenting that new feature,updating a work ticket related to that new feature, orbacklogging work to support that new feature.
 
 
 
 Of course, there’s always time for bathroom breaks and Wordle too.
 
 
 
 Anyway, most of the things we typically do involve communicating with people like your team, colleagues, clients, users, and other developers.
 
 
 
 So we do spend a good chunk of our time communicating with humans through words in addition to the communication we have with computers through code. Words are written language. And if we wrote our words better, we’d communicate better. When we communicate better, we’re more likely to get what we want.
 
 
 
 That’s Technical Writing 101.
 
 
 
 
 
 
 
 And it doesn’t even end here.. Some programmers also like to make their own products, which means they need to make marketing part of their job. Technical writing plays a huge role in that too. So, yeah. I think it’s pretty fair to say that technical writing is indeed everywhere.
 
 
 What is good grammar?
 
 
 With so many programming languages out there, the last thing we want is to learn another one.
 
 
 
 Grammar is an integral part of English, and it unlocks the full potential of communication. It makes us more formal, professional, and coherent.
 
 
 
 Let me give you a quick rundown on language.
 
 
 The English syntax
 
 
 Just like programming languages, English has a well-defined syntax, and it starts with words.
 
 
 
 Words are the building blocks of English, and they fall into eight buckets:
 
 
 
 
 
 
 
 
 
 Nouns
 
 
 These can be names of people, animals, places, concepts, and objects.
 
 
 
 Example:CSS is one of the core languages of front-end development.
 
 
 
 
 
 
 Verbs
 
 
 Verbs convey action. Even “is” can be considered an action.
 
 
 
 Example:Marcia codes in the morning and answers emails in the afternoon.
 
 
 
 
 
 
 
 
 Adjectives
 
 
 Adjectives are how we describe nouns. They’re like meta that adds more detail to a sentence to paint a vivid picture.
 
 
 
 Examples:
 
 
 
 CSS is an elegant and poetic language.The HTML for tables is complex and cumbersome.The Box Model is important to understand CSS.
 
 
 
 
 
 
 Prepositions
 
 
 Prepositions create a relationship between a noun and other words, often indicating direction, time, location, and space.
 
 
 
 Examples:
 
 
 
 Did you commit your work to the repo?What is the best approach for this component?We conducted interviews with real users.
 
 
 
 
 
 
 
 
 Adverbs
 
 
 Sometimes actions need to be more specific, so we use adverbs such as “runs fast” and “compiles slowly.” They often end in “-ly.”
 
 
 
 Examples:
 
 
 
 This is easily the best idea of them all.Chip waited patiently for Dale’s feedback.The team worked diligently on the project.
 
 
 
 
 
 
 Conjunctions
 
 
 Conjunctions connect phrases in a sentence. Remember this classic song from the show School House Rocks?
 
 
 
 Examples:
 
 
 
 CSS for styling while HTML is for markup.Yes, I write code, but I also work on design.That fixes the bug. Yet it introduced a new one.
 
 
 
 
 
 
 
 
 Transitions
 
 
 Paragraphs are made of sentences that are connected to each other using transitions.
 
 
 
 Examples:
 
 
 
 There are many programming languages. However, only a few are used in the web industry.First, clone the directory.I like this approach but on the other hand, I know another one.
 
 
 
 
 
 
 Pronouns
 
 
 When nouns become repetitive, we replace them with pronouns such as: “he,” “it,” and “that.”
 
 
 
 Examples:
 
 
 
 CSS is a stylesheet language. We use it to style websites.Tony loves to code and he practices every day.Our customers are tech-savvy because they know code.
 
 
 
 
 
 
 Think of these like UI components: they are modular pieces you can move around to construct a complete and robust sentence, the same way you might piece together a complete and robust UI. Do all of the components need to be there all of the time? Certainly not! Assemble a sentence with the pieces you need to complete the experience, just as you would with an interface.
 
 
 Voice and tone
 
 
 Vocabulary, punctuation, sentence structure, and word choice. These are all the ingredients of English. We use them to share ideas, communicate with our friends and family, and send emails to our coworkers.
 
 
 
 But it’s crucial to consider the sound of our messages. It’s amazing how one exclamation point can completely shift the tone of a message:
 
 
 
 I like programming.I like programming! :)
 
 
 
 It’s easy to confuse voice for tone, and vice versa.
 
 
 
 Voice is what concerns our choice of words, which depends on context. For example, a tutorial for beginners is more likely to use slang and informal language to convey a friendly voice, whereas documentation might be written in a formal, serious, and professional manner in an effort to get straight to the point.
 
 
 
 The same message, written in two different voices:
 
 
 
 Fun: “Expand your social network and stay updated on what’s trending now.”Serious: “Find jobs on one of the largest social networking apps and online jobs market.”
 
 
 
 It’s not unusual to accidentally write messages that come across as condescending, offensive, and unprofessional. This is where tone comes into play. Read your messages out loud, get other people to read them for you, and experiment with your punctuation and sentence structure. That’s how you hone your tone.
 
 
 
 Here’s another way to think of it: your voice never changes, but your tone does. Your voice is akin to who you are as a person, whereas tone is how you respond in a given situation.
 
 
 Active and passive voice
 
 
 A sentence always contains an actor, a verb, and a target. The order in which these come determines if the sentence is written in an active or passive voice.
 
 
 
 The actor comes first in an active voice. For example: “CSS paints the background.”
 
 
 
 Sentences that use an active voice are more straightforward than their counterparts. They’re clearer, shorter, and more understandable — perfect for a more professional voice that gets straight to the point.
 
 
 
 With a passive voice, the actor comes last. (See what I did there?) That means our actor — CSS in this case — comes at the end like this: “The background is painted by CSS.”
 
 
 
 Readers usually convert a passive voice to an active voice in their heads, resulting in more processing time. If you’ve ever heard that writing in an active voice is better, this is usually the reason why. Tech writers prefer the active voice most of the time, with very few exceptions such as citing research: “It has been suggested that …”
 
 
 
 But that doesn’t mean you should always strive for an active voice. Switching from one to the other — even in the same paragraph — can make your content flow more seamlessly from one sentence to another if used effectively.
 
 
 Avoiding mistakes
 
 
 Grammar is all about the structure and correctness of language, and there’s nothing better to achieve that than a quick proofreading of your document. It’s very important to rid your writings of spelling mistakes, grammar issues, and semantic imperfections.
 
 
 
 At the end of this article, I’ll show you the invaluable tools that professionals use to avoid writing mistakes. Obviously, there are built-in spell checkers in just about everything these days; our code editors even have spell-checking and linting plugins to help prevent mistakes. 
 
 
 
 But if you’re looking for a one-stop tool for all-things grammar, Grammarly is one of the most widely-used tools. I’m not getting a kickback for that or anything. It’s just a really great tool that many editors and writers use to write clean and clear content — similar to how you might use Emmet, eslint, or any other linter to write clean and clear code.
 
 
 Writing code comments
 
 
 The things we write for other developers can have a big impact on the overall quality of our work, whether it’s what we write in the code, how we explain the code, or how we give feedback on a piece of code.
 
 
 
 It’s interesting that every programming language comes with a standard set of features to write a comment. They should explain what the code is doing. By that, I don’t mean vague comments like this:
 
 
 
 red *&#x3D; 1.2 // Multiply &#x60;red&#x60; by 1.2 and re-assign it
 
 
 
 Instead, use comments that provide more information:
 
 
 
 red *&#x3D; 1.2 // Apply a &#x27;reddish&#x27; effect to the image
 
 
 
 It’s all about context. “What kind of program am I building?” is exactly the kind of question you should be asking yourself.
 
 
 Comments should add value
 
 
 Before we look at what makes a “good” code comment, here are two examples of lazy comments:
 
 
 
 const age &#x3D; 32 // Initialize &#x60;age&#x60; to 32
 
 
 
 filter: blur(32px); /* Create a blur effect with a 32px radius */
 
 
 
 Remember that the purpose of a comment is to add value to a piece of code, not to repeat it. If you can’t do that, you’re better off just leaving the code as-is. What makes these examples “lazy” is that they merely restate what the code is obviously doing. In this case, the comments are redundant because they tell us what we already know — they aren’t adding value!
 
 
 Comments should reflect the current code
 
 
 Out-of-date comments are no rare sight in large projects; dare I say in most projects.
 
 
 
 Let’s imagine David, a programmer and an all-around cool guy to hang out with. David wants to sort a list of strings alphabetically from A to Z, so he does the obvious in JavaScript:
 
 
 
 cities &#x3D; sortWords(cities) // sort cities from A to Z
 
 
 
 David then realizes that sortWords() actually sorts lists from Z to A. That’s not a problem, as he can simply reverse the output:
 
 
 
 cities &#x3D; sortWords(cities) // sort cities from A to Z
 cities &#x3D; reverse(cities)
 
 
 
 Unfortunately, David didn’t update his code comment.
 
 
 
 Now imagine that I didn’t tell you this story, and all you saw was the code above. You’d naturally think that after running that second line of code, &#x60;cities&#x60; would be sorted from Z to A! This whole confusion fiasco was caused by a stale comment.
 
 
 
 While this might be an exaggerated example, something similar can (and often does) happen if you’re racing against a close deadline. Thankfully, this can be prevented by following one simple rule… change your comments the same time you change the code.
 
 
 
 That’s one simple rule that will save you and your team from a lot of technical debt.
 
 
 
 Now that we know what poorly written comments look like, let’s look at some good examples.
 
 
 Comments should explain unidiomatic code
 
 
 Sometimes, the natural way of doing things isn’t right. Programmers might have to “break” the standards a bit, but when they do, it’s advisable to leave a little comment explaining their rationale:
 
 
 
  function addSetEntry(set, value) {    
   /* Don&#x27;t return &#x60;set.add&#x60; because it&#x27;s not chainable in IE 11. */  
   set.add(value);
   return set;
 }
 
 
 
 That’s helpful, right? If you were responsible for reviewing this code, you may have been tempted to correct it without that comment there explaining what’s up.
 
 
 Comments can identify future tasks
 
 
 Another useful thing to do with comments is to admit that there’s more work to be done.
 
 
 
 // TODO: use a more efficient algorithm
 linearSort(ids)
 
 
 
 This way, you can stay focused on your flow. And at a later date, you (or someone else) can come back and fix it.
 
 
 Comments can link back to the source
 
 
 So, you just found a solution to your problem on StackOverflow. After copy-pasting that code, it’s sometimes a good thing to keep a link to the answer that helped you out so you can come back to it for future reference.
 
 
 
 
 
 
 
 // Adds handling for legacy browsers
 // https://stackoverflow.com/a/XXXXXXX
 
 
 
 This is important because solutions can change. It’s always good to know where your code came from in case it ever breaks.
 
 
 Writing pull requests 
 
 
 Pull requests (PRs) are a fundamental aspect of any project. They sit at the heart of code reviews. And code reviews can quickly become a bottleneck in your team’s performance without good wording.
 
 
 
 A good PR description summarizes what change is being made and why it’s being made. Large projects have a pull request template, like this one adapted from a real example:
 
 
 
 ## Proposed changes
 Describe the big picture of your changes here to communicate to the maintainers why we should accept this pull request.
 
 ## Types of changes
 What types of changes does your code introduce to Appium?
  - [ ] Bugfix (non-breaking change which fixes an issue)
  - [ ] New feature (non-breaking change which adds functionality)
  - ...
 
 ## Checklist
  - [ ] I have read the CONTRIBUTING doc
  - [ ] I have signed the CLA
  - [ ] Lint and unit tests pass locally with my changes
 
 ## Further comments
 If this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did and what alternatives you considered, etc…
 
 
 Avoid vague PR titles
 
 
 Please avoid titles that look like this:
 
 
 
 Fix build.Fix bug.Add patch.
 
 
 
 These don’t even attempt to describe what build, bug, or patch it is we’re dealing with. A little extra detail on what part of the build was fixed, which bug was squashed, or what patch was added can go a long way to establishing better communication and collaboration with your colleagues. It level-sets and gets folks on the same page.
 
 
 
 PR titles are traditionally written in imperative tense. They’re a one-line summary of the entire PR, and they should describe what is being done by the PR.
 
 
 
 Here are some good examples:
 
 
 
 Support custom srcset attributes in NgOptimizedImageDefault image config to 75% image qualityAdd explicit selectors for all built-in ControlValueAccessors
 
 
 Avoid long PRs
 
 
 A large PR means a huge description, and no one wants to review hundreds or thousands of lines of code, sometimes just to end-up dismissing the whole thing!
 
 
 
 Instead, you could:
 
 
 
 communicate with your team through Issues,make a plan,break down the problem into smaller pieces, orwork on each piece separately with its own PR.
 
 
 
 Isn’t it much cleaner now?
 
 
 Provide details in the PR body
 
 
 Unlike the PR title, the body is the place for all the details, including:
 
 
 
 Why is the PR being done?Why is this the best approach?Any shortcomings to the approach, and ideas to solve them if possibleThe bug or ticket number, benchmark results, etc.
 
 
 Reporting bugs
 
 
 Bug reports are one of the most important aspects of any project. And all great projects are built on user feedback. Usually, even after countless tests, it’s the users that find most bugs. Users are also great idealists, and sometimes they have feature ideas; please listen to them!
 
 
 
 For technical projects, all of this stuff is done by reporting issues. A well-written issue is easy for another developer to find and respond to.
 
 
 
 For example, most big projects come with a template:
 
 
 
  &lt;!-- Modified from angular-translate/angular-translate --&gt;
  ### Subject of the issue
  Describe your issue here.
 
  ### Your environment
  * version of angular-translate
  * version of angular
  * which browser and its version
 
  ### Steps to reproduce
  Tell us how to reproduce this issue.
 
  ### Expected behavior
  Tell us what should happen.
 
  ### Actual behavior
  Tell us what happens instead.
 
 
 Gather screenshots
 
 
 Capture the issue using your system’s screen-shooting utility.
 
 
 
 If it’s a screenshot of a CLI program, make sure that the text is clear. If it’s a UI program, make sure the screenshot captures the right elements and states.
 
 
 
 You may need to capture an actual interaction to demonstrate the issue. If that’s the case, try to record GIFs using a screen-recording tool.
 
 
 How to reproduce the problem
 
 
 It’s much easier for programmers to solve a bug when it’s live on their computer. That’s why a good commit message should come with the steps to precisely reproduce the problem.
 
 
 
 Here’s an example:
 
 
 
 Update: you can actually reproduce this error with objects:
 
  &#x60;&#x60;&#x60;html
  &lt;div *ngFor&#x3D;&quot;let value of objs; let i &#x3D; index&quot;&gt;
    &lt;input [ngModel]&#x3D;&quot;objs[i].v&quot; (ngModelChange)&#x3D;&quot;setObj(i, $event)&quot; /&gt;
  &lt;/div&gt;
  &#x60;&#x60;&#x60;
 
  &#x60;&#x60;&#x60;js
  export class OneComponent {
    obj &#x3D; {v: &#x27;0&#x27;};
    objs &#x3D; [this.obj, this.obj, this.obj, this.obj];
  ​
   setObj(i: number, value: string) {
      this.objs[i] &#x3D; {v: value};
   }
  }
  &#x60;&#x60;&#x60;
 
  The bug is reproducible as long as the trackBy function returns the same value for any two entries in the array. So weird behavior can occur with any duplicate values.
 
 
 
 Suggest a cause
 
 
 You’re the one who caught the bug, so maybe you can suggest some potential causes for why it’s there. Maybe the bug only happens after you encounter a certain event, or maybe it only happens on mobile.
 
 
 
 It also can’t hurt to explore the codebase, and maybe identify what’s causing the problem. Then, your Issue will be closed much quicker and you’re likely to be assigned to the related PR.
 
 
 Communicating with clients
 
 
 You may work as a solo freelancer, or perhaps you’re the lead developer on a small team. In either case, let’s say you’re responsible for interfacing with clients on a project. 
 
 
 
 Now, the programmer stereotype is that we’re poor communicators. We’ve been known to use overly technical jargon, tell others what is and is not possible, and even get defensive when someone questions our approach.
 
 
 
 So, how do we mitigate that stereotype? Ask clients what they want, and always listen to their feedback. Here’s how to do that.
 
 
 Ask the right questions
 
 
 Start by making sure that you and the client are on the same page:
 
 
 
 Who is your target audience?What is the goal of the site?Who is your closest competitor and what are they doing right?
 
 
 
 Asking questions is also a good way to write positively, particularly in situations when you disagree with a client’s feedback or decision. Asking questions forces that person to support their own claims rather than you attacking them by defending your own position:
 
 
 
 Are you OK with that even if it comes with an additional performance cost?Does moving the component help us better accomplish our objective?Great, who is responsible to maintain that after launch? Do you know offhand if the contrast between those two colors passes WCAG AA standards?
 
 
 
 Questions are a lot more innocent and promote curiosity over animosity.
 
 
 Sell yourself
 
 
 If you’re making a pitch to a prospective client, you’re going to need to convince them to hire you. Why should the client choose you? It’s important to specify the following:
 
 
 
 Who you areWhat you doWhy you’re a good fit for the jobLinks to relevant work you’ve done
 
 
 
 And once you get the job and need to write up a contract, remember that there’s no content more intimidating than a bunch of legalese. Even though it’s written for design projects, the Contract Killer can be a nice starting point for writing something much friendlier.
 
 
 
 Your attention to detail could be the difference between you and another developer trying to win the same project. In my experience, clients will just as easily hire a develop they think they will enjoy working with than the one who is technically the most competent or experienced for the job.
 
 
 Writing microcopy
 
 
 Microcopy is the art of writing user-friendly UI messages, such as errors. I’ll bet there have been times where you as a developer had to write error messages because they were put on the backburner all the way to launch time.
 
 
 
 That may be why we sometimes see errors like this:
 
 
 
 Error: Unexpected input (Code 693)
 
 
 
 Errors are the last thing that you want your users to deal with. But they do happen, and there’s nothing we can do about it. Here are some tips to improve your microcopy skills.
 
 
 Avoid technical jargon
 
 
 Most people don’t know what a server is, while 100% of programmers do. That’s why it’s not unusual to see uncommon terms written in an error message, like API or “timeout execution.”
 
 
 
 Unless you’re dealing with a technical client or user base, It’s likely that most of your users didn’t take a computer science course, and don’t know how the Internet works, and why a particular thing doesn’’t work. Hence, the error.
 
 
 
 Therefore, a good error message shouldn’t explain why something went wrong, because such explanations might require using scary technical terms. That’s why it’s very important to avoid using technical jargon.
 
 
 Never blame the user
 
 
 Imagine this: I’m trying to log into your platform. So I open my browser, visit your website, and enter my details. Then I’m told: “Your email/password is incorrect.”
 
 
 
 Even though it seems dramatic to think that this message is hostile, it subconsciously makes me feel stupid. Microcopy says that it’s never okay to blame the user. Try changing your message to something less finger-pointy, like this this example adapted from Mailchimp’s login: “Sorry, that email-password combination isn’t right. We can help you recover your account.”
 
 
 
 I’d also like to add the importance of avoiding ALL CAPS and exclamation points! Sure, they can be used to convey excitement, but in microcopy they create a sense of hostility towards the user.
 
 
 Don’t overwhelm the user
 
 
 Using humor in your microcopy is a good idea! It can lighten up the mood, and it’s an easy way to curb the negativity caused by even the worst errors.
 
 
 
 But if you don’t use it perfectly, it can come across as condescending and insulting to the user. That’s just a big risk to take.
 
 
 
 Mailchimp says it well:
 
 
 
 [D]on’t go out of your way to make a joke — forced humor can be worse than none at all. If you’re unsure, keep a straight face.(Emphasis mine)
 
 
 Writing accessible markup
 
 
 We could easily spend an entire article about accessibility and how it relates to technical writing. Heck, accessibility is often included in content style guides, including those for Microsoft and Mailchimp.
 
 
 
 You’re a developer and probably already know so much about accessibility. You may even be one of the more diligent developers that makes accessibility a core part of your workflow. Still, it’s incredible how often accessibility considerations are put on the back burner, no matter how important we all know it is to make accessible online experiences that are inclusive of all abilities.
 
 
 
 So, if you find yourself implementing someone else’s copywriting into your code, writing documentation for other developers, or even writing UI copy yourself, be mindful of some fundamental accessibility best practices, as they round out all the other advice for technical writing.
 
 
 
 Things like:
 
 
 
 Using semantic tags where possible (e.g. &lt;nav&gt;, &lt;header&gt;, &lt;article&gt;, etc.)Following a logical heading structureAdding alt text to imagesWatching for inline semantics (Mandy Michael has an exceptional article on this)
 
 
 
 Andy Bell offers some relatively small things you can do to make content more accessible, and it’s worth your time checking them out. And, just for kicks, John Rhea shows off some neat editing tricks that are possible when we’re working with semantic HTML elements.
 
 
 Conclusion
 
 
 Those were six ways that demonstrate how technical writing and development coincide. While the examples and advice may not be rocket science, I hope that you found them useful, whether it’s collaborating with other developers, maintaining your own work, having to write your own copy in a pinch, or even drafting a project proposal, among other things.
 
 
 
 The bottom line: sharpening your writing skills and putting a little extra effort into your writing can actually make you a better developer.
 
 
 Technical writing resources
 
 
 If you’re interested in technical writing:
 
 
 
 Advice for Technical Writing (Chris Coyier)Google’s Technical Writing GuideTechnical Writing Fundamentals (GitLab)UX Writing: Study Guide (Nielson Norman Group)Write the Docs (Technical writing community)
 
 
 
 If you’re interested in copywriting:
 
 
 
 Copywriting 101 (Copyblogger)What is Copywriting? (Ionos)SEO Copywriting Guide (Semrush)Copywriting is Still Writing (The Guardian)
 
 
 
 If you’re interested in microcopy:
 
 
 
 Introduction to Microcopy (UX Planet)Apple’s Human Interface GuidelinesMicrosoft’s Writing Style GuideMailchimp Content Style Guide
 
 
 
 If you’re interested in using a professional style guide to improve your writing:
 
 
 
 MLA Writing Style GuideAP Writing Style GuideAPA Writing Style GuideChicago Writing Style Guide
 
 
 
 If you’re interested in writing for accessibility:
 
 
 
 Improve the readability of the content on your website (Andy Bell)15 Practices to Improve Your Website Accessibility (Bruce Lawson)Accessibility Testing Tools (Chris Coyier)Why Don’t Developers Tke Accessibility Seriously? (Melanie Sumner)Naming things to improve accessibility (Hidde de Vries)
 
 Technical Writing for Developers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Collective Nouns for the Web</title>
         <link href="https://css-tricks.com/collective-nouns-for-the-web/"/>
       <updated>2022-07-01T19:15:00.000Z</updated>
       <content type="text">Melanie Sumner has this super-specific collection of web-related nouns for describing a group or set of something. You know how there’s a school or fish or a herd of cows? Same sort of thing, but for funny web jargon.
 
 
 
 
 
 
 
 Things like:
 
 
 
 A vanity is ten (10) or more domains owned by a single person, where very few are in use.A parade of RSS feeds is when you have so many RSS feeds that you have to scroll to see them all.
 
 
 
 Don’t lie, Melanie — you’ve gotta vanity go domains, don’t ya? 😂
 
 
 
 A few off the top of my head:
 
 
 
 A braintrust is a meeting of company bigwigs indirectly related to a project but with the power to “swoop and poop” on your work.A diatribe is a Pull Request with so many comments that the original scope of the work has changed.A gommit is a group of commits (group + commit) submitted as a single commit.A hot minute is the number of hours spent fixing a bug that winds up being a simple typo.A roost is four (4) or more levels of nesting in Sass.A tababyte is a unit that represents ten (10) open browser tabs in the same window. For example, two tababytes are equal to 20 open tabs.
 
 
 
 Fun times! Anything you’d add to the list? You can submit ideas to the repo. 
 To Shared Link — Permalink on CSS-Tricks
 Collective Nouns for the Web originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: Going 3D!</title>
         <link href="https://css-tricks.com/single-element-loaders-going-3d/"/>
       <updated>2022-07-01T13:24:09.000Z</updated>
       <content type="text">For this fourth and final article of our little series on single-element loaders, we are going to explore 3D patterns. When creating a 3D element, it’s hard to imagine that just one HTML element is enough to simulate something like all six faces of a cube. But  maybe we can get away with something more cube-like instead by showing only the front three sides of the shape — it’s totally possible and that’s what we’re going to do together.
 
 
 
 
 
 
 
 Article series
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — you are here
 
 
 
 The split cube loader
 
 
 Here is a 3D loader where a cube is split into two parts, but is only made with only a single element:
 
 
 
 CodePen Embed Fallback
 
 
 
 Each half of the cube is made using a pseudo-element:
 
 
 
 
 
 
 
 Cool, right?! We can use a conic gradient with CSS clip-path on the element’s ::before and ::after pseudos to simulate the three visible faces of a 3D cube. Negative margin is what pulls the two pseudos together to overlap and simulate a full cube. The rest of our work is mostly animating those two halves to get neat-looking loaders!
 
 
 
 Let’s check out a visual that explains the math behind the clip-path points used to create this cube-like element:
 
 
 
 
 
 
 
 We have our variables and an equation, so let’s put those to work. First, we’ll establish our variables and set the sizing for the main .loader element:
 
 
 
 .loader {
   --s: 150px; /* control the size */
   --_d: calc(0.353 * var(--s)); /* 0.353 &#x3D; sin(45deg)/2 */
 
   width: calc(var(--s) + var(--_d)); 
   aspect-ratio: 1;
   display: flex;
 }
 
 
 
 Nothing too crazy so far. We have a 150px square that’s set up as a flexible container. Now we establish our pseudos:
 
 
 
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   flex: 1;
 }
 
 
 
 Those are two halves in the .loader container. We need to paint them in, so that’s where our conic gradient kicks in:
 
 
 
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   flex: 1;
   background:
     conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),
     #fff 135deg, #666 0 270deg, #aaa 0);
 }
 
 
 
 The gradient is there, but it looks weird. We need to clip it to the element:
 
 
 
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   flex: 1;
   background:
     conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),
     #fff 135deg, #666 0 270deg, #aaa 0);
   clip-path:
     polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));
 }
 
 
 
 Let’s make sure the two halves overlap with a negative margin:
 
 
 
 .loader::before {
   margin-right: calc(var(--_d) / -2);
 }
 
 .loader::after {
   margin-left: calc(var(--_d) / -2);
 }
 
 
 
 Now let’s make ‘em move!
 
 
 
 .loader::before,
 .loader::after {
   /* same as before */
   animation: load 1.5s infinite cubic-bezier(0, .5, .5, 1.8) alternate;
 }
 
 .loader::after {
   /* same as before */
   animation-delay: -.75s
 }
 
 @keyframes load{
   0%, 40%   { transform: translateY(calc(var(--s) / -4)) }
   60%, 100% { transform: translateY(calc(var(--s) / 4)) }
 }
 
 
 
 Here’s the final demo once again:
 
 
 
 CodePen Embed Fallback
 
 
 The progress cube loader
 
 
 Let’s use the same technique to create a 3D progress loader. Yes, still only one element!
 
 
 
 CodePen Embed Fallback
 
 
 
 We’re not changing a thing as far as simulating the cube the same way we did before, other than changing the loader’s height and aspect ratio. The animation we’re making relies on a surprisingly easy technique where we update the width of the left side while the right side fills the remaining space, thanks to flex-grow: 1.
 
 
 
 The first step is to add some transparency to the right side using opacity:
 
 
 
 CodePen Embed Fallback
 
 
 
 This simulates the effect that one side of the cube is filled in while the other is empty. Then we update the color of the left side. To do that, we either update the three colors inside the conic gradient or we do it by adding a background color with a background-blend-mode:
 
 
 
 .loader::before {
   background-color: #CC333F; /* control the color here */
   background-blend-mode: multiply;
 }
 
 
 
 This trick only allows us to update the color only once. The right side of the loader blends in with the three shades of white from the conic gradient to create three new shades of our color, even though we’re only using one color value. Color trickery!
 
 
 
 CodePen Embed Fallback
 
 
 
 Let’s animate the width of the loader’s left side:
 
 
 
 CodePen Embed Fallback
 
 
 
 Oops, the animation is a bit strange at the beginning! Notice how it sort of starts outside of the cube? This is because we’re starting the animation at the 0% width. But due to the clip-path and negative margin we’re using, what we need to do instead is start from our --_d variable, which we used to define the clip-path points and the negative margin:
 
 
 
 @keyframes load {
   0%,
   5% {width: var(--_d); }
   95%,
   100% {width: 100%; }
 }
 
 
 
 That’s a little better:
 
 
 
 CodePen Embed Fallback
 
 
 
 But we can make this animation even smoother. Did you notice we’re missing a little something? Let me show you a screenshot to compare what the final demo should look like with that last demo:
 
 
 
 
 
 
 
 It’s the bottom face of the cube! Since the second element is transparent, we need to see the bottom face of that rectangle as you can see in the left example. It’s subtle, but should be there!
 
 
 
 We can add a gradient to the main element and clip it like we did with the pseudos:
 
 
 
 background: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;
 
 
 
 Here’s the full code once everything is pulled together:
 
 
 
 .loader {
   --s: 100px; /* control the size */
   --_d: calc(0.353*var(--s)); /* 0.353 &#x3D; sin(45deg) / 2 */
 
   height: var(--s); 
   aspect-ratio: 3;
   display: flex;
   background: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;
   clip-path: polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));
 }
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   clip-path: inherit;
   background:
     conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),
      #fff 135deg, #666 0 270deg, #aaa 0);
 }
 .loader::before {
   background-color: #CC333F; /* control the color here */
   background-blend-mode: multiply;
   margin-right: calc(var(--_d) / -2);
   animation: load 2.5s infinite linear;
 }
 .loader:after {
   flex: 1;
   margin-left: calc(var(--_d) / -2);
   opacity: 0.4;
 }
 
 @keyframes load {
   0%,
   5% { width: var(--_d); }
   95%,
   100% { width: 100%; }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 That’s it! We just used a clever technique that uses pseudo-elements, conic gradients, clipping, background blending, and negative margins to get, not one, but two sweet-looking 3D loaders with nothing more than a single element in the markup.
 
 
 More 3D
 
 
 We can still go further and simulate an infinite number of 3D cubes using one element — yes, it’s possible! Here’s a grid of cubes:
 
 
 
 CodePen Embed Fallback
 
 
 
 This demo and the following demos are unsupported in Safari at the time of writing.
 
 
 
 Crazy, right? Now we’re creating a repeated pattern of cubes made using a single element… and no pseudos either! I won’t go into fine detail about the math we are using (there are very specific numbers in there) but here is a figure to visualize how we got here:
 
 
 
 
 
 
 
 We first use a conic-gradient to create the repeating cube pattern. The repetition of the pattern is controlled by three variables:
 
 
 
 --size: True to its name, this controls the size of each cube.--m: This represents the number of columns.--n: This is the number of rows.--gap: this the gap or distance between the cubes
 
 
 
 .cube {
   --size: 40px; 
   --m: 4; 
   --n: 5;
   --gap :10px;
 
   aspect-ratio: var(--m) / var(--n);
   width: calc(var(--m) * (1.353 * var(--size) + var(--gap)));
   background:
     conic-gradient(from -90deg at var(--size) calc(0.353 * var(--size)),
       #249FAB 135deg, #81C5A3 0 270deg, #26609D 0) /* update the colors here */
     0 0 / calc(100% / var(--m)) calc(100% / var(--n));
 }
 
 
 
 Then we apply a mask layer using another pattern having the same size. This is the trickiest part of this idea. Using a combination of a linear-gradient and a conic-gradient we will cut a few parts of our element to keep only the cube shapes visible.
 
 
 
 .cube {
   /* etc. */
   mask: 
     linear-gradient(to bottom right,
        #0000 calc(0.25 * var(--size)),
        #000 0 calc(100% - calc(0.25 * var(--size)) - 1.414 * var(--gap)),
        #0000 0),
     conic-gradient(from -90deg at right var(--gap) bottom var(--gap), #000 90deg, #0000 0);  
   mask-size: calc(100% / var(--m)) calc(100% / var(--n));
   mask-composite: intersect;
 }
 
 
 
 The code may look a bit complex but thanks to CSS variables all we need to do is to update a few values to control our matrix of cubes. Need a 10⨉10 grid? Update the --m and --n variables to 10. Need a wider gap between cubes? Update the --gap value. The color values are only used once, so update those for a new color palette!
 
 
 
 Now that we have another 3D technique, let’s use it to build variations of the loader by playing around with different animations. For example, how about a repeating pattern of cubes sliding infinitely from left to right?
 
 
 
 CodePen Embed Fallback
 
 
 
 This loader defines four cubes in a single row. That means our --n value is 4 and --m is equal to 1 . In other words, we no longer need these!
 
 
 
 Instead, we can work with the --size and --gap variables in a grid container:
 
 
 
 .loader {
   --size: 70px;
   --gap: 15px;  
 
   width: calc(3 * (1.353 * var(--size) + var(--gap)));
   display: grid;
   aspect-ratio: 3;
 }
 
 
 
 This is our container. We have four cubes, but only want to show three in the container at a time so that we always have one sliding in as one is sliding out. That’s why we are factoring the width by 3 and have the aspect ratio set to 3 as well.
 
 
 
 Let’s make sure that our cube pattern is set up for the width of four cubes. We’re going to do this on the container’s ::before pseudo-element:
 
 
 
 .loader::before { 
   content: &quot;&quot;;
   width: calc(4 * 100% / 3);
   /*
      Code to create four cubes
   */
 }
 
 
 
 Now that we have four cubes in a three-cube container, we can justify the cube pattern to the end of the grid container to overflow it, showing the last three cubes:
 
 
 
 .loader {
   /* same as before */
   justify-content: end;
 }
 
 
 
 Here’s what we have so far, with a red outline to show the bounds of the grid container:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now all we have to do is to move the pseudo-element to the right by adding our animation:
 
 
 
 @keyframes load {
   to { transform: translate(calc(100% / 4)); }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Did you get the trick of the animation? Let’s finish this off by hiding the overflowing cube pattern and by adding a touch of masking to create that fading effect that the start and the end:
 
 
 
 .loader {
   --size: 70px;
   --gap: 15px;  
   
   width: calc(3*(1.353*var(--s) + var(--g)));
   display: grid;
   justify-items: end;
   aspect-ratio: 3;
   overflow: hidden;
   mask: linear-gradient(90deg, #0000, #000 30px calc(100% - 30px), #0000);
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 We can make this a lot more flexible by introducing a variable, --n, to set how many cubes are displayed in the container at once. And since the total number of cubes in the pattern should be one more than --n, we can express that as calc(var(--n) + 1).
 
 
 
 Here’s the full thing:
 
 
 
 CodePen Embed Fallback
 
 
 
 OK, one more 3D loader that’s similar but has the cubes changing color in succession instead of sliding:
 
 
 
 CodePen Embed Fallback
 
 
 
 We’re going to rely on an animated background with background-blend-mode for this one:
 
 
 
 .loader {
   /* ... */
   background:
     linear-gradient(#ff1818 0 0) 0% / calc(100% / 3) 100% no-repeat,
     /* ... */;
   background-blend-mode: multiply;
   /* ... */
   animation: load steps(3) 1.5s infinite;
 }
 @keyframes load {
   to { background-position: 150%; }
 }
 
 
 
 I’ve removed the superfluous code used to create the same layout as the last example, but with three cubes instead of four. What I am adding here is a gradient defined with a specific color that blends with the conic gradient, just as we did earlier for the progress bar 3D loader.
 
 
 
 From there, it’s animating the background gradient’s background-position as a three-step animation to make the cubes blink colors one at a time.
 
 
 
 If you are not familiar with the values I am using for background-position and the background syntax, I highly recommend one of my previous articles and one of my Stack Overflow answers. You will find a very detailed explanation there.
 
 
 
 Can we update the number of cubes to make it variables?
 
 
 
 Yes, I do have a solution for that, but I’d like you to take a crack at it rather than embedding it here. Take what we have learned from the previous example and try to do the same with this one — then share your work in the comments!
 
 
 Variations galore!
 
 
 Like the other three articles in this series, I’d like to leave you with some inspiration to go forth and create your own loaders. Here is a collection that includes the 3D loaders we made together, plus a few others to get your imagination going:
 
 
 
 CodePen Embed Fallback
 
 
 That’s a wrap
 
 
 I sure do hope you enjoyed spending time making single element loaders with me these past few weeks. It’s crazy that we started with seemingly simple spinner and then gradually added new pieces to work ourselves all the way up to 3D techniques that still only use a single element in the markup. This is exactly what CSS looks like when we harness its powers: scalable, flexible, and reusable.
 
 
 
 Thanks again for reading this little series! I’ll sign off by reminding you that I have a collection of more than 500 loaders if you’re looking for more ideas and inspiration.
 
 
 
 Article series
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — you are here
 
 
 Single Element Loaders: Going 3D! originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Bunny Fonts</title>
         <link href="https://css-tricks.com/bunny-fonts/"/>
       <updated>2022-06-30T17:28:57.000Z</updated>
       <content type="text">Bunny Fonts bills itself as the “privacy-first web font platform designed to put privacy back into the internet.” According to its FAQ:
 
 
 
 With a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user’s personal data into their own hands.
 
 
 
 Hard for my mind not to go straight to Google Fonts. Bunny Fonts even says they are a drop-in replacement for Google Fonts. It offers the same open source fonts and holds the same API structure used by Google Fonts. 
 
 
 
 
 
 
 
 Now, I’m no GDPR expert but the possibility of Google collecting data through its Fonts API is hardly unsurprising or even unexpected. I was curious to check out Google’s privacy statement for Fonts:
 
 
 
 The Google Fonts API logs the details of the HTTP request, which includes the timestamp, requested URL, and all HTTP headers (including referrer and user agent string) provided in connection with the use of our CSS API.IP addresses are not logged.
 
 
 
 Comparing that to what Bunny Fonts says in its FAQ:
 
 
 
 When using Bunny Fonts, no personal data or logs are stored. All the requests are processed completely anonymously.
 
 
 
 Or perhaps more thoroughly explained on the bunny.net GDPR statement:
 
 
 
 In most cases, the data held and collected by bunny.net does not contain any user identifiable data. In some cases, which depend on how you are using bunny.net and how your website is structured, personal data may be collected from your users. Such information includes hosting user uploaded content as well as personal data that might be transmitted in the URL, User-Agent or Referer headers of the HTTP protocol.
 
 
 
 Sounds pretty similar, right? Well, it may not have been that similar earlier this year when a German court ruled that embedded Google Fonts violated GDPR compliance. It appears that one line in the Google Fonts privacy statement about IP addresses came after the ruling, once the API scrubbed them from collected data.
 
 
 
 So, do you need to ditch Google Fonts to be GDPR compliant? I would imagine not if IP addresses were the sole concern, but I’ll leave that for folks who know the rules to comment on that.
 
 
 
 But if you are concerned about Google Font’s GDPR compliance, I guess Bunny Fonts is worth a look! And seeing that it’s powered by bunny.net’s CDN services, you should get pretty comparable performance marks.
 To Shared Link — Permalink on CSS-Tricks
 Bunny Fonts originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Text-overflow: ellipsis considered harmful</title>
         <link href="https://css-tricks.com/text-overflow-ellipsis-considered-harmful/"/>
       <updated>2022-06-30T13:38:16.000Z</updated>
       <content type="text">Eric Eggert:
 
 
 
 There are a few legitimate use cases for this technique. For example, you might have a table with titles and descriptions. To preserve more space for the title, you constrain the description to one line on small viewports to the one-line and you repeat the description on the detail page for this item.However, I often see it used on items like buttons or even form labels to make them look nicer(?) or when aligning them vertically. But once you change the viewport or resize the text, the end of the text disappears.
 
 
 
 I think “… if used in certain situations” belongs there, but it certainly makes for a better blog post title without it. As Eric says, there are legitimate use cases for truncating text. Maybe only a few, but legitimate nonetheless.
 
 
 
 
 
 
 
 The ultimate goal is to prevent “losing” data, something that can certainly happen in CSS. Text that inadvertently overflows a container is lost in the sense that it’s simply not there. And if that text is simply not there, users will miss it, even if it is the best and most well-crafted call to action ever published to the web.
 
 
 
 Eric points out that there is no way to make the text truncated by text-overflow: ellipsis visible. Once it’s gone, it’s gone (although screen readers seem to announce it). It’s practically lost data. You might be OK with that. That’s cool as long as you know what’s happening and it’s intended.
 
 
 
 But here’s what Eric says that made me want to share this:
 
 
 
 Don’t constrain the content to fit your design, make your CSS flexible to handle longer words gracefully.
 
 
 
 Again, you might want to conform content to the design. But I’d probably argue, like Eric, that the design should adapt to the content rather than the other way around. I have a hard time recalling any situation where the text on a page is unimportant or without purpose to the extent that I’d be cool cutting if off at any arbitrary point determined by a CSS property. Maybe an archive of blog posts where each post shows an excerpt of the post content before truncating, but that’s not exactly a use case for text-overflow: ellipse.
 
 
 
 CSS has the tools to make a flexible design that accounts for varying lengths of text. So maybe err on the side of writing defensive CSS… CSS that anticipates issues and knows how to gracefully handle different content scenarios. text-overflow: ellipsis might be part of your CSS arsenal for that. But it might also be throwing the baby out with the bath water. Worth asking whether losing that data is worth the cost of what that content is supposed to do before giving giving it a haircut.
 
 
 
 While we’re talking about truncating text…
 
 
 
     		
     
       
 
   
     
                 
         Link
       
 
     on
 
     Oct 1, 2021  
 
   
     
       Line Clampin’ (Truncating Multiple Line Text)    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Link
       
 
     on
 
     Sep 20, 2021  
 
   
     
       Embracing Asymmetrical Design    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Link
       
 
     on
 
     Jul 21, 2020  
 
   
     
       Using Flexbox and text ellipsis together    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Link
       
 
     on
 
     Sep 4, 2019  
 
   
     
       Multiline truncated text with “show more” button    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
     
   
 To Shared Link — Permalink on CSS-Tricks
 Text-overflow: ellipsis considered harmful originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How I Chose an Animation Library for My Solitaire Game</title>
         <link href="https://css-tricks.com/choosing-an-animation-library-for-solitaire/"/>
       <updated>2022-06-29T12:55:44.000Z</updated>
       <content type="text">There is an abundance of both CSS and JavaScript libraries for animation libraries out there. So many, in fact, that choosing the right one for your project can seem impossible. That’s the situation I faced when I decided to build an online Solitaire game. I knew I’d need an animation library, but which was the right one to choose?
 
 
 
 In this article, I’ll go through which considerations I made, what to look out for and present you with some of the most popular libraries available. I’ll go through some real-world examples with you to illustrate my points, and in the end, hopefully, you’ll be better equipped than me when I first had to choose an animation library.
 
 
 
 
 
 
 
 Your mileage with this advice may vary, of course. Everything I’m sharing here is specific to a thing I wanted to build. Your project may have completely different requirements and priorities and that’s OK. I think what’s important here is getting a first-hand account of thinking like a front-end developer with a particular goal.
 
 
 
 Speaking of which, I do consider myself a front-end developer but my background is super heavy in design. So I know code, but not to the extent of someone who is a JavaScript engineer. Just wanted to clear that up because experience can certainly impact the final decision.
 
 
 Here’s the goal
 
 
 Before we get into any decision-making let’s take a look at the sorts of animations I needed to make in this CSS-Tricks-ified version of the game:
 
 
 
 
   
     @media (max-width: 800px) {
       #solitaire_embed &gt; div {
         padding-bottom: 90% !important; /* Change aspect ratio on mobile */
       }
     }
     @media (max-width: 568px) {
       #solitaire_embed &gt; div {
         padding-bottom: 100% !important; /* Change aspect ratio on mobile */
       }
     }
     @media (max-width: 414px) {
       #solitaire_embed &gt; div {
         padding-bottom: 120% !important; /* Change aspect ratio on mobile */
       }
     }
   
   
     
     
   
 
 
 
 
 Pretty sweet, right? There’s nothing exactly trivial about these animations. There’s a lot going on — sometimes simultaneously — and a lot to orchestrate. Plus, a majority of the animations are triggered by user interactions. So, that left me with a few priorities heading into my decision:
 
 
 
 Smooth animations: The way animations are applied can have a big impact on whether they run smoothly, or display a little choppiness.Performance: Adopting any library is going to add weight to a project and I wanted my game to be as lean as possible.Convenience: I wanted a nice, clean syntax that makes it easier to write and manage the animations. I’d even trade a little extra convenience for a small performance cost if it allows me to write better, more maintainable code. Again, this bodes well for a designer-turned-developer.Browser support: Of course I wanted my game to work on any modern browser using some form of progressive enhancement to prevent completely borking legacy browsers. Plus, I definitely wanted  some future-proofing.
 
 
 
 That’s what I took with me as I went in search of the right tool for this particular job.
 
 
 Choosing between CSS or JavaScript animation libraries
 
 
 The first thing I considered when choosing an animation library was whether to go with a CSS or JavaScript-based library. There are lots of great CSS libraries, many of them with excellent performance which was a high priority for me. I was looking to do some heavy-duty animations, like the  ability to sequence animations and get callbacks on animation completion. That’s all totally possible with pure CSS — still, it’s a lot less smooth than what most JavaScript libraries offer.
 
 
 
 Let’s see how a simple sequenced animation looks in CSS and compare it to jQuery, which has plenty of built-in animation helpers:
 
 
 
 CodePen Embed Fallback
 
 
 
 The animations look the same but are created differently. To make the CSS animation, first, we have to define the keyframe animation in our CSS and attach it to a class:
 
 
 
 .card.move {
   animation : move 2s;
 }
 
 @keyframes move {
   0% { left: 0 }
   50% { left: 100px }
   100% { left: 0 }
 }
 
 
 
 We then execute the animation using JavaScript and listen for a CSS callback on the element:
 
 
 
 var cardElement &#x3D; document.getElementsByClassName(&quot;card&quot;)[0];
 var statusElement &#x3D; document.getElementsByClassName(&quot;status&quot;)[0];
 
 cardElement.classList.add(&quot;move&quot;);
 statusElement.innerHTML &#x3D; &quot;Animating&quot;
 
 var animationEndCallback &#x3D; function() {
   cardElement.classList.remove(&quot;move&quot;);
   statusElement.innerHTML &#x3D; &quot;Inactive&quot;
 }
 
 cardElement.addEventListener(&quot;webkitAnimationEnd&quot;, animationEndCallback);
 cardElement.addEventListener(&quot;oAnimationEnd&quot;, animationEndCallback); 
 cardElement.addEventListener(&quot;antionend&quot;, animationEndCallback);
 
 
 
 Having things happen in different places might be fine in a simple example like this, but it can become very confusing once things get a bit more complex. 
 
 
 
 Compare this to how the animation is done with jQuery:
 
 
 
 $(&quot;.status&quot;).text(&quot;Animating&quot;)
 $( &quot;.card&quot; ).animate({
   left: &quot;100px&quot;
 }, 1000);
 $( &quot;.card&quot; ).animate({
   left: 0
 }, 1000, function() {
   $(&quot;.status&quot;).text(&quot;Inactive&quot;)
 });
 
 
 
 Here, everything happens in the same place, simplifying things should the animations grow more complex in the future.
 
 
 
 It seemed clear that a JavaScript library was the right way to go, but which was the right one to choose for my Solitaire game? I mean, jQuery is great and still widely used even today, but that’s not something I want to hang my hat on. There are plenty of JavaScript animation libraries, so I wanted to consider something built specifically to handle the type of heavy animations I had in mind.
 
 
 Choosing a JavaScript animation library
 
 
 It quickly became apparent to me that there’s no lack of JavaScript animation libraries and new, exciting technologies. They all have benefits and drawbacks, so let’s go through some of the ones I considered and why.
 
 
 
 The Web Animations API is one such case that might replace many JavaScript animation libraries in the future. With it, you’ll be able to create complex staggered animations without loading any external libraries and with the same performance as CSS animations. The only drawback is that not all browsers support it yet. 
 
 
 
 The &lt;canvas&gt; element presents another exciting opportunity. In it, we can animate things with JavaScript, as we would with the DOM, but the animation is rendered as raster, which means we can make some high-performance animations. The only drawback is that the canvas element is essentially rendered as an image in the DOM, so if we’re looking for pixel-perfection, we might be out of luck. As someone acutely in tune with design, this was a dealbreaker for me.
 
 
 
 I needed something tried and tested, so I knew I probably had to go with one of the many JavaScript libraries. I started looking at libraries and narrowed my choices to Anime.js and GSAP. They both seemed to handle complex animations well and had excellent notes on performance. Anime is a well-maintained library with over 42.000 stars on GitHub, while GSAP is a super popular, battle-tested library with a thriving community.
 
 
 
 An active community was critical to me since I needed a place to ask for help, and I didn’t want to use a library that might later be abandoned. I considered this as part of my convenience requirements.
 
 
 Sequencing animations and callbacks
 
 
 Once I had my choices narrowed down, the next step was to implement a complex animation using my two libraries. A recurrent animation in a solitaire game is that of a card moving somewhere and then turning over, so let’s see how that looks:
 
 
 
 CodePen Embed Fallback
 
 
 
 Both animations look great! They’re smooth, and implementing both of them was pretty straightforward. Both libraries had a timeline function that made creating sequences a breeze. This is how the implementation looks in AnimeJS:
 
 
 
 var timeline &#x3D; anime.timeline({
   begin: function() {
     $(&quot;.status&quot;).text(&quot;Animating&quot;)
   },
   complete: function() {
     $(&quot;.status&quot;).text(&quot;Inactive&quot;)
   }
 });
 
 timeline.add({
   targets: &#x27;.card&#x27;,
   left: [0, 300],
   easing: &#x27;easeInOutSine&#x27;,
   duration: 500
 }).add({
   targets: &#x27;.card .back&#x27;,
   rotateY: [0, 90],
   easing: &#x27;easeInSine&#x27;,
   duration: 200
 }).add({
   targets: &#x27;.card .front&#x27;,
   rotateY: [-90, 0],
   easing: &#x27;easeOutSine&#x27;,
   duration: 200
 })
 
 
 
 Anime’s timeline() function comes built-in with callbacks on beginning and ending the animation, and creating the sequence is as easy as appending the sequential animations. First, I move the card, then I turn my back-image 90 degrees, so it goes out of view, and then I turn my front-image 90 degrees, so it comes into view.
 
 
 
 The same implementation using GSAP’s timeline() function looks very similar:
 
 
 
 var timeline &#x3D; gsap.timeline({
   onStart: function() {
     $(&quot;.status&quot;).text(&quot;Animating&quot;)
   },
   onComplete: function() {
     $(&quot;.status&quot;).text(&quot;Inactive&quot;)
   }
 });
 
 timeline.fromTo(&quot;.card&quot;, {
   left: 0
 }, {
   duration: 0.5,
   left: 300
 }).fromTo(&quot;.card .back&quot;, {
   rotationY: 0
 }, {
   rotationY: 90,
   ease: &quot;power1.easeIn&quot;,
   duration: 0.2
 }).fromTo(&quot;.card .front&quot;, {
   rotationY: -90
 }, {
   rotationY: 0,
   ease: &quot;power1.easeOut&quot;,
   duration: 0.2
 })
 
 
 Decision time
 
 
 The main difference between Anime and GSAP appears to be the syntax, where GSAP might be a little more elaborate. I was stuck with two great libraries that had very similar functionality, were able to deal with complex animation, and had a thriving community. It seemed like I had a tie race!
 
 
 
 PriorityAnimeGSAPSmooth animations✅✅Performance✅✅Convenience✅✅Browser support✅✅
 
 
 
 So, what made me choose one library over the other?
 
 
 
 I was very concerned about how the library would act under pressure. Having laggy animations in a game like Solitaire can greatly impact how fun it is to play the game. I knew I wouldn’t be able to fully see how the library performed before I created the game. Luckily, GSAP had made a stress test that compared different animation libraries to each other, including Anime.
 
 
 
 CodePen Embed Fallback
 
 
 
 Looking at that, GSAP certainly looked to be the superior library for dealing with loads of complex animations. GSAP was giving me upwards of 26 frames per second on a heavy animation that Anime was only able to top out at 19.  After reading up on GSAP more and looking into their forums, it became clear that performance was of the highest priority to the guys behind GSAP.
 
 
 
 And even though both GSAP and Anime have been around a while, Anime’s repo has been sitting somewhat dormant a couple of years while GSAP had made commits in the past couple of months.
 
 
 
 I ended up using GSAP and haven’t regretted my decision!
 
 
 
 How about you? Does any of this square with how you evaluate and compare front-end tooling? Are there other priorities you might have considered (e.g. accessibility, etc.) in a project like this? Or do you have a project where you had to pare down your choices from a bunch of different options? Please share in the comments because I’d like to know! 
 
 
 
 Oh, and if you want to see how it looks when animating a whole deck of cards, you can head over to my site and play a game of Solitaire. Have fun!
 
 How I Chose an Animation Library for My Solitaire Game originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Help Shape the Future of CSS-Tricks!</title>
         <link href="https://css-tricks.com/help-shape-the-future-of-css-tricks/"/>
       <updated>2022-06-28T19:52:48.000Z</updated>
       <content type="text">Head’s up! The survey closed on July 12, 2022. We got tons of responses — thanks to everyone for helping us out!
 
 
 
 Hey, so it’s been a minute since we announced that CSS-Tricks is now part of the DigitalOcean family. Things are pretty much business as usual and hopefully it feels that way to you, too. Now that we’re getting settled, we’re eager to start poking at the future of this site.
 
 
 
 What sort of things are we poking at? Well, that’s where you come in. You see, there’s no shortage of ideas for CSS-Tricks, but we only want to work on things that continue to make CSS-Tricks one of the spots you come to time and again for all things front-end (including actual CSS tricks).
 
 
 
 So, we put together a short little survey for you. Nothing intense, just a few questions to help us vet those ideas and ultimately shape the future of CSS-Tricks.
 
 
 
 
 
 
 
 
 Take the survey!
 
 
 
 
 Thanks so much for your help! And while I have you, thanks for continuing to hang with us. In the seven years I’ve been working here at CSS-Tricks, I know this site wouldn’t even be here today without y’all. Here’s to the future of CSS-Tricks and learning together!
 
 
 
 CSS-Tricks Newsletter
 
 
 Oh, and one more update for all of you who miss the newsletter: it will be back! But we had to drop a ton of you off the list (seriously, like 80% of all subscribers) to be compliant with legal stuff that’s over my head. No worries, though, because you can re-subscribe right down here with your email address.
 
 
 Help Shape the Future of CSS-Tricks! originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>My Dumbest CSS Mistakes</title>
         <link href="https://css-tricks.com/my-dumbest-css-mistakes/"/>
       <updated>2022-06-28T15:10:31.000Z</updated>
       <content type="text">We all make mistakes in our code. It happens! I know if I had one of those “Days Since Last Mistake” signs hanging over my desk, a big ol’ goose egg would be hovering above me all the time. It doesn’t have to be big mistakes, either. My clumsy self has committed small errors to repos ranging from typos all the way to complete npm module directories.
 
 
 
 Whooooooops.
 
 
 
 That’s one of the things I really love about CSS: it’s forgiving as heck. If it doesn’t understand a typo, it keeps looking up the cascade in search of a match. None of that stuff where one out of place characters breaks a site and takes no prisoners. But it’s still embarrassing when CSS mistakes pop up!
 
 
 
 
 
 
 
 Like this one I find myself making way more times than I’d like to admit:
 
 
 
 .element {
   display: flexbox; /* 🤦‍♂️ */
 }
 
 
 
 Or when I try setting a gradient without a background property:
 
 
 
 .gradient {
   linear-gradient(45deg, rgb(50% 100% 90%), rgb(62% 85% 93%));
 }
 
 
 
 I hate how close X and C are on a keyboard because I can’t count how many times I’m blazing through something and mistake px for pc units.
 
 
 
 .element {
   font-size: 16pc; /* I meant pixels! */
 }
 
 
 
 Another CSS mistake I catch every so often is one I know many other folks make because I spot it too often in blog posts with code snippets:
 
 
 
 // This is not a CSS comment.
 .element {
   /* This is a CSS comment. */
 }
 
 
 
 Have you ever forgotten to use var() around a CSS variable? I sure have.
 
 
 
 .element {
   color: --primary-color;
 }
 
 
 
 Speaking of CSS variables, naming them is hard (like everything else) and I often use some incorrect version of a variable that I named!
 
 
 
 :root {
   --color-primary: #FF5722;
   --color-secondary: #3E2723;
 }
 
 /* Much later on... */
 
 .element {
   color: var(--primary-color); /* 🙃 */
 }
 
 
 
 Yes, I have indeed copied a snippet of CSS before only to have fancy quotes get in the way of making it work:
 
 
 
 .element::before {
   content: “”; /* Should be &quot;&quot; */
 }
 
 
 
 And, yes, I have spent way too long figuring out those quotes were the culprit.
 
 
 
 Looking at that last one reminds me that I sometimes forget to set the content property when I’m working with ::before or ::after. Which reminds me of how I’ve forgotten to set an element’s position before trying to offset it or change its z-index. Seriously, these things happen!
 
 
 It’s hard talking about mistakes
 
 
 Have you ever finished reading some blog post sharing some amazing trick and felt some sort of Imposter Syndrome? I think that’s largely because blog posts often mask the real work — and failures — that go into amazing tricks. As someone who reads posts like that for a living, I can tell you that many, if not the vast majority, go through many rounds of editing where potentially embarrassing mistakes are weeded out and smoothed over.
 
 
 
 Even those ridiculously awesome articles have to fail before they get all those ooooos and ahhhhhs.
 
 
 
 The same is true of any app, website, demo, or whatever you happen to come across. The chances any of them came out perfect the first time is next to nothin’.
 
 
 
 But if I’m being totally honest with you, I’m often more amazed (and interested) in the journey it takes to accomplish something, warts and all. The journey is a glimpse into what it’s like to think like a front-end developer. That’s where real (and most valuable) learning happens.
 
 
 
 And all of this is merely building up to what I really want to ask…
 
 
 What are your dumbest CSS mistakes?
 
 
 C’mon, we all know you’ve made some! Let us learn from them!
 
 My Dumbest CSS Mistakes originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Great (and Free!) Web Development Books You Can Get Online</title>
         <link href="https://css-tricks.com/web-development-books-you-can-get-for-free/"/>
       <updated>2022-06-27T13:27:49.000Z</updated>
       <content type="text">Right after “Where is the best place to learn?” perhaps the most commonly asked question I hear from folks getting into code is “What web development books should I get to learn?” Well, consider this an answer to that question as I’ve curated a list of books that are not only great for getting into front-end development but also freely available.
 
 
 
 
 
 
 Table of Contents
 
 Books on CSS
 Books on HTML &amp; CSS
 Books on process
 Books on JavaScript
 Wrapping up
 
 Books on CSS
 
 
 This is the bulk of where we’re going to hang out because, well, this is a site mostly about CSS!
 
 
 The Magic of CSS by Adam Schwartz
 
 
 Perfect for: Next steps in your CSS journeyLearning level: IntermediateRequires: Some basic understanding of CSS
 
 
 
 Adam Schwartz covers six CSS concepts in this book, including the box model, layout, tables, color, typography, and transitions. These are things even stump some seasoned CSSers, some of these concepts might be confusing. Adam has gone to a great length to demystify each.
 
 
 
 In addition to the book being a great primer on complex CSS concepts, I love how each of the CSS properties mentioned throughout the book is clickable so you can always click on them to see how each is applied. There are many illustrative examples and recommendations for further reading, should you desire to learn more about each chapter.
 
 
 
 I found the chapter on colors very interesting not only because it gets into the best practices for using color accessibly, but also because there’s super practical applications, like when Adam gets into using CSS to support an organization’s branding.
 
 
 
 
 Direct link
 
 
 
 Resilient Web Design by Jeremy Keith
 
 
 Perfect for: Developing strategies for writing codeLearning level: IntermediateRequires: Some basic understanding of CSS
 
 
 
 Straight from the introduction:
 
 
 
 You won’t find any code in here to help you build better websites. But you will find ideas and approaches. Ideas are more resilient than code. I’ve tried to combine the most resilient ideas from the history of web design into an approach for building the websites of the future.
 
 
 
 What Jeremy does so well is describing soft skills, like planning, outlining, and approaches for writing code. So, rather than dropping in code snippets throughout the book, what you’ll find are details about code strategies, such as progressive enhancement, deciding on what tooling to use, and the challenges of writing future-friendly code.
 
 
 
 And for those of you who have not had the pleasure of listening to Jeremy narrate content (like he does in the Web History series), there’s an audio file available to download.
 
 
 
 
 Direct link
 
 
 
 Beginning CSS Web Development: From Novice to Professional by Simon Collison
 
 
 Perfect for: The fundamentals of CSSLearning level: Absolute beginnersRequires: Nothing but time and motivation
 
 
 
 It may be written in 2006, but Simon’s coverage of web standards and accessibility is timeless and relevant today. He provides an understanding of interoperability as well as approaches for building web applications, including the early planning phases that often go overlooked.
 
 
 
 The book has two broad parts which are further divided into 16 chapters. Part 1 covers CSS topics, like working with text, links, lists, backgrounds, images, tables, and forms. It really doesn’t skimp on the details either.
 
 
 
 Part 2 is all about layout, shedding light on usability and layout manipulation, plus a handy case study. The chapters are arranged in such a way that one chapter naturally flows into the next. Each chapter also contains a concluding section that highlights all the important concepts covered in the chapter.
 
 
 
 Indeed, the book provides novice developers a solid background in CSS and helps them gradually with more advanced concepts. It will make your CSS journey easier.
 
 
 
 
 Direct link
 
 
 
 Books on HTML &amp; CSS
 
 
 CSS and HTML are often taught together, which can be especially helpful when you’re writing your first lines of code and want to know how the two languages interact with one another.
 
 
 Learn to Code HTML &amp; CSS by Shay Howe
 
 
 Perfect for: Starting your front-end journeyLearning level: BeginnersRequires: No prior experience at all
 
 
 
 Shay refers to this book as a simple and comprehensive guide dedicated to helping beginners learn HTML and CSS. He does this by focusing on common elements of front-end design and development. Some of the lessons covered are Box Model, Positioning, Typography, Background and Gradients, Lists, Media, Forms, and Tables. In the first chapter *Building Your First Web Page, Shay analyzed the contents of a typical website including elements, attributes and setting up the HTML document structure, code validation, selectors and CSS resets. I find the book very instructive especially as it went beyond the surface to address many key concepts with code samples, which you can follow along.
 
 
 
 One profound thing about this great book is that, Shay built a complete project from scratch throughout the 12 lessons and at the end of each lesson, he provided a summary and links to the current state of that website (so you can compare with yours if you follow along) and the source code at every stage of the lessons.
 
 
 
 If you’re a learner who learns by doing, you will find this material very useful and by the time you’re done, you will have developed a multi page functional website.
 
 
 
 An advanced sequel of the course is also available free via the same link.
 
 
 
 
 Direct link
 
 
 
 HTML &amp; CSS: Learn the Fundamentals in 7 Days by Michael Knapp
 
 
 Perfect for: Starting your front-end journeyLearning level: BeginnersRequires: No prior experience at all
 
 
 
 Can you possibly learn everything there is to know about the HTML and CSS in seven days? Probably not, but that’s why this 2017 book by Michael Knapp is focused straight on the fundamentals. Michael delves into a brief history lesson before launching into HTML and CSS structure, logic, and presentation. You’re going to get all up to speed to the point where you should feel pretty confident about putting a basic webpage together, plus a few extras along the way as the book touches on SEO and analytics.
 
 
 
 The book is comprised of simple programs that you can run on your computer if you wish to follow along.
 
 
 
 The ebook version is available for free on Apple Books, but there is a Kindle version as well if you already have a subscription there.
 
 
 
 
 Apple Books
 
 
 
 Kindle
 
 
 
 The Greatest CSS Tricks Vol. 1 by Chris Coyier
 
 
 Perfect for: Marveling at what CSS can doLearning level: IntermediateRequires: Some CSS experience
 
 
 
 Did you know that CSS-Tricks has a book on CSS too? It would be silly to leave that off this list because what you get is a collection of classic CSS trickery that’s explained by none other than Chris Coyier. In fact, Chris handpicked all of the examples covered in the book from his many, many (many!) years running this here site from the plentitude of tricks that have crossed his desk.
 
 
 
 Each trick solves a particular pain point. For instance, the first “Pin Scrolling to Bottom” trickdemonstrates how the overflow-anchor CSS property can be used to create the same chat-like interface of a tool like Slack, where the screen is anchored at the bottom in a way that feels as though the page is scrolling for you as new items are added.
 
 
 
 
 Direct Link
 
 
 
 Books on process
 
 
 Code is just as much about how we write code and collaborate on projects with others as it is about the actual code we write. The following books are great starting points for everything from planning and project management to communicating and collaborating with others.
 
 
 Collaborate: Bring People Together Around Digital Projects by Ellen De Vries
 
 
 Perfect for: Being a better collaboratorLearning level: N/ARequires: An open mind to working well with others!
 
 
 
 Ellen addresses something in this book that we all have to deal with: collaborating with others. And it’s no small deal — the book is divided into four parts that go super deep into things we can go to work well with others:
 
 
 
 Know how to prepare the ground and create the right conditions for collaboration.Nurture the group culture in the early stages of collaboration.Maintain a healthy collaborative process.Reap the rewards of a collaboration.
 
 
 
 As a content strategist, Ellen has the right kind of experience to help anyone be part of a collaborative project, or get the most from a collaboration.
 
 
 
 
 Direct link
 
 
 
 The Modern Web Design Process by webflow
 
 
 Perfect for: Senior designers, project managersLearning level: N/ARequires: Some basic understanding of CSS
 
 
 
 This free ebook features a seven-step design process that’s meant to help define the workflow for today’s brand of web design.
 
 
 
 That includes:
 
 
 
 Setting goalsDefining scopeSitemaps and wireframesWorking with contentHandling visual elementsTestingShipping
 
 
 
 Anyone starting a new design project or in the middle of a design project will find the invaluable insights throughout the book. And what’s most remarkable is how this is written in a way that almost feels as though you are being hand-held through an entire project from concept to completion.
 
 
 
 
 Direct link
 
 
 
 Designing for the Web by Mark Boulton
 
 
 Perfect for: Learning to work with clientsLearning level: BeginnersRequires: A genuine interest in design
 
 
 
 It seems many organizations tackle design differently. But author Mark Boulton documents a thorough design workflow in Designing for the Web that de-mystifies many challenges and covers everything you need to know.
 
 
 
 What’s unique about this book is that it’s really about work. Sure, there’s a bunch of hugely valuable information on design best practices for things like typography, color, and layout, but what you’re really going to take away from this book is how these fit into a design workflow. It teaches you how to research, the technologies we have to implement ideas, and ultimately, how to work with others as well as clients — perfect fodder for folks including design leads, project managers, freelancers, or anyone who’s involved in the project delivery process.
 
 
 
 
 Direct Link
 
 
 
 Learn Version Control with Git by Tower
 
 
 Perfect for: Mastering GitLearning level: All levels welcomeRequires: No prior knowledge at all
 
 
 
 In this book, the team behind the popular Tower client for Git introduce learners to the crux of version control system using Git. Developers who work in teams will particularly find this very useful, as it helps in effectively collaborating with team members building different features of a project even when you’re thousands of miles apart. That said, it’s still really great for anyone who might be shy of the command line and wants to build confidence there.
 
 
 
 And since the book is by the maker of an application that interacts with Git, you’re going to get a nice dose of using Tower as a GUI in addition to working directly on the command line.
 
 
 
 So, whether it’s committing, branching, merging, pull requests, forking work, or handling merge conflicts, you’re going to get a whole lot from this book.
 
 
 
 
 Direct Link
 
 
 
 Books on JavaScript
 
 
 Learning JavaScript always seems to be en vogue. In fact, Jason Rodriguez wrote about the JavaScript learning landscape in 2018 and provided a nice list of free books. Not too much has cropped up since then, but here are my thoughts on the following books.
 
 
 Eloquent JavaScript by Marijn Haverbeke
 
 
 Perfect for: Getting better at writing JavaScriptLearning level: Intermediate to seasoned developersRequires: Prior JavaScript experience
 
 
 
 Eloquent JavaScript really lives up to its name. Personally, I consider this one of the best-written JavaScript books I have ever come across. Marjin’s writing style is engaging, especially with how he introduces programming concepts and carries the reader along. In his words, the book is simply about instructing computers and making them do what you want them to do.
 
 
 
 The book is a deep dive into JavaScript spread across three parts and 21 chapters. You’re going to read a bunch about basic programming concepts, such as values, types, operators and functions, to advanced concepts like regular expressions, modules, the DOM, and asynchronous programming. He starts every chapter with a somewhat philosophical quote to prepare the reader for what lies ahead and then dives straight into the topic.
 
 
 
 Plus, there’s three projects to help you practice your newfound skills.
 
 
 
 
 Direct link
 
 
 
 Understanding JavaScript Promises by Nicholas C. Zakas
 
 
 Perfect for: Those who want to learn all about asynchronous programming with promises in JavaScript.Learning level: IntermediateRequires: Basic JavaScript chops
 
 
 
 JavaScript promises were introduced in 2015 as part of the ES6 specification to handle asynchronous functions in JavaScript. According to MDN:
 
 
 
 A promise is an object representing the eventual completion or failure of an asynchronous operation
 
 
 
 In this 51-page book, Nicholas explains the concept of Promises over three chapters: Basics, Chaining Promises, and Working with Multiple Promises. Although the link to the book we’re providing is the free community version, the full version (available on Amazon) has two more chapters on Async Functions and Unhandled Rejection Tracking. Nicholas simplified the concept of Promises with several illustrations and examples. You will learn how to use then(), catch(), and finally() and understand how to chain multiple promises together. Nicholas also covers the assignment of rejection and settlement handlers. You may want to give the book a read to solidify your understanding of the topic.
 
 
 
 Nicholas is a veteran JavaScript book author who has been writing about JavaScript for over 15 years. He brings his wealth of experience to bear in this book (just as he has in his work here at CSS-Tricks).
 
 
 
 
 Direct link
 
 
 
 Speaking JavaScript by Axel Rauschmayer
 
 
 Perfect for: Leveling up from beginning JavaScriptLearning level: IntermediateRequires: Knowledge of object oriented programming
 
 
 
 This book is presented in four chapters covering more than 30 topics. Here’s how it breaks down:
 
 
 
 The first chapter is a nice refresher on syntax, variable types, functions and exception handling.The second chapter offers historical perspective into JavaScript as a prelude for the types of features covered throughout the rest of the book.Chapter 3 is presented as more or less a reference book with short, clean examples.The final chapter outlines tips, tools and libraries to help write better JavaScript and follow best practices.
 
 
 
 
 Direct Link
 
 
 
 Secrets of the JavaScript Ninja by John Resig and Bear Bibeault
 
 
 Perfect for: Creating a cross-browser JavaScript library from the ground upLearning level: IntermediateRequires: Some prior programming experience
 
 
 
 There’s actually a newer edition of this book, but the 2012 edition is the one that’s free. Either way, it’s a good opportunity to learn from John Resig; you know, the guy who created jQuery.
 
 
 
 The techniques covered here include closures, functions, the DOM, object orientation with prototypes, and cross-browser strategies. One nice perk is that each chapter is followed by a brief recap that’s perfect for a reference once you’ve finished the book.
 
 
 
 
 Direct Link
 
 
 
 Learning JavaScript Design Patterns by Addy Osmani
 
 
 Perfect for: Learning to write more efficient JavaScriptLearning level: IntermediateRequires: A decent level of JavaScript experience
 
 
 
 The concept of design pattern refers to a reusable solution to a commonly recurring problem in application development. In this book, Addy Osmani covers the implementation of common design patterns using ES6 and beyond, as well as React-specific design patterns, which can be super handy when working on complex React apps where maintainability is a primary goal.
 
 
 
 Some of the patterns covered include Singleton, Proxy, Provider, Prototype and Observer patterns. In some cases, Addy includes pros and cons of using some of these patterns and how they may affect the performance of your application.
 
 
 
 
 Direct Link
 
 
 
 You Don’t Know JS by Kyle Simpson
 
 
 Perfect for: Mastering JavaScriptLearning level: BeginnerRequires: Little or no prior programming experience
 
 
 
 While the title might be a bit provocative, what Kyle is implying here is that he writes this book assuming you have no prior JavaScript experience whatsoever.
 
 
 
 Kyle begins starts by going through the rudiments of programming as seen through the lens of JavaScript. He then proceeds, in subsequent chapters, to introduce more advanced concepts like scope and closure, the this keyword, object prototypes, async, and performance.
 
 
 
 There’s a lot of excellent details and explanations in here, and Kyle makes it super easy to understand by avoiding super technical jargon. There is also many exercises designed to reinforce your learning. This book will definitely get you up to speed with JavaScript. There’s second edition of the book in the works that you can track in GitHub.
 
 
 
 
 Direct link
 
 
 
 The JavaScript Beginner’s Handbook by Flavio Copes
 
 
 Perfect for: A beginner’s referenceLearning level: Just getting startedRequires: Email sign-up, maybe some prior experience
 
 
 
 Flavio has put together a very useful JavaScript reference for those just starting out. It’s more like a quick reference guide than a textbook, so those of you just starting out might want to consider this as something you keep on your desk rather than something you sit with for long periods of time.
 
 
 
 
 Direct link
 
 
 
 JavaScript for Data Science by Gans, Hodges &amp; Wilson
 
 
 Perfect for: Getting into data visualizationsLearning level: Intermediate to advancedRequires: A decent handle on JavaScript
 
 
 
 The authors cover core features of modern JavScript, including callbacks, promises, inheritance, objects and classes. They also get into testing using Mocha, React, and data vizualization, all of which are great for anyone looking to level up their code and how its written. The book doesn’t get as deep into many the concepts as some of the other books, but it really shines when it gets into data science.
 
 
 
 The book uses Data-Forge; a JavaScript library designed for working with tabular data. There are numerous exercises to help readers keep up to speed with the subject of discussion. The last chapter also includes a capstone project that pulls everything together.
 
 
 
 
 Direct Link
 
 
 
 Wrapping up
 
 
 I sure hope this collection of books help you, whether you’re taking your first steps in front-end web development, have a dozen years under your belt, or you fall somewhere in between. I know how hard it is to get into something new for the first time and the feeling of not knowing where to look. I also know how it feels to hit a plateau and need something to level me up. There should be something for everyone here, regardless of where you are in your learning journey.
 
 
 
 And, hey, if you have any other books that are available to snag for free online, please share them in the comments! I bet we can get an even bigger list going.
 
 Great (and Free!) Web Development Books You Can Get Online originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: The Bars</title>
         <link href="https://css-tricks.com/single-element-loaders-the-bars/"/>
       <updated>2022-06-24T20:00:29.000Z</updated>
       <content type="text">We’ve looked at spinners. We’ve looked at dots. Now we’re going to tackle another common pattern for loaders: bars. And we’re going to do the same thing in this third article of the series as we have the others by making it with only one element and with flexible CSS that makes it easy to create variations.
 
 
 
 
 
 
 
 Article series
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D
 
 
 
 
 Let’s start with not one, not two, but 20 examples of bar loaders.
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 What?! Are you going to detail each one of them? That’s too much for an article!
 
 
 
 It might seem like that at first glance! But all of them rely on the same code structure and we only update a few values to create variations. That’s all the power of CSS. We don’t learn how to create one loader, but we learn different techniques that allow us to create as much loader as we want using merely the same code structure.
 
 
 Let’s make some bars!
 
 
 We start by defining the dimensions for them using width (or height) with aspect-ratio to maintain proportion:
 
 
 
 .bars {
   width: 45px;
   aspect-ratio: 1;
 }
 
 
 
 We sort of “fake” three bars with a linear gradient on the background — very similar to how we created dot loaders in Part 2 of this series.
 
 
 
 .bars {
   width: 45px;
   aspect-ratio: 1;
   --c: no-repeat linear-gradient(#000 0 0); /* we define the color here */
   background: 
     var(--c) 0%   50%,
     var(--c) 50%  50%,
     var(--c) 100% 50%;
   background-size: 20% 100%; /* 20% * (3 bars + 2 spaces) &#x3D; 100% */
 }
 
 
 
 The above code will give us the following result:
 
 
 
 
 
 
 
 Like the other articles in this series, we are going to deal with a lot of background trickery. So, if you ever feel like we’re jumping around too fast or feel you need a little more detail, please do check those out. You can also read my Stack Overflow answer where I give a detailed explanation on how all this works.
 
 
 Animating the bars
 
 
 We either animate the element’s size or position to create the bar loader. Let’s animate the size by defining the following animation keyframes:
 
 
 
 @keyframes load {
   0%   { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 1 */
   33%  { background-size: 20% 10% , 20% 100%, 20% 100%; }  /* 2 */
   50%  { background-size: 20% 100%, 20% 10% , 20% 100%; }  /* 3 */
   66%  { background-size: 20% 100%, 20% 100%, 20% 10%;  }  /* 4 */
   100% { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 5 */
 }
 
 
 
 See what’s happening there? Between 0% and 100%, the animation changes the background-size of the element’s background gradient. Each keyframe sets three background sizes (one for each gradient).
 
 
 
 
 
 
 
 And here’s what we get:
 
 
 
 CodePen Embed Fallback
 
 
 
 Can you start to imagine all the possible variations we can get by playing with different animation configurations for the sizes or the positions?
 
 
 
 Let’s fix the size to 20% 50% and update the positions this time:
 
 
 
 .loader {
   width: 45px;
   aspect-ratio: .75;
   --c: no-repeat linear-gradient(#000 0 0);
   background: 
     var(--c),
     var(--c),
     var(--c);
   background-size: 20% 50%;
   animation: load 1s infinite linear;
 }
 @keyframes load {
   0%   { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 1 */
   20%  { background-position: 0% 50% , 50% 100%, 100% 100%; } /* 2 */
   40%  { background-position: 0% 0%  , 50% 50% , 100% 100%; } /* 3 */
   60%  { background-position: 0% 100%, 50% 0%  , 100% 50%;  } /* 4 */
   80%  { background-position: 0% 100%, 50% 100%, 100% 0%;   } /* 5 */ 
   100% { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 6 */
 }
 
 
 
 
 
 
 
 …which gets us another loader!
 
 
 
 CodePen Embed Fallback
 
 
 
 You’ve probably got the trick by now. All you need is to define a timeline that you translate into a keyframe. By animating the size, the position — or both! — there’s an infinite number of loader possibilities at our fingertips.
 
 
 
 And once we get comfortable with such a technique we can go further and use a more complex gradient to create even more loaders.
 
 
 
 CodePen Embed Fallback
 
 
 
 Expect for the last two examples in that demo, all of the bar loaders use the same underlying markup and styles and different combinations of animations. Open the code and try to visualize each frame independently; you’ll see how relatively trivial it is to make dozens — if not hundreds — of variations.
 
 
 Getting fancy
 
 
 Did you remember the mask trick we did with the dot loaders in the second article of this series? We can do the same here!
 
 
 
 If we apply all the above logic inside the mask property we can use any background configuration to add a fancy coloration to our loaders.
 
 
 
 Let’s take one demo and update it:
 
 
 
 CodePen Embed Fallback
 
 
 
 All I did is updating all the background-* with mask-* and I added a gradient coloration. As simple as that and yet we get another cool loader.
 
 
 
 So there is no difference between the dots and the bars?
 
 
 
 No difference! I wrote two different articles to cover as many examples as possible but in both, I am relying on the same techniques:
 
 
 
 Gradients to create the shapes (dots or bars or maybe something else)Animating background-size and/or background-position to create the loader animationAdding mask to add a touch of colors
 
 
 Rounding the bars
 
 
 Let’s try something different this time where we can round the edges of our bars.
 
 
 
 CodePen Embed Fallback
 
 
 
 Using one element and its ::before and ::after pseudos, we define three identical bars:
 
 
 
 .loader {
   --s: 100px; /* control the size */
 
   display: grid;
   place-items: center;
   place-content: center;
   margin: 0 calc(var(--s) / 2); /* 50px */
 }
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   grid-area: 1/1;
 }
 .loader,
 .loader::before,
 .loader::after {
   height: var(--s);
   width: calc(var(--s) / 5); /* 20px */
   border-radius: var(--s);
   transform: translate(calc(var(--_i, 0) * 200%));
 }
 .loader::before { --_i: -1; }
 .loader::after { --_i:  1; }
 
 
 
 That gives us three bars, this time without relying on a linear gradient:
 
 
 
 
 
 
 
 Now the trick is to fill in those bars with a lovely gradient. To simulate a continuous gradient, we need to play with background properties. In the above figure, the green area defines the area covered by the loader. That area should be the size of the gradient and, if we do the math, it’s equal to multiplying both sides labeled S in the diagram, or background-size: var(--s) var(--s).
 
 
 
 Since our elements are individually placed, we need to update the position of the gradient inside each one to make sure all of them overlap. This way, we’re simulating one continuous gradient even though it’s really three of them.
 
 
 
 For the main element (placed at the center), the background needs to be at the center. We use the following:
 
 
 
 .loader {
   /* etc. */
   background: linear-gradient() 50% / var(--s) var(--s);
 }
 
 
 
 For the pseudo-element on the left, we need the background on the left
 
 
 
 .loader::before {
   /* etc. */
   background: linear-gradient() 0% / var(--s) var(--s);
 }
 
 
 
 And for the pseudo on the right, the background needs to be positioned to the right:
 
 
 
 .loader::after {
   background: linear-gradient() 100% / var(--s) var(--s);
 }
 
 
 
 Using the same CSS variable, --_i, that we used for the translate, we can write the code like this:
 
 
 
 .loader {
   --s: 100px; /* control the size */
   --c: linear-gradient(/* etc. */); /* control the coloration */
 
   display: grid;
   place-items: center;
   place-content: center;
 }
 .loader::before,
 .loader::after{
   content: &quot;&quot;;
   grid-area: 1/1;
 }
 .loader,
 .loader::before,
 .loader::after{
   height: var(--s);
   width: calc(var(--s) / 5);
   border-radius: var(--s);
   background: var(--c) calc(50% + var(--_i, 0) * 50%) / var(--s) var(--s);
   transform: translate(calc(var(--_i, 0) * 200%));
 }
 .loader::before { --_i: -1; }
 .loader::after  { --_i:  1; }
 
 
 
 Now, all we have to do is to animate the height and add some delays! Here are three examples where all that’s different are the colors and sizes:
 
 
 
 CodePen Embed Fallback
 
 
 Wrapping up
 
 
 I hope so far you are feeling super encouraged by all the powers you have to make complex-looking loading animations. All we need is one element, either gradients or pseudos to draw the bars, then some keyframes to move things around. That’s the entire recipe for getting an endless number of possibilities, so go out and starting cooking up some neat stuff!
 
 
 
 Until the next article, I will leave you with a funny collection of loaders where I am combining the dots and the bars!
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 Article series
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D
 
 
 Single Element Loaders: The Bars originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Different Ways to Write CSS in React</title>
         <link href="https://css-tricks.com/different-ways-to-write-css-in-react/"/>
       <updated>2022-06-22T14:24:37.000Z</updated>
       <content type="text">We’re all familiar with the standard way of linking up a stylesheet to the &lt;head&gt; of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things in a single-page application (SPA), say in a React project?
 
 
 
 Turns out there are several ways to go about styling a React application. Some overlap with traditional styling, others not so much. But let’s count all the ways we can do it.
 
 
 
 
 
 
 
 Importing external stylesheets
 
 
 
 As the name suggests, React can import CSS files. The process is similar to how we link up CSS file in the HTML &lt;head&gt;:
 
 
 
 Create a new CSS file in your project directory.Write CSS.Import it into the React file.
 
 
 
 Like this:
 
 
 
 import &quot;./style.css&quot;;
 
 
 
 That usually goes at the top of the file where other imports happen:
 
 
 
 import { React } from &quot;react&quot;;
 import &quot;./Components/css/App.css&quot;;
 function App() {
   return (
     &lt;div className&#x3D;&quot;main&quot;&gt;
     &lt;/div&gt;
   );
 }
 export default App;
 
 
 
 In this example, a CSS file is imported into an App.js from the /Components/css folder.
 
 
 
 Write inline styles
 
 
 
 You may be used to hearing that inline styling isn’t all that great for maintainability and whatnot, but there are definitely situations (here’s one!) where it makes sense. And maintainability is less of an issue in React, as the CSS often already sits inside the same file anyway.
 
 
 
 This is a super simple example of inline styling in React:
 
 
 
 &lt;div className&#x3D;&quot;main&quot; style&#x3D;{{color:&quot;red&quot;}}&gt;
 
 
 
 A better approach, though, is to use objects:
 
 
 
 First, create an object that contains styles for different elements.Then add it to an element using the style attribute and then select the property to style.
 
 
 
 Let’s see that in context:
 
 
 
 import { React } from &quot;react&quot;;
 function App() {
   const styles &#x3D; {
     main: {
       backgroundColor: &quot;#f1f1f1&quot;,
       width: &quot;100%&quot;,
     },
     inputText: {
       padding: &quot;10px&quot;,
       color: &quot;red&quot;,
     },
   };
   return (
     &lt;div className&#x3D;&quot;main&quot; style&#x3D;{styles.main}&gt;
       &lt;input type&#x3D;&quot;text&quot; style&#x3D;{styles.inputText}&gt;&lt;/input&gt;
     &lt;/div&gt;
   );
 }
 export default App;
 
 
 
 This example contains a styles object containing two more objects, one for the .main class and the other for a text input, which contain style rules similar to what we’d expect to see in an external stylesheet. Those objects are then applied to the style attribute of elements that are in the returned markup.
 
 
 
 Note that curly brackets are used when referencing styles rather than the quotation marks we’d normally use in plain HTML.
 
 
 
 Use CSS Modules
 
 
 
 CSS Modules… what the heck happened to those, right? They have the benefit of locally scoped variables and can be used right alongside React. But what are they, again, exactly?
 
 
 
 Quoting the repo’s documentation:
 
 
 
 CSS Modules works by compiling individual CSS files into both CSS and data. The CSS output is normal, global CSS, which can be injected directly into the browser or concatenated together and written to a file for production use. The data is used to map the human-readable names you’ve used in the files to the globally-safe output CSS.
 
 
 
 In simpler terms, CSS Modules allows us to use the same class name in multiple files without clashes since each class name is given a unique programmatic name. This is especially useful in larger applications. Every class name is scoped locally to the specific component in which it is being imported.
 
 
 
 A CSS Module stylesheet is similar to a regular stylesheet, only with a different extension (e.g. styles.module.css). Here’s how they’re set up:
 
 
 
 Create a file with .module.css as the extension.Import that module into the React app (like we saw earlier)Add a className to an element or component and reference the particular style from the imported styles.
 
 
 
 Super simple example:
 
 
 
 /* styles.module.css */
 .font {
   color: #f00;
   font-size: 20px;
 }
 
 import { React } from &quot;react&quot;;
 import styles from &quot;./styles.module.css&quot;;
 function App() {
   return (
     &lt;h1 className&#x3D;{styles.heading}&gt;Hello World&lt;/h1&gt;
   );
 }
 export default App;
 
 
 
 Use styled-components
 
 
 
 Have you used styled-components? It’s quite popular and allows you to build custom components using actual CSS in your JavaScript. A styled-component is basically a React component with — get ready for it — styles. Some of the features include unique class names, dynamic styling and better management of the CSS as each component has its own separate styles.
 
 
 
 Install the styled-components npm package in the command line:
 
 
 
 npm install styled-components
 
 
 
 Next up, import it into the React app:
 
 
 
 import styled from &#x27;styled-components&#x27;
 
 
 
 Create a component and assign a styled property to it. Note the use of template literals denoted by backticks in the Wrapper object:
 
 
 
 import { React } from &quot;react&quot;;
 import styled from &quot;styled-components&quot;;
 function App() {
   const Wrapper &#x3D; styled.div&#x60;
     width: 100%;
     height: 100px;
     background-color: red;
     display: block;
   &#x60;;
   return &lt;Wrapper /&gt;;
 }
 export default App;
 
 
 
 The above Wrapper component will be rendered as a div that contains those styles.
 
 
 
 Conditional styling
 
 
 
 One of the advantages of styled-components is that the components themselves are functional, as in you can use props within the CSS. This opens the door up to conditional statements and changing styles based on a state or prop.
 
 
 
 Here’s a demo showing that off:
 
 
 
 
 
 
 
 Here, we are manipulating the div’s display property on the display state. This state is controlled by a button that toggles the div’s state when clicked. This, in turn, toggles between the styles of two different states.
 
 
 
 In inline if statements, we use a ? instead of the usual if/else syntax. The else part is after the semicolon. And remember to always call or use the state after it has been initialized. In that last demo, for example, the state should be above the Wrapper component’s styles.
 
 
 
 Happy React styling!
 
 
 
 That’s a wrap, folks! We looked at a handful of different ways to write styles in a React application. And it’s not like one is any better than the rest; the approach you use depends on the situation, of course. Hopefully now you’ve got a good understanding of them and know that you have a bunch of tools in your React styling arsenal.
 
 Different Ways to Write CSS in React originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: The Dots</title>
         <link href="https://css-tricks.com/single-element-loaders-the-dots/"/>
       <updated>2022-06-17T14:47:55.000Z</updated>
       <content type="text">We’re looking at loaders in this series. More than that, we’re breaking down some common loader patterns and how to re-create them with nothing more than a single div. So far, we’ve picked apart the classic spinning loader. Now, let’s look at another one you’re likely well aware of: the dots.
 
 
 
 Dot loaders are all over the place. They’re neat because they usually consist of three dots that sort of look like a text ellipsis (…) that dances around.
 
 
 
 
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 
 
 Our goal here is to make this same thing out of a single div element. In other words, there is no one div per dot or individual animations for each dot.
 
 
 
 CodePen Embed Fallback
 
 
 
 That example of a loader up above is made with a single div element, a few CSS declarations, and no pseudo-elements. I am combining two techniques using CSS background and mask. And when we’re done, we’ll see how animating a background gradient helps create the illusion of each dot changing colors as they move up and down in succession.
 
 
 
 The background animation
 
 
 
 Let’s start with the background animation:
 
 
 
 .loader {
   width: 180px; /* this controls the size */
   aspect-ratio: 8/5; /* maintain the scale */
   background: 
     conic-gradient(red   50%, blue   0) no-repeat, /* top colors */
     conic-gradient(green 50%, purple 0) no-repeat; /* bottom colors */
   background-size: 200% 50%; 
   animation: back 4s infinite linear; /* applies the animation */
 }
 
 /* define the animation */
 @keyframes back {
   0%,                       /* X   Y , X     Y */
   100% { background-position: 0%   0%, 0%   100%; }
   25%  { background-position: 100% 0%, 0%   100%; }
   50%  { background-position: 100% 0%, 100% 100%; }
   75%  { background-position: 0%   0%, 100% 100%; }
 }
 
 
 
 I hope this looks pretty straightforward. What we’ve got is a 180px-wide .loader element that shows two conic gradients sporting hard color stops between two colors each — the first gradient is red and blue along the top half of the .loader, and the second gradient is green and purple along the bottom half.
 
 
 
 The way the loader’s background is sized (200% wide), we only see one of those colors in each half at a time. Then we have this little animation that pushes the position of those background gradients left, right, and back again forever and ever.
 
 
 
 When dealing with background properties — especially background-position — I always refer to my Stack Overflow answer where I am giving a detailed explanation on how all this works. If you are uncomfortable with CSS background trickery, I highly recommend reading that answer to help with what comes next.
 
 
 
 In the animation, notice that the first layer is Y&#x3D;0% (placed at the top) while X is changes from 0% to 100%. For the second layer, we have the same for X but Y&#x3D;100% (placed at the bottom).
 
 
 
 CodePen Embed Fallback
 
 
 
 Why using a conic-gradient() instead of linear-gradient()?
 
 
 
 Good question! Intuitively, we should use a linear gradient to create a two-color gradients like this:
 
 
 
 linear-gradient(90deg, red 50%, blue 0)
 
 
 
 But we can also reach for the same using a conic-gradient() — and with less of code. We reduce the code and also learn a new trick in the process!
 
 
 
 Sliding the colors left and right is a nice way to make it look like we’re changing colors, but it might be better if we instantly change colors instead — that way, there’s no chance of a loader dot flashing two colors at the same time. To do this, let’s change the animation‘s timing function from linear to steps(1)
 
 
 
 CodePen Embed Fallback
 
 
 
 The loader dots
 
 
 
 If you followed along with the first article in this series, I bet you know what comes next: CSS masks! What makes masks so great is that they let us sort of “cut out” parts of a background in the shape of another element. So, in this case, we want to make a few dots, show the background gradients through the dots, and cut out any parts of the background that are not part of a dot.
 
 
 
 We are going to use radial-gradient() for this:
 
 
 
 .loader {
   width: 180px;
   aspect-ratio: 8/5;
   mask:
     radial-gradient(#000 68%, #0000 71%) no-repeat,
     radial-gradient(#000 68%, #0000 71%) no-repeat,
     radial-gradient(#000 68%, #0000 71%) no-repeat;
   mask-size: 25% 40%; /* the size of our dots */
 }
 
 
 
 There’s some duplicated code in there, so let’s make a CSS variable to slim things down:
 
 
 
 .loader {
   width: 180px;
   aspect-ratio: 8/5;
   --_g: radial-gradient(#000 68%, #0000 71%) no-repeat;
   mask: var(--_g),var(--_g),var(--_g);
   mask-size: 25% 40%;
 }
 
 
 
 Cool cool. But now we need a new animation that helps move the dots up and down between the animated gradients.
 
 
 
 .loader {
   /* same as before */
   animation: load 2s infinite;
 }
 
 @keyframes load {      /* X  Y,     X   Y,    X   Y */
   0%     { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */
   16.67% { mask-position: 0% 100%, 50% 0%  , 100% 0%; }
   33.33% { mask-position: 0% 100%, 50% 100%, 100% 0%; }
   50%    { mask-position: 0% 100%, 50% 100%, 100% 100%; } /* all of them at the bottom */
   66.67% { mask-position: 0% 0%  , 50% 100%, 100% 100%; }
   83.33% { mask-position: 0% 0%  , 50% 0%  , 100% 100%; }
   100%   { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */
 }
 
 
 
 Yes, that’s a total of three radial gradients in there, all with the same configuration and the same size — the animation will update the position of each one. Note that the X coordinate of each dot is fixed. The mask-position is defined such that the first dot is at the left (0%), the second one at the center (50%), and the third one at the right (100%). We only update the Y coordinate from 0% to 100% to make the dots dance.
 
 
 
 
 
 
 
 Here’s what we get:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now, combine this with our gradient animation and magic starts to happen:
 
 
 
 CodePen Embed Fallback
 
 
 
 Dot loader variations
 
 
 
 The CSS variable we made in the last example makes it all that much easier to swap in new colors and create more variations of the same loader. For example, different colors and sizes:
 
 
 
 CodePen Embed Fallback
 
 
 
 What about another movement for our dots?
 
 
 
 CodePen Embed Fallback
 
 
 
 Here, all I did was update the animation to consider different positions, and we get another loader with the same code structure!
 
 
 
 The animation technique I used for the mask layers can also be used with background layers to create a lot of different loaders with a single color. I wrote a detailed article about this. You will see that from the same code structure we can create different variations by simply changing a few values. I am sharing a few examples at the end of the article.
 
 
 
 Why not a loader with one dot?
 
 
 
 CodePen Embed Fallback
 
 
 
 This one should be fairly easy to grok as I am using the same technique but with a more simple logic:
 
 
 
 CodePen Embed Fallback
 
 
 
 Here is another example of loader where I am also animating radial-gradient combined with CSS filters and mix-blend-mode to create a blobby effect:
 
 
 
 CodePen Embed Fallback
 
 
 
 If you check the code, you will see that all I am really doing there is animating the background-position, exactly like we did with the previous loader, but adding a dash of background-size to make it look like the blob gets bigger as it absorbs dots.
 
 
 
 If you want to understand the magic behind that blob effect, you can refer to these interactive slides (Chrome only) by Ana Tudor because she covers the topic so well!
 
 
 
 Here is another dot loader idea, this time using a different technique:
 
 
 
 CodePen Embed Fallback
 
 
 
 This one is only 10 CSS declarations and a keyframe. The main element and its two pseudo-elements have the same background configuration with one radial gradient. Each one creates one dot, for a total of three. The animation moves the gradient from top to bottom by using different delays for each dot..
 
 
 
 Oh, and take note how this demo uses CSS Grid. This allows us to leverage the grid’s default stretch alignment so that both pseudo-elements cover the whole area of their parent. No need for sizing! Push the around a little with translate() and we’re all set.
 
 
 
 More examples!
 
 
 
 Just to drive the point home, I want to leave you with a bunch of additional examples that are really variations of what we’ve looked at. As you view the demos, you’ll see that the approaches we’ve covered here are super flexible and open up tons of design possibilities.
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 Next up…
 
 
 
 OK, so we covered dot loaders in this article and spinners in the last one. In the next article of this four-part series, we’ll turn our attention to another common type of loader: the bars. We’ll take a lot of what we learned so far and see how we can extend them to create yet another single element loader with as little code and as much flexibility as possible.
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 Single Element Loaders: The Dots originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Conditionally Styling Selected Elements in a Grid Container</title>
         <link href="https://css-tricks.com/conditionally-styling-selected-elements-in-a-grid-container/"/>
       <updated>2022-06-15T14:15:50.000Z</updated>
       <content type="text">Calendars, shopping carts, galleries, file explorers, and online libraries are some situations where selectable items are shown in grids (i.e. square lattices). You know, even those security checks that ask you to select all images with crosswalks or whatever.
 
 
 
 
 
 
 
 🧐
 
 
 
 I found a neat way to display selectable options in a grid. No, not recreating that reCAPTCHA, but simply being able to select multiple items. And when two or more adjoining items are selected, we can use clever :nth-of-type combinators, pseudo elements, and the :checked pseudo-class to style them in a way where they look grouped together.
 
 
 
 CodePen Embed Fallback
 
 
 
 The whole idea of combinators and pseudos to get the rounded checkboxes came from a previous article I wrote. It was a simple single-column design:
 
 
 
 CodePen Embed Fallback
 
 
 
 This time, however, the rounding effect is applied to elements along both the vertical and horizontal axes on a grid. You don’t have to have read my last article on checkbox styling for this since I’m going to cover everything you need to know here. But if you’re interested in a slimmed down take on what we’re doing in this article, then that one is worth checking out.
 
 
 
 Before we start…
 
 
 
 It’ll be useful for you to take note of a few things. For example, I’m using static HTML and CSS in my demo for the sake of simplicity. Depending on your application you might have to generate the grid and the items in it dynamically. I’m leaving out practical checks for accessibility in order to focus on the effect, but you would definitely want to consider that sort of thing in a production environment.
 
 
 
 Also, I’m using CSS Grid for the layout. I’d recommend the same but, of course, it’s only a personal preference and your mileage may vary. For me, using grid allows me to easily use sibling-selectors to target an item’s ::before and ::after pseudos.
 
 
 
 Hence, whatever layout standard you might want to use in your application, make sure the pseudos can still be targeted in CSS and ensure the layout stays in tact across different browsers and screens.
 
 
 
 Let’s get started now
 
 
 
 As you may have noticed in the earlier demo, checking and unchecking a checkbox element modifies the design of the boxes, depending on the selection state of the other checkboxes around it. This is possible because I styled each box using the pseudo-elements of its adjacent elements instead of its own element.
 
 
 
 The following figure shows how the ::before pseudo-elements of boxes in each column (except the first column) overlap the boxes to their left, and how the ::after pseudo-elements of boxes in each row (except the first row) overlap the boxes above.
 
 
 
 
 
 
 
 Here’s the base code
 
 
 
 The markup is pretty straightforward:
 
 
 
 &lt;main&gt;
   &lt;input type&#x3D;checkbox&gt; 
   &lt;input type&#x3D;checkbox&gt; 
   &lt;input type&#x3D;checkbox&gt;
   &lt;!-- more boxes --&gt;
 &lt;/main&gt;
 
 
 
 There’s a little more going on in the initial CSS. But, first, the grid itself:
 
 
 
 /* The grid */
 main {
   display: grid;
   grid:  repeat(5, 60px) / repeat(4, 85px);
   align-items: center;
   justify-items: center;
   margin: 0;
 }
 
 
 
 That’s a grid of five rows and four columns that contain checkboxes. I decided to wipe out the default appearance of the checkboxes, then give them my own light gray background and super rounded borders:
 
 
 
 /* all checkboxes */
 input {
   -webkit-appearance: none;
   appearance: none;
   background: #ddd;
   border-radius: 20px;
   cursor: pointer;
   display: grid;
   height: 40px;
   width: 60px;
   margin: 0;
 }
 
 
 
 Notice, too, that the checkboxes themselves are grids. That’s key for placing their ::before and ::after pseudo-elements. Speaking of which, let’s do that now:
 
 
 
 /* pseudo-elements except for the first column and first row */
 input:not(:nth-of-type(4n+1))::before,
 input:nth-of-type(n+5)::after {
   content: &#x27;&#x27;;        
   border-radius: 20px;
   grid-area: 1 / 1;
   pointer-events: none;
 }
 
 
 
 We’re only selecting the pseudo-elements of checkboxes that are not in the first column or the first row of the grid. input:not(:nth-of-type(4n+1)) starts at the first checkbox, then selects the ::before of every fourth item from there. But notice we’re saying :not(), so really what we’re doing is skipping the ::before pseudo-element of every fourth checkbox, starting at the first. Then we’re applying styles to the ::after pseudo of every checkbox from the fifth one.
 
 
 
 Now we can style both the ::before and ::after pseudos for each checkbox that is not in the first column or row of the grid, so that they are moved left or up, respectively, hiding them by default.
 
 
 
 /* pseudo-elements other than the first column */
 input:not(:nth-of-type(4n+1))::before { 
   transform: translatex(-85px);
 }
 
 /* pseudo-elements other than the first row */
 input:nth-of-type(n+5)::after {
  transform: translatey(-60px); 
 }
 
 
 
 Styling the :checked state
 
 
 
 Now comes styling the checkboxes when they are in a :checked state. First, let’s give them a color, say a limegreen background:
 
 
 
 input:checked { background: limegreen; }
 
 
 
 A checked box should be able to re-style all of its adjacent checked boxes. In other words, if we select the eleventh checkbox in the grid, we should also be able to style the boxes surrounding it at the top, bottom, left, and right.
 
 
 
 
 
 
 
 This is done by targeting the correct pseudo-elements. How do we do that? Well, it depends on the actual number of columns in the grid. Here’s the CSS if two adjacent boxes are checked in a 5⨉4 grid:
 
 
 
 /* a checked box&#x27;s right borders (if the element to its right is checked) */
 input:not(:nth-of-type(4n)):checked + input:checked::before { 
   border-top-right-radius: 0; 
   border-bottom-right-radius: 0; 
   background: limegreen;
 }
 /* a checked box&#x27;s bottom borders (if the element below is checked) */
 input:nth-last-of-type(n+5):checked + * + * + * + input:checked::after {
   border-bottom-right-radius: 0;
   border-bottom-left-radius: 0;
   background: limegreen;
 }
 /* a checked box&#x27;s adjacent (right side) checked box&#x27;s left borders */
 input:not(:nth-of-type(4n)):checked + input:checked + input::before {         
   border-top-left-radius: 0; 
   border-bottom-left-radius: 0; 
   background: limegreen;
 }
 /* a checked box&#x27;s adjacent (below) checked box&#x27;s top borders */
 input:not(:nth-of-type(4n)):checked + * + * + * +  input:checked + input::before { 
   border-top-left-radius: 0; 
   border-top-right-radius: 0; 
   background: limegreen;
 }
 
 
 
 If you prefer you can generate the above code dynamically. However, a typical grid, say an image gallery, the number of columns will be small and likely a fixed number of items, whereas the rows might keep increasing. Especially if designed for mobile screens. That’s why this approach is still an efficient way to go. If for some reason your application happens to have limited rows and expanding columns, then consider rotating the grid sideways because, with a stream of items, CSS Grid arranges them left-to-right and top-to-bottom (i.e. row by row).
 
 
 
 We also need to add styling for the last checkboxes in the grid — they’re not all covered by pseudo-elements as they are the last items in each axis.
 
 
 
 /* a checked box&#x27;s (in last column) left borders */
 input:nth-of-type(4n-1):checked + input:checked {
   border-top-left-radius: 0;
   border-bottom-left-radius: 0;
 }
 /* a checked box&#x27;s (in last column) adjacent (below) checked box&#x27;s top borders */
 input:nth-of-type(4n):checked + * + * + * + input:checked {
   border-top-left-radius: 0;
   border-top-right-radius: 0;
 }
 
 
 
 Those are some tricky selectors! The first one…
 
 
 
 input:nth-of-type(4n-1):checked + input:checked
 
 
 
 …is basically saying this:
 
 
 
 A checked &lt;input&gt; element next to a checked &lt;input&gt; in the second last column.
 
 
 
 And the nth-of-type is calculated like this:
 
 
 
 4(0) - 1 &#x3D; no match
 4(1) - 1 &#x3D; 3rd item
 4(2) - 1 &#x3D; 7th item
 4(3) - 1 &#x3D; 11th item
 etc.
 
 
 
 So, we’re starting at the third checkbox and selecting every fourth one from there. And if a checkbox in that sequence is checked, then we style the checkboxes adjacent, too, if they are also checked.
 
 
 
 And this line:
 
 
 
 input:nth-of-type(4n):checked + * + * + * + input:checked
 
 
 
 Is saying this:
 
 
 
 An &lt;input&gt; element provided that is checked, is directly adjacent to an element, which is directly adjacent to another element, which is also directly adjacent to another element, which, in turn, is directly adjacent to an &lt;input&gt; element that is in a checked state.
 
 
 
 What that means is we’re selecting every fourth checkbox that is checked. And if a checkbox in that sequence is checked, then we style the next fourth checkbox from that checkbox if it, too, is checked.
 
 
 
 CodePen Embed Fallback
 
 
 
 Putting it to use
 
 
 
 What we just looked at is the general principle and logic behind the design. Again, how useful it is in your application will depend on the grid design.
 
 
 
 I used rounded borders, but you can try other shapes or even experiment with background effects (Temani has you covered for ideas). Now that you know how the formula works, the rest is totally up to your imagination.
 
 
 
 Here’s an instance of how it might look in a simple calendar:
 
 
 
 CodePen Embed Fallback
 
 
 
 Again, this is merely a rough prototype using static markup. And, there would be lots and lots of accessibility considerations to consider in a calendar feature.
 
 
 
 
 
 
 
 That’s a wrap! Pretty neat, right? I mean, there’s nothing exactly “new” about what’s happening. But it’s a good example of selecting things in CSS. If we have a handle on more advanced selecting techniques that use combinators and pseudos, then our styling powers can reach far beyond the styling one item — as we saw, we can conditionally style items based on the state of another element.
 
 Conditionally Styling Selected Elements in a Grid Container originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>De-Mystifying IndieWeb on a WordPress Site</title>
         <link href="https://css-tricks.com/de-mystifying-indieweb-on-a-wordpress-site/"/>
       <updated>2022-06-14T16:48:34.000Z</updated>
       <content type="text">Well, sheesh. I opened a little can of worms when sharing Miriam’s “Am I on the IndieWeb yet?” with a short post bemoaning my own trouble getting on the IndieWeb train. But it’s a good can of worms.
 
 
 
 I think it was something like the next day after publishing that short post that David Shanske reached out and offered to help wrap my head around IndieWeb and the components that it comprises. And gosh dang if it wasn’t ridiculously helpful! So much so that I’d like to link you up to a new post David wrote after we talked, then summarize things here as best as I can because (1) it’s helpful to write things down and (2) have a reference for later.
 
 
 
 
 
 
 
 Yes, IndieWeb is confusing.
 
 
 
 David had actually helped someone get their WordPress site all set up with IndieWeb powers. That person, too, was struggling to understand how the various pieces fit together. So, David already had this top of mind when Miriam and I were writing.
 
 
 
 “IndieWeb” is a new term for many folks and that’s where a lot of confusion breeds. Is it a framework? A philosophy? A set of standards? Depending on which one it is, the expectations shift as far as what it looks like to be a part of it.
 
 
 
 It’s sort of all of the above. And that needs to be solidified a bit. There’s nothing inherently confusing about IndieWeb itself once you view it through those different lenses. After reading David’s post my understanding is that IndieWeb is more of a set of protocols. Sorta like working with structured data or OpenGraph in markup. There’s nothing to install per se, but there are standards for how to integrate them into your work.
 
 
 
 Your identity powers IndieWeb. In other words, your site establishes your identity and can be used to do lots of things, like:
 
 
 
 Notify other IndieWeb-supported sites when they are mentionedReceive notifications from other IndieWeb sites when you are mentionedFetch information from a mention and format it for displayAuthenticate your identity through your own website (a là a Google sign-in button but connected to your site)…among other things.
 
 
 
 If that sorta sounds like pingbacks, well, it sorta is. But much more robust and maintained.
 
 
 
 It’s different (and perhaps easier) to implement IndieWeb features on WordPress than it is a static site.
 
 
 
 The big difference is that WordPress provides a lot of the requirements needed to do IndieWeb-y things. I like how David explains it:
 
 
 
 The IndieWeb implementation on WordPress is a [series] of building blocks that you can or cannot choose to use, which is what makes it wonderful, but sometimes confusing. WordPress has a philosophy of decisions, not options. But the IndieWeb is all about options…about building the features that are right for you.
 
 
 
 Those building blocks are plugins that you install to add IndieWeb protocols and technologies to WordPress. It’s awesome those are readily available because that takes a a lot of the work out of things. Running a static site, though, you’re on the hook for establishing most of that yourself.
 
 
 
 David’s post is 100% focused on the WordPress implementation. Your mileage may vary, but you will certainly walk away with a better idea of what protocols are available and how they fit together after reading his post — and hopefully this one as well.
 
 
 
 The IndieWeb WordPress plugin establishes your identity.
 
 
 
 
 
 
 
 I thought it was doing so much stuff behind the scenes, but it’s a lot more simple than that:
 
 
 
 The plugin by itself handles establishing your identity as the IndieWeb sees it. It offers an h-card template and widget. H-Card is the markup for marking up information about a person or place. So, this is an element many people opt to put on their site anyway.
 
 
 
 So, really, it’s possible to get the same sort of thing by correctly marking up a WordPress theme. The convenience here is that you get a handy little template that’s marked up to support the h-card open format and a widget to drop it into a theme’s widget area.
 
 
 
 Here’s a super detailed example of the h-card markup pulled from the documentation for Microformats2:
 
 
 
 &lt;div class&#x3D;&quot;h-card&quot;&gt;
   &lt;img class&#x3D;&quot;u-photo&quot; alt&#x3D;&quot;photo of Mitchell&quot;
        src&#x3D;&quot;https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg&quot;/&gt;
   &lt;a class&#x3D;&quot;p-name u-url&quot;
      href&#x3D;&quot;http://blog.lizardwrangler.com/&quot; 
     &gt;Mitchell Baker&lt;/a&gt;
  (&lt;a class&#x3D;&quot;u-url&quot; 
      href&#x3D;&quot;https://twitter.com/MitchellBaker&quot;
     &gt;@MitchellBaker&lt;/a&gt;)
   &lt;span class&#x3D;&quot;p-org&quot;&gt;Mozilla Foundation&lt;/span&gt;
   &lt;p class&#x3D;&quot;p-note&quot;&gt;
     Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.
   &lt;/p&gt;
   &lt;span class&#x3D;&quot;p-category&quot;&gt;Strategy&lt;/span&gt;
   &lt;span class&#x3D;&quot;p-category&quot;&gt;Leadership&lt;/span&gt;
 &lt;/div&gt;
 
 
 
 See those class names? Classes like .h-card, u-photo, p-name, etc. all provide contextual meaning for a person’s identity which it then parsed as JSON:
 
 
 
 {
   &quot;items&quot;: [{ 
     &quot;type&quot;: [&quot;h-card&quot;],
     &quot;properties&quot;: {
       &quot;photo&quot;: [&quot;https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg&quot;],
       &quot;name&quot;: [&quot;Mitchell Baker&quot;],
       &quot;url&quot;: [
         &quot;http://blog.lizardwrangler.com/&quot;,
         &quot;https://twitter.com/MitchellBaker&quot;
       ],
       &quot;org&quot;: [&quot;Mozilla Foundation&quot;],
       &quot;note&quot;: [&quot;Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.&quot;],
       &quot;category&quot;: [
         &quot;Strategy&quot;,
         &quot;Leadership&quot;
       ]
     }
   }]
 }
 
 
 
 The plugin isn’t doing the sending, receiving, or parsing. Instead, it provides a WordPress site with a way to verify your identity in the markup.
 
 
 
 Not all WordPress themes support Microformats
 
 
 
 
 
 
 
 If you scratched your head first time you saw “Microformats” like I did, David defines it nicely:
 
 
 
 […] Microformats…a way of marking up HTML to allow elements to be identified. It is one of several ways of doing this, but is a very simple and readable one, which is why it is popular in the IndieWeb community.
 
 
 
 The problem, as David continues, is that many themes aren’t marked up in a Microformats-friendly way — which is what the Microformats2 plugin is designed to fix.  That said, David is quick to call out that the plugin is extremely limited in how it accomplishes this, and he recommends instead marking up a theme by hand.
 
 
 
 According to David, the next major release of the Webmention plugin will likely include smarter ways of detecting content and images it can use and formatting them for Microformats2 support.
 
 
 
 Webmentions send and receive notifications.
 
 
 
 
 
 
 
 OK, so if you’ve established your identity through your site so you are discoverable, and your site is marked up for h-card support using Microformats2. Great! You still need something in the middle working as an operator that sends and receives notifications. In other words, when another site mentions you — called a Webmention — the site mentioning you needs a way to support sending that mention to you, and your site needs a way to accept it (or vice versa).
 
 
 
 That’s what the Webmention plugin is for. It’s also probably the source of most of my IndieWeb confusion. I thought it was formatting data and needed an additional service to send and receive it. Nope! It’s actually sending and receiving the data rather than creating the mention. Back to David:
 
 
 
 Back when it was built, the plugin handled only the business of receiving and sending webmentions, not handling display to any degree. Semantic Linkbacks, a separate plugin handled that for not only webmentions, but the older pingback and trackback protocols.
 
 
 
 So, the Webmention plugin is communicating notifications. Meanwhile, another plugin called Semantic Linkbacks is what handles the data. And what the heck are Semantic Linkbacks?
 
 
 
 Semantic Linkbacks fetch and handle data.
 
 
 
 
 
 
 
 Semantic Linkbacks is another plugin that handles another piece of the process. There’s no way I can explain it better than David already does:
 
 
 
 Semantic Linkbacks takes a webmention, which is a notification that another site has linked to something on your site, fetches the other site, and tries to render a display of the information. How that is done can vary from just a profile photo (if it can find one), to interpreting it as a full comment.It does this using Microformats.
 
 
 
 I expected that the main IndieWeb plugin was already doing this since it handles other markup. But it only provides the template and widget to get your identity on your site. Once the Semantic Linkbacks plugin fetches an incoming webmention, it takes the data, formats it, then attempts to display it.
 
 
 
 Sounds like the plugin will be somewhat merged with (or replaced by) an upcoming version of the Webmention plugin:
 
 
 
 Since many people are not inclined, or not comfortable modifying a theme, the new version of Webmentions will include several different alternative ways to try to find an image or summary to display…from OpenGraph (which Facebook and Twitter use to display URLs provided to it) to detecting the WordPress REST API version of a page and using that to get the author name and profile image. None of them will provided as much context as Microformats, but the experience will still be something worth installing.
 
 
 
 That’s certainly nice as it taps into the WordPress REST API for the JSON response and formats that for display.
 
 
 
 Brid.gy is a service to help display interactions.
 
 
 
 A Webmention can be an interaction, say someone likes your post on Twitter or retweets it.
 
 
 
 
 
 
 
 Differentiating a like from a repost from a comment from a whatever needs to happen, and you’d need to implement the Twitter (or whatever) API to draw those distinctions.
 
 
 
 That’s something you can certainly do! But if you’d rather plug and play, one of the IndieWeb community members made a service called Brid.gy. You create an account, hook up your site, and give app permissions to the service… then you’re done!
 
 
 
 What Brid.gy has done is essentially implement the APIs for Twitter, Facebook, Instagram, and others, so that when it detects that a post in those services that interacts with your syndicated post, a Webmention is sent to your site and goes through the process of publishing on your own site.
 
 
 
 There’s so much more!
 
 
 
 Quick hits:
 
 
 
 IndieAuth: This is a protocol based on OAuth 2. The plugin establishes an endpoint in the WordPress REST API that can be used to authenticate your identity through your own self-hosted site — essentially your own Google sign-in button but without establishing that endpoint yourself or needing to rely on a separate hosted API.Micropub: For those who use WordPress but prefer a different editor can install the Micropub plugin. This adds an endpoint that allows you to publish content to your site and using a Micropub-supported editor create items in a Microformats2 feed, giving you way more options for writing content outside of the WordPress Block Editor.Simple Location: David wrote this plugin and I was super impressed when he demoed it for me. The idea is it pulls in data from your current location that can used for everything from displaying the weather at the time you wrote a post, to creating an entire archive of posts on an embedded map based on the post location. I’d honestly love to see something like this baked directly into WordPress.
 
 
 
 The updated flow
 
 
 
 I attempted to make an illustration that outlines the various pieces in my last post, but let’s try again with an updated understanding of what’s happening:
 
 
 
 (Full size)
 
 
 
 Is this all making sense?
 
 
 
 High fives to David for both reaching out and taking the time to show me what it looks like to implement IndieWeb on WordPress. I can’t claim I fully understand all the nuances, but I at least feel like I have a decent grasp of the pieces — the philosophy, protocols, and tech — that are required to make it happen.
 
 
 
 I’d like to turn it around to you! Does this help clarify things for you? Is there anything you’re struggling to understand? Think you’re able to configure a WordPress site with IndieWeb features now? Let’s take it to the comments!
 
 De-Mystifying IndieWeb on a WordPress Site originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Useful Tools for Visualizing Databases on a Budget</title>
         <link href="https://css-tricks.com/useful-tools-for-visualizing-databases-on-a-budget/"/>
       <updated>2022-06-13T19:15:26.000Z</updated>
       <content type="text">A diagram is a graphical representation of information that depicts the structure, relationship, or operation of anything. Diagrams enable your audience to visually grasp hidden information and engage with them in ways that words alone cannot. Depending on the type of project, there are numerous ways to use diagrams. For example, if you want to depict the relationship between distinct pieces, we usually use an Entity Relationship Diagram (ERD). There are many great tools that can help you sketch out your database designs beautifully.
 
 
 
 In this article, I will be sharing some of my favorite tools that I use to curate my data structures and bring my ideas to life.
 
 
 
 
 
 
 
 Google Docs Drawing
 
 
 
 The drawing function in Google Docs allows you to add illustrations to your pages. You can add custom shapes, charts, graphs, infographics, and text boxes to your document with the built-in drawing tool.
 
 
 
 
 
 
 
 Sketching with Google Docs
 
 
 
 Although it is simple to add a graphic to your Google Docs, the procedure is not totally visible. Here’s how:
 
 
 
 1 . Open a new document on Google Docs.
 
 
 
 
 
 
 
 2 . Click on the insert button and select Drawing . Then, from the drop-down option, choose New to open the drawing screen.
 
 
 
 
 
 
 
 3 . You can use the toolbox on this screen to add text boxes, select lines, and shapes, and modify the colors of your drawing.
 
 
 
 
 
 
 
 4 . You may also use the cursor to adjust the size of your drawings and the color of your designs by using the toolbox at the top of your screen.
 
 
 
 
 
 
 
 5 . When finished, click the Save and close button. You can click on the “File” toolbar displayed on the top of your screen to download your document.
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?Online.Requires an Account?Yes, a Google account is required.Collaborative Editing?Yes, with Google Drive sharing.Import SQLNot Applicable.Export SQLNot Applicable.Export Formats.doc, .pdf, .rtf, .odt, .txt, .html, .epubGenerate Shareable URLYes.
 
 
 
 Google Docs offers amazing convenience. However, diagramming databases is not something it was intended for. You may find yourself frustrated with redrawing arrows and relationships if you are making frequent edits to your model.
 
 
 
 Graphviz
 
 
 
 Graphviz is a free graph visualization software that allows us to express information diagrammatically.
 
 
 
 
 
 
 
 Graphviz implements the DOT language. The DOT language is an abstract grammar that makes use of terminals, non terminals, parentheses, square brackets, and vertical bars. More information about the DOT language can be found in its documentation.
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?CLI.Visual Studio Code, Eclipse, and Notepad++.Graphical Interfaces.Requires an Account?No.Collaborative Editing?Not Applicable.Import SQLYes, using SQL Graphviz.Export SQLYes, using SQL Graphviz.Export Formats.gif, .png, .jpeg, .json, .pdf and moreGenerate Shareable URLNot Applicable.
 
 
 
 Graphviz has an impressive and supportive community. However, a high level of SQL support is only available when you install additional third-party software. This overhead may make it less approachable to users that are not comfortable setting up their computer to support these tools.
 
 
 
 ERDPlus
 
 
 
 ERDPlus is a database modeling tool that allows you to create Entity Relationship Diagrams, Relational Schemas, Star Schemas, and SQL DDL statements.
 
 
 
 
 
 
 
 It includes a brief guide on how to create your ER diagrams, which is especially useful for beginners. You can also easily convert your created ER diagrams to relation schemas.
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Not Applicable.Import SQLNo.Export SQLYes, with the support of SQL DDL statements.Export Formats.pngGenerate Shareable URLNot Applicable.
 
 
 
 ERDPlus is suited for SQL. It does lack additional export formats and ability to share with teams, but these features are not necessary with import and export.
 
 
 
 Diagrams.net
 
 
 
 Diagrams.net (previously Draw.io) is a free online diagramming tool that can be used to create flowcharts, UML diagrams, database models, and other types of diagrams.
 
 
 
 
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?Desktop and Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Sharing requires Google Drive or OneDrive.Import SQLYes.Export SQLNo.Export Formats.png, .jpeg, .svg, .pdf, .html and more.Generate Shareable URLYes, export as URL an option.
 
 
 
 Diagrams.net is designed to support many different workflows. Its ability to easily integrate with third-party integrations such as Trello, Quip, Notion, and others distinguishes it from the other options. The ability to share and collaborate may make it work well for collaborative teams.
 
 
 
 Conclusion
 
 
 
 This article is based on using free database tools that could help visualize your ideas and their capabilities with limitations to great details on how to use these tools.
 
 
 
 In my research, I also came across other excellent tools with free trials available for creating database diagrams like Lucidchart, EDrawMax, and, DrawSQL. However, these free trials have limitations which may make them less suited for developers working on multiple projects.
 
 
 
 I strongly recommend that you read the documentation for each of these tools to determine what works best for you and, most importantly, to avoid any difficulties in using these tools.
 
 
 
 Thank you for taking the time to read this far, and I hope you found what you were looking for. Have a wonderful day!
 
 Useful Tools for Visualizing Databases on a Budget originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: The Spinner</title>
         <link href="https://css-tricks.com/single-element-loaders-the-spinner/"/>
       <updated>2022-06-10T14:26:06.000Z</updated>
       <content type="text">Making CSS-only loaders is one of my favorite tasks. It’s always satisfying to look at those infinite animations. And, of course, there are lots of techniques and approaches to make them — no need to look further than CodePen to see just how many. In this article, though, we will see how to make a single element loader writing as little code as possible.
 
 
 
 
 
 
 
 I have made a collection of more than 500 single div loaders and in this four-part series, I am going to share the tricks I used to create many of them. We will cover a huge number of examples, showing how small adjustments can lead to fun variations, and how little code we need to write to make it all happen!
 
 
 
 
 Single-Element Loaders series:
 
 
 
 Single Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 
 
 For this first article, we are going to create a one of the more common loader patterns: spinning bars:
 
 
 
 CodePen Embed Fallback
 
 
 
 Here’s the approach
 
 
 
 A trivial implementation for this loader is to create one element for each bar wrapped inside a parent element (for nine total elements), then play with opacity and transform to get the spinning effect.
 
 
 
 My implementation, though, requires only one element:
 
 
 
 &lt;div class&#x3D;&quot;loader&quot;&gt;&lt;/div&gt;
 
 
 
 …and 10 CSS declarations:
 
 
 
 .loader {
   width: 150px; /* control the size */
   aspect-ratio: 1;
   display: grid;
   mask: conic-gradient(from 22deg, #0003, #000);
   animation: load 1s steps(8) infinite;
 }
 .loader,
 .loader:before {
   --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */
   background: 
     var(--_g)/34% 8%  space no-repeat,
     var(--_g)/8%  34% no-repeat space;
 }
 .loader:before {
   content: &quot;&quot;;
   transform: rotate(45deg);
 }
 @keyframes load {
   to { transform: rotate(1turn); }
 }
 
 
 
 Let’s break that down
 
 
 
 At first glance, the code may look strange but you will see that it’s more simple than what you might think. The first step is to define the dimension of the element. In our case, it’s a 150px square. We can put aspect-ratio to use so the element stays square no matter what.
 
 
 
 .loader {
   width: 150px; /* control the size */
   aspect-ratio: 1; /* make height equal to width */
 }
 
 
 
 When building CSS loaders, I always try to have one value for controlling the overall size. In this case, it’s the width and all the calculations we cover will refer to that value. This allows me to change a single value to control the loader. It’s always important to be able to easily adjust the size of our loaders without the need to adjust a lot of additional values.
 
 
 
 Next, we will use gradients to create the bars. This is the trickiest part! Let’s use one gradient to create two bars like the below:
 
 
 
 background: linear-gradient(#17177c 0 0) 50%/34% 8% space no-repeat;
 
 
 
 
 
 
 
 Our gradient is defined with one color and two color stops. The result is a solid color with no fading or transitions. The size is equal to 34% wide and 8% tall. It’s also placed in the center (50%). The trick is the use of the keyword value space — this duplicates the gradient, giving us two total bars.
 
 
 
 From the specification:
 
 
 
 The image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area.
 
 
 
 I am using a width equal to 34% which means we cannot have more than two bars (3*34% is greater than 100%) but with two bars we will have empty spaces (100% - 2 * 34% &#x3D; 32%). That space is placed in the center between the two bars. In other words, we use a width for the gradient that is between 33% and 50% to make sure we have at least two bars with a little bit of space between them. The value space is what correctly places them for us.
 
 
 
 We do the same and make a second similar gradient to get two more bars at the top and bottom, which give us a background property value of:
 
 
 
 background: 
  linear-gradient(#17177c 0 0) 50%/34% 8%  space no-repeat,
  linear-gradient(#17177c 0 0) 50%/8%  34% no-repeat space;
 
 
 
 We can optimize that using a CSS variable to avoid repetition:
 
 
 
 --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */
 background: 
  var(--_g)/34% 8%  space no-repeat,
  var(--_g)/8%  34% no-repeat space;
 
 
 
 So, now we have four bars and, thanks to CSS variables, we can write the color value once which makes it easy to update later (like we did with the size of the loader).
 
 
 
 To create the remaining bars, let’s tap into the .loader element and its ::before pseudo-element to get four more bars for a grand total of eight in all.
 
 
 
 .loader {
   width: 150px; /* control the size */
   aspect-ratio: 1;
   display: grid;
 }
 .loader,
 .loader::before {
   --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */
   background: 
     var(--_g)/34% 8%  space no-repeat,
     var(--_g)/8%  34% no-repeat space;
 }
 .loader::before {
   content: &quot;&quot;;
   transform: rotate(45deg);
 }
 
 
 
 Note the use of display: grid. This allows us to rely on the grid’s default stretch alignment to make the pseudo-element cover the whole area of its parent; thus there’s no need to specify a dimension on it — another trick that reduces the code and avoid us to deal with a lot of values!
 
 
 
 Now let’s rotate the pseudo-element by 45deg to position the remaining bars. Hover the following demo to see the trick:
 
 
 
 CodePen Embed Fallback
 
 
 
 Setting opacity
 
 
 
 What we’re trying to do is create the impression that there is one bar that leaves a trail of fading bars behind it as it travels a circular path. What we need now is to play with the transparency of our bars to make that trail, which we are going to do with CSS mask combined with a conic-gradient as follows:
 
 
 
 mask: conic-gradient(from 22deg,#0003,#000);
 
 
 
 To better see the trick, let’s apply this to a full-colored box:
 
 
 
 CodePen Embed Fallback
 
 
 
 The transparency of the red color is gradually increasing clockwise. We apply this to our loader and we have the bars with different opacity:
 
 
 
 
 
 
 
 In reality, each bar appears to fade because it’s masked by a gradient and falls between two semi-transparent colors. It’s hardly noticeable when this runs, so it’s sort of like being able to say that all the bars have the same color with a different level of opacity.
 
 
 
 The rotation
 
 
 
 Let’s apply a rotation animation to get our loader. Note, that we need a stepped animation and not a continuous one that’s why I am using steps(8). 8 is nothing but the number of the bars, so that value can be changed depending on how many bars are in use.
 
 
 
 .loader {
   animation: load 3s steps(8) infinite;
 }
 
 /* Same as before: */
 @keyframes load {
   to { transform: rotate(1turn) }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 That’s it! We have our loader with only one element and a few lines of CSS. We can easily control its size and color by adjusting one value.
 
 
 
 CodePen Embed Fallback
 
 
 
 Since we only used the ::before pseudo-element, we can add four more bars by using ::after to end with 12 bars in total and almost the same code:
 
 
 
 CodePen Embed Fallback
 
 
 
 We update the rotation of our pseudo-elements to consider 30deg and 60deg instead of 45deg while using an twelve-step animation, rather than eight. I also decreased the height to 5% instead of 8% to make the bars a little thinner.
 
 
 
 Notice, too, that we have grid-area: 1/1 on the pseudo-elements. This allows us to place them in the same area as one another, stacked on top of each other.
 
 
 
 Guess what? We can reach for the same loader using another implementation:
 
 
 
 CodePen Embed Fallback
 
 
 
 Can you figure out the logic behind the code? Here is a hint: the opacity is no longer handled with a CSS mask but inside the gradient and is also using the opacity property.
 
 
 
 Why not dots instead?
 
 
 
 We can totally do that:
 
 
 
 CodePen Embed Fallback
 
 
 
 If you check the code, you will see that we’re now working with a radial gradient instead of a linear one. Otherwise, the concept is exactly the same where the mask creates the impression of opacity, but we made the shapes as circles instead of lines.
 
 
 
 Below is a figure to illustrate the new gradient configuration:
 
 
 
 
 
 
 
 If you’re using Safari, note that the demo may be buggy. That’s because Safari currently lacks support for the at syntax in radial gradients. But we can reconfigure the gradient a bit to overcome that:
 
 
 
 .loader,
 .loader:before,
 .loader:after {
   background:
     radial-gradient(
       circle closest-side,
       currentColor 90%,
       #0000 98%
     ) 
     50% -150%/20% 80% repeat-y,
     radial-gradient(
       circle closest-side,
       currentColor 90%,
       #0000 98%
     ) 
     -150% 50%/80% 20% repeat-x;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 More loader examples
 
 
 
 Here is another idea for a spinner loader similar to the previous one.
 
 
 
 CodePen Embed Fallback
 
 
 
 For this one, I am only relying on background and mask to create the shape (no pseudo-elements needed). I am also defining the configuration with CSS variables to be able to create a lot of variations from the same code — another example of just the powers of CSS variables. I wrote another article about this technique if you want to more details.
 
 
 
 Note that some browsers still rely on a -webkit- prefix for mask-composite with its own set of values, and will not display the spinner in the demo. Here is a way to do it without mast-composite for more browser support.
 
 
 
 I have another one for you:
 
 
 
 CodePen Embed Fallback
 
 
 
 For this one, I am using a background-color to control the color, and use mask and mask-composite to create the final shape:
 
 
 
 
 
 
 
 Before we end, here are some more spinning loaders I made a while back. I am relying on different techniques but still using gradients, masks, pseudo-element, etc. It could be a good exercise to figure out the logic of each one and learn new tricks at the same time. This said, if you have any question about them, the comment section is down below.
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 Wrapping up
 
 
 
 See, there’s so much we can do in CSS with nothing but a single div, a couple of gradients, pseudo-elements, variables. It seems like we created a whole bunch of different spinning loaders, but they’re all basically the same thing with slight modifications.
 
 
 
 This is only the the beginning. In this series, we will be looking at more ideas and advanced concepts for creating CSS loaders.
 
 
 
 
 Single-Element Loaders series:
 
 
 
 Single Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 Single Element Loaders: The Spinner originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Am I on the IndieWeb yet?</title>
         <link href="https://css-tricks.com/am-i-on-the-indieweb-yet/"/>
       <updated>2022-06-09T15:32:50.000Z</updated>
       <content type="text">Can’t smash the Like button hard enough for what Miriam Suzanne has to say on the challenging technical hurdles of implementing Webmentions:
 
 
 
 The first round required several online services along with HTML &amp; JS changes to my static site, just to verify my indieweb identity. Then more changes to the site and more online services to help fetch any mentions (so far, nothing to see, but that’s probably expected). It seems the only way to test the setup is to launch all those changes publicly, and then ask for other devs to send you mentions.[…]I’m an experienced web developer, and I can figure it out. But the steps aren’t simple, and most of my friends are not web developers. So, to me, this all feels like the prototype of an idea – a proof of concept.
 
 
 
 A proof of concept for sure. And one that has been around for quite some time. The IndieWeb idea of owning your own data and using your website as a social hub is right up my alley — and likely yours, too, as someone working on the front end.
 
 
 
 
 
 
 
 Update! David Shanske is one of the developers of the WordPress plugins that support IndieWeb features and he not only published a wonderful explanation of how everything fits together, but also reached out directly and helped me wrap it all around my head.
 
 
 
 Yet, I’ve tinkered on and off with it — specifically Webmentions — over the past like three years with little to show for it. The problem isn’t so much the documentation of getting started because it’s all there. It’s more a combination of things…
 
 
 
 The wiki is confusing. Wikis are super cool in general, but the non-linear nature of it makes it tough to know where to start and where to end.The plugin ecosystem is complex. My personal site is on WordPress and there’s a plugin designed to make it easy to integrate IndieWeb features on it. Except that it’s really one plugin that steers you to install several others, each one introducing a technology that I honestly struggle to understand.There’s a bunch of terms to learn. I mean, “IndieWeb” and “Webmention” are already difficult to grok. Toss in things like “Micropub,” “Microformats,” “IndieAuth,” and “Semantic Linkbacks,” and suddenly it feels like a bunch of puzzle pieces from different puzzles trying to fit together.Some middleware seems necessary? For example, I had to give a service called Bridgy access to my Twitter to get that activity going. It apparently has something to do with Twitter’s shortened t.co URLs and making them play well with microformats.
 
 
 
 But, like Miriam, I struggled my way through it and got something working in the end. This is the sort of visual I wish I had when I was first getting started, and maybe it’ll help you too.
 
 
 
 
 
 
 
 Feels like a lot to get Webmentions going, but maybe that’s only because I have such a light grasp of the tech and how it all fits together. All the pieces are there, though, and even with the initial struggle, I love the IndieWeb concept, er prototype.
 To Shared Link — Permalink on CSS-Tricks
 Am I on the IndieWeb yet? originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
 
 </feed>