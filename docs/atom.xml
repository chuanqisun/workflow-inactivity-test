<?xml version="1.0" encoding="utf-8"?>
   <feed xmlns="http://www.w3.org/2005/Atom">
 
 
   <title>osmosfeed starter test 3</title>
   <link href="https://chuanqisun.github.io/workflow-inactivity-test/"/>
   <updated>2022-07-02T02:01:00.189Z</updated>
   <id>https://chuanqisun.github.io/workflow-inactivity-test/</id>
   <generator uri="https://github.com/osmoscraft/osmosfeed" version="0.0.13">osmosfeed</generator>
 
     <entry>
       <title>Single Element Loaders: Going 3D!</title>
         <link href="https://css-tricks.com/single-element-loaders-going-3d/"/>
       <updated>2022-07-01T13:24:09.000Z</updated>
       <content type="text">For this fourth and final article of our little series on single-element loaders, we are going to explore 3D patterns. When creating a 3D element, it’s hard to imagine that just one HTML element is enough to simulate something like all six faces of a cube. But  maybe we can get away with something more cube-like instead by showing only the front three sides of the shape — it’s totally possible and that’s what we’re going to do together.
 
 
 
 
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — you are here
 
 
 
 
 The split cube loader
 
 
 
 Here is a 3D loader where a cube is split into two parts, but is only made with only a single element:
 
 
 
 CodePen Embed Fallback
 
 
 
 Each half of the cube is made using a pseudo-element:
 
 
 
 
 
 
 
 Cool, right?! We can use a conic gradient with CSS clip-path on the element’s ::before and ::after pseudos to simulate the three visible faces of a 3D cube. Negative margin is what pulls the two pseudos together to overlap and simulate a full cube. The rest of our work is mostly animating those two halves to get neat-looking loaders!
 
 
 
 Let’s check out a visual that explains the math behind the clip-path points used to create this cube-like element:
 
 
 
 
 
 
 
 We have our variables and an equation, so let’s put those to work. First, we’ll establish our variables and set the sizing for the main .loader element:
 
 
 
 .loader {
   --s: 150px; /* control the size */
   --_d: calc(0.353 * var(--s)); /* 0.353 &#x3D; sin(45deg)/2 */
 
   width: calc(var(--s) + var(--_d)); 
   aspect-ratio: 1;
   display: flex;
 }
 
 
 
 Nothing too crazy so far. We have a 150px square that’s set up as a flexible container. Now we establish our pseudos:
 
 
 
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   flex: 1;
 }
 
 
 
 Those are two halves in the .loader container. We need to paint them in, so that’s where our conic gradient kicks in:
 
 
 
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   flex: 1;
   background:
     conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),
     #fff 135deg, #666 0 270deg, #aaa 0);
 }
 
 
 
 The gradient is there, but it looks weird. We need to clip it to the element:
 
 
 
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   flex: 1;
   background:
     conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),
     #fff 135deg, #666 0 270deg, #aaa 0);
   clip-path:
     polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));
 }
 
 
 
 Let’s make sure the two halves overlap with a negative margin:
 
 
 
 .loader::before {
   margin-right: calc(var(--_d) / -2);
 }
 
 .loader::after {
   margin-left: calc(var(--_d) / -2);
 }
 
 
 
 Now let’s make ‘em move!
 
 
 
 .loader::before,
 .loader::after {
   /* same as before */
   animation: load 1.5s infinite cubic-bezier(0, .5, .5, 1.8) alternate;
 }
 
 .loader::after {
   /* same as before */
   animation-delay: -.75s
 }
 
 @keyframes load{
   0%, 40%   { transform: translateY(calc(var(--s) / -4)) }
   60%, 100% { transform: translateY(calc(var(--s) / 4)) }
 }
 
 
 
 Here’s the final demo once again:
 
 
 
 CodePen Embed Fallback
 
 
 
 The progress cube loader
 
 
 
 Let’s use the same technique to create a 3D progress loader. Yes, still only one element!
 
 
 
 CodePen Embed Fallback
 
 
 
 We’re not changing a thing as far as simulating the cube the same way we did before, other than changing the loader’s height and aspect ratio. The animation we’re making relies on a surprisingly easy technique where we update the width of the left side while the right side fills the remaining space, thanks to flex-grow: 1.
 
 
 
 The first step is to add some transparency to the right side using opacity:
 
 
 
 CodePen Embed Fallback
 
 
 
 This simulates the effect that one side of the cube is filled in while the other is empty. Then we update the color of the left side. To do that, we either update the three colors inside the conic gradient or we do it by adding a background color with a background-blend-mode:
 
 
 
 .loader::before {
   background-color: #CC333F; /* control the color here */
   background-blend-mode: multiply;
 }
 
 
 
 This trick only allows us to update the color only once. The right side of the loader blends in with the three shades of white from the conic gradient to create three new shades of our color, even though we’re only using one color value. Color trickery!
 
 
 
 CodePen Embed Fallback
 
 
 
 Let’s animate the width of the loader’s left side:
 
 
 
 CodePen Embed Fallback
 
 
 
 Oops, the animation is a bit strange at the beginning! Notice how it sort of starts outside of the cube? This is because we’re starting the animation at the 0% width. But due to the clip-path and negative margin we’re using, what we need to do instead is start from our --_d variable, which we used to define the clip-path points and the negative margin:
 
 
 
 @keyframes load {
   0%,
   5% {width: var(--_d); }
   95%,
   100% {width: 100%; }
 }
 
 
 
 That’s a little better:
 
 
 
 CodePen Embed Fallback
 
 
 
 But we can make this animation even smoother. Did you notice we’re missing a little something? Let me show you a screenshot to compare what the final demo should look like with that last demo:
 
 
 
 
 
 
 
 It’s the bottom face of the cube! Since the second element is transparent, we need to see the bottom face of that rectangle as you can see in the left example. It’s subtle, but should be there!
 
 
 
 We can add a gradient to the main element and clip it like we did with the pseudos:
 
 
 
 background: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;
 
 
 
 Here’s the full code once everything is pulled together:
 
 
 
 .loader {
   --s: 100px; /* control the size */
   --_d: calc(0.353*var(--s)); /* 0.353 &#x3D; sin(45deg) / 2 */
 
   height: var(--s); 
   aspect-ratio: 3;
   display: flex;
   background: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;
   clip-path: polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));
 }
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   clip-path: inherit;
   background:
     conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),
      #fff 135deg, #666 0 270deg, #aaa 0);
 }
 .loader::before {
   background-color: #CC333F; /* control the color here */
   background-blend-mode: multiply;
   margin-right: calc(var(--_d) / -2);
   animation: load 2.5s infinite linear;
 }
 .loader:after {
   flex: 1;
   margin-left: calc(var(--_d) / -2);
   opacity: 0.4;
 }
 
 @keyframes load {
   0%,
   5% { width: var(--_d); }
   95%,
   100% { width: 100%; }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 That’s it! We just used a clever technique that uses pseudo-elements, conic gradients, clipping, background blending, and negative margins to get, not one, but two sweet-looking 3D loaders with nothing more than a single element in the markup.
 
 
 
 More 3D
 
 
 
 We can still go further and simulate an infinite number of 3D cubes using one element — yes, it’s possible! Here’s a grid of cubes:
 
 
 
 CodePen Embed Fallback
 
 
 
 This demo and the following demos are unsupported in Safari at the time of writing.
 
 
 
 Crazy, right? Now we’re creating a repeated pattern of cubes made using a single element… and no pseudos either! I won’t go into fine detail about the math we are using (there are very specific numbers in there) but here is a figure to visualize how we got here:
 
 
 
 
 
 
 
 We first use a conic-gradient to create the repeating cube pattern. The repetition of the pattern is controlled by three variables:
 
 
 
 --size: True to its name, this controls the size of each cube.--m: This represents the number of columns.--n: This is the number of rows.--gap: this the gap or distance between the cubes
 
 
 
 .cube {
   --size: 40px; 
   --m: 4; 
   --n: 5;
   --gap :10px;
 
   aspect-ratio: var(--m) / var(--n);
   width: calc(var(--m) * (1.353 * var(--size) + var(--gap)));
   background:
     conic-gradient(from -90deg at var(--size) calc(0.353 * var(--size)),
       #249FAB 135deg, #81C5A3 0 270deg, #26609D 0) /* update the colors here */
     0 0 / calc(100% / var(--m)) calc(100% / var(--n));
 }
 
 
 
 Then we apply a mask layer using another pattern having the same size. This is the trickiest part of this idea. Using a combination of a linear-gradient and a conic-gradient we will cut a few parts of our element to keep only the cube shapes visible.
 
 
 
 .cube {
   /* etc. */
   mask: 
     linear-gradient(to bottom right,
        #0000 calc(0.25 * var(--size)),
        #000 0 calc(100% - calc(0.25 * var(--size)) - 1.414 * var(--gap)),
        #0000 0),
     conic-gradient(from -90deg at right var(--gap) bottom var(--gap), #000 90deg, #0000 0);  
   mask-size: calc(100% / var(--m)) calc(100% / var(--n));
   mask-composite: intersect;
 }
 
 
 
 The code may look a bit complex but thanks to CSS variables all we need to do is to update a few values to control our matrix of cubes. Need a 10⨉10 grid? Update the --m and --n variables to 10. Need a wider gap between cubes? Update the --gap value. The color values are only used once, so update those for a new color palette!
 
 
 
 Now that we have another 3D technique, let’s use it to build variations of the loader by playing around with different animations. For example, how about a repeating pattern of cubes sliding infinitely from left to right?
 
 
 
 CodePen Embed Fallback
 
 
 
 This loader defines four cubes in a single row. That means our --n value is 4 and --m is equal to 1 . In other words, we no longer need these!
 
 
 
 Instead, we can work with the --size and --gap variables in a grid container:
 
 
 
 .loader {
   --size: 70px;
   --gap: 15px;  
 
   width: calc(3 * (1.353 * var(--size) + var(--gap)));
   display: grid;
   aspect-ratio: 3;
 }
 
 
 
 This is our container. We have four cubes, but only want to show three in the container at a time so that we always have one sliding in as one is sliding out. That’s why we are factoring the width by 3 and have the aspect ratio set to 3 as well.
 
 
 
 Let’s make sure that our cube pattern is set up for the width of four cubes. We’re going to do this on the container’s ::before pseudo-element:
 
 
 
 .loader::before { 
   content: &quot;&quot;;
   width: calc(4 * 100% / 3);
   /*
      Code to create four cubes
   */
 }
 
 
 
 Now that we have four cubes in a three-cube container, we can justify the cube pattern to the end of the grid container to overflow it, showing the last three cubes:
 
 
 
 .loader {
   /* same as before */
   justify-content: end;
 }
 
 
 
 Here’s what we have so far, with a red outline to show the bounds of the grid container:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now all we have to do is to move the pseudo-element to the right by adding our animation:
 
 
 
 @keyframes load {
   to { transform: translate(calc(100% / 4)); }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 Did you get the trick of the animation? Let’s finish this off by hiding the overflowing cube pattern and by adding a touch of masking to create that fading effect that the start and the end:
 
 
 
 .loader {
   --size: 70px;
   --gap: 15px;  
   
   width: calc(3*(1.353*var(--s) + var(--g)));
   display: grid;
   justify-items: end;
   aspect-ratio: 3;
   overflow: hidden;
   mask: linear-gradient(90deg, #0000, #000 30px calc(100% - 30px), #0000);
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 We can make this a lot more flexible by introducing a variable, --n, to set how many cubes are displayed in the container at once. And since the total number of cubes in the pattern should be one more than --n, we can express that as calc(var(--n) + 1).
 
 
 
 Here’s the full thing:
 
 
 
 CodePen Embed Fallback
 
 
 
 OK, one more 3D loader that’s similar but has the cubes changing color in succession instead of sliding:
 
 
 
 CodePen Embed Fallback
 
 
 
 We’re going to rely on an animated background with background-blend-mode for this one:
 
 
 
 .loader {
   /* ... */
   background:
     linear-gradient(#ff1818 0 0) 0% / calc(100% / 3) 100% no-repeat,
     /* ... */;
   background-blend-mode: multiply;
   /* ... */
   animation: load steps(3) 1.5s infinite;
 }
 @keyframes load {
   to { background-position: 150%; }
 }
 
 
 
 I’ve removed the superfluous code used to create the same layout as the last example, but with three cubes instead of four. What I am adding here is a gradient defined with a specific color that blends with the conic gradient, just as we did earlier for the progress bar 3D loader.
 
 
 
 From there, it’s animating the background gradient’s background-position as a three-step animation to make the cubes blink colors one at a time.
 
 
 
 If you are not familiar with the values I am using for background-position and the background syntax, I highly recommend one of my previous articles and one of my Stack Overflow answers. You will find a very detailed explanation there.
 
 
 
 Can we update the number of cubes to make it variables?
 
 
 
 Yes, I do have a solution for that, but I’d like you to take a crack at it rather than embedding it here. Take what we have learned from the previous example and try to do the same with this one — then share your work in the comments!
 
 
 
 Variations galore!
 
 
 
 Like the other three articles in this series, I’d like to leave you with some inspiration to go forth and create your own loaders. Here is a collection that includes the 3D loaders we made together, plus a few others to get your imagination going:
 
 
 
 CodePen Embed Fallback
 
 
 
 That’s a wrap
 
 
 
 I sure do hope you enjoyed spending time making single element loaders with me these past few weeks. It’s crazy that we started with seemingly simple spinner and then gradually added new pieces to work ourselves all the way up to 3D techniques that still only use a single element in the markup. This is exactly what CSS looks like when we harness its powers: scalable, flexible, and reusable.
 
 
 
 Thanks again for reading this little series! I’ll sign off by reminding you that I have a collection of more than 500 loaders if you’re looking for more ideas and inspiration.
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — you are here
 
 
 Single Element Loaders: Going 3D! originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Bunny Fonts</title>
         <link href="https://css-tricks.com/bunny-fonts/"/>
       <updated>2022-06-30T17:28:57.000Z</updated>
       <content type="text">Bunny Fonts bills itself as the “privacy-first web font platform designed to put privacy back into the internet.” According to its FAQ:
 
 
 
 With a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user’s personal data into their own hands.
 
 
 
 Hard for my mind not to go straight to Google Fonts. Bunny Fonts even says they are a drop-in replacement for Google Fonts. It offers the same open source fonts and holds the same API structure used by Google Fonts. 
 
 
 
 
 
 
 
 Now, I’m no GDPR expert but the possibility of Google collecting data through its Fonts API is hardly unsurprising or even unexpected. I was curious to check out Google’s privacy statement for Fonts:
 
 
 
 The Google Fonts API logs the details of the HTTP request, which includes the timestamp, requested URL, and all HTTP headers (including referrer and user agent string) provided in connection with the use of our CSS API.IP addresses are not logged.
 
 
 
 Comparing that to what Bunny Fonts says in its FAQ:
 
 
 
 When using Bunny Fonts, no personal data or logs are stored. All the requests are processed completely anonymously.
 
 
 
 Or perhaps more thoroughly explained on the bunny.net GDPR statement:
 
 
 
 In most cases, the data held and collected by bunny.net does not contain any user identifiable data. In some cases, which depend on how you are using bunny.net and how your website is structured, personal data may be collected from your users. Such information includes hosting user uploaded content as well as personal data that might be transmitted in the URL, User-Agent or Referer headers of the HTTP protocol.
 
 
 
 Sounds pretty similar, right? Well, it may not have been that similar earlier this year when a German court ruled that embedded Google Fonts violated GDPR compliance. It appears that one line in the Google Fonts privacy statement about IP addresses came after the ruling, once the API scrubbed them from collected data.
 
 
 
 So, do you need to ditch Google Fonts to be GDPR compliant? I would imagine not if IP addresses were the sole concern, but I’ll leave that for folks who know the rules to comment on that.
 
 
 
 But if you are concerned about Google Font’s GDPR compliance, I guess Bunny Fonts is worth a look! And seeing that it’s powered by bunny.net’s CDN services, you should get pretty comparable performance marks.
 To Shared Link — Permalink on CSS-Tricks
 Bunny Fonts originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Text-overflow: ellipsis considered harmful</title>
         <link href="https://css-tricks.com/text-overflow-ellipsis-considered-harmful/"/>
       <updated>2022-06-30T13:38:16.000Z</updated>
       <content type="text">Eric Eggert:
 
 
 
 There are a few legitimate use cases for this technique. For example, you might have a table with titles and descriptions. To preserve more space for the title, you constrain the description to one line on small viewports to the one-line and you repeat the description on the detail page for this item.However, I often see it used on items like buttons or even form labels to make them look nicer(?) or when aligning them vertically. But once you change the viewport or resize the text, the end of the text disappears.
 
 
 
 I think “… if used in certain situations” belongs there, but it certainly makes for a better blog post title without it. As Eric says, there are legitimate use cases for truncating text. Maybe only a few, but legitimate nonetheless.
 
 
 
 
 
 
 
 The ultimate goal is to prevent “losing” data, something that can certainly happen in CSS. Text that inadvertently overflows a container is lost in the sense that it’s simply not there. And if that text is simply not there, users will miss it, even if it is the best and most well-crafted call to action ever published to the web.
 
 
 
 Eric points out that there is no way to make the text truncated by text-overflow: ellipsis visible. Once it’s gone, it’s gone (although screen readers seem to announce it). It’s practically lost data. You might be OK with that. That’s cool as long as you know what’s happening and it’s intended.
 
 
 
 But here’s what Eric says that made me want to share this:
 
 
 
 Don’t constrain the content to fit your design, make your CSS flexible to handle longer words gracefully.
 
 
 
 Again, you might want to conform content to the design. But I’d probably argue, like Eric, that the design should adapt to the content rather than the other way around. I have a hard time recalling any situation where the text on a page is unimportant or without purpose to the extent that I’d be cool cutting if off at any arbitrary point determined by a CSS property. Maybe an archive of blog posts where each post shows an excerpt of the post content before truncating, but that’s not exactly a use case for text-overflow: ellipse.
 
 
 
 CSS has the tools to make a flexible design that accounts for varying lengths of text. So maybe err on the side of writing defensive CSS… CSS that anticipates issues and knows how to gracefully handle different content scenarios. text-overflow: ellipsis might be part of your CSS arsenal for that. But it might also be throwing the baby out with the bath water. Worth asking whether losing that data is worth the cost of what that content is supposed to do before giving giving it a haircut.
 
 
 
 While we’re talking about truncating text…
 
 
 
     		
     
       
 
   
     
                 
         Link
       
 
     on
 
     Oct 1, 2021  
 
   
     
       Line Clampin’ (Truncating Multiple Line Text)    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Link
       
 
     on
 
     Sep 20, 2021  
 
   
     
       Embracing Asymmetrical Design    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Link
       
 
     on
 
     Jul 21, 2020  
 
   
     
       Using Flexbox and text ellipsis together    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
 
 
   
     
                 
         Link
       
 
     on
 
     Sep 4, 2019  
 
   
     
       Multiline truncated text with “show more” button    
   
 
   
       
       data loss text-overflow    
   
   
     
           
   
     
       Chris Coyier    
   
 
 
     
   
 To Shared Link — Permalink on CSS-Tricks
 Text-overflow: ellipsis considered harmful originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>How I Chose an Animation Library for My Solitaire Game</title>
         <link href="https://css-tricks.com/choosing-an-animation-library-for-solitaire/"/>
       <updated>2022-06-29T12:55:44.000Z</updated>
       <content type="text">There is an abundance of both CSS and JavaScript libraries for animation libraries out there. So many, in fact, that choosing the right one for your project can seem impossible. That’s the situation I faced when I decided to build an online Solitaire game. I knew I’d need an animation library, but which was the right one to choose?
 
 
 
 In this article, I’ll go through which considerations I made, what to look out for and present you with some of the most popular libraries available. I’ll go through some real-world examples with you to illustrate my points, and in the end, hopefully, you’ll be better equipped than me when I first had to choose an animation library.
 
 
 
 
 
 
 
 Your mileage with this advice may vary, of course. Everything I’m sharing here is specific to a thing I wanted to build. Your project may have completely different requirements and priorities and that’s OK. I think what’s important here is getting a first-hand account of thinking like a front-end developer with a particular goal.
 
 
 
 Speaking of which, I do consider myself a front-end developer but my background is super heavy in design. So I know code, but not to the extent of someone who is a JavaScript engineer. Just wanted to clear that up because experience can certainly impact the final decision.
 
 
 
 Here’s the goal
 
 
 
 Before we get into any decision-making let’s take a look at the sorts of animations I needed to make in this CSS-Tricks-ified version of the game:
 
 
 
 
   
     @media (max-width: 800px) {
       #solitaire_embed &gt; div {
         padding-bottom: 90% !important; /* Change aspect ratio on mobile */
       }
     }
     @media (max-width: 568px) {
       #solitaire_embed &gt; div {
         padding-bottom: 100% !important; /* Change aspect ratio on mobile */
       }
     }
     @media (max-width: 414px) {
       #solitaire_embed &gt; div {
         padding-bottom: 120% !important; /* Change aspect ratio on mobile */
       }
     }
   
   
     
     
   
 
 
 
 
 Pretty sweet, right? There’s nothing exactly trivial about these animations. There’s a lot going on — sometimes simultaneously — and a lot to orchestrate. Plus, a majority of the animations are triggered by user interactions. So, that left me with a few priorities heading into my decision:
 
 
 
 Smooth animations: The way animations are applied can have a big impact on whether they run smoothly, or display a little choppiness.Performance: Adopting any library is going to add weight to a project and I wanted my game to be as lean as possible.Convenience: I wanted a nice, clean syntax that makes it easier to write and manage the animations. I’d even trade a little extra convenience for a small performance cost if it allows me to write better, more maintainable code. Again, this bodes well for a designer-turned-developer.Browser support: Of course I wanted my game to work on any modern browser using some form of progressive enhancement to prevent completely borking legacy browsers. Plus, I definitely wanted  some future-proofing.
 
 
 
 That’s what I took with me as I went in search of the right tool for this particular job.
 
 
 
 Choosing between CSS or JavaScript animation libraries
 
 
 
 The first thing I considered when choosing an animation library was whether to go with a CSS or JavaScript-based library. There are lots of great CSS libraries, many of them with excellent performance which was a high priority for me. I was looking to do some heavy-duty animations, like the  ability to sequence animations and get callbacks on animation completion. That’s all totally possible with pure CSS — still, it’s a lot less smooth than what most JavaScript libraries offer.
 
 
 
 Let’s see how a simple sequenced animation looks in CSS and compare it to jQuery, which has plenty of built-in animation helpers:
 
 
 
 CodePen Embed Fallback
 
 
 
 The animations look the same but are created differently. To make the CSS animation, first, we have to define the keyframe animation in our CSS and attach it to a class:
 
 
 
 .card.move {
   animation : move 2s;
 }
 
 @keyframes move {
   0% { left: 0 }
   50% { left: 100px }
   100% { left: 0 }
 }
 
 
 
 We then execute the animation using JavaScript and listen for a CSS callback on the element:
 
 
 
 var cardElement &#x3D; document.getElementsByClassName(&quot;card&quot;)[0];
 var statusElement &#x3D; document.getElementsByClassName(&quot;status&quot;)[0];
 
 cardElement.classList.add(&quot;move&quot;);
 statusElement.innerHTML &#x3D; &quot;Animating&quot;
 
 var animationEndCallback &#x3D; function() {
   cardElement.classList.remove(&quot;move&quot;);
   statusElement.innerHTML &#x3D; &quot;Inactive&quot;
 }
 
 cardElement.addEventListener(&quot;webkitAnimationEnd&quot;, animationEndCallback);
 cardElement.addEventListener(&quot;oAnimationEnd&quot;, animationEndCallback); 
 cardElement.addEventListener(&quot;antionend&quot;, animationEndCallback);
 
 
 
 Having things happen in different places might be fine in a simple example like this, but it can become very confusing once things get a bit more complex. 
 
 
 
 Compare this to how the animation is done with jQuery:
 
 
 
 $(&quot;.status&quot;).text(&quot;Animating&quot;)
 $( &quot;.card&quot; ).animate({
   left: &quot;100px&quot;
 }, 1000);
 $( &quot;.card&quot; ).animate({
   left: 0
 }, 1000, function() {
   $(&quot;.status&quot;).text(&quot;Inactive&quot;)
 });
 
 
 
 Here, everything happens in the same place, simplifying things should the animations grow more complex in the future.
 
 
 
 It seemed clear that a JavaScript library was the right way to go, but which was the right one to choose for my Solitaire game? I mean, jQuery is great and still widely used even today, but that’s not something I want to hang my hat on. There are plenty of JavaScript animation libraries, so I wanted to consider something built specifically to handle the type of heavy animations I had in mind.
 
 
 
 Choosing a JavaScript animation library
 
 
 
 It quickly became apparent to me that there’s no lack of JavaScript animation libraries and new, exciting technologies. They all have benefits and drawbacks, so let’s go through some of the ones I considered and why.
 
 
 
 The Web Animations API is one such case that might replace many JavaScript animation libraries in the future. With it, you’ll be able to create complex staggered animations without loading any external libraries and with the same performance as CSS animations. The only drawback is that not all browsers support it yet. 
 
 
 
 The &lt;canvas&gt; element presents another exciting opportunity. In it, we can animate things with JavaScript, as we would with the DOM, but the animation is rendered as raster, which means we can make some high-performance animations. The only drawback is that the canvas element is essentially rendered as an image in the DOM, so if we’re looking for pixel-perfection, we might be out of luck. As someone acutely in tune with design, this was a dealbreaker for me.
 
 
 
 I needed something tried and tested, so I knew I probably had to go with one of the many JavaScript libraries. I started looking at libraries and narrowed my choices to Anime.js and GSAP. They both seemed to handle complex animations well and had excellent notes on performance. Anime is a well-maintained library with over 42.000 stars on GitHub, while GSAP is a super popular, battle-tested library with a thriving community.
 
 
 
 An active community was critical to me since I needed a place to ask for help, and I didn’t want to use a library that might later be abandoned. I considered this as part of my convenience requirements.
 
 
 
 Sequencing animations and callbacks
 
 
 
 Once I had my choices narrowed down, the next step was to implement a complex animation using my two libraries. A recurrent animation in a solitaire game is that of a card moving somewhere and then turning over, so let’s see how that looks:
 
 
 
 CodePen Embed Fallback
 
 
 
 Both animations look great! They’re smooth, and implementing both of them was pretty straightforward. Both libraries had a timeline function that made creating sequences a breeze. This is how the implementation looks in AnimeJS:
 
 
 
 var timeline &#x3D; anime.timeline({
   begin: function() {
     $(&quot;.status&quot;).text(&quot;Animating&quot;)
   },
   complete: function() {
     $(&quot;.status&quot;).text(&quot;Inactive&quot;)
   }
 });
 
 timeline.add({
   targets: &#x27;.card&#x27;,
   left: [0, 300],
   easing: &#x27;easeInOutSine&#x27;,
   duration: 500
 }).add({
   targets: &#x27;.card .back&#x27;,
   rotateY: [0, 90],
   easing: &#x27;easeInSine&#x27;,
   duration: 200
 }).add({
   targets: &#x27;.card .front&#x27;,
   rotateY: [-90, 0],
   easing: &#x27;easeOutSine&#x27;,
   duration: 200
 })
 
 
 
 Anime’s timeline() function comes built-in with callbacks on beginning and ending the animation, and creating the sequence is as easy as appending the sequential animations. First, I move the card, then I turn my back-image 90 degrees, so it goes out of view, and then I turn my front-image 90 degrees, so it comes into view.
 
 
 
 The same implementation using GSAP’s timeline() function looks very similar:
 
 
 
 var timeline &#x3D; gsap.timeline({
   onStart: function() {
     $(&quot;.status&quot;).text(&quot;Animating&quot;)
   },
   onComplete: function() {
     $(&quot;.status&quot;).text(&quot;Inactive&quot;)
   }
 });
 
 timeline.fromTo(&quot;.card&quot;, {
   left: 0
 }, {
   duration: 0.5,
   left: 300
 }).fromTo(&quot;.card .back&quot;, {
   rotationY: 0
 }, {
   rotationY: 90,
   ease: &quot;power1.easeIn&quot;,
   duration: 0.2
 }).fromTo(&quot;.card .front&quot;, {
   rotationY: -90
 }, {
   rotationY: 0,
   ease: &quot;power1.easeOut&quot;,
   duration: 0.2
 })
 
 
 
 Decision time
 
 
 
 The main difference between Anime and GSAP appears to be the syntax, where GSAP might be a little more elaborate. I was stuck with two great libraries that had very similar functionality, were able to deal with complex animation, and had a thriving community. It seemed like I had a tie race!
 
 
 
 PriorityAnimeGSAPSmooth animations✅✅Performance✅✅Convenience✅✅Browser support✅✅
 
 
 
 So, what made me choose one library over the other?
 
 
 
 I was very concerned about how the library would act under pressure. Having laggy animations in a game like Solitaire can greatly impact how fun it is to play the game. I knew I wouldn’t be able to fully see how the library performed before I created the game. Luckily, GSAP had made a stress test that compared different animation libraries to each other, including Anime.
 
 
 
 CodePen Embed Fallback
 
 
 
 Looking at that, GSAP certainly looked to be the superior library for dealing with loads of complex animations. GSAP was giving me upwards of 26 frames per second on a heavy animation that Anime was only able to top out at 19.  After reading up on GSAP more and looking into their forums, it became clear that performance was of the highest priority to the guys behind GSAP.
 
 
 
 And even though both GSAP and Anime have been around a while, Anime’s repo has been sitting somewhat dormant a couple of years while GSAP had made commits in the past couple of months.
 
 
 
 I ended up using GSAP and haven’t regretted my decision!
 
 
 
 How about you? Does any of this square with how you evaluate and compare front-end tooling? Are there other priorities you might have considered (e.g. accessibility, etc.) in a project like this? Or do you have a project where you had to pare down your choices from a bunch of different options? Please share in the comments because I’d like to know! 
 
 
 
 Oh, and if you want to see how it looks when animating a whole deck of cards, you can head over to my site and play a game of Solitaire. Have fun!
 
 How I Chose an Animation Library for My Solitaire Game originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Help Shape the Future of CSS-Tricks!</title>
         <link href="https://css-tricks.com/help-shape-the-future-of-css-tricks/"/>
       <updated>2022-06-28T19:52:48.000Z</updated>
       <content type="text">Hey, so it’s been a minute since we announced that CSS-Tricks is now part of the DigitalOcean family. Things are pretty much business as usual and hopefully it feels that way to you, too. Now that we’re getting settled, we’re eager to start poking at the future of this site.
 
 
 
 What sort of things are we poking at? Well, that’s where you come in. You see, there’s no shortage of ideas for CSS-Tricks, but we only want to work on things that continue to make CSS-Tricks one of the spots you come to time and again for all things front-end (including actual CSS tricks).
 
 
 
 So, we put together a short little survey for you. Nothing intense, just a few questions to help us vet those ideas and ultimately shape the future of CSS-Tricks.
 
 
 
 
 
 
 
 
 Take the survey!
 
 
 
 
 Thanks so much for your help! And while I have you, thanks for continuing to hang with us. In the seven years I’ve been working here at CSS-Tricks, I know this site wouldn’t even be here today without y’all. Here’s to the future of CSS-Tricks and learning together!
 
 
 
 
 CSS-Tricks Newsletter
 
 
 
 Oh, and one more update for all of you who miss the newsletter: it will be back! But we had to drop a ton of you off the list (seriously, like 80% of all subscribers) to be compliant with legal stuff that’s over my head. No worries, though, because you can re-subscribe right down here with your email address.
 
 
 Help Shape the Future of CSS-Tricks! originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>My Dumbest CSS Mistakes</title>
         <link href="https://css-tricks.com/my-dumbest-css-mistakes/"/>
       <updated>2022-06-28T15:10:31.000Z</updated>
       <content type="text">We all make mistakes in our code. It happens! I know if I had one of those “Days Since Last Mistake” signs hanging over my desk, a big ol’ goose egg would be hovering above me all the time. It doesn’t have to be big mistakes, either. My clumsy self has committed small errors to repos ranging from typos all the way to complete npm module directories.
 
 
 
 Whooooooops.
 
 
 
 That’s one of the things I really love about CSS: it’s forgiving as heck. If it doesn’t understand a typo, it keeps looking up the cascade in search of a match. None of that stuff where one out of place characters breaks a site and takes no prisoners. But it’s still embarrassing when CSS mistakes pop up!
 
 
 
 
 
 
 
 Like this one I find myself making way more times than I’d like to admit:
 
 
 
 .element {
   display: flexbox; /* 🤦‍♂️ */
 }
 
 
 
 Or when I try setting a gradient without a background property:
 
 
 
 .gradient {
   linear-gradient(45deg, rgb(50% 100% 90%), rgb(62% 85% 93%));
 }
 
 
 
 I hate how close X and C are on a keyboard because I can’t count how many times I’m blazing through something and mistake px for pc units.
 
 
 
 .element {
   font-size: 16pc; /* I meant pixels! */
 }
 
 
 
 Another CSS mistake I catch every so often is one I know many other folks make because I spot it too often in blog posts with code snippets:
 
 
 
 // This is not a CSS comment.
 .element {
   /* This is a CSS comment. */
 }
 
 
 
 Have you ever forgotten to use var() around a CSS variable? I sure have.
 
 
 
 .element {
   color: --primary-color;
 }
 
 
 
 Speaking of CSS variables, naming them is hard (like everything else) and I often use some incorrect version of a variable that I named!
 
 
 
 :root {
   --color-primary: #FF5722;
   --color-secondary: #3E2723;
 }
 
 /* Much later on... */
 
 .element {
   color: var(--primary-color); /* 🙃 */
 }
 
 
 
 Yes, I have indeed copied a snippet of CSS before only to have fancy quotes get in the way of making it work:
 
 
 
 .element::before {
   content: “”; /* Should be &quot;&quot; */
 }
 
 
 
 And, yes, I have spent way too long figuring out those quotes were the culprit.
 
 
 
 Looking at that last one reminds me that I sometimes forget to set the content property when I’m working with ::before or ::after. Which reminds me of how I’ve forgotten to set an element’s position before trying to offset it or change its z-index. Seriously, these things happen!
 
 
 
 It’s hard talking about mistakes
 
 
 
 Have you ever finished reading some blog post sharing some amazing trick and felt some sort of Imposter Syndrome? I think that’s largely because blog posts often mask the real work — and failures — that go into amazing tricks. As someone who reads posts like that for a living, I can tell you that many, if not the vast majority, go through many rounds of editing where potentially embarrassing mistakes are weeded out and smoothed over.
 
 
 
 Even those ridiculously awesome articles have to fail before they get all those ooooos and ahhhhhs.
 
 
 
 The same is true of any app, website, demo, or whatever you happen to come across. The chances any of them came out perfect the first time is next to nothin’.
 
 
 
 But if I’m being totally honest with you, I’m often more amazed (and interested) in the journey it takes to accomplish something, warts and all. The journey is a glimpse into what it’s like to think like a front-end developer. That’s where real (and most valuable) learning happens.
 
 
 
 And all of this is merely building up to what I really want to ask…
 
 
 
 What are your dumbest CSS mistakes?
 
 
 
 C’mon, we all know you’ve made some! Let us learn from them!
 
 My Dumbest CSS Mistakes originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Great (and Free!) Web Development Books You Can Get Online</title>
         <link href="https://css-tricks.com/web-development-books-you-can-get-for-free/"/>
       <updated>2022-06-27T13:27:49.000Z</updated>
       <content type="text">Right after “Where is the best place to learn?” perhaps the most commonly asked question I hear from folks getting into code is “What web development books should I get to learn?” Well, consider this an answer to that question as I’ve curated a list of books that are not only great for getting into front-end development but also freely available.
 
 
 
 
 
 
 Table of Contents
 
 Books on CSS
 Books on HTML &amp; CSS
 Books on process
 Books on JavaScript
 Wrapping up
 
 Books on CSS
 
 
 This is the bulk of where we’re going to hang out because, well, this is a site mostly about CSS!
 
 
 The Magic of CSS by Adam Schwartz
 
 
 Perfect for: Next steps in your CSS journeyLearning level: IntermediateRequires: Some basic understanding of CSS
 
 
 
 Adam Schwartz covers six CSS concepts in this book, including the box model, layout, tables, color, typography, and transitions. These are things even stump some seasoned CSSers, some of these concepts might be confusing. Adam has gone to a great length to demystify each.
 
 
 
 In addition to the book being a great primer on complex CSS concepts, I love how each of the CSS properties mentioned throughout the book is clickable so you can always click on them to see how each is applied. There are many illustrative examples and recommendations for further reading, should you desire to learn more about each chapter.
 
 
 
 I found the chapter on colors very interesting not only because it gets into the best practices for using color accessibly, but also because there’s super practical applications, like when Adam gets into using CSS to support an organization’s branding.
 
 
 
 
 Direct link
 
 
 
 Resilient Web Design by Jeremy Keith
 
 
 Perfect for: Developing strategies for writing codeLearning level: IntermediateRequires: Some basic understanding of CSS
 
 
 
 Straight from the introduction:
 
 
 
 You won’t find any code in here to help you build better websites. But you will find ideas and approaches. Ideas are more resilient than code. I’ve tried to combine the most resilient ideas from the history of web design into an approach for building the websites of the future.
 
 
 
 What Jeremy does so well is describing soft skills, like planning, outlining, and approaches for writing code. So, rather than dropping in code snippets throughout the book, what you’ll find are details about code strategies, such as progressive enhancement, deciding on what tooling to use, and the challenges of writing future-friendly code.
 
 
 
 And for those of you who have not had the pleasure of listening to Jeremy narrate content (like he does in the Web History series), there’s an audio file available to download.
 
 
 
 
 Direct link
 
 
 
 Beginning CSS Web Development: From Novice to Professional by Simon Collison
 
 
 Perfect for: The fundamentals of CSSLearning level: Absolute beginnersRequires: Nothing but time and motivation
 
 
 
 It may be written in 2006, but Simon’s coverage of web standards and accessibility is timeless and relevant today. He provides an understanding of interoperability as well as approaches for building web applications, including the early planning phases that often go overlooked.
 
 
 
 The book has two broad parts which are further divided into 16 chapters. Part 1 covers CSS topics, like working with text, links, lists, backgrounds, images, tables, and forms. It really doesn’t skimp on the details either.
 
 
 
 Part 2 is all about layout, shedding light on usability and layout manipulation, plus a handy case study. The chapters are arranged in such a way that one chapter naturally flows into the next. Each chapter also contains a concluding section that highlights all the important concepts covered in the chapter.
 
 
 
 Indeed, the book provides novice developers a solid background in CSS and helps them gradually with more advanced concepts. It will make your CSS journey easier.
 
 
 
 
 Direct link
 
 
 
 Books on HTML &amp; CSS
 
 
 CSS and HTML are often taught together, which can be especially helpful when you’re writing your first lines of code and want to know how the two languages interact with one another.
 
 
 Learn to Code HTML &amp; CSS by Shay Howe
 
 
 Perfect for: Starting your front-end journeyLearning level: BeginnersRequires: No prior experience at all
 
 
 
 Shay refers to this book as a simple and comprehensive guide dedicated to helping beginners learn HTML and CSS. He does this by focusing on common elements of front-end design and development. Some of the lessons covered are Box Model, Positioning, Typography, Background and Gradients, Lists, Media, Forms, and Tables. In the first chapter *Building Your First Web Page, Shay analyzed the contents of a typical website including elements, attributes and setting up the HTML document structure, code validation, selectors and CSS resets. I find the book very instructive especially as it went beyond the surface to address many key concepts with code samples, which you can follow along.
 
 
 
 One profound thing about this great book is that, Shay built a complete project from scratch throughout the 12 lessons and at the end of each lesson, he provided a summary and links to the current state of that website (so you can compare with yours if you follow along) and the source code at every stage of the lessons.
 
 
 
 If you’re a learner who learns by doing, you will find this material very useful and by the time you’re done, you will have developed a multi page functional website.
 
 
 
 An advanced sequel of the course is also available free via the same link.
 
 
 
 
 Direct link
 
 
 
 HTML &amp; CSS: Learn the Fundamentals in 7 Days by Michael Knapp
 
 
 Perfect for: Starting your front-end journeyLearning level: BeginnersRequires: No prior experience at all
 
 
 
 Can you possibly learn everything there is to know about the HTML and CSS in seven days? Probably not, but that’s why this 2017 book by Michael Knapp is focused straight on the fundamentals. Michael delves into a brief history lesson before launching into HTML and CSS structure, logic, and presentation. You’re going to get all up to speed to the point where you should feel pretty confident about putting a basic webpage together, plus a few extras along the way as the book touches on SEO and analytics.
 
 
 
 The book is comprised of simple programs that you can run on your computer if you wish to follow along.
 
 
 
 The ebook version is available for free on Apple Books, but there is a Kindle version as well if you already have a subscription there.
 
 
 
 
 Apple Books
 
 
 
 Kindle
 
 
 
 The Greatest CSS Tricks Vol. 1 by Chris Coyier
 
 
 Perfect for: Marveling at what CSS can doLearning level: IntermediateRequires: Some CSS experience
 
 
 
 Did you know that CSS-Tricks has a book on CSS too? It would be silly to leave that off this list because what you get is a collection of classic CSS trickery that’s explained by none other than Chris Coyier. In fact, Chris handpicked all of the examples covered in the book from his many, many (many!) years running this here site from the plentitude of tricks that have crossed his desk.
 
 
 
 Each trick solves a particular pain point. For instance, the first “Pin Scrolling to Bottom” trickdemonstrates how the overflow-anchor CSS property can be used to create the same chat-like interface of a tool like Slack, where the screen is anchored at the bottom in a way that feels as though the page is scrolling for you as new items are added.
 
 
 
 
 Direct Link
 
 
 
 Books on process
 
 
 Code is just as much about how we write code and collaborate on projects with others as it is about the actual code we write. The following books are great starting points for everything from planning and project management to communicating and collaborating with others.
 
 
 Collaborate: Bring People Together Around Digital Projects by Ellen De Vries
 
 
 Perfect for: Being a better collaboratorLearning level: N/ARequires: An open mind to working well with others!
 
 
 
 Ellen addresses something in this book that we all have to deal with: collaborating with others. And it’s no small deal — the book is divided into four parts that go super deep into things we can go to work well with others:
 
 
 
 Know how to prepare the ground and create the right conditions for collaboration.Nurture the group culture in the early stages of collaboration.Maintain a healthy collaborative process.Reap the rewards of a collaboration.
 
 
 
 As a content strategist, Ellen has the right kind of experience to help anyone be part of a collaborative project, or get the most from a collaboration.
 
 
 
 
 Direct link
 
 
 
 The Modern Web Design Process by webflow
 
 
 Perfect for: Senior designers, project managersLearning level: N/ARequires: Some basic understanding of CSS
 
 
 
 This free ebook features a seven-step design process that’s meant to help define the workflow for today’s brand of web design.
 
 
 
 That includes:
 
 
 
 Setting goalsDefining scopeSitemaps and wireframesWorking with contentHandling visual elementsTestingShipping
 
 
 
 Anyone starting a new design project or in the middle of a design project will find the invaluable insights throughout the book. And what’s most remarkable is how this is written in a way that almost feels as though you are being hand-held through an entire project from concept to completion.
 
 
 
 
 Direct link
 
 
 
 Designing for the Web by Mark Boulton
 
 
 Perfect for: Learning to work with clientsLearning level: BeginnersRequires: A genuine interest in design
 
 
 
 It seems many organizations tackle design differently. But author Mark Boulton documents a thorough design workflow in Designing for the Web that de-mystifies many challenges and covers everything you need to know.
 
 
 
 What’s unique about this book is that it’s really about work. Sure, there’s a bunch of hugely valuable information on design best practices for things like typography, color, and layout, but what you’re really going to take away from this book is how these fit into a design workflow. It teaches you how to research, the technologies we have to implement ideas, and ultimately, how to work with others as well as clients — perfect fodder for folks including design leads, project managers, freelancers, or anyone who’s involved in the project delivery process.
 
 
 
 
 Direct Link
 
 
 
 Learn Version Control with Git by Tower
 
 
 Perfect for: Mastering GitLearning level: All levels welcomeRequires: No prior knowledge at all
 
 
 
 In this book, the team behind the popular Tower client for Git introduce learners to the crux of version control system using Git. Developers who work in teams will particularly find this very useful, as it helps in effectively collaborating with team members building different features of a project even when you’re thousands of miles apart. That said, it’s still really great for anyone who might be shy of the command line and wants to build confidence there.
 
 
 
 And since the book is by the maker of an application that interacts with Git, you’re going to get a nice dose of using Tower as a GUI in addition to working directly on the command line.
 
 
 
 So, whether it’s committing, branching, merging, pull requests, forking work, or handling merge conflicts, you’re going to get a whole lot from this book.
 
 
 
 
 Direct Link
 
 
 
 Books on JavaScript
 
 
 Learning JavaScript always seems to be en vogue. In fact, Jason Rodriguez wrote about the JavaScript learning landscape in 2018 and provided a nice list of free books. Not too much has cropped up since then, but here are my thoughts on the following books.
 
 
 Eloquent JavaScript by Marijn Haverbeke
 
 
 Perfect for: Getting better at writing JavaScriptLearning level: Intermediate to seasoned developersRequires: Prior JavaScript experience
 
 
 
 Eloquent JavaScript really lives up to its name. Personally, I consider this one of the best-written JavaScript books I have ever come across. Marjin’s writing style is engaging, especially with how he introduces programming concepts and carries the reader along. In his words, the book is simply about instructing computers and making them do what you want them to do.
 
 
 
 The book is a deep dive into JavaScript spread across three parts and 21 chapters. You’re going to read a bunch about basic programming concepts, such as values, types, operators and functions, to advanced concepts like regular expressions, modules, the DOM, and asynchronous programming. He starts every chapter with a somewhat philosophical quote to prepare the reader for what lies ahead and then dives straight into the topic.
 
 
 
 Plus, there’s three projects to help you practice your newfound skills.
 
 
 
 
 Direct link
 
 
 
 Understanding JavaScript Promises by Nicholas C. Zakas
 
 
 Perfect for: Those who want to learn all about asynchronous programming with promises in JavaScript.Learning level: IntermediateRequires: Basic JavaScript chops
 
 
 
 JavaScript promises were introduced in 2015 as part of the ES6 specification to handle asynchronous functions in JavaScript. According to MDN:
 
 
 
 A promise is an object representing the eventual completion or failure of an asynchronous operation
 
 
 
 In this 51-page book, Nicholas explains the concept of Promises over three chapters: Basics, Chaining Promises, and Working with Multiple Promises. Although the link to the book we’re providing is the free community version, the full version (available on Amazon) has two more chapters on Async Functions and Unhandled Rejection Tracking. Nicholas simplified the concept of Promises with several illustrations and examples. You will learn how to use then(), catch(), and finally() and understand how to chain multiple promises together. Nicholas also covers the assignment of rejection and settlement handlers. You may want to give the book a read to solidify your understanding of the topic.
 
 
 
 Nicholas is a veteran JavaScript book author who has been writing about JavaScript for over 15 years. He brings his wealth of experience to bear in this book (just as he has in his work here at CSS-Tricks).
 
 
 
 
 Direct link
 
 
 
 Speaking JavaScript by Axel Rauschmayer
 
 
 Perfect for: Leveling up from beginning JavaScriptLearning level: IntermediateRequires: Knowledge of object oriented programming
 
 
 
 This book is presented in four chapters covering more than 30 topics. Here’s how it breaks down:
 
 
 
 The first chapter is a nice refresher on syntax, variable types, functions and exception handling.The second chapter offers historical perspective into JavaScript as a prelude for the types of features covered throughout the rest of the book.Chapter 3 is presented as more or less a reference book with short, clean examples.The final chapter outlines tips, tools and libraries to help write better JavaScript and follow best practices.
 
 
 
 
 Direct Link
 
 
 
 Secrets of the JavaScript Ninja by John Resig and Bear Bibeault
 
 
 Perfect for: Creating a cross-browser JavaScript library from the ground upLearning level: IntermediateRequires: Some prior programming experience
 
 
 
 There’s actually a newer edition of this book, but the 2012 edition is the one that’s free. Either way, it’s a good opportunity to learn from John Resig; you know, the guy who created jQuery.
 
 
 
 The techniques covered here include closures, functions, the DOM, object orientation with prototypes, and cross-browser strategies. One nice perk is that each chapter is followed by a brief recap that’s perfect for a reference once you’ve finished the book.
 
 
 
 
 Direct Link
 
 
 
 Learning JavaScript Design Patterns by Addy Osmani
 
 
 Perfect for: Learning to write more efficient JavaScriptLearning level: IntermediateRequires: A decent level of JavaScript experience
 
 
 
 The concept of design pattern refers to a reusable solution to a commonly recurring problem in application development. In this book, Addy Osmani covers the implementation of common design patterns using ES6 and beyond, as well as React-specific design patterns, which can be super handy when working on complex React apps where maintainability is a primary goal.
 
 
 
 Some of the patterns covered include Singleton, Proxy, Provider, Prototype and Observer patterns. In some cases, Addy includes pros and cons of using some of these patterns and how they may affect the performance of your application.
 
 
 
 
 Direct Link
 
 
 
 You Don’t Know JS by Kyle Simpson
 
 
 Perfect for: Mastering JavaScriptLearning level: BeginnerRequires: Little or no prior programming experience
 
 
 
 While the title might be a bit provocative, what Kyle is implying here is that he writes this book assuming you have no prior JavaScript experience whatsoever.
 
 
 
 Kyle begins starts by going through the rudiments of programming as seen through the lens of JavaScript. He then proceeds, in subsequent chapters, to introduce more advanced concepts like scope and closure, the this keyword, object prototypes, async, and performance.
 
 
 
 There’s a lot of excellent details and explanations in here, and Kyle makes it super easy to understand by avoiding super technical jargon. There is also many exercises designed to reinforce your learning. This book will definitely get you up to speed with JavaScript. There’s second edition of the book in the works that you can track in GitHub.
 
 
 
 
 Direct link
 
 
 
 The JavaScript Beginner’s Handbook by Flavio Copes
 
 
 Perfect for: A beginner’s referenceLearning level: Just getting startedRequires: Email sign-up, maybe some prior experience
 
 
 
 Flavio has put together a very useful JavaScript reference for those just starting out. It’s more like a quick reference guide than a textbook, so those of you just starting out might want to consider this as something you keep on your desk rather than something you sit with for long periods of time.
 
 
 
 
 Direct link
 
 
 
 JavaScript for Data Science by Gans, Hodges &amp; Wilson
 
 
 Perfect for: Getting into data visualizationsLearning level: Intermediate to advancedRequires: A decent handle on JavaScript
 
 
 
 The authors cover core features of modern JavScript, including callbacks, promises, inheritance, objects and classes. They also get into testing using Mocha, React, and data vizualization, all of which are great for anyone looking to level up their code and how its written. The book doesn’t get as deep into many the concepts as some of the other books, but it really shines when it gets into data science.
 
 
 
 The book uses Data-Forge; a JavaScript library designed for working with tabular data. There are numerous exercises to help readers keep up to speed with the subject of discussion. The last chapter also includes a capstone project that pulls everything together.
 
 
 
 
 Direct Link
 
 
 
 Wrapping up
 
 
 I sure hope this collection of books help you, whether you’re taking your first steps in front-end web development, have a dozen years under your belt, or you fall somewhere in between. I know how hard it is to get into something new for the first time and the feeling of not knowing where to look. I also know how it feels to hit a plateau and need something to level me up. There should be something for everyone here, regardless of where you are in your learning journey.
 
 
 
 And, hey, if you have any other books that are available to snag for free online, please share them in the comments! I bet we can get an even bigger list going.
 
 Great (and Free!) Web Development Books You Can Get Online originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: The Bars</title>
         <link href="https://css-tricks.com/single-element-loaders-the-bars/"/>
       <updated>2022-06-24T20:00:29.000Z</updated>
       <content type="text">We’ve looked at spinners. We’ve looked at dots. Now we’re going to tackle another common pattern for loaders: bars. And we’re going to do the same thing in this third article of the series as we have the others by making it with only one element and with flexible CSS that makes it easy to create variations.
 
 
 
 
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D
 
 
 
 
 Let’s start with not one, not two, but 20 examples of bar loaders.
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 What?! Are you going to detail each one of them? That’s too much for an article!
 
 
 
 It might seem like that at first glance! But all of them rely on the same code structure and we only update a few values to create variations. That’s all the power of CSS. We don’t learn how to create one loader, but we learn different techniques that allow us to create as much loader as we want using merely the same code structure.
 
 
 
 Let’s make some bars!
 
 
 
 We start by defining the dimensions for them using width (or height) with aspect-ratio to maintain proportion:
 
 
 
 .bars {
   width: 45px;
   aspect-ratio: 1;
 }
 
 
 
 We sort of “fake” three bars with a linear gradient on the background — very similar to how we created dot loaders in Part 2 of this series.
 
 
 
 .bars {
   width: 45px;
   aspect-ratio: 1;
   --c: no-repeat linear-gradient(#000 0 0); /* we define the color here */
   background: 
     var(--c) 0%   50%,
     var(--c) 50%  50%,
     var(--c) 100% 50%;
   background-size: 20% 100%; /* 20% * (3 bars + 2 spaces) &#x3D; 100% */
 }
 
 
 
 The above code will give us the following result:
 
 
 
 
 
 
 
 Like the other articles in this series, we are going to deal with a lot of background trickery. So, if you ever feel like we’re jumping around too fast or feel you need a little more detail, please do check those out. You can also read my Stack Overflow answer where I give a detailed explanation on how all this works.
 
 
 
 Animating the bars
 
 
 
 We either animate the element’s size or position to create the bar loader. Let’s animate the size by defining the following animation keyframes:
 
 
 
 @keyframes load {
   0%   { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 1 */
   33%  { background-size: 20% 10% , 20% 100%, 20% 100%; }  /* 2 */
   50%  { background-size: 20% 100%, 20% 10% , 20% 100%; }  /* 3 */
   66%  { background-size: 20% 100%, 20% 100%, 20% 10%;  }  /* 4 */
   100% { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 5 */
 }
 
 
 
 See what’s happening there? Between 0% and 100%, the animation changes the background-size of the element’s background gradient. Each keyframe sets three background sizes (one for each gradient).
 
 
 
 
 
 
 
 And here’s what we get:
 
 
 
 CodePen Embed Fallback
 
 
 
 Can you start to imagine all the possible variations we can get by playing with different animation configurations for the sizes or the positions?
 
 
 
 Let’s fix the size to 20% 50% and update the positions this time:
 
 
 
 .loader {
   width: 45px;
   aspect-ratio: .75;
   --c: no-repeat linear-gradient(#000 0 0);
   background: 
     var(--c),
     var(--c),
     var(--c);
   background-size: 20% 50%;
   animation: load 1s infinite linear;
 }
 @keyframes load {
   0%   { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 1 */
   20%  { background-position: 0% 50% , 50% 100%, 100% 100%; } /* 2 */
   40%  { background-position: 0% 0%  , 50% 50% , 100% 100%; } /* 3 */
   60%  { background-position: 0% 100%, 50% 0%  , 100% 50%;  } /* 4 */
   80%  { background-position: 0% 100%, 50% 100%, 100% 0%;   } /* 5 */ 
   100% { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 6 */
 }
 
 
 
 
 
 
 
 …which gets us another loader!
 
 
 
 CodePen Embed Fallback
 
 
 
 You’ve probably got the trick by now. All you need is to define a timeline that you translate into a keyframe. By animating the size, the position — or both! — there’s an infinite number of loader possibilities at our fingertips.
 
 
 
 And once we get comfortable with such a technique we can go further and use a more complex gradient to create even more loaders.
 
 
 
 CodePen Embed Fallback
 
 
 
 Expect for the last two examples in that demo, all of the bar loaders use the same underlying markup and styles and different combinations of animations. Open the code and try to visualize each frame independently; you’ll see how relatively trivial it is to make dozens — if not hundreds — of variations.
 
 
 
 Getting fancy
 
 
 
 Did you remember the mask trick we did with the dot loaders in the second article of this series? We can do the same here!
 
 
 
 If we apply all the above logic inside the mask property we can use any background configuration to add a fancy coloration to our loaders.
 
 
 
 Let’s take one demo and update it:
 
 
 
 CodePen Embed Fallback
 
 
 
 All I did is updating all the background-* with mask-* and I added a gradient coloration. As simple as that and yet we get another cool loader.
 
 
 
 So there is no difference between the dots and the bars?
 
 
 
 No difference! I wrote two different articles to cover as many examples as possible but in both, I am relying on the same techniques:
 
 
 
 Gradients to create the shapes (dots or bars or maybe something else)Animating background-size and/or background-position to create the loader animationAdding mask to add a touch of colors
 
 
 
 Rounding the bars
 
 
 
 Let’s try something different this time where we can round the edges of our bars.
 
 
 
 CodePen Embed Fallback
 
 
 
 Using one element and its ::before and ::after pseudos, we define three identical bars:
 
 
 
 .loader {
   --s: 100px; /* control the size */
 
   display: grid;
   place-items: center;
   place-content: center;
   margin: 0 calc(var(--s) / 2); /* 50px */
 }
 .loader::before,
 .loader::after {
   content: &quot;&quot;;
   grid-area: 1/1;
 }
 .loader,
 .loader::before,
 .loader::after {
   height: var(--s);
   width: calc(var(--s) / 5); /* 20px */
   border-radius: var(--s);
   transform: translate(calc(var(--_i, 0) * 200%));
 }
 .loader::before { --_i: -1; }
 .loader::after { --_i:  1; }
 
 
 
 That gives us three bars, this time without relying on a linear gradient:
 
 
 
 
 
 
 
 Now the trick is to fill in those bars with a lovely gradient. To simulate a continuous gradient, we need to play with background properties. In the above figure, the green area defines the area covered by the loader. That area should be the size of the gradient and, if we do the math, it’s equal to multiplying both sides labeled S in the diagram, or background-size: var(--s) var(--s).
 
 
 
 Since our elements are individually placed, we need to update the position of the gradient inside each one to make sure all of them overlap. This way, we’re simulating one continuous gradient even though it’s really three of them.
 
 
 
 For the main element (placed at the center), the background needs to be at the center. We use the following:
 
 
 
 .loader {
   /* etc. */
   background: linear-gradient() 50% / var(--s) var(--s);
 }
 
 
 
 For the pseudo-element on the left, we need the background on the left
 
 
 
 .loader::before {
   /* etc. */
   background: linear-gradient() 0% / var(--s) var(--s);
 }
 
 
 
 And for the pseudo on the right, the background needs to be positioned to the right:
 
 
 
 .loader::after {
   background: linear-gradient() 100% / var(--s) var(--s);
 }
 
 
 
 Using the same CSS variable, --_i, that we used for the translate, we can write the code like this:
 
 
 
 .loader {
   --s: 100px; /* control the size */
   --c: linear-gradient(/* etc. */); /* control the coloration */
 
   display: grid;
   place-items: center;
   place-content: center;
 }
 .loader::before,
 .loader::after{
   content: &quot;&quot;;
   grid-area: 1/1;
 }
 .loader,
 .loader::before,
 .loader::after{
   height: var(--s);
   width: calc(var(--s) / 5);
   border-radius: var(--s);
   background: var(--c) calc(50% + var(--_i, 0) * 50%) / var(--s) var(--s);
   transform: translate(calc(var(--_i, 0) * 200%));
 }
 .loader::before { --_i: -1; }
 .loader::after  { --_i:  1; }
 
 
 
 Now, all we have to do is to animate the height and add some delays! Here are three examples where all that’s different are the colors and sizes:
 
 
 
 CodePen Embed Fallback
 
 
 
 Wrapping up
 
 
 
 I hope so far you are feeling super encouraged by all the powers you have to make complex-looking loading animations. All we need is one element, either gradients or pseudos to draw the bars, then some keyframes to move things around. That’s the entire recipe for getting an endless number of possibilities, so go out and starting cooking up some neat stuff!
 
 
 
 Until the next article, I will leave you with a funny collection of loaders where I am combining the dots and the bars!
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D
 
 
 Single Element Loaders: The Bars originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Different Ways to Write CSS in React</title>
         <link href="https://css-tricks.com/different-ways-to-write-css-in-react/"/>
       <updated>2022-06-22T14:24:37.000Z</updated>
       <content type="text">We’re all familiar with the standard way of linking up a stylesheet to the &lt;head&gt; of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things in a single-page application (SPA), say in a React project?
 
 
 
 Turns out there are several ways to go about styling a React application. Some overlap with traditional styling, others not so much. But let’s count all the ways we can do it.
 
 
 
 
 
 
 
 Importing external stylesheets
 
 
 
 As the name suggests, React can import CSS files. The process is similar to how we link up CSS file in the HTML &lt;head&gt;:
 
 
 
 Create a new CSS file in your project directory.Write CSS.Import it into the React file.
 
 
 
 Like this:
 
 
 
 import &quot;./style.css&quot;;
 
 
 
 That usually goes at the top of the file where other imports happen:
 
 
 
 import { React } from &quot;react&quot;;
 import &quot;./Components/css/App.css&quot;;
 function App() {
   return (
     &lt;div className&#x3D;&quot;main&quot;&gt;
     &lt;/div&gt;
   );
 }
 export default App;
 
 
 
 In this example, a CSS file is imported into an App.js from the /Components/css folder.
 
 
 
 Write inline styles
 
 
 
 You may be used to hearing that inline styling isn’t all that great for maintainability and whatnot, but there are definitely situations (here’s one!) where it makes sense. And maintainability is less of an issue in React, as the CSS often already sits inside the same file anyway.
 
 
 
 This is a super simple example of inline styling in React:
 
 
 
 &lt;div className&#x3D;&quot;main&quot; style&#x3D;{{color:&quot;red&quot;}}&gt;
 
 
 
 A better approach, though, is to use objects:
 
 
 
 First, create an object that contains styles for different elements.Then add it to an element using the style attribute and then select the property to style.
 
 
 
 Let’s see that in context:
 
 
 
 import { React } from &quot;react&quot;;
 function App() {
   const styles &#x3D; {
     main: {
       backgroundColor: &quot;#f1f1f1&quot;,
       width: &quot;100%&quot;,
     },
     inputText: {
       padding: &quot;10px&quot;,
       color: &quot;red&quot;,
     },
   };
   return (
     &lt;div className&#x3D;&quot;main&quot; style&#x3D;{styles.main}&gt;
       &lt;input type&#x3D;&quot;text&quot; style&#x3D;{styles.inputText}&gt;&lt;/input&gt;
     &lt;/div&gt;
   );
 }
 export default App;
 
 
 
 This example contains a styles object containing two more objects, one for the .main class and the other for a text input, which contain style rules similar to what we’d expect to see in an external stylesheet. Those objects are then applied to the style attribute of elements that are in the returned markup.
 
 
 
 Note that curly brackets are used when referencing styles rather than the quotation marks we’d normally use in plain HTML.
 
 
 
 Use CSS Modules
 
 
 
 CSS Modules… what the heck happened to those, right? They have the benefit of locally scoped variables and can be used right alongside React. But what are they, again, exactly?
 
 
 
 Quoting the repo’s documentation:
 
 
 
 CSS Modules works by compiling individual CSS files into both CSS and data. The CSS output is normal, global CSS, which can be injected directly into the browser or concatenated together and written to a file for production use. The data is used to map the human-readable names you’ve used in the files to the globally-safe output CSS.
 
 
 
 In simpler terms, CSS Modules allows us to use the same class name in multiple files without clashes since each class name is given a unique programmatic name. This is especially useful in larger applications. Every class name is scoped locally to the specific component in which it is being imported.
 
 
 
 A CSS Module stylesheet is similar to a regular stylesheet, only with a different extension (e.g. styles.module.css). Here’s how they’re set up:
 
 
 
 Create a file with .module.css as the extension.Import that module into the React app (like we saw earlier)Add a className to an element or component and reference the particular style from the imported styles.
 
 
 
 Super simple example:
 
 
 
 /* styles.module.css */
 .font {
   color: #f00;
   font-size: 20px;
 }
 
 import { React } from &quot;react&quot;;
 import styles from &quot;./styles.module.css&quot;;
 function App() {
   return (
     &lt;h1 className&#x3D;{styles.heading}&gt;Hello World&lt;/h1&gt;
   );
 }
 export default App;
 
 
 
 Use styled-components
 
 
 
 Have you used styled-components? It’s quite popular and allows you to build custom components using actual CSS in your JavaScript. A styled-component is basically a React component with — get ready for it — styles. Some of the features include unique class names, dynamic styling and better management of the CSS as each component has its own separate styles.
 
 
 
 Install the styled-components npm package in the command line:
 
 
 
 npm install styled-components
 
 
 
 Next up, import it into the React app:
 
 
 
 import styled from &#x27;styled-components&#x27;
 
 
 
 Create a component and assign a styled property to it. Note the use of template literals denoted by backticks in the Wrapper object:
 
 
 
 import { React } from &quot;react&quot;;
 import styled from &quot;styled-components&quot;;
 function App() {
   const Wrapper &#x3D; styled.div&#x60;
     width: 100%;
     height: 100px;
     background-color: red;
     display: block;
   &#x60;;
   return &lt;Wrapper /&gt;;
 }
 export default App;
 
 
 
 The above Wrapper component will be rendered as a div that contains those styles.
 
 
 
 Conditional styling
 
 
 
 One of the advantages of styled-components is that the components themselves are functional, as in you can use props within the CSS. This opens the door up to conditional statements and changing styles based on a state or prop.
 
 
 
 Here’s a demo showing that off:
 
 
 
 
 
 
 
 Here, we are manipulating the div’s display property on the display state. This state is controlled by a button that toggles the div’s state when clicked. This, in turn, toggles between the styles of two different states.
 
 
 
 In inline if statements, we use a ? instead of the usual if/else syntax. The else part is after the semicolon. And remember to always call or use the state after it has been initialized. In that last demo, for example, the state should be above the Wrapper component’s styles.
 
 
 
 Happy React styling!
 
 
 
 That’s a wrap, folks! We looked at a handful of different ways to write styles in a React application. And it’s not like one is any better than the rest; the approach you use depends on the situation, of course. Hopefully now you’ve got a good understanding of them and know that you have a bunch of tools in your React styling arsenal.
 
 Different Ways to Write CSS in React originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: The Dots</title>
         <link href="https://css-tricks.com/single-element-loaders-the-dots/"/>
       <updated>2022-06-17T14:47:55.000Z</updated>
       <content type="text">We’re looking at loaders in this series. More than that, we’re breaking down some common loader patterns and how to re-create them with nothing more than a single div. So far, we’ve picked apart the classic spinning loader. Now, let’s look at another one you’re likely well aware of: the dots.
 
 
 
 Dot loaders are all over the place. They’re neat because they usually consist of three dots that sort of look like a text ellipsis (…) that dances around.
 
 
 
 
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 
 
 Our goal here is to make this same thing out of a single div element. In other words, there is no one div per dot or individual animations for each dot.
 
 
 
 CodePen Embed Fallback
 
 
 
 That example of a loader up above is made with a single div element, a few CSS declarations, and no pseudo-elements. I am combining two techniques using CSS background and mask. And when we’re done, we’ll see how animating a background gradient helps create the illusion of each dot changing colors as they move up and down in succession.
 
 
 
 The background animation
 
 
 
 Let’s start with the background animation:
 
 
 
 .loader {
   width: 180px; /* this controls the size */
   aspect-ratio: 8/5; /* maintain the scale */
   background: 
     conic-gradient(red   50%, blue   0) no-repeat, /* top colors */
     conic-gradient(green 50%, purple 0) no-repeat; /* bottom colors */
   background-size: 200% 50%; 
   animation: back 4s infinite linear; /* applies the animation */
 }
 
 /* define the animation */
 @keyframes back {
   0%,                       /* X   Y , X     Y */
   100% { background-position: 0%   0%, 0%   100%; }
   25%  { background-position: 100% 0%, 0%   100%; }
   50%  { background-position: 100% 0%, 100% 100%; }
   75%  { background-position: 0%   0%, 100% 100%; }
 }
 
 
 
 I hope this looks pretty straightforward. What we’ve got is a 180px-wide .loader element that shows two conic gradients sporting hard color stops between two colors each — the first gradient is red and blue along the top half of the .loader, and the second gradient is green and purple along the bottom half.
 
 
 
 The way the loader’s background is sized (200% wide), we only see one of those colors in each half at a time. Then we have this little animation that pushes the position of those background gradients left, right, and back again forever and ever.
 
 
 
 When dealing with background properties — especially background-position — I always refer to my Stack Overflow answer where I am giving a detailed explanation on how all this works. If you are uncomfortable with CSS background trickery, I highly recommend reading that answer to help with what comes next.
 
 
 
 In the animation, notice that the first layer is Y&#x3D;0% (placed at the top) while X is changes from 0% to 100%. For the second layer, we have the same for X but Y&#x3D;100% (placed at the bottom).
 
 
 
 CodePen Embed Fallback
 
 
 
 Why using a conic-gradient() instead of linear-gradient()?
 
 
 
 Good question! Intuitively, we should use a linear gradient to create a two-color gradients like this:
 
 
 
 linear-gradient(90deg, red 50%, blue 0)
 
 
 
 But we can also reach for the same using a conic-gradient() — and with less of code. We reduce the code and also learn a new trick in the process!
 
 
 
 Sliding the colors left and right is a nice way to make it look like we’re changing colors, but it might be better if we instantly change colors instead — that way, there’s no chance of a loader dot flashing two colors at the same time. To do this, let’s change the animation‘s timing function from linear to steps(1)
 
 
 
 CodePen Embed Fallback
 
 
 
 The loader dots
 
 
 
 If you followed along with the first article in this series, I bet you know what comes next: CSS masks! What makes masks so great is that they let us sort of “cut out” parts of a background in the shape of another element. So, in this case, we want to make a few dots, show the background gradients through the dots, and cut out any parts of the background that are not part of a dot.
 
 
 
 We are going to use radial-gradient() for this:
 
 
 
 .loader {
   width: 180px;
   aspect-ratio: 8/5;
   mask:
     radial-gradient(#000 68%, #0000 71%) no-repeat,
     radial-gradient(#000 68%, #0000 71%) no-repeat,
     radial-gradient(#000 68%, #0000 71%) no-repeat;
   mask-size: 25% 40%; /* the size of our dots */
 }
 
 
 
 There’s some duplicated code in there, so let’s make a CSS variable to slim things down:
 
 
 
 .loader {
   width: 180px;
   aspect-ratio: 8/5;
   --_g: radial-gradient(#000 68%, #0000 71%) no-repeat;
   mask: var(--_g),var(--_g),var(--_g);
   mask-size: 25% 40%;
 }
 
 
 
 Cool cool. But now we need a new animation that helps move the dots up and down between the animated gradients.
 
 
 
 .loader {
   /* same as before */
   animation: load 2s infinite;
 }
 
 @keyframes load {      /* X  Y,     X   Y,    X   Y */
   0%     { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */
   16.67% { mask-position: 0% 100%, 50% 0%  , 100% 0%; }
   33.33% { mask-position: 0% 100%, 50% 100%, 100% 0%; }
   50%    { mask-position: 0% 100%, 50% 100%, 100% 100%; } /* all of them at the bottom */
   66.67% { mask-position: 0% 0%  , 50% 100%, 100% 100%; }
   83.33% { mask-position: 0% 0%  , 50% 0%  , 100% 100%; }
   100%   { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */
 }
 
 
 
 Yes, that’s a total of three radial gradients in there, all with the same configuration and the same size — the animation will update the position of each one. Note that the X coordinate of each dot is fixed. The mask-position is defined such that the first dot is at the left (0%), the second one at the center (50%), and the third one at the right (100%). We only update the Y coordinate from 0% to 100% to make the dots dance.
 
 
 
 
 
 
 
 Here’s what we get:
 
 
 
 CodePen Embed Fallback
 
 
 
 Now, combine this with our gradient animation and magic starts to happen:
 
 
 
 CodePen Embed Fallback
 
 
 
 Dot loader variations
 
 
 
 The CSS variable we made in the last example makes it all that much easier to swap in new colors and create more variations of the same loader. For example, different colors and sizes:
 
 
 
 CodePen Embed Fallback
 
 
 
 What about another movement for our dots?
 
 
 
 CodePen Embed Fallback
 
 
 
 Here, all I did was update the animation to consider different positions, and we get another loader with the same code structure!
 
 
 
 The animation technique I used for the mask layers can also be used with background layers to create a lot of different loaders with a single color. I wrote a detailed article about this. You will see that from the same code structure we can create different variations by simply changing a few values. I am sharing a few examples at the end of the article.
 
 
 
 Why not a loader with one dot?
 
 
 
 CodePen Embed Fallback
 
 
 
 This one should be fairly easy to grok as I am using the same technique but with a more simple logic:
 
 
 
 CodePen Embed Fallback
 
 
 
 Here is another example of loader where I am also animating radial-gradient combined with CSS filters and mix-blend-mode to create a blobby effect:
 
 
 
 CodePen Embed Fallback
 
 
 
 If you check the code, you will see that all I am really doing there is animating the background-position, exactly like we did with the previous loader, but adding a dash of background-size to make it look like the blob gets bigger as it absorbs dots.
 
 
 
 If you want to understand the magic behind that blob effect, you can refer to these interactive slides (Chrome only) by Ana Tudor because she covers the topic so well!
 
 
 
 Here is another dot loader idea, this time using a different technique:
 
 
 
 CodePen Embed Fallback
 
 
 
 This one is only 10 CSS declarations and a keyframe. The main element and its two pseudo-elements have the same background configuration with one radial gradient. Each one creates one dot, for a total of three. The animation moves the gradient from top to bottom by using different delays for each dot..
 
 
 
 Oh, and take note how this demo uses CSS Grid. This allows us to leverage the grid’s default stretch alignment so that both pseudo-elements cover the whole area of their parent. No need for sizing! Push the around a little with translate() and we’re all set.
 
 
 
 More examples!
 
 
 
 Just to drive the point home, I want to leave you with a bunch of additional examples that are really variations of what we’ve looked at. As you view the demos, you’ll see that the approaches we’ve covered here are super flexible and open up tons of design possibilities.
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 Next up…
 
 
 
 OK, so we covered dot loaders in this article and spinners in the last one. In the next article of this four-part series, we’ll turn our attention to another common type of loader: the bars. We’ll take a lot of what we learned so far and see how we can extend them to create yet another single element loader with as little code and as much flexibility as possible.
 
 
 
 
 Article series
 
 
 
 Single Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 Single Element Loaders: The Dots originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Conditionally Styling Selected Elements in a Grid Container</title>
         <link href="https://css-tricks.com/conditionally-styling-selected-elements-in-a-grid-container/"/>
       <updated>2022-06-15T14:15:50.000Z</updated>
       <content type="text">Calendars, shopping carts, galleries, file explorers, and online libraries are some situations where selectable items are shown in grids (i.e. square lattices). You know, even those security checks that ask you to select all images with crosswalks or whatever.
 
 
 
 
 
 
 
 🧐
 
 
 
 I found a neat way to display selectable options in a grid. No, not recreating that reCAPTCHA, but simply being able to select multiple items. And when two or more adjoining items are selected, we can use clever :nth-of-type combinators, pseudo elements, and the :checked pseudo-class to style them in a way where they look grouped together.
 
 
 
 CodePen Embed Fallback
 
 
 
 The whole idea of combinators and pseudos to get the rounded checkboxes came from a previous article I wrote. It was a simple single-column design:
 
 
 
 CodePen Embed Fallback
 
 
 
 This time, however, the rounding effect is applied to elements along both the vertical and horizontal axes on a grid. You don’t have to have read my last article on checkbox styling for this since I’m going to cover everything you need to know here. But if you’re interested in a slimmed down take on what we’re doing in this article, then that one is worth checking out.
 
 
 
 Before we start…
 
 
 
 It’ll be useful for you to take note of a few things. For example, I’m using static HTML and CSS in my demo for the sake of simplicity. Depending on your application you might have to generate the grid and the items in it dynamically. I’m leaving out practical checks for accessibility in order to focus on the effect, but you would definitely want to consider that sort of thing in a production environment.
 
 
 
 Also, I’m using CSS Grid for the layout. I’d recommend the same but, of course, it’s only a personal preference and your mileage may vary. For me, using grid allows me to easily use sibling-selectors to target an item’s ::before and ::after pseudos.
 
 
 
 Hence, whatever layout standard you might want to use in your application, make sure the pseudos can still be targeted in CSS and ensure the layout stays in tact across different browsers and screens.
 
 
 
 Let’s get started now
 
 
 
 As you may have noticed in the earlier demo, checking and unchecking a checkbox element modifies the design of the boxes, depending on the selection state of the other checkboxes around it. This is possible because I styled each box using the pseudo-elements of its adjacent elements instead of its own element.
 
 
 
 The following figure shows how the ::before pseudo-elements of boxes in each column (except the first column) overlap the boxes to their left, and how the ::after pseudo-elements of boxes in each row (except the first row) overlap the boxes above.
 
 
 
 
 
 
 
 Here’s the base code
 
 
 
 The markup is pretty straightforward:
 
 
 
 &lt;main&gt;
   &lt;input type&#x3D;checkbox&gt; 
   &lt;input type&#x3D;checkbox&gt; 
   &lt;input type&#x3D;checkbox&gt;
   &lt;!-- more boxes --&gt;
 &lt;/main&gt;
 
 
 
 There’s a little more going on in the initial CSS. But, first, the grid itself:
 
 
 
 /* The grid */
 main {
   display: grid;
   grid:  repeat(5, 60px) / repeat(4, 85px);
   align-items: center;
   justify-items: center;
   margin: 0;
 }
 
 
 
 That’s a grid of five rows and four columns that contain checkboxes. I decided to wipe out the default appearance of the checkboxes, then give them my own light gray background and super rounded borders:
 
 
 
 /* all checkboxes */
 input {
   -webkit-appearance: none;
   appearance: none;
   background: #ddd;
   border-radius: 20px;
   cursor: pointer;
   display: grid;
   height: 40px;
   width: 60px;
   margin: 0;
 }
 
 
 
 Notice, too, that the checkboxes themselves are grids. That’s key for placing their ::before and ::after pseudo-elements. Speaking of which, let’s do that now:
 
 
 
 /* pseudo-elements except for the first column and first row */
 input:not(:nth-of-type(4n+1))::before,
 input:nth-of-type(n+5)::after {
   content: &#x27;&#x27;;        
   border-radius: 20px;
   grid-area: 1 / 1;
   pointer-events: none;
 }
 
 
 
 We’re only selecting the pseudo-elements of checkboxes that are not in the first column or the first row of the grid. input:not(:nth-of-type(4n+1)) starts at the first checkbox, then selects the ::before of every fourth item from there. But notice we’re saying :not(), so really what we’re doing is skipping the ::before pseudo-element of every fourth checkbox, starting at the first. Then we’re applying styles to the ::after pseudo of every checkbox from the fifth one.
 
 
 
 Now we can style both the ::before and ::after pseudos for each checkbox that is not in the first column or row of the grid, so that they are moved left or up, respectively, hiding them by default.
 
 
 
 /* pseudo-elements other than the first column */
 input:not(:nth-of-type(4n+1))::before { 
   transform: translatex(-85px);
 }
 
 /* pseudo-elements other than the first row */
 input:nth-of-type(n+5)::after {
  transform: translatey(-60px); 
 }
 
 
 
 Styling the :checked state
 
 
 
 Now comes styling the checkboxes when they are in a :checked state. First, let’s give them a color, say a limegreen background:
 
 
 
 input:checked { background: limegreen; }
 
 
 
 A checked box should be able to re-style all of its adjacent checked boxes. In other words, if we select the eleventh checkbox in the grid, we should also be able to style the boxes surrounding it at the top, bottom, left, and right.
 
 
 
 
 
 
 
 This is done by targeting the correct pseudo-elements. How do we do that? Well, it depends on the actual number of columns in the grid. Here’s the CSS if two adjacent boxes are checked in a 5⨉4 grid:
 
 
 
 /* a checked box&#x27;s right borders (if the element to its right is checked) */
 input:not(:nth-of-type(4n)):checked + input:checked::before { 
   border-top-right-radius: 0; 
   border-bottom-right-radius: 0; 
   background: limegreen;
 }
 /* a checked box&#x27;s bottom borders (if the element below is checked) */
 input:nth-last-of-type(n+5):checked + * + * + * + input:checked::after {
   border-bottom-right-radius: 0;
   border-bottom-left-radius: 0;
   background: limegreen;
 }
 /* a checked box&#x27;s adjacent (right side) checked box&#x27;s left borders */
 input:not(:nth-of-type(4n)):checked + input:checked + input::before {         
   border-top-left-radius: 0; 
   border-bottom-left-radius: 0; 
   background: limegreen;
 }
 /* a checked box&#x27;s adjacent (below) checked box&#x27;s top borders */
 input:not(:nth-of-type(4n)):checked + * + * + * +  input:checked + input::before { 
   border-top-left-radius: 0; 
   border-top-right-radius: 0; 
   background: limegreen;
 }
 
 
 
 If you prefer you can generate the above code dynamically. However, a typical grid, say an image gallery, the number of columns will be small and likely a fixed number of items, whereas the rows might keep increasing. Especially if designed for mobile screens. That’s why this approach is still an efficient way to go. If for some reason your application happens to have limited rows and expanding columns, then consider rotating the grid sideways because, with a stream of items, CSS Grid arranges them left-to-right and top-to-bottom (i.e. row by row).
 
 
 
 We also need to add styling for the last checkboxes in the grid — they’re not all covered by pseudo-elements as they are the last items in each axis.
 
 
 
 /* a checked box&#x27;s (in last column) left borders */
 input:nth-of-type(4n-1):checked + input:checked {
   border-top-left-radius: 0;
   border-bottom-left-radius: 0;
 }
 /* a checked box&#x27;s (in last column) adjacent (below) checked box&#x27;s top borders */
 input:nth-of-type(4n):checked + * + * + * + input:checked {
   border-top-left-radius: 0;
   border-top-right-radius: 0;
 }
 
 
 
 Those are some tricky selectors! The first one…
 
 
 
 input:nth-of-type(4n-1):checked + input:checked
 
 
 
 …is basically saying this:
 
 
 
 A checked &lt;input&gt; element next to a checked &lt;input&gt; in the second last column.
 
 
 
 And the nth-of-type is calculated like this:
 
 
 
 4(0) - 1 &#x3D; no match
 4(1) - 1 &#x3D; 3rd item
 4(2) - 1 &#x3D; 7th item
 4(3) - 1 &#x3D; 11th item
 etc.
 
 
 
 So, we’re starting at the third checkbox and selecting every fourth one from there. And if a checkbox in that sequence is checked, then we style the checkboxes adjacent, too, if they are also checked.
 
 
 
 And this line:
 
 
 
 input:nth-of-type(4n):checked + * + * + * + input:checked
 
 
 
 Is saying this:
 
 
 
 An &lt;input&gt; element provided that is checked, is directly adjacent to an element, which is directly adjacent to another element, which is also directly adjacent to another element, which, in turn, is directly adjacent to an &lt;input&gt; element that is in a checked state.
 
 
 
 What that means is we’re selecting every fourth checkbox that is checked. And if a checkbox in that sequence is checked, then we style the next fourth checkbox from that checkbox if it, too, is checked.
 
 
 
 CodePen Embed Fallback
 
 
 
 Putting it to use
 
 
 
 What we just looked at is the general principle and logic behind the design. Again, how useful it is in your application will depend on the grid design.
 
 
 
 I used rounded borders, but you can try other shapes or even experiment with background effects (Temani has you covered for ideas). Now that you know how the formula works, the rest is totally up to your imagination.
 
 
 
 Here’s an instance of how it might look in a simple calendar:
 
 
 
 CodePen Embed Fallback
 
 
 
 Again, this is merely a rough prototype using static markup. And, there would be lots and lots of accessibility considerations to consider in a calendar feature.
 
 
 
 
 
 
 
 That’s a wrap! Pretty neat, right? I mean, there’s nothing exactly “new” about what’s happening. But it’s a good example of selecting things in CSS. If we have a handle on more advanced selecting techniques that use combinators and pseudos, then our styling powers can reach far beyond the styling one item — as we saw, we can conditionally style items based on the state of another element.
 
 Conditionally Styling Selected Elements in a Grid Container originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>De-Mystifying IndieWeb on a WordPress Site</title>
         <link href="https://css-tricks.com/de-mystifying-indieweb-on-a-wordpress-site/"/>
       <updated>2022-06-14T16:48:34.000Z</updated>
       <content type="text">Well, sheesh. I opened a little can of worms when sharing Miriam’s “Am I on the IndieWeb yet?” with a short post bemoaning my own trouble getting on the IndieWeb train. But it’s a good can of worms.
 
 
 
 I think it was something like the next day after publishing that short post that David Shanske reached out and offered to help wrap my head around IndieWeb and the components that it comprises. And gosh dang if it wasn’t ridiculously helpful! So much so that I’d like to link you up to a new post David wrote after we talked, then summarize things here as best as I can because (1) it’s helpful to write things down and (2) have a reference for later.
 
 
 
 
 
 
 
 Yes, IndieWeb is confusing.
 
 
 
 David had actually helped someone get their WordPress site all set up with IndieWeb powers. That person, too, was struggling to understand how the various pieces fit together. So, David already had this top of mind when Miriam and I were writing.
 
 
 
 “IndieWeb” is a new term for many folks and that’s where a lot of confusion breeds. Is it a framework? A philosophy? A set of standards? Depending on which one it is, the expectations shift as far as what it looks like to be a part of it.
 
 
 
 It’s sort of all of the above. And that needs to be solidified a bit. There’s nothing inherently confusing about IndieWeb itself once you view it through those different lenses. After reading David’s post my understanding is that IndieWeb is more of a set of protocols. Sorta like working with structured data or OpenGraph in markup. There’s nothing to install per se, but there are standards for how to integrate them into your work.
 
 
 
 Your identity powers IndieWeb. In other words, your site establishes your identity and can be used to do lots of things, like:
 
 
 
 Notify other IndieWeb-supported sites when they are mentionedReceive notifications from other IndieWeb sites when you are mentionedFetch information from a mention and format it for displayAuthenticate your identity through your own website (a là a Google sign-in button but connected to your site)…among other things.
 
 
 
 If that sorta sounds like pingbacks, well, it sorta is. But much more robust and maintained.
 
 
 
 It’s different (and perhaps easier) to implement IndieWeb features on WordPress than it is a static site.
 
 
 
 The big difference is that WordPress provides a lot of the requirements needed to do IndieWeb-y things. I like how David explains it:
 
 
 
 The IndieWeb implementation on WordPress is a [series] of building blocks that you can or cannot choose to use, which is what makes it wonderful, but sometimes confusing. WordPress has a philosophy of decisions, not options. But the IndieWeb is all about options…about building the features that are right for you.
 
 
 
 Those building blocks are plugins that you install to add IndieWeb protocols and technologies to WordPress. It’s awesome those are readily available because that takes a a lot of the work out of things. Running a static site, though, you’re on the hook for establishing most of that yourself.
 
 
 
 David’s post is 100% focused on the WordPress implementation. Your mileage may vary, but you will certainly walk away with a better idea of what protocols are available and how they fit together after reading his post — and hopefully this one as well.
 
 
 
 The IndieWeb WordPress plugin establishes your identity.
 
 
 
 
 
 
 
 I thought it was doing so much stuff behind the scenes, but it’s a lot more simple than that:
 
 
 
 The plugin by itself handles establishing your identity as the IndieWeb sees it. It offers an h-card template and widget. H-Card is the markup for marking up information about a person or place. So, this is an element many people opt to put on their site anyway.
 
 
 
 So, really, it’s possible to get the same sort of thing by correctly marking up a WordPress theme. The convenience here is that you get a handy little template that’s marked up to support the h-card open format and a widget to drop it into a theme’s widget area.
 
 
 
 Here’s a super detailed example of the h-card markup pulled from the documentation for Microformats2:
 
 
 
 &lt;div class&#x3D;&quot;h-card&quot;&gt;
   &lt;img class&#x3D;&quot;u-photo&quot; alt&#x3D;&quot;photo of Mitchell&quot;
        src&#x3D;&quot;https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg&quot;/&gt;
   &lt;a class&#x3D;&quot;p-name u-url&quot;
      href&#x3D;&quot;http://blog.lizardwrangler.com/&quot; 
     &gt;Mitchell Baker&lt;/a&gt;
  (&lt;a class&#x3D;&quot;u-url&quot; 
      href&#x3D;&quot;https://twitter.com/MitchellBaker&quot;
     &gt;@MitchellBaker&lt;/a&gt;)
   &lt;span class&#x3D;&quot;p-org&quot;&gt;Mozilla Foundation&lt;/span&gt;
   &lt;p class&#x3D;&quot;p-note&quot;&gt;
     Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.
   &lt;/p&gt;
   &lt;span class&#x3D;&quot;p-category&quot;&gt;Strategy&lt;/span&gt;
   &lt;span class&#x3D;&quot;p-category&quot;&gt;Leadership&lt;/span&gt;
 &lt;/div&gt;
 
 
 
 See those class names? Classes like .h-card, u-photo, p-name, etc. all provide contextual meaning for a person’s identity which it then parsed as JSON:
 
 
 
 {
   &quot;items&quot;: [{ 
     &quot;type&quot;: [&quot;h-card&quot;],
     &quot;properties&quot;: {
       &quot;photo&quot;: [&quot;https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg&quot;],
       &quot;name&quot;: [&quot;Mitchell Baker&quot;],
       &quot;url&quot;: [
         &quot;http://blog.lizardwrangler.com/&quot;,
         &quot;https://twitter.com/MitchellBaker&quot;
       ],
       &quot;org&quot;: [&quot;Mozilla Foundation&quot;],
       &quot;note&quot;: [&quot;Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.&quot;],
       &quot;category&quot;: [
         &quot;Strategy&quot;,
         &quot;Leadership&quot;
       ]
     }
   }]
 }
 
 
 
 The plugin isn’t doing the sending, receiving, or parsing. Instead, it provides a WordPress site with a way to verify your identity in the markup.
 
 
 
 Not all WordPress themes support Microformats
 
 
 
 
 
 
 
 If you scratched your head first time you saw “Microformats” like I did, David defines it nicely:
 
 
 
 […] Microformats…a way of marking up HTML to allow elements to be identified. It is one of several ways of doing this, but is a very simple and readable one, which is why it is popular in the IndieWeb community.
 
 
 
 The problem, as David continues, is that many themes aren’t marked up in a Microformats-friendly way — which is what the Microformats2 plugin is designed to fix.  That said, David is quick to call out that the plugin is extremely limited in how it accomplishes this, and he recommends instead marking up a theme by hand.
 
 
 
 According to David, the next major release of the Webmention plugin will likely include smarter ways of detecting content and images it can use and formatting them for Microformats2 support.
 
 
 
 Webmentions send and receive notifications.
 
 
 
 
 
 
 
 OK, so if you’ve established your identity through your site so you are discoverable, and your site is marked up for h-card support using Microformats2. Great! You still need something in the middle working as an operator that sends and receives notifications. In other words, when another site mentions you — called a Webmention — the site mentioning you needs a way to support sending that mention to you, and your site needs a way to accept it (or vice versa).
 
 
 
 That’s what the Webmention plugin is for. It’s also probably the source of most of my IndieWeb confusion. I thought it was formatting data and needed an additional service to send and receive it. Nope! It’s actually sending and receiving the data rather than creating the mention. Back to David:
 
 
 
 Back when it was built, the plugin handled only the business of receiving and sending webmentions, not handling display to any degree. Semantic Linkbacks, a separate plugin handled that for not only webmentions, but the older pingback and trackback protocols.
 
 
 
 So, the Webmention plugin is communicating notifications. Meanwhile, another plugin called Semantic Linkbacks is what handles the data. And what the heck are Semantic Linkbacks?
 
 
 
 Semantic Linkbacks fetch and handle data.
 
 
 
 
 
 
 
 Semantic Linkbacks is another plugin that handles another piece of the process. There’s no way I can explain it better than David already does:
 
 
 
 Semantic Linkbacks takes a webmention, which is a notification that another site has linked to something on your site, fetches the other site, and tries to render a display of the information. How that is done can vary from just a profile photo (if it can find one), to interpreting it as a full comment.It does this using Microformats.
 
 
 
 I expected that the main IndieWeb plugin was already doing this since it handles other markup. But it only provides the template and widget to get your identity on your site. Once the Semantic Linkbacks plugin fetches an incoming webmention, it takes the data, formats it, then attempts to display it.
 
 
 
 Sounds like the plugin will be somewhat merged with (or replaced by) an upcoming version of the Webmention plugin:
 
 
 
 Since many people are not inclined, or not comfortable modifying a theme, the new version of Webmentions will include several different alternative ways to try to find an image or summary to display…from OpenGraph (which Facebook and Twitter use to display URLs provided to it) to detecting the WordPress REST API version of a page and using that to get the author name and profile image. None of them will provided as much context as Microformats, but the experience will still be something worth installing.
 
 
 
 That’s certainly nice as it taps into the WordPress REST API for the JSON response and formats that for display.
 
 
 
 Brid.gy is a service to help display interactions.
 
 
 
 A Webmention can be an interaction, say someone likes your post on Twitter or retweets it.
 
 
 
 
 
 
 
 Differentiating a like from a repost from a comment from a whatever needs to happen, and you’d need to implement the Twitter (or whatever) API to draw those distinctions.
 
 
 
 That’s something you can certainly do! But if you’d rather plug and play, one of the IndieWeb community members made a service called Brid.gy. You create an account, hook up your site, and give app permissions to the service… then you’re done!
 
 
 
 What Brid.gy has done is essentially implement the APIs for Twitter, Facebook, Instagram, and others, so that when it detects that a post in those services that interacts with your syndicated post, a Webmention is sent to your site and goes through the process of publishing on your own site.
 
 
 
 There’s so much more!
 
 
 
 Quick hits:
 
 
 
 IndieAuth: This is a protocol based on OAuth 2. The plugin establishes an endpoint in the WordPress REST API that can be used to authenticate your identity through your own self-hosted site — essentially your own Google sign-in button but without establishing that endpoint yourself or needing to rely on a separate hosted API.Micropub: For those who use WordPress but prefer a different editor can install the Micropub plugin. This adds an endpoint that allows you to publish content to your site and using a Micropub-supported editor create items in a Microformats2 feed, giving you way more options for writing content outside of the WordPress Block Editor.Simple Location: David wrote this plugin and I was super impressed when he demoed it for me. The idea is it pulls in data from your current location that can used for everything from displaying the weather at the time you wrote a post, to creating an entire archive of posts on an embedded map based on the post location. I’d honestly love to see something like this baked directly into WordPress.
 
 
 
 The updated flow
 
 
 
 I attempted to make an illustration that outlines the various pieces in my last post, but let’s try again with an updated understanding of what’s happening:
 
 
 
 (Full size)
 
 
 
 Is this all making sense?
 
 
 
 High fives to David for both reaching out and taking the time to show me what it looks like to implement IndieWeb on WordPress. I can’t claim I fully understand all the nuances, but I at least feel like I have a decent grasp of the pieces — the philosophy, protocols, and tech — that are required to make it happen.
 
 
 
 I’d like to turn it around to you! Does this help clarify things for you? Is there anything you’re struggling to understand? Think you’re able to configure a WordPress site with IndieWeb features now? Let’s take it to the comments!
 
 De-Mystifying IndieWeb on a WordPress Site originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Useful Tools for Visualizing Databases on a Budget</title>
         <link href="https://css-tricks.com/useful-tools-for-visualizing-databases-on-a-budget/"/>
       <updated>2022-06-13T19:15:26.000Z</updated>
       <content type="text">A diagram is a graphical representation of information that depicts the structure, relationship, or operation of anything. Diagrams enable your audience to visually grasp hidden information and engage with them in ways that words alone cannot. Depending on the type of project, there are numerous ways to use diagrams. For example, if you want to depict the relationship between distinct pieces, we usually use an Entity Relationship Diagram (ERD). There are many great tools that can help you sketch out your database designs beautifully.
 
 
 
 In this article, I will be sharing some of my favorite tools that I use to curate my data structures and bring my ideas to life.
 
 
 
 
 
 
 
 Google Docs Drawing
 
 
 
 The drawing function in Google Docs allows you to add illustrations to your pages. You can add custom shapes, charts, graphs, infographics, and text boxes to your document with the built-in drawing tool.
 
 
 
 
 
 
 
 Sketching with Google Docs
 
 
 
 Although it is simple to add a graphic to your Google Docs, the procedure is not totally visible. Here’s how:
 
 
 
 1 . Open a new document on Google Docs.
 
 
 
 
 
 
 
 2 . Click on the insert button and select Drawing . Then, from the drop-down option, choose New to open the drawing screen.
 
 
 
 
 
 
 
 3 . You can use the toolbox on this screen to add text boxes, select lines, and shapes, and modify the colors of your drawing.
 
 
 
 
 
 
 
 4 . You may also use the cursor to adjust the size of your drawings and the color of your designs by using the toolbox at the top of your screen.
 
 
 
 
 
 
 
 5 . When finished, click the Save and close button. You can click on the “File” toolbar displayed on the top of your screen to download your document.
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?Online.Requires an Account?Yes, a Google account is required.Collaborative Editing?Yes, with Google Drive sharing.Import SQLNot Applicable.Export SQLNot Applicable.Export Formats.doc, .pdf, .rtf, .odt, .txt, .html, .epubGenerate Shareable URLYes.
 
 
 
 Google Docs offers amazing convenience. However, diagramming databases is not something it was intended for. You may find yourself frustrated with redrawing arrows and relationships if you are making frequent edits to your model.
 
 
 
 Graphviz
 
 
 
 Graphviz is a free graph visualization software that allows us to express information diagrammatically.
 
 
 
 
 
 
 
 Graphviz implements the DOT language. The DOT language is an abstract grammar that makes use of terminals, non terminals, parentheses, square brackets, and vertical bars. More information about the DOT language can be found in its documentation.
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?CLI.Visual Studio Code, Eclipse, and Notepad++.Graphical Interfaces.Requires an Account?No.Collaborative Editing?Not Applicable.Import SQLYes, using SQL Graphviz.Export SQLYes, using SQL Graphviz.Export Formats.gif, .png, .jpeg, .json, .pdf and moreGenerate Shareable URLNot Applicable.
 
 
 
 Graphviz has an impressive and supportive community. However, a high level of SQL support is only available when you install additional third-party software. This overhead may make it less approachable to users that are not comfortable setting up their computer to support these tools.
 
 
 
 ERDPlus
 
 
 
 ERDPlus is a database modeling tool that allows you to create Entity Relationship Diagrams, Relational Schemas, Star Schemas, and SQL DDL statements.
 
 
 
 
 
 
 
 It includes a brief guide on how to create your ER diagrams, which is especially useful for beginners. You can also easily convert your created ER diagrams to relation schemas.
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Not Applicable.Import SQLNo.Export SQLYes, with the support of SQL DDL statements.Export Formats.pngGenerate Shareable URLNot Applicable.
 
 
 
 ERDPlus is suited for SQL. It does lack additional export formats and ability to share with teams, but these features are not necessary with import and export.
 
 
 
 Diagrams.net
 
 
 
 Diagrams.net (previously Draw.io) is a free online diagramming tool that can be used to create flowcharts, UML diagrams, database models, and other types of diagrams.
 
 
 
 
 
 
 
 Features
 
 
 
 CostFree.CLI? GUI? Online?Desktop and Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Sharing requires Google Drive or OneDrive.Import SQLYes.Export SQLNo.Export Formats.png, .jpeg, .svg, .pdf, .html and more.Generate Shareable URLYes, export as URL an option.
 
 
 
 Diagrams.net is designed to support many different workflows. Its ability to easily integrate with third-party integrations such as Trello, Quip, Notion, and others distinguishes it from the other options. The ability to share and collaborate may make it work well for collaborative teams.
 
 
 
 Conclusion
 
 
 
 This article is based on using free database tools that could help visualize your ideas and their capabilities with limitations to great details on how to use these tools.
 
 
 
 In my research, I also came across other excellent tools with free trials available for creating database diagrams like Lucidchart, EDrawMax, and, DrawSQL. However, these free trials have limitations which may make them less suited for developers working on multiple projects.
 
 
 
 I strongly recommend that you read the documentation for each of these tools to determine what works best for you and, most importantly, to avoid any difficulties in using these tools.
 
 
 
 Thank you for taking the time to read this far, and I hope you found what you were looking for. Have a wonderful day!
 
 Useful Tools for Visualizing Databases on a Budget originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Single Element Loaders: The Spinner</title>
         <link href="https://css-tricks.com/single-element-loaders-the-spinner/"/>
       <updated>2022-06-10T14:26:06.000Z</updated>
       <content type="text">Making CSS-only loaders is one of my favorite tasks. It’s always satisfying to look at those infinite animations. And, of course, there are lots of techniques and approaches to make them — no need to look further than CodePen to see just how many. In this article, though, we will see how to make a single element loader writing as little code as possible.
 
 
 
 
 
 
 
 I have made a collection of more than 500 single div loaders and in this four-part series, I am going to share the tricks I used to create many of them. We will cover a huge number of examples, showing how small adjustments can lead to fun variations, and how little code we need to write to make it all happen!
 
 
 
 
 Single-Element Loaders series:
 
 
 
 Single Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 
 
 For this first article, we are going to create a one of the more common loader patterns: spinning bars:
 
 
 
 CodePen Embed Fallback
 
 
 
 Here’s the approach
 
 
 
 A trivial implementation for this loader is to create one element for each bar wrapped inside a parent element (for nine total elements), then play with opacity and transform to get the spinning effect.
 
 
 
 My implementation, though, requires only one element:
 
 
 
 &lt;div class&#x3D;&quot;loader&quot;&gt;&lt;/div&gt;
 
 
 
 …and 10 CSS declarations:
 
 
 
 .loader {
   width: 150px; /* control the size */
   aspect-ratio: 1;
   display: grid;
   mask: conic-gradient(from 22deg, #0003, #000);
   animation: load 1s steps(8) infinite;
 }
 .loader,
 .loader:before {
   --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */
   background: 
     var(--_g)/34% 8%  space no-repeat,
     var(--_g)/8%  34% no-repeat space;
 }
 .loader:before {
   content: &quot;&quot;;
   transform: rotate(45deg);
 }
 @keyframes load {
   to { transform: rotate(1turn); }
 }
 
 
 
 Let’s break that down
 
 
 
 At first glance, the code may look strange but you will see that it’s more simple than what you might think. The first step is to define the dimension of the element. In our case, it’s a 150px square. We can put aspect-ratio to use so the element stays square no matter what.
 
 
 
 .loader {
   width: 150px; /* control the size */
   aspect-ratio: 1; /* make height equal to width */
 }
 
 
 
 When building CSS loaders, I always try to have one value for controlling the overall size. In this case, it’s the width and all the calculations we cover will refer to that value. This allows me to change a single value to control the loader. It’s always important to be able to easily adjust the size of our loaders without the need to adjust a lot of additional values.
 
 
 
 Next, we will use gradients to create the bars. This is the trickiest part! Let’s use one gradient to create two bars like the below:
 
 
 
 background: linear-gradient(#17177c 0 0) 50%/34% 8% space no-repeat;
 
 
 
 
 
 
 
 Our gradient is defined with one color and two color stops. The result is a solid color with no fading or transitions. The size is equal to 34% wide and 8% tall. It’s also placed in the center (50%). The trick is the use of the keyword value space — this duplicates the gradient, giving us two total bars.
 
 
 
 From the specification:
 
 
 
 The image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area.
 
 
 
 I am using a width equal to 34% which means we cannot have more than two bars (3*34% is greater than 100%) but with two bars we will have empty spaces (100% - 2 * 34% &#x3D; 32%). That space is placed in the center between the two bars. In other words, we use a width for the gradient that is between 33% and 50% to make sure we have at least two bars with a little bit of space between them. The value space is what correctly places them for us.
 
 
 
 We do the same and make a second similar gradient to get two more bars at the top and bottom, which give us a background property value of:
 
 
 
 background: 
  linear-gradient(#17177c 0 0) 50%/34% 8%  space no-repeat,
  linear-gradient(#17177c 0 0) 50%/8%  34% no-repeat space;
 
 
 
 We can optimize that using a CSS variable to avoid repetition:
 
 
 
 --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */
 background: 
  var(--_g)/34% 8%  space no-repeat,
  var(--_g)/8%  34% no-repeat space;
 
 
 
 So, now we have four bars and, thanks to CSS variables, we can write the color value once which makes it easy to update later (like we did with the size of the loader).
 
 
 
 To create the remaining bars, let’s tap into the .loader element and its ::before pseudo-element to get four more bars for a grand total of eight in all.
 
 
 
 .loader {
   width: 150px; /* control the size */
   aspect-ratio: 1;
   display: grid;
 }
 .loader,
 .loader::before {
   --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */
   background: 
     var(--_g)/34% 8%  space no-repeat,
     var(--_g)/8%  34% no-repeat space;
 }
 .loader::before {
   content: &quot;&quot;;
   transform: rotate(45deg);
 }
 
 
 
 Note the use of display: grid. This allows us to rely on the grid’s default stretch alignment to make the pseudo-element cover the whole area of its parent; thus there’s no need to specify a dimension on it — another trick that reduces the code and avoid us to deal with a lot of values!
 
 
 
 Now let’s rotate the pseudo-element by 45deg to position the remaining bars. Hover the following demo to see the trick:
 
 
 
 CodePen Embed Fallback
 
 
 
 Setting opacity
 
 
 
 What we’re trying to do is create the impression that there is one bar that leaves a trail of fading bars behind it as it travels a circular path. What we need now is to play with the transparency of our bars to make that trail, which we are going to do with CSS mask combined with a conic-gradient as follows:
 
 
 
 mask: conic-gradient(from 22deg,#0003,#000);
 
 
 
 To better see the trick, let’s apply this to a full-colored box:
 
 
 
 CodePen Embed Fallback
 
 
 
 The transparency of the red color is gradually increasing clockwise. We apply this to our loader and we have the bars with different opacity:
 
 
 
 
 
 
 
 In reality, each bar appears to fade because it’s masked by a gradient and falls between two semi-transparent colors. It’s hardly noticeable when this runs, so it’s sort of like being able to say that all the bars have the same color with a different level of opacity.
 
 
 
 The rotation
 
 
 
 Let’s apply a rotation animation to get our loader. Note, that we need a stepped animation and not a continuous one that’s why I am using steps(8). 8 is nothing but the number of the bars, so that value can be changed depending on how many bars are in use.
 
 
 
 .loader {
   animation: load 3s steps(8) infinite;
 }
 
 /* Same as before: */
 @keyframes load {
   to { transform: rotate(1turn) }
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 That’s it! We have our loader with only one element and a few lines of CSS. We can easily control its size and color by adjusting one value.
 
 
 
 CodePen Embed Fallback
 
 
 
 Since we only used the ::before pseudo-element, we can add four more bars by using ::after to end with 12 bars in total and almost the same code:
 
 
 
 CodePen Embed Fallback
 
 
 
 We update the rotation of our pseudo-elements to consider 30deg and 60deg instead of 45deg while using an twelve-step animation, rather than eight. I also decreased the height to 5% instead of 8% to make the bars a little thinner.
 
 
 
 Notice, too, that we have grid-area: 1/1 on the pseudo-elements. This allows us to place them in the same area as one another, stacked on top of each other.
 
 
 
 Guess what? We can reach for the same loader using another implementation:
 
 
 
 CodePen Embed Fallback
 
 
 
 Can you figure out the logic behind the code? Here is a hint: the opacity is no longer handled with a CSS mask but inside the gradient and is also using the opacity property.
 
 
 
 Why not dots instead?
 
 
 
 We can totally do that:
 
 
 
 CodePen Embed Fallback
 
 
 
 If you check the code, you will see that we’re now working with a radial gradient instead of a linear one. Otherwise, the concept is exactly the same where the mask creates the impression of opacity, but we made the shapes as circles instead of lines.
 
 
 
 Below is a figure to illustrate the new gradient configuration:
 
 
 
 
 
 
 
 If you’re using Safari, note that the demo may be buggy. That’s because Safari currently lacks support for the at syntax in radial gradients. But we can reconfigure the gradient a bit to overcome that:
 
 
 
 .loader,
 .loader:before,
 .loader:after {
   background:
     radial-gradient(
       circle closest-side,
       currentColor 90%,
       #0000 98%
     ) 
     50% -150%/20% 80% repeat-y,
     radial-gradient(
       circle closest-side,
       currentColor 90%,
       #0000 98%
     ) 
     -150% 50%/80% 20% repeat-x;
 }
 
 
 
 CodePen Embed Fallback
 
 
 
 More loader examples
 
 
 
 Here is another idea for a spinner loader similar to the previous one.
 
 
 
 CodePen Embed Fallback
 
 
 
 For this one, I am only relying on background and mask to create the shape (no pseudo-elements needed). I am also defining the configuration with CSS variables to be able to create a lot of variations from the same code — another example of just the powers of CSS variables. I wrote another article about this technique if you want to more details.
 
 
 
 Note that some browsers still rely on a -webkit- prefix for mask-composite with its own set of values, and will not display the spinner in the demo. Here is a way to do it without mast-composite for more browser support.
 
 
 
 I have another one for you:
 
 
 
 CodePen Embed Fallback
 
 
 
 For this one, I am using a background-color to control the color, and use mask and mask-composite to create the final shape:
 
 
 
 
 
 
 
 Before we end, here are some more spinning loaders I made a while back. I am relying on different techniques but still using gradients, masks, pseudo-element, etc. It could be a good exercise to figure out the logic of each one and learn new tricks at the same time. This said, if you have any question about them, the comment section is down below.
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 CodePen Embed Fallback
 
 
 
 Wrapping up
 
 
 
 See, there’s so much we can do in CSS with nothing but a single div, a couple of gradients, pseudo-elements, variables. It seems like we created a whole bunch of different spinning loaders, but they’re all basically the same thing with slight modifications.
 
 
 
 This is only the the beginning. In this series, we will be looking at more ideas and advanced concepts for creating CSS loaders.
 
 
 
 
 Single-Element Loaders series:
 
 
 
 Single Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D
 
 
 Single Element Loaders: The Spinner originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
     <entry>
       <title>Am I on the IndieWeb yet?</title>
         <link href="https://css-tricks.com/am-i-on-the-indieweb-yet/"/>
       <updated>2022-06-09T15:32:50.000Z</updated>
       <content type="text">Can’t smash the Like button hard enough for what Miriam Suzanne has to say on the challenging technical hurdles of implementing Webmentions:
 
 
 
 The first round required several online services along with HTML &amp; JS changes to my static site, just to verify my indieweb identity. Then more changes to the site and more online services to help fetch any mentions (so far, nothing to see, but that’s probably expected). It seems the only way to test the setup is to launch all those changes publicly, and then ask for other devs to send you mentions.[…]I’m an experienced web developer, and I can figure it out. But the steps aren’t simple, and most of my friends are not web developers. So, to me, this all feels like the prototype of an idea – a proof of concept.
 
 
 
 A proof of concept for sure. And one that has been around for quite some time. The IndieWeb idea of owning your own data and using your website as a social hub is right up my alley — and likely yours, too, as someone working on the front end.
 
 
 
 
 
 
 
 Update! David Shanske is one of the developers of the WordPress plugins that support IndieWeb features and he not only published a wonderful explanation of how everything fits together, but also reached out directly and helped me wrap it all around my head.
 
 
 
 Yet, I’ve tinkered on and off with it — specifically Webmentions — over the past like three years with little to show for it. The problem isn’t so much the documentation of getting started because it’s all there. It’s more a combination of things…
 
 
 
 The wiki is confusing. Wikis are super cool in general, but the non-linear nature of it makes it tough to know where to start and where to end.The plugin ecosystem is complex. My personal site is on WordPress and there’s a plugin designed to make it easy to integrate IndieWeb features on it. Except that it’s really one plugin that steers you to install several others, each one introducing a technology that I honestly struggle to understand.There’s a bunch of terms to learn. I mean, “IndieWeb” and “Webmention” are already difficult to grok. Toss in things like “Micropub,” “Microformats,” “IndieAuth,” and “Semantic Linkbacks,” and suddenly it feels like a bunch of puzzle pieces from different puzzles trying to fit together.Some middleware seems necessary? For example, I had to give a service called Bridgy access to my Twitter to get that activity going. It apparently has something to do with Twitter’s shortened t.co URLs and making them play well with microformats.
 
 
 
 But, like Miriam, I struggled my way through it and got something working in the end. This is the sort of visual I wish I had when I was first getting started, and maybe it’ll help you too.
 
 
 
 
 
 
 
 Feels like a lot to get Webmentions going, but maybe that’s only because I have such a light grasp of the tech and how it all fits together. All the pieces are there, though, and even with the initial struggle, I love the IndieWeb concept, er prototype.
 To Shared Link — Permalink on CSS-Tricks
 Am I on the IndieWeb yet? originally published on CSS-Tricks. You should get the newsletter.</content>
     </entry>
 
 </feed>