{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "CSS-Tricks",
  "feed_url": "https://css-tricks.com/feed/",
  "items": [
    {
      "id": "https://css-tricks.com/?p=373484",
      "url": "https://css-tricks.com/gifs-without-the-gif-the-most-performant-image-and-video-options-right-now/",
      "title": "GIFs Without the .gif: The Most Performant Image and Video Options Right Now",
      "summary": "So you want an auto-playing looping video without sound? In popular vernacular this is the very meaning of the word GIF. The word has stuck around but the image format itself is ancient and obsolete. Twitter, for example, has …\n\nGIFs Without the .gif: The Most Performant Image and Video Options Right Now originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>So you want an auto-playing looping video without sound? In popular vernacular this is the very meaning of the word <em>GIF</em>. The word has stuck around but the image format itself is ancient and obsolete. Twitter, for example, has a “GIF” button that actually inserts a <code>&lt;video&gt;</code> element with an MP4 file into your tweet — no <code>.gif</code> in sight. There are a beguiling amount of ways to achieve the same outcome but one thing is clear: there’s really no good reason to use the bulky <code>.gif</code> file format anymore.</p>\n\n\n\n<span id=\"more-373484\"></span>\n\n\n<h3 id=\"use-a-html-ltvideogt-element\">Use a HTML <code>&lt;video&gt;</code> element</h3>\n\n\n<p>It’s easy to recreate the behavior of a GIF using the HTML video element.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;video autoplay loop muted playsinline src=\"cats.mp4\">&lt;/video></code></pre>\n\n\n\n<p>With this code the video will play automatically in a continuous loop with no audio. <a href=\"https://css-tricks.com/what-does-playsinline-mean-in-web-video/\"><code>playsinline</code></a> means that mobile browsers will play the video where it is on the page rather than opening in fullscreen.</p>\n\n\n\n<p>While the HTML video element itself has been supported for many years, the same can’t be said for the wide variety of video formats.</p>\n\n\n\n<p>Videos are made up of two parts: the container and the video codec. (If your video contains audio then it is made up of three parts, the third being the audio codec.) Containers can store video, audio, subtitles and meta information. The two most common containers for video on the web are MP4 and WebM. The container is the same as the file type — if a file ends with a <code>.mp4</code> extension, that means it’s using an MP4 container. The file extension doesn’t tell you the codec though. Examples of video codecs commonly used on the web include VP8, VP9, H.264 and HEVC (H.265). For your video to play online, the browser needs to support both the video container and the codec.</p>\n\n\n\n<p>Browser support for video is a labyrinthine mess, which is part of the reason YouTube embeds are ubiquitous, but that doesn’t work for our use case. Let’s look at the video formats that are worth considering.</p>\n\n\n\n<p><strong>Containers</strong></p>\n\n\n\n<ul><li>MP4 was originally released in 2001. It is supported by all web browsers and has been for quite some time.</li><li><a href=\"https://caniuse.com/webm\" rel=\"noopener\">WebM</a> was released in 2010. It works in all browsers except for iOS Safari.</li></ul>\n\n\n\n<p><strong>Codecs</strong></p>\n\n\n\n<ul><li>The H.264 codec <a href=\"https://caniuse.com/mpeg4\" rel=\"noopener\">works in all browsers</a>.</li><li>HEVC/H.265, the successor of H.264, is supported by <a href=\"https://caniuse.com/hevc\" rel=\"noopener\">Safari, Edge, and Chrome</a> (as of version 105).</li><li>VP9 is the successor to the VP8 codec. VP9 is supported by all the browsers that support WebM.</li><li>The AV1 codec has been supported in Chrome since 2018 and Firefox since 2019. It has <a href=\"https://caniuse.com/av1\" rel=\"noopener\">not yet shipped</a> in Edge or Safari.</li></ul>\n\n\n\n<p>An MP4 file using the H.264 codec will work everywhere, but it doesn’t deliver the best quality or the smallest file size.</p>\n\n\n\n<p>AV1 doesn’t have cross-browser support yet but, released in 2018, it’s the most modern codec around. It’s already being used, at least for some videos and platforms, by <a href=\"https://netflixtechblog.com/netflix-now-streaming-av1-on-android-d5264a515202\" rel=\"noopener\">Netflix</a>, YouTube and <a href=\"https://aomedia.org/member%20spotlight/aomedia-member-spotlight-vimeo/\" rel=\"noopener\">Vimeo</a>. AV1 is a royalty-free video codec designed specifically for the internet. AV1 was created by the Alliance for Open Media (AOM), a group founded by Google, Mozilla, Cisco, Microsoft, Netflix, Amazon, and Intel. Apple is now also a member, so it’s safe to assume all browsers will support AV1 eventually. <a href=\"https://twitter.com/patrickbrosset/status/1570793602497871882\" rel=\"noopener\">Edge</a> is “still evaluating options to support AVIF and AV1.”</p>\n\n\n\n<p>The recently redesigned website from development consultancy Evil Martians is a testament to the file-size reduction that AV1 is capable of.</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">We are using video files for moving backgrounds on <a href=\"https://t.co/5VndxSCEgv\">https://t.co/5VndxSCEgv</a>.<br><br>In AV1 it is just 68 KB, similar to the image file. HEVC is 195 KB, and H264 is 512 КB.<br><br>This is a good example how good AV1 is.<a href=\"https://t.co/lqti7vMdDW\">https://t.co/lqti7vMdDW</a> <a href=\"https://t.co/DaCnKxy6QK\">pic.twitter.com/DaCnKxy6QK</a></p>&mdash; Sitnik the Developer (@sitnikcode) <a href=\"https://twitter.com/sitnikcode/status/1567860568765210626?ref_src=twsrc%5Etfw\" rel=\"noopener\">September 8, 2022</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>If you want to use newer video formats with fallbacks for older browsers, you can use multiple <code>&lt;source&gt;</code> elements. The order of the source elements matter. Specify the ideal source at the top, and the fallback after.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;video autoplay loop muted playsinline>\n  &lt;source src=\"cats.webm\" type=\"video/webm\"> &lt;!-- ideal -->\n  &lt;source src=\"cats.mp4\" type=\"video/mp4\"> &lt;!-- fallhack -->\n&lt;/video></code></pre>\n\n\n\n<p>Given the above code, <code>cats.webm</code> will be used unless the browser does not support that format, in which case the MP4 will be displayed instead.</p>\n\n\n\n<p>What if you want to include multiple MP4 files, but with each using a different codec? When specifying the <code>type</code> you can include a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/codecs_parameter\" rel=\"noopener\">codecs parameter</a>. The syntax is horrifically complicated for anybody who isn’t some kind of hardcore codec nerd, but it looks something like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;video autoplay loop muted playsinline>\n  &lt;source src=\"cats.mp4\" type=\"video/mp4; codecs=av01.0.05M.08\" >\n  &lt;source src=\"cats.mp4\" type=\"video/mp4\" >\n&lt;/video></code></pre>\n\n\n\n<p>Using the above code the browser will select AV1 if it can play that format and fallback to the universally-supported H.264 if not. For AV1, the <code>codecs</code> parameter always starts with <code>av01</code>. The next number is either <code>0</code> (for main profile), <code>1</code> (for high profile) or <code>2</code> (for professional profile). Next comes a two-digit level number. This is followed either by the letter <code>M</code> (for main tier) or <code>H</code> (for high tier). It’s difficult to understand what any those things mean, so you could provide your AV1 video in a WebM container and avoid specifying the codec entirely.</p>\n\n\n\n<p>Most video editing software does not allow you to export as AV1, or even as WebM. If you want to use one of those formats you’ll need to export your video as something else, like a <code>.mov</code>, and then convert it using the command-line tool <a href=\"https://ffmpeg.org\" rel=\"noopener\">FFmpeg</a>:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">ffmpeg -i yourSourceFile.mov -map_metadata -1 -c:a libopus -c:v librav1e -qp 80 -tile-columns 2 -tile-rows 2 -pix_fmt yuv420p -movflags +faststart -vf &amp;quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&amp;quot; videoTitle.mp4</code></pre>\n\n\n\n<p>You should use the most high-resolution source file you can. Obviously, once image quality is lost you can’t improve it through conversion to a superior format. Using a <code>.gif</code> as a source file isn’t ideal because the visual quality of <code>.gif</code> isn’t great, but you’ll still get the benefit of a large reduction in file size:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">ffmpeg -i cats.gif -map_metadata -1 -an opus -c:v librav1e -qp 80 -tile-columns 2 -tile-rows 2 -pix_fmt yuv420p -movflags +faststart -vf &amp;quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&amp;quot; cats.mp4</code></pre>\n\n\n\n<p>On Mac, you can download FFmpeg using Homebrew:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">brew install ffmpeg</code></pre>\n\n\n\n<p>Here’s a nice example of video in web design on the masterfully designed <a href=\"https://oxide.computer\" rel=\"noopener\">Oxide website</a>:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Site serves transparent video where it can – WebM on most browsers, transparent mov on Safari, which lets you do some subtle but nice hover effects <a href=\"https://t.co/wa0eTgGWa2\">pic.twitter.com/wa0eTgGWa2</a></p>&mdash; Ben Leonard (@lenjaminbeonard) <a href=\"https://twitter.com/lenjaminbeonard/status/1560562312796577792?ref_src=twsrc%5Etfw\" rel=\"noopener\">August 19, 2022</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>If you want to use the video as a background and place other elements on top of it, working with <code>&lt;video&gt;</code> is slightly more challenging than a CSS <code>background-image</code>, and requires code that goes something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.video-parent {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n} \n\n.video-parent video {\n  object-fit: cover;\n  position: absolute;\n  inset: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}</code></pre>\n\n\n\n<p>The <code>&lt;video&gt;</code> element is a perfectly okay option for replacing GIFs but it does have one unfortunate side-effect: it prevents a user’s screen from going to sleep, as explained in <a href=\"https://textslashplain.com/2020/10/05/images-keeping-you-awake/\" rel=\"noopener\">this post</a> from an ex- product manager on the Microsoft Edge browser.</p>\n\n\n<h3 id=\"the-benefits-of-using-an-image\">The benefits of using an image</h3>\n\n\n<p>Whether it’s an animated WebP or animated AVIF file, using images rather than video comes with some benefits.</p>\n\n\n\n<p>I’m not sure how many people actually want to art-direct their GIFs, but using the <code>&lt;picture&gt;</code> element does open up some possibilities that couldn’t easily be achieved with <code>&lt;video&gt;</code>. You could specify different animations for light and dark mode, for example:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;picture>\n  &lt;source srcset=\"dark-animation.avifs\" media=\"(prefers-color-scheme: dark)\">\n  &lt;img src=\"light-animation.avif\" alt=\"\">\n&lt;/picture></code></pre>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/elegant-tdd-96dlht?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"light/dark mode media query animation\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p>We might want a video on mobile to be a different aspect ratio than on desktop. We could just crop parts of the image with CSS, but that seems like a waste of bytes and somewhat haphazard. Using a media query we can display a different animated image file based on the screen size or orientation:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;picture>\n  &lt;source type=\"image/avif\" srcset=\"typeloop-landscape.avifs\" media=\"(orientation: landscape)\"\">\n  &lt;img src=\"typeloop-portrait.avif\" alt=\"\">\n&lt;/picture></code></pre>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/goofy-brattain-wqe1r0?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"Responsive landscape/portrait media query for img\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p>All of this is <em>possible</em> with video — you can use <code>matchMedia</code> to do any media queries in JavaScript and programmatically change the <code>src</code> of a <code>&lt;video&gt;</code> element:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\nif (mediaQuery.matches) {\n  document.querySelector(\"video\").src = \"dark-animation.mp4\";\n}</code></pre>\n\n\n\n<p>I believe that whenever there’s a way to do something with markup it should be preferred over doing it JavaScript.</p>\n\n\n\n<p>You can use raster images <em>inside of</em> an SVG using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image\" rel=\"noopener\"><code>&lt;image&gt;</code> element</a>. This includes animated image formats. There’s not much you can do with an image inside an SVG that you couldn’t already do with CSS, but if you group an image with vector elements inside an SVG, then you do get the benefit that the different elements move and scale together.</p>\n\n\n\n<p>The <code>&lt;img&gt;</code> element has the benefit of <a href=\"https://css-tricks.com/native-lazy-loading/\">native lazy-loading</a>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;img loading=\"lazy\" src=\"cats.avif\" alt=\"cats\"></code></pre>\n\n\n\n<p>If you want a background video that takes up the entire screen, it’s slightly easier to position a <code>background-image</code> than a HTML <code>&lt;video&gt;</code> element:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.background-video {\n  background-image: url(\"coolbackground.webp\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 100vh;\n  width: 100vh;\n} </code></pre>\n\n\n\n<p>If you want to support older browsers you could use the <code>&lt;picture&gt;</code> element with a fallback of either an animated WebP or, just for Safari, an <code>img</code> with a video <code>src</code>, or if you care about ancient browsers, maybe an APNG (animated PNG) or a GIF. Using multiple image formats this way might be impractical if you’re optimizing images manually; but it is relatively trivial if you’re using a service like <a href=\"https://css-tricks.com/cloudinary-tricks-for-video/\">Cloudinary</a>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;picture>\n  &lt;source type=\"image/avif\" srcset=\"cats.avif\">\n  &lt;img src=\"cats.webp\">\n&lt;/picture></code></pre>\n\n\n\n<p>There’s still no well-supported way to specify fallback images for CSS backgrounds. <code>image-set</code> is an equivalent of the <code>&lt;picture&gt;</code> element, [but for <code>background-image</code>. Unfortunately, only Firefox currently <a href=\"https://caniuse.com/css-image-set\" rel=\"noopener\">supports</a> the <code>type</code> attribute of <code>image-set</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n  background-image: image-set(\n    url(\"cats.avif\") type(\"image/avif\"),\n    url(\"cats.webp\") type(\"image/webp\"));\n}</code></pre>\n\n\n<div class=\"caniuse\"><div class=\"caniuse-header\"><p>This browser support data is from <a href=\"http://caniuse.com/#feat=css-image-set\" rel=\"noopener\">Caniuse</a>, which has more detail. A number indicates that browser supports the feature at that version and up.</p></div><div class=\"caniuse-section\"><h4>Desktop</h4><table class=\"browser-support-table\"><thead><tr><th class=\"chrome\"><span>Chrome</span></th><th class=\"firefox\"><span>Firefox</span></th><th class=\"ie\"><span>IE</span></th><th class=\"edge\"><span>Edge</span></th><th class=\"safari\"><span>Safari</span></th></tr></thead><tbody><tr><td class=\"a yep-nope yep-nope-partial\" title=\"Chrome - \"><span class=\"caniuse-agents-version version\">108*</span></td><td class=\"y yep\" title=\"Firefox - \"><span class=\"caniuse-agents-version version\">89</span></td><td class=\"n nope\" title=\"IE - \"><span class=\"caniuse-agents-version version\">No</span></td><td class=\"a yep-nope yep-nope-partial\" title=\"Edge - \"><span class=\"caniuse-agents-version version\">105*</span></td><td class=\"a yep-nope yep-nope-partial\" title=\"Safari - \"><span class=\"caniuse-agents-version version\">TP</span></td></tr></table></div><div class=\"caniuse-section\"><h4>Mobile / Tablet</h4><table class=\"browser-support-table\"><thead><tr><th class=\"and_chr\"><span>Android Chrome</span></th><th class=\"and_ff\"><span>Android Firefox</span></th><th class=\"android\"><span>Android</span></th><th class=\"ios_saf\"><span>iOS Safari</span></th></tr></thead><tbody><tr><td class=\"a yep-nope yep-nope-partial\" title=\"Android Chrome - \"><span class=\"caniuse-agents-version version\">105*</span></td><td class=\"y yep\" title=\"Android Firefox - \"><span class=\"caniuse-agents-version version\">104</span></td><td class=\"a yep-nope yep-nope-partial\" title=\"Android - \"><span class=\"caniuse-agents-version version\">105*</span></td><td class=\"a yep-nope yep-nope-partial\" title=\"iOS Safari - \"><span class=\"caniuse-agents-version version\">16.1</span></td></tr></table></div></div>\n\n\n<h3 id=\"use-animated-webp\">Use animated WebP</h3>\n\n\n<p>The WebP image format was introduced by Google in 2010. WebP, including animated WebP, has <a href=\"https://caniuse.com/webp\" rel=\"noopener\">broad browser support</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"400\" height=\"400\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662885429742_animated-webp-supported.webp?resize=400%2C400&#038;ssl=1\" alt=\"A cat flying through space leaving a rainbow trail\" class=\"wp-image-373489\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;img src=\"nyancat.webp\" alt=\"A cat flying through space leaving a rainbow trail\"></code></pre>\n\n\n<div class=\"caniuse\"><div class=\"caniuse-header\"><p>This browser support data is from <a href=\"http://caniuse.com/#feat=”webp”\" rel=\"noopener\">Caniuse</a>, which has more detail. A number indicates that browser supports the feature at that version and up.</p></div><div class=\"caniuse-section\"><h4>Desktop</h4><table class=\"browser-support-table\"><thead><tr><th class=\"chrome\"><span>Chrome</span></th><th class=\"firefox\"><span>Firefox</span></th><th class=\"ie\"><span>IE</span></th><th class=\"edge\"><span>Edge</span></th><th class=\"safari\"><span>Safari</span></th></tr></thead><tbody><tr><td class=\"y yep\" title=\"Chrome - \"><span class=\"caniuse-agents-version version\">32</span></td><td class=\"y yep\" title=\"Firefox - \"><span class=\"caniuse-agents-version version\">65</span></td><td class=\"n nope\" title=\"IE - \"><span class=\"caniuse-agents-version version\">No</span></td><td class=\"y yep\" title=\"Edge - \"><span class=\"caniuse-agents-version version\">18</span></td><td class=\"y yep\" title=\"Safari - \"><span class=\"caniuse-agents-version version\">16.0</span></td></tr></table></div><div class=\"caniuse-section\"><h4>Mobile / Tablet</h4><table class=\"browser-support-table\"><thead><tr><th class=\"and_chr\"><span>Android Chrome</span></th><th class=\"and_ff\"><span>Android Firefox</span></th><th class=\"android\"><span>Android</span></th><th class=\"ios_saf\"><span>iOS Safari</span></th></tr></thead><tbody><tr><td class=\"y yep\" title=\"Android Chrome - \"><span class=\"caniuse-agents-version version\">105</span></td><td class=\"y yep\" title=\"Android Firefox - \"><span class=\"caniuse-agents-version version\">104</span></td><td class=\"y yep\" title=\"Android - \"><span class=\"caniuse-agents-version version\">4.2-4.3</span></td><td class=\"y yep\" title=\"iOS Safari - \"><span class=\"caniuse-agents-version version\">14.0-14.4</span></td></tr></table></div></div>\n\n\n<h3 id=\"use-animated-avif\">Use animated AVIF</h3>\n\n\n<p>WebP is now twelve years old. The more modern AV1 Image File Format (AVIF), released in 2019, is the best image format <a href=\"https://jakearchibald.com/2020/avif-has-landed/\" rel=\"noopener\">for most use cases</a> on the web. Converting a <code>.gif</code> file to AVIF can reduce bytes by over 90%.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;img src=\"nyancat.avif\" alt=\"A cat flying through space leaving a rainbow trail\"></code></pre>\n\n\n\n<p>As its name suggests, AVIF is based on the the AV1 video codec. Like WebP, AVIF can be used for both still images and animation. There’s not much difference between an animated AVIF file and an AV1 video in an MP4 container.</p>\n\n\n\n<p>You can put a shadow on AVIF animation, e.g.:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">filter: drop-shadow(2px 4px 6px black);</code></pre>\n\n\n\n<p>AVIF is already supported by Safari, Firefox, Samsung Internet, and Chrome. Firefox only shipped support for still images, not animated AVIF. Safari supports animation as of version <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-16_1-release-notes\" rel=\"noopener\">16.1</a>. Unfortunately, because Firefox does support AVIF, just not animated AVIF, it’s impossible to successfully use the <code>&lt;picture&gt;</code> element to display AVIF only to browsers that support animation. Given the following code, Firefox would display the AVIF, <em>but as a static image</em>, rather than showing the animated WebP version:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;picture>\n  &lt;source srcset=\"https://fonts.gstatic.com/s/e/notoemoji/latest/1f4a9/512.avif\" type=\"image/avif\">\n  &lt;img src=\"https://fonts.gstatic.com/s/e/notoemoji/latest/1f4a9/512.webp\" alt=\"&#x1f4a9;\" width=\"32\" height=\"32\">\n&lt;/picture></code></pre>\n\n\n\n<p><a href=\"https://css-tricks.com/useful-tools-for-creating-avif-images/\">Tooling for AVIF</a> is still improving. Video editing software does not enable you to export footage as animated AVIF or animated WebP. You’ll need to export it in some other format and then convert it. On the website <a href=\"https://ezgif.com/\" rel=\"noopener\">ezgif.com</a> you can upload a video file or a <code>.gif</code> and convert it to AVIF or WebP. You could also use FFmpeg. Using <a href=\"https://cloudinary.com/documentation/videos_to_animated_images#delivering_animated_avif_files\" rel=\"noopener\">Cloudinary</a> you can upload a video file or an old <code>.gif</code> and convert it to pretty much any format you want — including animated WebP and animated AVIF. As of time of writing, Squoosh, an image conversion app, doesn’t support animated AVIF.</p>\n\n\n\n<p>Adoption remains lacking in design software. When viewing a prototype, Figma will play any animated GIFs included in the design. For AVIF, by contrast, you can’t even import or export a still image.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"660\" height=\"572\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1663184801550_ScreenShot2022-09-04at9.56.11AM.png?resize=660%2C572&#038;ssl=1\" alt=\"An error in Figma that says files failed to import.\" class=\"wp-image-373490\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1663184801550_ScreenShot2022-09-04at9.56.11AM.png?w=660&amp;ssl=1 660w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1663184801550_ScreenShot2022-09-04at9.56.11AM.png?resize=300%2C260&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"use-a-video-with-an-ltimggt-element\">Use a video with an <code>&lt;img&gt;</code> element</h3>\n\n\n<p>In 2018, <a href=\"https://webkit.org/blog/8216/new-webkit-features-in-safari-11-1/\" rel=\"noopener\">Safari</a> <a href=\"https://webkit.org/blog/8216/new-webkit-features-in-safari-11-1/\" rel=\"noopener\">11.1</a> gave developers the ability to use a video file as the source of the HTML <code>&lt;img&gt;</code> element. This works in Safari:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;img src=\"cat.mp4\" alt=\"A Siamese cat walking in a circle\"></code></pre>\n\n\n\n<p>All the same codecs that Safari supports for <code>&lt;video&gt;</code> are supported by&nbsp;<code>&lt;img&gt;.</code> This means you can use&nbsp;MP4, H.264,&nbsp;and HEVC.</p>\n\n\n\n<p>In Safari, video files will also work anyplace in CSS where you could use an image, like <code>background-image</code> or <code>border-image</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.video-border {  \n  border: 40px solid transparent;\n  border-image: url(abstract_bg_animation.mp4) 100 round;\n}</code></pre>\n\n\n\n<p>One strange consequence of this feature in Safari is that the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-poster\" rel=\"noopener\">poster image</a> of a <code>&lt;video&gt;</code> element can also be a video. The poster will autoplay <a href=\"https://lapcatsoftware.com/articles/img1.html\" rel=\"noopener\">even if you have blocked video’s from auto-playing</a>. Safari claimed this feature came with performance benefits, not just over using <code>.gif</code> files but also over using the <code>&lt;video&gt;</code> element. According to <a href=\"https://developer.apple.com/documentation/webkit/delivering_video_content_for_safari\" rel=\"noopener\">Apple</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>By placing your videos in <code>&lt;img&gt;</code> elements, the content loads faster, uses less battery power, and gets better performance.</p></blockquote>\n\n\n\n<p>Colin Bendell, co-author of O‘Reilly’s High Performance Images, wrote about the <a href=\"https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/#-but-we-already-have-video-tags\" rel=\"noopener\">shortcomings of the <code>&lt;video&gt;</code> tag</a> for our use case:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Unlike <code>&lt;img&gt;</code> tags, browsers do <a href=\"http://yoavweiss.github.io/preloader-velocity-nyc-talk/#/32\" rel=\"noopener\">not preload</a> <a href=\"http://yoavweiss.github.io/preloader-velocity-nyc-talk/#/32\" rel=\"noopener\"><code>&lt;video&gt;</code></a> content. Generally preloaders only preload JavaScript, CSS, and image resources because they are critical for the page layout. Since <code>&lt;video&gt;</code> content can be any length – from micro-form to long-form – <code>&lt;video&gt;</code> tags are skipped until the main thread is ready to parse its content. This delays the loading of <code>&lt;video&gt;</code> content by many hundreds of milliseconds.</p><p>[…]</p><p>Worse yet, many browsers assume that <code>&lt;video&gt;</code> tags contain long-form content. Instead of downloading the whole video file at once, which would waste your cell data plan in cases where you do not end up watching the whole video, the browser will first perform a 1-byte request to test if the server supports <a href=\"https://tools.ietf.org/html/rfc7233\" rel=\"noopener\">HTTP Range Requests</a>. Then it will follow with multiple range requests in various chunk sizes to ensure that the video is adequately (but not over-) buffered. The consequence is multiple TCP round trips before the browser can even start to decode the content and significant delays before the user sees anything. On high-latency cellular connections, these round trips can set video loads back by hundreds or thousands of milliseconds.</p></blockquote>\n\n\n\n<p>Chrome has marked this as <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=791658\" rel=\"noopener\">“WontFix”</a> — meaning they don’t intend to ever support this feature, for <a href=\"https://developers.google.com/speed/webp/faq#what_is_webp_why_should_i_use_it:~:text=Why%20not%20simply%20support%20WebM%20in%20%3Cimg%3E%253F\" rel=\"noopener\">various reasons</a>. There is, however, an <a href=\"https://github.com/whatwg/html/issues/7141\" rel=\"noopener\">open issue</a> on GitHub to add it to the HTML spec, which would force Google’s hand.</p>\n\n\n<h3 id=\"respecting-user-preferences\">Respecting user preferences</h3>\n\n\n<p>Video has the benefit of automatically respecting a users preferences. Firefox and Safari allow users to <a href=\"https://www.wired.com/story/how-to-turn-off-autoplay-in-browser/\" rel=\"noopener\">block videos from automatically playing</a>, even if they don’t have any audio. Here are the settings in Firefox, for example:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2580\" height=\"1590\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=2580%2C1590&#038;ssl=1\" alt=\"firefox autoplay settings open in a modal.\" class=\"wp-image-373491\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?w=2580&amp;ssl=1 2580w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=300%2C185&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=1024%2C631&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=768%2C473&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=1536%2C947&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=2048%2C1262&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The user can still decide to watch a certain video by right-clicking and pressing play in the menu, or enable autoplay for all videos on a specific website.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1116\" height=\"828\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?resize=1116%2C828&#038;ssl=1\" alt=\"Contextual menu for a video.\" class=\"wp-image-373492\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?w=1116&amp;ssl=1 1116w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?resize=1024%2C760&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?resize=768%2C570&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>For users who haven’t disabled autoplay, it’s nice to have the option to pause an animation if you happen to find it annoying or distracting (a user can still right-click to bring up the pause option in a menu when video controls aren’t shown). Success Criterion <a href=\"https://www.w3.org/TR/WCAG21/#pause-stop-hide\" rel=\"noopener\">2.2.2 Pause, Stop, Hide</a> of the WCAG accessibility guidelines states:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>For any moving, blinking or scrolling information that (1) starts automatically, (2) lasts more than five seconds, and (3) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential.</p></blockquote>\n\n\n\n<p>With the <code>&lt;video&gt;</code> element, you’ll achieve that criterion without any additional development.</p>\n\n\n\n<p>There’s also a “reduce motion” user setting that developers can respect by reducing or removing CSS and JavaScript web animations.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1426\" height=\"1090\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?resize=1426%2C1090&#038;ssl=1\" alt=\"macOS settings window for display accessibility with rediced motion checked.\" class=\"wp-image-373493\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?w=1426&amp;ssl=1 1426w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?resize=300%2C229&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?resize=1024%2C783&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?resize=768%2C587&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>You can also use it to display a still image instead of an animation. This takes <a href=\"https://web.dev/prefers-reduced-motion/#working-with-the-media-query-from-lesspicturegreater-contexts\" rel=\"noopener\">extra code</a> to implement — and you need to host a still image in additional to your animated image.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;picture>\n  &lt;source\n    srcset=\"nyancat.avifs\"\n    type=\"image/avif\"\n    media=\"(prefers-reduced-motion: no-preference)\"\n  />\n  &lt;img src=\"nyancat.png\" alt=\"Nyan cat\" width=\"250\" height=\"250\" />\n&lt;/picture></code></pre>\n\n\n\n<p>There’s another downside. When using the <code>&lt;picture&gt;</code> element in this way if the user has checked “reduce motion”there’s no way for them to see the animation. Just because a user prefers <em>less</em> animation, doesn’t mean they never want <em>any</em> — they might still want to be able to opt-in and watch one every now and then. Unlike the <code>&lt;video&gt;</code> element, displaying a still image takes away that choice.</p>\n\n\n<h3 id=\"checking-for-progressive-enhancement\">Checking for progressive enhancement</h3>\n\n\n<p>If you want to check that your <code>&lt;picture&gt;</code> code is properly working and fallback images are being displayed, you can use the <strong>Rendering</strong> tab in Chrome DevTools to turn off support for AVIF and WebP image formats. Seeing as all browsers now support WebP, this is a pretty handy feature.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"884\" height=\"222\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662595390866_file.jpeg?resize=884%2C222&#038;ssl=1\" alt=\"Chrome DevTools with Rendering panel open optons for disabling AVIF and WebP images.\" class=\"wp-image-373494\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662595390866_file.jpeg?w=884&amp;ssl=1 884w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662595390866_file.jpeg?resize=300%2C75&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662595390866_file.jpeg?resize=768%2C193&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>While it’s usually the best option to create animations with CSS, JavaScript, DOM elements, canvas and SVG, as new image and video formats offer smaller files than what was previously possible, they become a useful option for UI animation (rather than just nyancat loops). For one-off animations, an AVIF file is probably going to be more performant than importing an entire <a href=\"https://github.com/airbnb/lottie/issues/114\" rel=\"noopener\">animation library</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"616\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1663351571897_ezgif.com-gif-maker1.webp?resize=616%2C576&#038;ssl=1\" alt=\"Circular badge that reads Match Accepted with an animated blue progress highlight going around it.\" class=\"wp-image-373495\" data-recalc-dims=\"1\"/><figcaption>Here’s a fun example of using video for UI from all the way back in 2017 for the&nbsp;<a href=\"https://technology.riotgames.com/news/under-hood-league-client%E2%80%99s-hextech-ui#:~:text=ANIMATIONS%20AND%20VIDEO\" target=\"_blank\" rel=\"noreferrer noopener\">League of Legends website</a>.</figcaption></figure>\n\n\n<h3 id=\"lottie\">Lottie</h3>\n\n\n<p><a href=\"https://www.adobe.com/products/aftereffects.html\" rel=\"noopener\">After Effects</a> is a popular animation tool from Adobe. Using an extension called <a href=\"https://exchange.adobe.com/apps/cc/12557/bodymovin\" rel=\"noopener\">Bodymovin</a>, you can export animation data from After Effects as a JSON file.</p>\n\n\n\n<p>Then there&#8217;s <a href=\"https://airbnb.design/lottie/\" rel=\"noopener\">Lottie</a>, an open-source animation library from Airbnb that can take that JSON file and <a href=\"https://css-tricks.com/animating-with-lottie/\">render it as an animation</a> on different platforms. The library is available for native iOS, Android, and React Native applications, as well as for the web. You can see&nbsp;<a href=\"https://airbnb.io/lottie/#/community-showcase\" target=\"_blank\" rel=\"noreferrer noopener\">examples</a>&nbsp;from Google Home, Target, and Walgreens, among others.</p>\n\n\n\n<p>Once you’ve included the dependency you need to write a small amount of JavaScript code to get the animation to run:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div id=\"lottie\">&lt;/div></code></pre>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const animation = bodymovin.loadAnimation({\n  container: document.getElementById('lottie'),\n  path: 'myAnimation.json',\n  renderer: 'svg',\n  loop: true,\n  autoplay: true,\n})</code></pre>\n\n\n\n<p>You can optionally change those settings to only play after an event:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const lottieContainer = document.getElementById('lottie');\nconst animation = bodymovin.loadAnimation({\n  container: lottieContainer, \n  path: 'myAnimation.json',\n  renderer: 'svg',\n  loop: true,\n  autoplay: false,\n  })\n// Play the animation on hover\nlottieContainer.addEventListener('mouseover', () => {\n  animation.play();\n});\n// Stop the animation after playing once\nanimation.addEventListener('loopComplete', function() {\n  animation.stop();\n});</code></pre>\n\n\n\n<p>Here’s a&nbsp;<a href=\"https://lottiefiles.com/32147-cute-cat-works\" target=\"_blank\" rel=\"noreferrer noopener\">cute example</a>&nbsp;of a cat typing on a keyboard I took from&nbsp;<a href=\"https://lottiefiles.com/32147-cute-cat-works\" target=\"_blank\" rel=\"noreferrer noopener\">Lottiefiles.com</a>&nbsp;(the&nbsp;website is a useful website for previewing your own Lottie JSON file animations, rather than needing to install After Effects, as well finding animations from other creatives):</p>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/dreamy-goodall-y223xr?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"Typing cat Lottie animation\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p>You can also programmatically play an animation backwards and change the playback rate.</p>\n\n\n\n<p>If you do choose to use Lottie, there&#8217;s a <a href=\"https://www.figma.com/community/plugin/809860933081065308/LottieFiles\" rel=\"noopener\">Figma plugin for Lottie</a> but all it does is convert JSON files to&nbsp;<code>.gif</code>&nbsp;so that they can be previewed in prototyping mode.</p>\n\n\n\n<p>Abd what about Lottie&#8217;s performance? There’s&nbsp;<a href=\"https://bundlephobia.com/package/lottie-web@5.7.2\" target=\"_blank\" rel=\"noreferrer noopener\">size of the library</a>&nbsp;— 254.6KB (63.8 gzipped) — and the size of the JSON file to consider. There’s also the amount of&nbsp;<a href=\"https://jaredstanley.medium.com/improving-site-performance-by-optimizing-lottie-animations-9f032972d338\" target=\"_blank\" rel=\"noreferrer noopener\">DOM elements</a>&nbsp;that get created for the SVG parts. If you run into this issue, Lottie has the option to render to a HTML&nbsp;<code>&lt;canvas&gt;</code>, but you’ll need to use a different version of the JavaScript library.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const animation = bodymovin.loadAnimation({\n  container: document.getElementById('lottie'), \n  path: 'myAnimation.json',\n  renderer: 'canvas',\n})</code></pre>\n\n\n\n<p>Lottie isn’t a full replacement for gifs. While After Effects itself is often used with video clips, and Lottie can render to a HTML&nbsp;<code>&lt;canvas&gt;</code>, and a canvas can play video clips, you wouldn’t use a Lottie file for that purpose. Lottie is for advanced 2D animations, not so much for video. There are other tools for creating complex web animations with a GUI like&nbsp;<a href=\"https://www.svgator.com/\" target=\"_blank\" rel=\"noreferrer noopener\">SVGator</a>&nbsp;and&nbsp;<a href=\"https://rive.app/\" target=\"_blank\" rel=\"noreferrer noopener\">Rive</a>, but I haven’t tried them myself. &#x1f937;&#x200d;&#x2642;&#xfe0f;</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n\n\n\n<p>I wish there was a <abbr title=\"too long; didn’t read\">TL;DR</abbr> for this article. For now, at least, there’s no clear winner…</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/gifs-without-the-gif-the-most-performant-image-and-video-options-right-now/\">GIFs Without the .gif: The Most Performant Image and Video Options Right Now</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "So you want an auto-playing looping video without sound? In popular vernacular this is the very meaning of the word GIF. The word has stuck around but the image format itself is ancient and obsolete. Twitter, for example, has a “GIF” button that actually inserts a <video> element with an MP4 file into your tweet — no .gif in sight. There are a beguiling amount of ways to achieve the same outcome but one thing is clear: there’s really no good reason to use the bulky .gif file format anymore.\n\n\n\n\n\n\nUse a HTML <video> element\n\n\nIt’s easy to recreate the behavior of a GIF using the HTML video element.\n\n\n\n<video autoplay loop muted playsinline src=\"cats.mp4\"></video>\n\n\n\nWith this code the video will play automatically in a continuous loop with no audio. playsinline means that mobile browsers will play the video where it is on the page rather than opening in fullscreen.\n\n\n\nWhile the HTML video element itself has been supported for many years, the same can’t be said for the wide variety of video formats.\n\n\n\nVideos are made up of two parts: the container and the video codec. (If your video contains audio then it is made up of three parts, the third being the audio codec.) Containers can store video, audio, subtitles and meta information. The two most common containers for video on the web are MP4 and WebM. The container is the same as the file type — if a file ends with a .mp4 extension, that means it’s using an MP4 container. The file extension doesn’t tell you the codec though. Examples of video codecs commonly used on the web include VP8, VP9, H.264 and HEVC (H.265). For your video to play online, the browser needs to support both the video container and the codec.\n\n\n\nBrowser support for video is a labyrinthine mess, which is part of the reason YouTube embeds are ubiquitous, but that doesn’t work for our use case. Let’s look at the video formats that are worth considering.\n\n\n\nContainers\n\n\n\nMP4 was originally released in 2001. It is supported by all web browsers and has been for quite some time.WebM was released in 2010. It works in all browsers except for iOS Safari.\n\n\n\nCodecs\n\n\n\nThe H.264 codec works in all browsers.HEVC/H.265, the successor of H.264, is supported by Safari, Edge, and Chrome (as of version 105).VP9 is the successor to the VP8 codec. VP9 is supported by all the browsers that support WebM.The AV1 codec has been supported in Chrome since 2018 and Firefox since 2019. It has not yet shipped in Edge or Safari.\n\n\n\nAn MP4 file using the H.264 codec will work everywhere, but it doesn’t deliver the best quality or the smallest file size.\n\n\n\nAV1 doesn’t have cross-browser support yet but, released in 2018, it’s the most modern codec around. It’s already being used, at least for some videos and platforms, by Netflix, YouTube and Vimeo. AV1 is a royalty-free video codec designed specifically for the internet. AV1 was created by the Alliance for Open Media (AOM), a group founded by Google, Mozilla, Cisco, Microsoft, Netflix, Amazon, and Intel. Apple is now also a member, so it’s safe to assume all browsers will support AV1 eventually. Edge is “still evaluating options to support AVIF and AV1.”\n\n\n\nThe recently redesigned website from development consultancy Evil Martians is a testament to the file-size reduction that AV1 is capable of.\n\n\n\n\nWe are using video files for moving backgrounds on https://t.co/5VndxSCEgv.In AV1 it is just 68 KB, similar to the image file. HEVC is 195 KB, and H264 is 512 КB.This is a good example how good AV1 is.https://t.co/lqti7vMdDW pic.twitter.com/DaCnKxy6QK— Sitnik the Developer (@sitnikcode) September 8, 2022\n\n\n\n\nIf you want to use newer video formats with fallbacks for older browsers, you can use multiple <source> elements. The order of the source elements matter. Specify the ideal source at the top, and the fallback after.\n\n\n\n<video autoplay loop muted playsinline>\n  <source src=\"cats.webm\" type=\"video/webm\"> <!-- ideal -->\n  <source src=\"cats.mp4\" type=\"video/mp4\"> <!-- fallhack -->\n</video>\n\n\n\nGiven the above code, cats.webm will be used unless the browser does not support that format, in which case the MP4 will be displayed instead.\n\n\n\nWhat if you want to include multiple MP4 files, but with each using a different codec? When specifying the type you can include a codecs parameter. The syntax is horrifically complicated for anybody who isn’t some kind of hardcore codec nerd, but it looks something like this:\n\n\n\n<video autoplay loop muted playsinline>\n  <source src=\"cats.mp4\" type=\"video/mp4; codecs=av01.0.05M.08\" >\n  <source src=\"cats.mp4\" type=\"video/mp4\" >\n</video>\n\n\n\nUsing the above code the browser will select AV1 if it can play that format and fallback to the universally-supported H.264 if not. For AV1, the codecs parameter always starts with av01. The next number is either 0 (for main profile), 1 (for high profile) or 2 (for professional profile). Next comes a two-digit level number. This is followed either by the letter M (for main tier) or H (for high tier). It’s difficult to understand what any those things mean, so you could provide your AV1 video in a WebM container and avoid specifying the codec entirely.\n\n\n\nMost video editing software does not allow you to export as AV1, or even as WebM. If you want to use one of those formats you’ll need to export your video as something else, like a .mov, and then convert it using the command-line tool FFmpeg:\n\n\n\nffmpeg -i yourSourceFile.mov -map_metadata -1 -c:a libopus -c:v librav1e -qp 80 -tile-columns 2 -tile-rows 2 -pix_fmt yuv420p -movflags +faststart -vf &quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&quot; videoTitle.mp4\n\n\n\nYou should use the most high-resolution source file you can. Obviously, once image quality is lost you can’t improve it through conversion to a superior format. Using a .gif as a source file isn’t ideal because the visual quality of .gif isn’t great, but you’ll still get the benefit of a large reduction in file size:\n\n\n\nffmpeg -i cats.gif -map_metadata -1 -an opus -c:v librav1e -qp 80 -tile-columns 2 -tile-rows 2 -pix_fmt yuv420p -movflags +faststart -vf &quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&quot; cats.mp4\n\n\n\nOn Mac, you can download FFmpeg using Homebrew:\n\n\n\nbrew install ffmpeg\n\n\n\nHere’s a nice example of video in web design on the masterfully designed Oxide website:\n\n\n\n\nSite serves transparent video where it can – WebM on most browsers, transparent mov on Safari, which lets you do some subtle but nice hover effects pic.twitter.com/wa0eTgGWa2— Ben Leonard (@lenjaminbeonard) August 19, 2022\n\n\n\n\nIf you want to use the video as a background and place other elements on top of it, working with <video> is slightly more challenging than a CSS background-image, and requires code that goes something like this:\n\n\n\n.video-parent {\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n} \n\n.video-parent video {\n  object-fit: cover;\n  position: absolute;\n  inset: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n\n\n\nThe <video> element is a perfectly okay option for replacing GIFs but it does have one unfortunate side-effect: it prevents a user’s screen from going to sleep, as explained in this post from an ex- product manager on the Microsoft Edge browser.\n\n\nThe benefits of using an image\n\n\nWhether it’s an animated WebP or animated AVIF file, using images rather than video comes with some benefits.\n\n\n\nI’m not sure how many people actually want to art-direct their GIFs, but using the <picture> element does open up some possibilities that couldn’t easily be achieved with <video>. You could specify different animations for light and dark mode, for example:\n\n\n\n<picture>\n  <source srcset=\"dark-animation.avifs\" media=\"(prefers-color-scheme: dark)\">\n  <img src=\"light-animation.avif\" alt=\"\">\n</picture>\n\n\n\n\n\n\n\nWe might want a video on mobile to be a different aspect ratio than on desktop. We could just crop parts of the image with CSS, but that seems like a waste of bytes and somewhat haphazard. Using a media query we can display a different animated image file based on the screen size or orientation:\n\n\n\n<picture>\n  <source type=\"image/avif\" srcset=\"typeloop-landscape.avifs\" media=\"(orientation: landscape)\"\">\n  <img src=\"typeloop-portrait.avif\" alt=\"\">\n</picture>\n\n\n\n\n\n\n\nAll of this is possible with video — you can use matchMedia to do any media queries in JavaScript and programmatically change the src of a <video> element:\n\n\n\nconst mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\nif (mediaQuery.matches) {\n  document.querySelector(\"video\").src = \"dark-animation.mp4\";\n}\n\n\n\nI believe that whenever there’s a way to do something with markup it should be preferred over doing it JavaScript.\n\n\n\nYou can use raster images inside of an SVG using the <image> element. This includes animated image formats. There’s not much you can do with an image inside an SVG that you couldn’t already do with CSS, but if you group an image with vector elements inside an SVG, then you do get the benefit that the different elements move and scale together.\n\n\n\nThe <img> element has the benefit of native lazy-loading:\n\n\n\n<img loading=\"lazy\" src=\"cats.avif\" alt=\"cats\">\n\n\n\nIf you want a background video that takes up the entire screen, it’s slightly easier to position a background-image than a HTML <video> element:\n\n\n\n.background-video {\n  background-image: url(\"coolbackground.webp\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 100vh;\n  width: 100vh;\n} \n\n\n\nIf you want to support older browsers you could use the <picture> element with a fallback of either an animated WebP or, just for Safari, an img with a video src, or if you care about ancient browsers, maybe an APNG (animated PNG) or a GIF. Using multiple image formats this way might be impractical if you’re optimizing images manually; but it is relatively trivial if you’re using a service like Cloudinary.\n\n\n\n<picture>\n  <source type=\"image/avif\" srcset=\"cats.avif\">\n  <img src=\"cats.webp\">\n</picture>\n\n\n\nThere’s still no well-supported way to specify fallback images for CSS backgrounds. image-set is an equivalent of the <picture> element, [but for background-image. Unfortunately, only Firefox currently supports the type attribute of image-set.\n\n\n\n.box {\n  background-image: image-set(\n    url(\"cats.avif\") type(\"image/avif\"),\n    url(\"cats.webp\") type(\"image/webp\"));\n}\n\n\nThis browser support data is from Caniuse, which has more detail. A number indicates that browser supports the feature at that version and up.DesktopChromeFirefoxIEEdgeSafari108*89No105*TPMobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS Safari105*104105*16.1\n\n\nUse animated WebP\n\n\nThe WebP image format was introduced by Google in 2010. WebP, including animated WebP, has broad browser support.\n\n\n\n\n\n\n\n<img src=\"nyancat.webp\" alt=\"A cat flying through space leaving a rainbow trail\">\n\n\nThis browser support data is from Caniuse, which has more detail. A number indicates that browser supports the feature at that version and up.DesktopChromeFirefoxIEEdgeSafari3265No1816.0Mobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS Safari1051044.2-4.314.0-14.4\n\n\nUse animated AVIF\n\n\nWebP is now twelve years old. The more modern AV1 Image File Format (AVIF), released in 2019, is the best image format for most use cases on the web. Converting a .gif file to AVIF can reduce bytes by over 90%.\n\n\n\n<img src=\"nyancat.avif\" alt=\"A cat flying through space leaving a rainbow trail\">\n\n\n\nAs its name suggests, AVIF is based on the the AV1 video codec. Like WebP, AVIF can be used for both still images and animation. There’s not much difference between an animated AVIF file and an AV1 video in an MP4 container.\n\n\n\nYou can put a shadow on AVIF animation, e.g.:\n\n\n\nfilter: drop-shadow(2px 4px 6px black);\n\n\n\nAVIF is already supported by Safari, Firefox, Samsung Internet, and Chrome. Firefox only shipped support for still images, not animated AVIF. Safari supports animation as of version 16.1. Unfortunately, because Firefox does support AVIF, just not animated AVIF, it’s impossible to successfully use the <picture> element to display AVIF only to browsers that support animation. Given the following code, Firefox would display the AVIF, but as a static image, rather than showing the animated WebP version:\n\n\n\n<picture>\n  <source srcset=\"https://fonts.gstatic.com/s/e/notoemoji/latest/1f4a9/512.avif\" type=\"image/avif\">\n  <img src=\"https://fonts.gstatic.com/s/e/notoemoji/latest/1f4a9/512.webp\" alt=\"💩\" width=\"32\" height=\"32\">\n</picture>\n\n\n\nTooling for AVIF is still improving. Video editing software does not enable you to export footage as animated AVIF or animated WebP. You’ll need to export it in some other format and then convert it. On the website ezgif.com you can upload a video file or a .gif and convert it to AVIF or WebP. You could also use FFmpeg. Using Cloudinary you can upload a video file or an old .gif and convert it to pretty much any format you want — including animated WebP and animated AVIF. As of time of writing, Squoosh, an image conversion app, doesn’t support animated AVIF.\n\n\n\nAdoption remains lacking in design software. When viewing a prototype, Figma will play any animated GIFs included in the design. For AVIF, by contrast, you can’t even import or export a still image.\n\n\n\n\n\n\nUse a video with an <img> element\n\n\nIn 2018, Safari 11.1 gave developers the ability to use a video file as the source of the HTML <img> element. This works in Safari:\n\n\n\n<img src=\"cat.mp4\" alt=\"A Siamese cat walking in a circle\">\n\n\n\nAll the same codecs that Safari supports for <video> are supported by <img>. This means you can use MP4, H.264, and HEVC.\n\n\n\nIn Safari, video files will also work anyplace in CSS where you could use an image, like background-image or border-image:\n\n\n\n.video-border {  \n  border: 40px solid transparent;\n  border-image: url(abstract_bg_animation.mp4) 100 round;\n}\n\n\n\nOne strange consequence of this feature in Safari is that the poster image of a <video> element can also be a video. The poster will autoplay even if you have blocked video’s from auto-playing. Safari claimed this feature came with performance benefits, not just over using .gif files but also over using the <video> element. According to Apple:\n\n\n\nBy placing your videos in <img> elements, the content loads faster, uses less battery power, and gets better performance.\n\n\n\nColin Bendell, co-author of O‘Reilly’s High Performance Images, wrote about the shortcomings of the <video> tag for our use case:\n\n\n\nUnlike <img> tags, browsers do not preload <video> content. Generally preloaders only preload JavaScript, CSS, and image resources because they are critical for the page layout. Since <video> content can be any length – from micro-form to long-form – <video> tags are skipped until the main thread is ready to parse its content. This delays the loading of <video> content by many hundreds of milliseconds.[…]Worse yet, many browsers assume that <video> tags contain long-form content. Instead of downloading the whole video file at once, which would waste your cell data plan in cases where you do not end up watching the whole video, the browser will first perform a 1-byte request to test if the server supports HTTP Range Requests. Then it will follow with multiple range requests in various chunk sizes to ensure that the video is adequately (but not over-) buffered. The consequence is multiple TCP round trips before the browser can even start to decode the content and significant delays before the user sees anything. On high-latency cellular connections, these round trips can set video loads back by hundreds or thousands of milliseconds.\n\n\n\nChrome has marked this as “WontFix” — meaning they don’t intend to ever support this feature, for various reasons. There is, however, an open issue on GitHub to add it to the HTML spec, which would force Google’s hand.\n\n\nRespecting user preferences\n\n\nVideo has the benefit of automatically respecting a users preferences. Firefox and Safari allow users to block videos from automatically playing, even if they don’t have any audio. Here are the settings in Firefox, for example:\n\n\n\n\n\n\n\nThe user can still decide to watch a certain video by right-clicking and pressing play in the menu, or enable autoplay for all videos on a specific website.\n\n\n\n\n\n\n\nFor users who haven’t disabled autoplay, it’s nice to have the option to pause an animation if you happen to find it annoying or distracting (a user can still right-click to bring up the pause option in a menu when video controls aren’t shown). Success Criterion 2.2.2 Pause, Stop, Hide of the WCAG accessibility guidelines states:\n\n\n\nFor any moving, blinking or scrolling information that (1) starts automatically, (2) lasts more than five seconds, and (3) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential.\n\n\n\nWith the <video> element, you’ll achieve that criterion without any additional development.\n\n\n\nThere’s also a “reduce motion” user setting that developers can respect by reducing or removing CSS and JavaScript web animations.\n\n\n\n\n\n\n\nYou can also use it to display a still image instead of an animation. This takes extra code to implement — and you need to host a still image in additional to your animated image.\n\n\n\n<picture>\n  <source\n    srcset=\"nyancat.avifs\"\n    type=\"image/avif\"\n    media=\"(prefers-reduced-motion: no-preference)\"\n  />\n  <img src=\"nyancat.png\" alt=\"Nyan cat\" width=\"250\" height=\"250\" />\n</picture>\n\n\n\nThere’s another downside. When using the <picture> element in this way if the user has checked “reduce motion”there’s no way for them to see the animation. Just because a user prefers less animation, doesn’t mean they never want any — they might still want to be able to opt-in and watch one every now and then. Unlike the <video> element, displaying a still image takes away that choice.\n\n\nChecking for progressive enhancement\n\n\nIf you want to check that your <picture> code is properly working and fallback images are being displayed, you can use the Rendering tab in Chrome DevTools to turn off support for AVIF and WebP image formats. Seeing as all browsers now support WebP, this is a pretty handy feature.\n\n\n\n\n\n\n\nWhile it’s usually the best option to create animations with CSS, JavaScript, DOM elements, canvas and SVG, as new image and video formats offer smaller files than what was previously possible, they become a useful option for UI animation (rather than just nyancat loops). For one-off animations, an AVIF file is probably going to be more performant than importing an entire animation library.\n\n\n\nHere’s a fun example of using video for UI from all the way back in 2017 for the League of Legends website.\n\n\nLottie\n\n\nAfter Effects is a popular animation tool from Adobe. Using an extension called Bodymovin, you can export animation data from After Effects as a JSON file.\n\n\n\nThen there’s Lottie, an open-source animation library from Airbnb that can take that JSON file and render it as an animation on different platforms. The library is available for native iOS, Android, and React Native applications, as well as for the web. You can see examples from Google Home, Target, and Walgreens, among others.\n\n\n\nOnce you’ve included the dependency you need to write a small amount of JavaScript code to get the animation to run:\n\n\n\n<div id=\"lottie\"></div>\n\n\n\nconst animation = bodymovin.loadAnimation({\n  container: document.getElementById('lottie'),\n  path: 'myAnimation.json',\n  renderer: 'svg',\n  loop: true,\n  autoplay: true,\n})\n\n\n\nYou can optionally change those settings to only play after an event:\n\n\n\nconst lottieContainer = document.getElementById('lottie');\nconst animation = bodymovin.loadAnimation({\n  container: lottieContainer, \n  path: 'myAnimation.json',\n  renderer: 'svg',\n  loop: true,\n  autoplay: false,\n  })\n// Play the animation on hover\nlottieContainer.addEventListener('mouseover', () => {\n  animation.play();\n});\n// Stop the animation after playing once\nanimation.addEventListener('loopComplete', function() {\n  animation.stop();\n});\n\n\n\nHere’s a cute example of a cat typing on a keyboard I took from Lottiefiles.com (the website is a useful website for previewing your own Lottie JSON file animations, rather than needing to install After Effects, as well finding animations from other creatives):\n\n\n\n\n\n\n\nYou can also programmatically play an animation backwards and change the playback rate.\n\n\n\nIf you do choose to use Lottie, there’s a Figma plugin for Lottie but all it does is convert JSON files to .gif so that they can be previewed in prototyping mode.\n\n\n\nAbd what about Lottie’s performance? There’s size of the library — 254.6KB (63.8 gzipped) — and the size of the JSON file to consider. There’s also the amount of DOM elements that get created for the SVG parts. If you run into this issue, Lottie has the option to render to a HTML <canvas>, but you’ll need to use a different version of the JavaScript library.\n\n\n\nconst animation = bodymovin.loadAnimation({\n  container: document.getElementById('lottie'), \n  path: 'myAnimation.json',\n  renderer: 'canvas',\n})\n\n\n\nLottie isn’t a full replacement for gifs. While After Effects itself is often used with video clips, and Lottie can render to a HTML <canvas>, and a canvas can play video clips, you wouldn’t use a Lottie file for that purpose. Lottie is for advanced 2D animations, not so much for video. There are other tools for creating complex web animations with a GUI like SVGator and Rive, but I haven’t tried them myself. 🤷‍♂️\n\n\n\n\n\n\n\nI wish there was a TL;DR for this article. For now, at least, there’s no clear winner…\n\nGIFs Without the .gif: The Most Performant Image and Video Options Right Now originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373484",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-28T13:09:11.000Z",
      "date_modified": "2022-09-28T13:09:11.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373209",
      "url": "https://css-tricks.com/named-element-ids-can-be-referenced-as-javascript-globals/",
      "title": "Named Element IDs Can Be Referenced as JavaScript Globals",
      "summary": "Did you know that DOM elements with IDs are accessible in JavaScript as global variables? It’s one of those things that’s been around, like, forever but I’m really digging into it for the first time.\nIf this is the first …\n\nNamed Element IDs Can Be Referenced as JavaScript Globals originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Did you know that DOM elements with IDs are accessible in JavaScript as global variables? It’s one of those things that’s been around, like, forever but I’m really digging into it for the first time.</p>\n\n\n\n<p>If this is the first time you’re hearing about it, brace yourself! We can see it in action simply by adding an ID to an element in HTML:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div id=\"cool\">&lt;/div></code></pre>\n\n\n\n<p>Normally, we’d define a new variable using <code>querySelector(\"#cool\")</code> or <code>getElementById(\"cool\")</code> to select that element:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">var el = querySelector(\"#cool\");</code></pre>\n\n\n\n<p>But we actually already have access to <code>#cool</code> without that rigamorale:</p>\n\n\n\n<span id=\"more-373209\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwyWNBQ\" src=\"//codepen.io/anon/embed/RwyWNBQ?height=450&amp;theme-id=1&amp;slug-hash=RwyWNBQ&amp;default-tab=html,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwyWNBQ\" title=\"CodePen Embed RwyWNBQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>So, any <code>id</code> — or <code>name</code> attribute, for that matter — in the HTML can be accessed in JavaScript using <code>window[ELEMENT_ID]</code>. Again, this isn’t exactly “new” but it’s really uncommon to see.</p>\n\n\n\n<p>As you may guess, accessing the global scope with named references isn&#8217;t the greatest idea. Some folks have come to call this the “global scope polluter.” We’ll get into why that is, but first…</p>\n\n\n<h3 id=\"some-context\">Some context</h3>\n\n\n<p>This approach is <a href=\"https://html.spec.whatwg.org/multipage/window-object.html#named-access-on-the-window-object\" rel=\"noopener\">outlined in the HTML specification</a>, where it’s described as “named access on the <code>Window</code> object.”</p>\n\n\n\n<p>Internet Explorer was the first to implement the feature. All other browsers added it as well. Gecko was the only browser at the time to not support it directly in standards mode, opting instead to make it an experimental feature. There was hesitation to implement it at all, but it <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=622491#c8\" rel=\"noopener\">moved ahead in the name of browser compatibility</a> (Gecko even tried to <a href=\"https://bugs.webkit.org/show_bug.cgi?id=81972\" rel=\"noopener\">convince WebKit</a> to move it out of standards mode) and eventually made it to standards mode in Firefox 14.</p>\n\n\n\n<p>One thing that might not be well known is that browsers had to put in place a few precautionary measures — with varying degrees of success — to ensure generated globals don’t break the webpage. One such measure is…</p>\n\n\n<h3 id=\"variable-shadowing\">Variable shadowing</h3>\n\n\n<p>Probably the most interesting part of this feature is that named element references don&#8217;t <a href=\"https://en.wikipedia.org/wiki/Variable_shadowing\" rel=\"noopener\">shadow existing global variables</a>. So, if a DOM element has an <code>id</code> that is already defined as a global, it won&#8217;t override the existing one. For example:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;head>\n  &lt;script>\n    window.foo = \"bar\";\n  &lt;/script>\n&lt;/head>\n&lt;body>\n  &lt;div id=\"foo\">I won't override window.foo&lt;/div>\n  &lt;script>\n    console.log(window.foo); // Prints \"bar\"\n  &lt;/script>\n&lt;/body></code></pre>\n\n\n\n<p>And the opposite is true as well:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div id=\"foo\">I will be overridden :(&lt;/div>\n&lt;script>\n  window.foo = \"bar\";\n  console.log(window.foo); // Prints \"bar\"\n&lt;/script></code></pre>\n\n\n\n<p>This behavior is essential because it nullifies dangerous overrides such as <code>&lt;div id=\"alert\" /&gt;</code>, which would otherwise create a conflict by invalidating the <code>alert</code> API. This safeguarding technique may very well be the why you — if you’re like me — are learning about this for the first time.</p>\n\n\n<h3 id=\"the-case-against-named-globals\">The case against named globals</h3>\n\n\n<p>Earlier, I said that using global named elements as references might not be the greatest idea. There are lots of reasons for that, which <a href=\"https://www.tjvantoll.com/2012/07/19/dom-element-references-as-global-variables/\" rel=\"noopener\">TJ VanToll has covered nicely over at his blog</a> and I will summarize here:</p>\n\n\n\n<ul><li><strong>If the DOM changes, then so does the reference.</strong> That makes for some really “brittle” (<a href=\"https://html.spec.whatwg.org/#named-access-on-the-window-object\" rel=\"noopener\">the spec’s term</a> for it) code where the separation of concerns between HTML and JavaScript might be too much.</li><li><strong>Accidental references are far too easy.</strong> A simple typo may very well wind up referencing a named global and give you unexpected results.</li><li><strong>It is implemented differently in browsers.</strong> For example, we should be able to access an anchor with an <code>id</code> — e.g. <code>&lt;a id=\"cool\"&gt;</code> — but some browsers (namely Safari and Firefox) return a <code>ReferenceError</code> in the console.</li><li><strong>It might not return what you think.</strong> According to the spec, when there are multiple instances of the same named element in the DOM — say, two instances of <code>&lt;div class=\"cool\"&gt;</code> — the browser should return an <code>HTMLCollection</code> with an array of the instances. Firefox, however, only returns the first instance. Then again, <a href=\"https://html.spec.whatwg.org/#global-attributes:concept-id\" rel=\"noopener\">the spec says</a> we ought to use one instance of an <code>id</code> in an element’s tree anyway. But doing so won’t stop a page from working or anything like that.</li><li><strong>Maybe there’s a performance cost?</strong> I mean, the browser’s gotta make that list of references and maintain it. A couple of folks ran tests <a href=\"https://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-properties\" rel=\"noopener\">in this StackOverflow thread</a>, where named globals were actually <a href=\"https://jsben.ch/AZD81\" rel=\"noopener\">more performant in one test</a> and <a href=\"https://jsben.ch/bexDw\" rel=\"noopener\">less performant in a more recent test</a>.</li></ul>\n\n\n<h3 id=\"additional-considerations\">Additional considerations</h3>\n\n\n<p>Let’s say we chuck the criticisms against using named globals and use them anyway. It’s all good. But there are some things you might want to consider as you do.</p>\n\n\n<h4 id=\"polyfills\">Polyfills</h4>\n\n\n<p>As edge-case-y as it may sound, these types of global checks are a typical setup requirement for polyfills. Check out the following example where we set a cookie using the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CookieStore\" rel=\"noopener\"><code>CookieStore</code> API</a>, polyfilling it on browsers that don&#8217;t support it yet:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;body>\n  &lt;img id=\"cookieStore\">&lt;/img>\n  &lt;script>\n    // Polyfill the CookieStore API if not yet implemented.\n    // https://developer.mozilla.org/en-US/docs/Web/API/CookieStore\n    if (!window.cookieStore) {\n      window.cookieStore = myCookieStorePolyfill;\n    }\n    cookieStore.set(\"foo\", \"bar\");\n  &lt;/script>\n&lt;/body></code></pre>\n\n\n\n<p>This code works perfectly fine in Chrome, but throws the following error in Safari.:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">TypeError: cookieStore.set is not a function</code></pre>\n\n\n\n<p>Safari lacks support for the <code>CookieStore</code> API as of this writing. As a result, the polyfill is not applied because the <code>img</code> element ID creates a global variable that clashes with the <code>cookieStore</code> global.</p>\n\n\n<h4 id=\"javascript-api-updates\">JavaScript API updates</h4>\n\n\n<p>We can flip the situation and find yet another issue where updates to the browser&#8217;s JavaScript engine can break a named element’s global references.</p>\n\n\n\n<p>For example:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;body>\n  &lt;input id=\"BarcodeDetector\">&lt;/input>\n  &lt;script>\n    window.BarcodeDetector.focus();\n  &lt;/script>\n&lt;/body></code></pre>\n\n\n\n<p>That script grabs a reference to the input element and invokes <code>focus()</code> on it. It works correctly. Still, we don&#8217;t know how <em>long</em> it will continue to work.</p>\n\n\n\n<p>You see, the global variable we&#8217;re using to reference the input element will stop working as soon as browsers start supporting the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector\" rel=\"noopener\"><code>BarcodeDetector</code> API</a>. At that point, the <code>window.BarcodeDetector</code> global will no longer be a reference to the input element and <code>.focus()</code> will throw a “<code>window.BarcodeDetector.focus</code> is not a function” error.</p>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>Let’s sum up how we got here:</p>\n\n\n\n<ul><li>All major browsers automatically create global references to each DOM element with an <code>id</code> (or, in some cases, a <code>name</code> attribute).</li><li>Accessing these elements through their global references is unreliable and potentially dangerous. Use <code>querySelector</code> or <code>getElementById</code> instead.</li><li>Since global references are generated automatically, they may have some side effects on your code. That’s a good reason to avoid using the <code>id</code> attribute unless you really need it.</li></ul>\n\n\n\n<p>At the end of the day, it’s probably a good idea to avoid using named globals in JavaScript. I quoted the spec earlier about how it leads to “brittle” code, but here’s the full text to drive the point home:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>As a general rule, relying on this will lead to brittle code. Which IDs end up mapping to this API can vary over time, as new features are added to the web platform, for example. Instead of this, use <code>document.getElementById()</code> or <code>document.querySelector()</code>.</p></blockquote>\n\n\n\n<p>I think the fact that the HTML spec itself recommends to staying away from this feature speaks for itself.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/named-element-ids-can-be-referenced-as-javascript-globals/\">Named Element IDs Can Be Referenced as JavaScript Globals</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Did you know that DOM elements with IDs are accessible in JavaScript as global variables? It’s one of those things that’s been around, like, forever but I’m really digging into it for the first time.\n\n\n\nIf this is the first time you’re hearing about it, brace yourself! We can see it in action simply by adding an ID to an element in HTML:\n\n\n\n<div id=\"cool\"></div>\n\n\n\nNormally, we’d define a new variable using querySelector(\"#cool\") or getElementById(\"cool\") to select that element:\n\n\n\nvar el = querySelector(\"#cool\");\n\n\n\nBut we actually already have access to #cool without that rigamorale:\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\n\nSo, any id — or name attribute, for that matter — in the HTML can be accessed in JavaScript using window[ELEMENT_ID]. Again, this isn’t exactly “new” but it’s really uncommon to see.\n\n\n\nAs you may guess, accessing the global scope with named references isn’t the greatest idea. Some folks have come to call this the “global scope polluter.” We’ll get into why that is, but first…\n\n\nSome context\n\n\nThis approach is outlined in the HTML specification, where it’s described as “named access on the Window object.”\n\n\n\nInternet Explorer was the first to implement the feature. All other browsers added it as well. Gecko was the only browser at the time to not support it directly in standards mode, opting instead to make it an experimental feature. There was hesitation to implement it at all, but it moved ahead in the name of browser compatibility (Gecko even tried to convince WebKit to move it out of standards mode) and eventually made it to standards mode in Firefox 14.\n\n\n\nOne thing that might not be well known is that browsers had to put in place a few precautionary measures — with varying degrees of success — to ensure generated globals don’t break the webpage. One such measure is…\n\n\nVariable shadowing\n\n\nProbably the most interesting part of this feature is that named element references don’t shadow existing global variables. So, if a DOM element has an id that is already defined as a global, it won’t override the existing one. For example:\n\n\n\n<head>\n  <script>\n    window.foo = \"bar\";\n  </script>\n</head>\n<body>\n  <div id=\"foo\">I won't override window.foo</div>\n  <script>\n    console.log(window.foo); // Prints \"bar\"\n  </script>\n</body>\n\n\n\nAnd the opposite is true as well:\n\n\n\n<div id=\"foo\">I will be overridden :(</div>\n<script>\n  window.foo = \"bar\";\n  console.log(window.foo); // Prints \"bar\"\n</script>\n\n\n\nThis behavior is essential because it nullifies dangerous overrides such as <div id=\"alert\" />, which would otherwise create a conflict by invalidating the alert API. This safeguarding technique may very well be the why you — if you’re like me — are learning about this for the first time.\n\n\nThe case against named globals\n\n\nEarlier, I said that using global named elements as references might not be the greatest idea. There are lots of reasons for that, which TJ VanToll has covered nicely over at his blog and I will summarize here:\n\n\n\nIf the DOM changes, then so does the reference. That makes for some really “brittle” (the spec’s term for it) code where the separation of concerns between HTML and JavaScript might be too much.Accidental references are far too easy. A simple typo may very well wind up referencing a named global and give you unexpected results.It is implemented differently in browsers. For example, we should be able to access an anchor with an id — e.g. <a id=\"cool\"> — but some browsers (namely Safari and Firefox) return a ReferenceError in the console.It might not return what you think. According to the spec, when there are multiple instances of the same named element in the DOM — say, two instances of <div class=\"cool\"> — the browser should return an HTMLCollection with an array of the instances. Firefox, however, only returns the first instance. Then again, the spec says we ought to use one instance of an id in an element’s tree anyway. But doing so won’t stop a page from working or anything like that.Maybe there’s a performance cost? I mean, the browser’s gotta make that list of references and maintain it. A couple of folks ran tests in this StackOverflow thread, where named globals were actually more performant in one test and less performant in a more recent test.\n\n\nAdditional considerations\n\n\nLet’s say we chuck the criticisms against using named globals and use them anyway. It’s all good. But there are some things you might want to consider as you do.\n\n\nPolyfills\n\n\nAs edge-case-y as it may sound, these types of global checks are a typical setup requirement for polyfills. Check out the following example where we set a cookie using the new CookieStore API, polyfilling it on browsers that don’t support it yet:\n\n\n\n<body>\n  <img id=\"cookieStore\"></img>\n  <script>\n    // Polyfill the CookieStore API if not yet implemented.\n    // https://developer.mozilla.org/en-US/docs/Web/API/CookieStore\n    if (!window.cookieStore) {\n      window.cookieStore = myCookieStorePolyfill;\n    }\n    cookieStore.set(\"foo\", \"bar\");\n  </script>\n</body>\n\n\n\nThis code works perfectly fine in Chrome, but throws the following error in Safari.:\n\n\n\nTypeError: cookieStore.set is not a function\n\n\n\nSafari lacks support for the CookieStore API as of this writing. As a result, the polyfill is not applied because the img element ID creates a global variable that clashes with the cookieStore global.\n\n\nJavaScript API updates\n\n\nWe can flip the situation and find yet another issue where updates to the browser’s JavaScript engine can break a named element’s global references.\n\n\n\nFor example:\n\n\n\n<body>\n  <input id=\"BarcodeDetector\"></input>\n  <script>\n    window.BarcodeDetector.focus();\n  </script>\n</body>\n\n\n\nThat script grabs a reference to the input element and invokes focus() on it. It works correctly. Still, we don’t know how long it will continue to work.\n\n\n\nYou see, the global variable we’re using to reference the input element will stop working as soon as browsers start supporting the BarcodeDetector API. At that point, the window.BarcodeDetector global will no longer be a reference to the input element and .focus() will throw a “window.BarcodeDetector.focus is not a function” error.\n\n\nConclusion\n\n\nLet’s sum up how we got here:\n\n\n\nAll major browsers automatically create global references to each DOM element with an id (or, in some cases, a name attribute).Accessing these elements through their global references is unreliable and potentially dangerous. Use querySelector or getElementById instead.Since global references are generated automatically, they may have some side effects on your code. That’s a good reason to avoid using the id attribute unless you really need it.\n\n\n\nAt the end of the day, it’s probably a good idea to avoid using named globals in JavaScript. I quoted the spec earlier about how it leads to “brittle” code, but here’s the full text to drive the point home:\n\n\n\nAs a general rule, relying on this will lead to brittle code. Which IDs end up mapping to this API can vary over time, as new features are added to the web platform, for example. Instead of this, use document.getElementById() or document.querySelector().\n\n\n\nI think the fact that the HTML spec itself recommends to staying away from this feature speaks for itself.\n\nNamed Element IDs Can Be Referenced as JavaScript Globals originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373209",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-27T12:58:21.000Z",
      "date_modified": "2022-09-27T12:58:21.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373403",
      "url": "https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/",
      "title": "How to Create Wavy Shapes & Patterns in CSS",
      "summary": "The wave is probably one of the most difficult shapes to make in CSS. We always try to approximate it with properties like border-radius and lots of magic numbers until we get something that feels kinda close. And that’s before …\n\nHow to Create Wavy Shapes & Patterns in CSS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>The wave is probably one of the most difficult shapes to make in CSS. We always try to approximate it with properties like <code>border-radius</code> and lots of magic numbers until we get something that feels kinda close. And that’s before we even get into wavy patterns, which are more difficult.</p>\n\n\n\n<p>“SVG it!” you might say, and you are probably right that it’s a better way to go. But we will see that CSS can make nice waves and the code for it doesn’t have to be all crazy. And guess what? I have <a href=\"https://css-generators.com/wavy-shapes/\" rel=\"noopener\">an online generator</a> to make it even more trivial!</p>\n\n\n\n<span id=\"more-373403\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='254' src='https://videopress.com/embed/Kic8Ekan?cover=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>If you play with the generator, you can see that the CSS it spits out is only two gradients and a CSS mask property — just those two things and we can make any kind of wave shape or pattern. Not to mention that we can easily control the size and the curvature of the waves while we’re at it.</p>\n\n\n\n<p>Some of the values may look like “<a href=\"https://css-tricks.com/magic-numbers-in-css/\">magic numbers</a>” but there’s actually logic behind them and we will dissect the code and discover all the secrets behind creating waves.</p>\n\n\n\n<p class=\"is-style-explanation\">This article is a follow-up to <a href=\"https://css-tricks.com/css-borders-using-masks/\">a previous one</a> where I built all kinds of different zig-zag, scoped, scalloped, and yes, wavy border borders. I highly recommend checking that article as it uses the same technique we will cover here, but in greater detail.</p>\n\n\n<h3 id=\"the-math-behind-waves\">The math behind waves</h3>\n\n\n<p>Strictly speaking, there isn’t one magic formula behind wavy shapes. Any shape with curves that go up and down can be called a wave, so we are not going to restrict ourselves to complex math. Instead, we will reproduce a wave using the basics of geometry.</p>\n\n\n\n<p>Let’s start with a simple example using two circle shapes:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"704\" height=\"368\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730367615_image.png?resize=704%2C368&#038;ssl=1\" alt=\"Two gray circles.\" class=\"wp-image-373405\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730367615_image.png?w=704&amp;ssl=1 704w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730367615_image.png?resize=300%2C157&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We have two circles with the same radius next to each other. Do you see that red line? It covers the top half of the first circle and the bottom half of the second one. Now imagine you take that line and repeat it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1036\" height=\"340\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?resize=1036%2C340&#038;ssl=1\" alt=\"A squiggly red line in the shape of waves.\" class=\"wp-image-373406\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?w=1036&amp;ssl=1 1036w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?resize=300%2C98&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?resize=1024%2C336&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?resize=768%2C252&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We already see the wave. Now let’s fill the bottom part (or the top one) to get the following:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"898\" height=\"270\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730844124_image.png?resize=898%2C270&#038;ssl=1\" alt=\"Red wave pattern.\" class=\"wp-image-373407\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730844124_image.png?w=898&amp;ssl=1 898w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730844124_image.png?resize=300%2C90&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730844124_image.png?resize=768%2C231&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Tada! We have a wavy shape, and one that we can control using one variable for the circle radii. This is one of the easiest waves we can make and it’s the one I showed off in <a href=\"https://css-tricks.com/css-borders-using-masks/\">th</a><a href=\"https://css-tricks.com/css-borders-using-masks/\">is</a> <a href=\"https://css-tricks.com/css-borders-using-masks/\">previous article</a></p>\n\n\n\n<p>Let’s add a bit of complexity by taking the first illustration and moving the circles a little:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"677\" height=\"474\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661731802980_image.png?resize=677%2C474&#038;ssl=1\" alt=\"Two gray circles with two bisecting dashed lines indicating spacing.\" class=\"wp-image-373409\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661731802980_image.png?w=677&amp;ssl=1 677w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661731802980_image.png?resize=300%2C210&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We still have two circles with the same radii but they are no longer horizontally aligned. In this case, the red line no longer covers half the area of each circle, but a smaller area instead. This area is limited by the dashed red line. That line crosses the point where both circles meet.</p>\n\n\n\n<p>Now take that line and repeat it and you get another wave, a smoother one.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1006\" height=\"293\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732198695_image.png?resize=1006%2C293&#038;ssl=1\" alt=\"A red squiggly line.\" class=\"wp-image-373410\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732198695_image.png?w=1006&amp;ssl=1 1006w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732198695_image.png?resize=300%2C87&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732198695_image.png?resize=768%2C224&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"730\" height=\"285\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661767386260_image.png?resize=730%2C285&#038;ssl=1\" alt=\"A red wave pattern.\" class=\"wp-image-373411\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661767386260_image.png?w=730&amp;ssl=1 730w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661767386260_image.png?resize=300%2C117&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I think you get the idea. By controlling the position and size of the circles, we can create any wave we want. We can even create variables for them, which I will call <code>P</code> and <code>S</code>, respectively.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1224\" height=\"592\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?resize=1224%2C592&#038;ssl=1\" alt=\"\" class=\"wp-image-373412\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?w=1224&amp;ssl=1 1224w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?resize=300%2C145&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?resize=1024%2C495&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?resize=768%2C371&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>You have probably noticed that, in the online generator, we control the wave using two inputs. They map to the above variables. <code>S</code> is the “Size of the wave” and <code>P</code> is the “curvature of the wave”.</p>\n\n\n\n<p>I am defining <code>P</code> as <code>P = m*S</code> where <code>m</code> is the variable you adjust when updating the curvature of the wave. This allows us to always have the same curvature, even if we update S.</p>\n\n\n\n<p><code>m</code> can be any value between <code>0</code> and <code>2</code>. <code>0</code> will give us the first particular case where both circles are aligned horizontally. <code>2</code> is a kind of maximum value. We can go bigger, but after a few tests I found that anything above <code>2</code> produces bad, flat shapes.</p>\n\n\n\n<p>Let’s not forget the radius of our circle! That can also be defined using <code>S</code> and <code>P</code> like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">R = sqrt(P² + S²)/2</code></pre>\n\n\n\n<p>When <code>P</code> is equal to <code>0</code>, we will have <code>R = S/2</code>.</p>\n\n\n\n<p>We have everything to start converting all of this into gradients in CSS!</p>\n\n\n<h3 id=\"creating-gradients\">Creating gradients</h3>\n\n\n<p>Our waves use circles, and when talking about circles we talk about radial gradients. And since two circles define our wave, we will logically be using two radial gradients.</p>\n\n\n\n<p>We will start with the particular case where <code>P</code> is equal to <code>0</code>. Here is the illustration of the first gradient:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOeNyvr/336eab3f100e7796488a594858712dc0\" src=\"//codepen.io/anon/embed/preview/gOeNyvr/336eab3f100e7796488a594858712dc0?height=750&amp;theme-id=1&amp;slug-hash=gOeNyvr/336eab3f100e7796488a594858712dc0&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOeNyvr/336eab3f100e7796488a594858712dc0\" title=\"CodePen Embed gOeNyvr/336eab3f100e7796488a594858712dc0\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This gradient creates the first curvature while filling in the entire bottom area —the “water” of the wave so to speak.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"484\" height=\"412\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661768883486_image.png?resize=484%2C412&#038;ssl=1\" alt=\"\" class=\"wp-image-373413\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661768883486_image.png?w=484&amp;ssl=1 484w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661768883486_image.png?resize=300%2C255&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.wave {\n  --size: 50px;\n\n  mask: radial-gradient(var(--size) at 50% 0%, #0000 99%, red 101%) \n    50% var(--size)/calc(4 * var(--size)) 100% repeat-x;\n}</code></pre>\n\n\n\n<p>The <code>--size</code> variable defines the radius and the size of the radial gradient. If we compare it with the <code>S</code> variable, then it’s equal to <code>S/2</code>.</p>\n\n\n\n<p>Now let’s add the second gradient:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82\" src=\"//codepen.io/anon/embed/preview/LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82?height=725&amp;theme-id=1&amp;slug-hash=LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82&amp;default-tab=result\" height=\"725\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82\" title=\"CodePen Embed LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The second gradient is nothing but a circle to complete our wave:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">radial-gradient(var(--size) at 50% var(--size), blue 99%, #0000 101%) \n  calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%</code></pre>\n\n\n\n<p>If you check <a href=\"https://css-tricks.com/css-borders-using-masks/#aa-wavy-css-borders\">the previous article</a> you will see that I am simply repeating what I already did there.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I followed both articles but the gradient configurations are not the same.</p></blockquote>\n\n\n\n<p>That’s because we can reach the same result using different gradient configurations. You will notice a slight difference in the alignment if you compare both configurations, but the trick is the same. This can be confusing if you are unfamiliar with gradients, but don’t worry. With some practice, you get used to them and you will find by yourself that different syntax can lead to the same result.</p>\n\n\n\n<p>Here is the full code for our first wave:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.wave {\n  --size: 50px;\n\n  mask:\n    radial-gradient(var(--size) at 50% var(--size),#000 99%, #0000 101%) \n      calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--size) at 50% 0px, #0000 99%, #000 101%) \n      50% var(--size)/calc(4 * var(--size)) 100% repeat-x;\n}</code></pre>\n\n\n\n<p>Now let’s take this code and adjust it to where we introduce a variable that makes this fully reusable for creating any wave we want. As we saw in the previous section, the main trick is to move the circles so they are no more aligned so let’s update the position of each one. We will move the first one up and the second down.</p>\n\n\n\n<p>Our code will look like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.wave {\n  --size: 50px;\n  --p: 25px;\n\n  mask:\n    radial-gradient(var(--size) at 50% calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--size) at 50% calc(-1*var(--p)), #0000 99%, #000 101%) \n      50% var(--size) / calc(4 * var(--size)) 100% repeat-x;\n}</code></pre>\n\n\n\n<p>I have introduced a new <code>--p</code> variable that’s used it to define the center position of each circle. The first gradient is using <code>50% calc(-1*var(--p))</code>, so its center moves up while the second one is using <code>calc(var(--size) + var(--p))</code> to move it down.</p>\n\n\n\n<p>A demo is worth a thousand words:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poLXBmK/63c5669871c60e16679e07651e69c4f0\" src=\"//codepen.io/anon/embed/preview/poLXBmK/63c5669871c60e16679e07651e69c4f0?height=750&amp;theme-id=1&amp;slug-hash=poLXBmK/63c5669871c60e16679e07651e69c4f0&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poLXBmK/63c5669871c60e16679e07651e69c4f0\" title=\"CodePen Embed poLXBmK/63c5669871c60e16679e07651e69c4f0\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The circles are neither aligned nor touch one another. We spaced them far apart without changing their radii, so we lost our wave. But we can fix things up by using the same math we used earlier to calculate the new radius. Remember that <code>R = sqrt(P² + S²)/2</code>. In our case, <code>--size</code> is equal to <code>S/2</code>; the same for <code>--p</code> which is also equal to <code>P/2</code> since we are moving both circles. So, the distance between their center points is double the value of <code>--p</code> for this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">R = sqrt(var(--size) * var(--size) + var(--p) * var(--p))</code></pre>\n\n\n\n<p>That gives us a result of <code>55.9px</code>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBozGBB/74b62018dc6aa360ab316d1dc6408361\" src=\"//codepen.io/anon/embed/preview/qBozGBB/74b62018dc6aa360ab316d1dc6408361?height=750&amp;theme-id=1&amp;slug-hash=qBozGBB/74b62018dc6aa360ab316d1dc6408361&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBozGBB/74b62018dc6aa360ab316d1dc6408361\" title=\"CodePen Embed qBozGBB/74b62018dc6aa360ab316d1dc6408361\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Our wave is back! Let’s plug that equation into our CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4\"><code markup=\"tt\">.wave {\n  --size: 50px;\n  --p: 25px;\n  --R: sqrt(var(--p) * var(--p) + var(--size)*var(--size));\n\n  mask:\n    radial-gradient(var(--R) at 50% calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      calc(50% - 2*var(--size)) 0 / calc(4 * var(--size)) 100%,\n    radial-gradient(var(--R) at 50% calc(-1*var(--p)), #0000 99%, #000 101%) \n      50% var(--size)/calc(4 * var(--size)) 100% repeat-x;\n}</code></pre>\n\n\n\n<p>This is valid CSS code. <a href=\"https://drafts.csswg.org/css-values/#exponent-funcs\" rel=\"noopener\"><code>sqrt()</code> is part of the specification</a>, but at the time I’m writing this, there is no browser support for it. That means we need a sprinkle of JavaScript or Sass to calculate that value until we get broader <code>sqrt()</code> support.</p>\n\n\n\n<p>This is pretty darn cool: all it takes is two gradients to get a cool wave that you can apply to any element using the <code>mask</code> property. No more trial and error — all you need is to update two variables and you’re good to go!</p>\n\n\n<h3 id=\"reversing-the-wave\">Reversing the wave</h3>\n\n\n<p>What if we want the waves going the other direction, where we’re filling in the “sky” instead of the “water”. Believe it or not, all we have to do is to update two values:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7,9\"><code markup=\"tt\">.wave {\n  --size: 50px;\n  --p: 25px;\n  --R: sqrt(var(--p) * var(--p) + var(--size) * var(--size));\n\n  mask:\n    radial-gradient(var(--R) at 50% calc(100% - (var(--size) + var(--p))), #000 99%, #0000 101%)\n      calc(50% - 2 * var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--R) at 50% calc(100% + var(--p)), #0000 99%, #000 101%) \n      50% calc(100% - var(--size)) / calc(4 * var(--size)) 100% repeat-x;\n}</code></pre>\n\n\n\n<p>All I did there is add an offset equal to <code>100%</code>, highlighted above. Here’s the result:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNqKvOW/cdb4a2d632083e083a4901d3495798a9\" src=\"//codepen.io/anon/embed/preview/oNqKvOW/cdb4a2d632083e083a4901d3495798a9?height=450&amp;theme-id=1&amp;slug-hash=oNqKvOW/cdb4a2d632083e083a4901d3495798a9&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNqKvOW/cdb4a2d632083e083a4901d3495798a9\" title=\"CodePen Embed oNqKvOW/cdb4a2d632083e083a4901d3495798a9\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We can consider a more friendly syntax using keyword values to make it even easier:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.wave {\n  --size: 50px;\n  --p: 25px;\n  --R: sqrt(var(--p)*var(--p) + var(--size) * var(--size));\n\n  mask:\n    radial-gradient(var(--R) at left 50% bottom calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      calc(50% - 2 * var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), #0000 99%, #000 101%) \n      left 50% bottom var(--size) / calc(4 * var(--size)) 100% repeat-x;\n}</code></pre>\n\n\n\n<p>We’re using the <code>left</code> and <code>bottom</code> keywords to specify the sides and the offset. By default, the browser defaults to <code>left</code> and <code>top</code> — that’s why we use <code>100%</code> to move the element to the bottom. In reality, we are moving it from the <code>top</code> by <code>100%</code>, so it’s really the same as saying <code>bottom</code>. Much easier to read than math!</p>\n\n\n\n<p>With this updated syntax, all we have to do is to swap <code>bottom</code> for <code>top</code> — or vice versa — to change the direction of the wave.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOeVObj/f8cc4128db72f2529068864901ecb8e9\" src=\"//codepen.io/anon/embed/preview/gOeVObj/f8cc4128db72f2529068864901ecb8e9?height=525&amp;theme-id=1&amp;slug-hash=gOeVObj/f8cc4128db72f2529068864901ecb8e9&amp;default-tab=result\" height=\"525\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOeVObj/f8cc4128db72f2529068864901ecb8e9\" title=\"CodePen Embed gOeVObj/f8cc4128db72f2529068864901ecb8e9\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And if you want to get both top and bottom waves, we combine all the gradients in a single declaration:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.wave {\n  --size: 50px;\n  --p: 25px;\n  --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));\n\n  mask:\n    /* Gradient 1 */\n    radial-gradient(var(--R) at left 50% bottom calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      left calc(50% - 2*var(--size)) bottom 0 / calc(4 * var(--size)) 51% repeat-x,\n    /* Gradient 2 */\n    radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), #0000 99%, #000 101%) \n      left 50% bottom var(--size) / calc(4 * var(--size)) calc(51% - var(--size)) repeat-x,\n    /* Gradient 3 */\n    radial-gradient(var(--R) at left 50% top calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      left calc(50% - 2 * var(--size)) top 0 / calc(4 * var(--size)) 51% repeat-x,\n    /* Gradient 4 */\n    radial-gradient(var(--R) at left 50% top calc(-1 * var(--p)), #0000 99%, #000 101%) \n      left 50% top var(--size) / calc(4 * var(--size)) calc(51% - var(--size)) repeat-x;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNzVNQB/c4d0e46831e81e214bf186ead7107329\" src=\"//codepen.io/anon/embed/preview/WNzVNQB/c4d0e46831e81e214bf186ead7107329?height=525&amp;theme-id=1&amp;slug-hash=WNzVNQB/c4d0e46831e81e214bf186ead7107329&amp;default-tab=result\" height=\"525\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNzVNQB/c4d0e46831e81e214bf186ead7107329\" title=\"CodePen Embed WNzVNQB/c4d0e46831e81e214bf186ead7107329\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you check the code, you will see that in addition to combining all the gradients, I have also reduced their height from <code>100%</code> to <code>51%</code> so that they both cover half of the element. Yes, <code>51%</code>. We need that little extra percent for a small overlap that avoid gaps.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What about the left and right sides?</p></blockquote>\n\n\n\n<p>It’s your homework! Take what we did with the top and bottom sides and try to update the values to get the right and left values. Don’t worry, it’s easy and the only thing you need to do is to swap values.</p>\n\n\n\n<p>If you have trouble, you can always use <a href=\"https://css-generators.com/wavy-shapes/\" rel=\"noopener\">the online generator</a> to check the code and visualize the result.</p>\n\n\n<h3 id=\"wavy-lines\">Wavy lines</h3>\n\n\n<p>Earlier, we made our first wave using a red line then filled the bottom portion of the element. How about that wavy line? That’s a wave too! Even better is if we can control its thickness with a variable so we can reuse it. Let’s do it!</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='254' src='https://videopress.com/embed/SVPg6efr?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>We are not going to start from scratch but rather take the previous code and update it. The first thing to do is to update the color stops of the gradients. Both gradients start from a transparent color to an opaque one, or vice versa. To simulate a line or border, we need to start from transparent, go to opaque, then back to transparent again:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%</code></pre>\n\n\n\n<p>I think you already guessed that the <code>--b</code> variable is what we’re using to control the line thickness. Let’s apply this to our gradients:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53\" src=\"//codepen.io/anon/embed/preview/bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53?height=350&amp;theme-id=1&amp;slug-hash=bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53\" title=\"CodePen Embed bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Yeah, the result is far from a wavy line. But looking closely, we can see that one gradient is correctly creating the bottom curvature. So, all we really need to do is rectify the second gradient. Instead of keeping a full circle, let’s make partial one like the other gradient.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKoOMQp/796462623df84650973c4ecd804f77a1\" src=\"//codepen.io/anon/embed/preview/KKoOMQp/796462623df84650973c4ecd804f77a1?height=350&amp;theme-id=1&amp;slug-hash=KKoOMQp/796462623df84650973c4ecd804f77a1&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKoOMQp/796462623df84650973c4ecd804f77a1\" title=\"CodePen Embed KKoOMQp/796462623df84650973c4ecd804f77a1\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Still far, but we have both curvatures we need! If you check the code, you will see that we have two identical gradients. The only difference is their positioning:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.wave {\n  --size: 50px;\n  --b: 10px;\n  --p: 25px;\n  --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));\n\n  --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;\n  mask:\n    radial-gradient(var(--R) at left 50% bottom calc(-1*var(--p)), var(--_g)) \n      calc(50% - 2*var(--size)) 0/calc(4*var(--size)) 100%,\n    radial-gradient(var(--R) at left 50% top    calc(-1*var(--p)), var(--_g)) \n      50% var(--size)/calc(4*var(--size)) 100%;\n}</code></pre>\n\n\n\n<p>Now we need to adjust the size and position for the final shape. We no longer need the gradient to be full-height, so we can replace <code>100%</code> with this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Size plus thickness */\ncalc(var(--size) + var(--b))</code></pre>\n\n\n\n<p>There is no mathematical logic behind this value. It only needs to be big enough for the curvature. We will see its effect on the pattern in just a bit. In the meantime, let’s also update the position to vertically center the gradients:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.wave {\n  --size: 50px;\n  --b: 10px;\n  --p: 25px;\n  --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));\n\n  --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;  \n  mask:\n    radial-gradient(var(--R) at left 50% bottom calc(-1*var(--p)), var(--_g)) \n      calc(50% - 2*var(--size)) 50%/calc(4 * var(--size)) calc(var(--size) + var(--b)) no-repeat,\n    radial-gradient(var(--R) at left 50% top calc(-1 * var(--p)), var(--_g)) 50%\n      50%/calc(4 * var(--size)) calc(var(--size) + var(--b)) no-repeat;\n}</code></pre>\n\n\n\n<p>Still not quite there:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb\" src=\"//codepen.io/anon/embed/preview/mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb?height=350&amp;theme-id=1&amp;slug-hash=mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb\" title=\"CodePen Embed mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>One gradient needs to move a bit down and the other a bit up. Both need to move by half of their height.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3\" src=\"//codepen.io/anon/embed/preview/MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3?height=350&amp;theme-id=1&amp;slug-hash=MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3\" title=\"CodePen Embed MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We are almost there! We need a small fix for the radius to have a perfect overlap. Both lines need to offset by half the border (<code>--b</code>) thickness:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1\" src=\"//codepen.io/anon/embed/preview/eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1?height=350&amp;theme-id=1&amp;slug-hash=eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1\" title=\"CodePen Embed eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We got it! A perfect wavy line that we can easily adjust by controlling a few variables:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.wave {\n  --size: 50px;\n  --b: 10px;\n  --p: 25px;\n  --R: calc(sqrt(var(--p) * var(--p) + var(--size) * var(--size)) + var(--b) / 2);\n\n  --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;\n  mask:\n    radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), var(--_g)) \n     calc(50% - 2*var(--size)) calc(50% - var(--size)/2 - var(--b)/2) / calc(4 * var(--size)) calc(var(--size) + var(--b)) repeat-x,\n    radial-gradient(var(--R) at left 50% top calc(-1*var(--p)),var(--_g)) \n     50%  calc(50% + var(--size)/2 + var(--b)/2) / calc(4 * var(--size)) calc(var(--size) + var(--b)) repeat-x;\n}</code></pre>\n\n\n\n<p>I know that the logic takes a bit to grasp. That’s fine and as I said, creating a wavy shape in CSS is not easy, not to mention the tricky math behind it. That’s why the <a href=\"https://css-generators.com/wavy-shapes/\" rel=\"noopener\">online generator</a> is a lifesaver — you can easily get the final code even if you don’t fully understand the logic behind it.</p>\n\n\n<h3 id=\"wavy-patterns\">Wavy patterns</h3>\n\n\n<p>We can make a pattern from the wavy line we just created!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Oh no, the code of the pattern will be even more difficult to understand!</p></blockquote>\n\n\n\n<p>Not at all! We already have the code. All we need to do is to remove <code>repeat-x</code> from what we already have, and tada. &#x1f389;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d\" src=\"//codepen.io/anon/embed/preview/yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d?height=450&amp;theme-id=1&amp;slug-hash=yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d\" title=\"CodePen Embed yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>A nice wavy pattern. Remember the equation I said we’d revisit?</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Size plus thickness */\ncalc(var(--size) + var(--b))</code></pre>\n\n\n\n<p>Well, this is what controls the distance between the lines in the pattern. We can make a variable out of it, but there’s no need for more complexity. I’m not even using a variable for that in the generator. Maybe I’ll change that later.</p>\n\n\n\n<p>Here is the same pattern going in a different direction:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvmVWVB/661154a86f2e9017e579a1e48480686c\" src=\"//codepen.io/anon/embed/preview/wvmVWVB/661154a86f2e9017e579a1e48480686c?height=450&amp;theme-id=1&amp;slug-hash=wvmVWVB/661154a86f2e9017e579a1e48480686c&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvmVWVB/661154a86f2e9017e579a1e48480686c\" title=\"CodePen Embed wvmVWVB/661154a86f2e9017e579a1e48480686c\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I am providing you with the code in that demo, but I’d for you to dissect it and understand what changes I made to make that happen.</p>\n\n\n<h3 id=\"simplifying-the-code\">Simplifying the code</h3>\n\n\n<p>In all the previous demos, we always define the <code>--size</code> and <code>--p</code> independently. But do you recall how I mentioned earlier that the online generator evaluates <code>P</code> as equal to <code>m*S</code>, where <code>m</code> controls the curvature of the wave? By defining a fixed multiplier, we can work with one particular wave and the code can become easier. This is what we will need in most cases: a specific wavy shape and a variable to control its size.</p>\n\n\n\n<p>Let’s update our code and introduce the <code>m</code> variable:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.wave {\n  --size: 50px;\n  --R: calc(var(--size) * sqrt(var(--m) * var(--m) + 1));\n\n  mask:\n    radial-gradient(var(--R) at 50% calc(var(--size) * (1 + var(--m))), #000 99%, #0000 101%) \n      calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--R) at 50% calc(-1 * var(--size) * var(--m)), #0000 99%, #000 101%) \n      50% var(--size) / calc(4 * var(--size)) 100% repeat-x;\n  }</code></pre>\n\n\n\n<p>As you can see, we no longer need the <code>--p</code> variable. I replaced it with <code>var(--m)*var(--size)</code>, and optimized some of the math accordingly. Now, If we want to work with a particular wavy shape, we can omit the <code>--m</code> variable and replace it with a fixed value. Let’s try <code>.8</code> for example.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--size: 50px;\n--R: calc(var(--size) * 1.28);\n\nmask:\n  radial-gradient(var(--R) at 50% calc(1.8 * var(--size)), #000 99%, #0000 101%) \n    calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,\n  radial-gradient(var(--R) at 50% calc(-.8 * var(--size)), #0000 99%, #000 101%) \n    50% var(--size) / calc(4 * var(--size)) 100% repeat-x;</code></pre>\n\n\n\n<p>See how the code is easier now? Only one variable to control your wave, plus you no more need to rely on <code>sqrt()</code> which has no browser support!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwyNVOr/0b27ef8345b29e1a441a589660a27113\" src=\"//codepen.io/anon/embed/preview/RwyNVOr/0b27ef8345b29e1a441a589660a27113?height=600&amp;theme-id=1&amp;slug-hash=RwyNVOr/0b27ef8345b29e1a441a589660a27113&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwyNVOr/0b27ef8345b29e1a441a589660a27113\" title=\"CodePen Embed RwyNVOr/0b27ef8345b29e1a441a589660a27113\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>You can apply the same logic to all the demos we saw even for the wavy lines and the pattern. I started with a detailed mathmatical explanation and gave the generic code, but you may find yourself needing easier code in a real use case. This is what I am doing all the time. I rarely use the generic code, but I always consider a simplified version especially that, in most of the cases, I am using some known values that don’t need to be stored as variables. (<strong>Spoiler alert:</strong> I will be sharing a few examples at the end!)</p>\n\n\n<h3 id=\"limitations-to-this-approach\">Limitations to this approach</h3>\n\n\n<p>Mathematically, the code we made should give us perfect wavy shapes and patterns, but in reality, we will face some strange results. So, yes, this method has its limitations. For example, the online generator is capable of producing poor results, especially with wavy lines. Part of the issue is due to a particular combination of values where the result gets scrambled, like using a big value for the border thickness compared to the size:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"797\" height=\"329\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813355000_image.png?resize=797%2C329&#038;ssl=1\" alt=\"\" class=\"wp-image-373419\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813355000_image.png?w=797&amp;ssl=1 797w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813355000_image.png?resize=300%2C124&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813355000_image.png?resize=768%2C317&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>For the other cases, it’s the issue related to some rounding that will results in misalignment and gaps between the waves:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"898\" height=\"435\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813585840_image.png?resize=898%2C435&#038;ssl=1\" alt=\"\" class=\"wp-image-373420\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813585840_image.png?w=898&amp;ssl=1 898w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813585840_image.png?resize=300%2C145&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813585840_image.png?resize=768%2C372&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That said, I still think the method we covered remains a good one because it produces smooth waves in most cases, and we can easily avoid the bad results by playing with different values until we get it perfect.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>I hope that after this article, you will no more to fumble around with trial and error to build a wavy shape or pattern. In addition <a href=\"https://css-generators.com/wavy-shapes/\" rel=\"noopener\">to the online generator</a>, you have all the math secrets behind creating any kind of wave you want!</p>\n\n\n\n<p>The article ends here but now you have a powerful tool to create fancy designs that use wavy shapes. Here’s inspiration to get you started…</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNdPPEO\" src=\"//codepen.io/anon/embed/preview/WNdPPEO?height=450&amp;theme-id=1&amp;slug-hash=WNdPPEO&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNdPPEO\" title=\"CodePen Embed WNdPPEO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYddpzK\" src=\"//codepen.io/anon/embed/preview/vYddpzK?height=450&amp;theme-id=1&amp;slug-hash=vYddpzK&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYddpzK\" title=\"CodePen Embed vYddpzK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BaYaKJx\" src=\"//codepen.io/anon/embed/preview/BaYaKJx?height=450&amp;theme-id=1&amp;slug-hash=BaYaKJx&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BaYaKJx\" title=\"CodePen Embed BaYaKJx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjvXzNL\" src=\"//codepen.io/anon/embed/preview/JjvXzNL?height=450&amp;theme-id=1&amp;slug-hash=JjvXzNL&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjvXzNL\" title=\"CodePen Embed JjvXzNL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLjBYRY\" src=\"//codepen.io/anon/embed/preview/yLjBYRY?height=450&amp;theme-id=1&amp;slug-hash=yLjBYRY&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLjBYRY\" title=\"CodePen Embed yLjBYRY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWrwNBM\" src=\"//codepen.io/anon/embed/preview/QWrwNBM?height=450&amp;theme-id=1&amp;slug-hash=QWrwNBM&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWrwNBM\" title=\"CodePen Embed QWrwNBM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNvLjmy\" src=\"//codepen.io/anon/embed/preview/rNvLjmy?height=450&amp;theme-id=1&amp;slug-hash=rNvLjmy&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNvLjmy\" title=\"CodePen Embed rNvLjmy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExLyQgx\" src=\"//codepen.io/anon/embed/preview/ExLyQgx?height=450&amp;theme-id=1&amp;slug-hash=ExLyQgx&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExLyQgx\" title=\"CodePen Embed ExLyQgx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>What about you? Use my online generator (or write the code manually if you already learned all the math by heart) and show me your creations! Let’s have a good collection in the comment section.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/\">How to Create Wavy Shapes &amp; Patterns in CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "The wave is probably one of the most difficult shapes to make in CSS. We always try to approximate it with properties like border-radius and lots of magic numbers until we get something that feels kinda close. And that’s before we even get into wavy patterns, which are more difficult.\n\n\n\n“SVG it!” you might say, and you are probably right that it’s a better way to go. But we will see that CSS can make nice waves and the code for it doesn’t have to be all crazy. And guess what? I have an online generator to make it even more trivial!\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you play with the generator, you can see that the CSS it spits out is only two gradients and a CSS mask property — just those two things and we can make any kind of wave shape or pattern. Not to mention that we can easily control the size and the curvature of the waves while we’re at it.\n\n\n\nSome of the values may look like “magic numbers” but there’s actually logic behind them and we will dissect the code and discover all the secrets behind creating waves.\n\n\n\nThis article is a follow-up to a previous one where I built all kinds of different zig-zag, scoped, scalloped, and yes, wavy border borders. I highly recommend checking that article as it uses the same technique we will cover here, but in greater detail.\n\n\nThe math behind waves\n\n\nStrictly speaking, there isn’t one magic formula behind wavy shapes. Any shape with curves that go up and down can be called a wave, so we are not going to restrict ourselves to complex math. Instead, we will reproduce a wave using the basics of geometry.\n\n\n\nLet’s start with a simple example using two circle shapes:\n\n\n\n\n\n\n\nWe have two circles with the same radius next to each other. Do you see that red line? It covers the top half of the first circle and the bottom half of the second one. Now imagine you take that line and repeat it.\n\n\n\n\n\n\n\nWe already see the wave. Now let’s fill the bottom part (or the top one) to get the following:\n\n\n\n\n\n\n\nTada! We have a wavy shape, and one that we can control using one variable for the circle radii. This is one of the easiest waves we can make and it’s the one I showed off in this previous article\n\n\n\nLet’s add a bit of complexity by taking the first illustration and moving the circles a little:\n\n\n\n\n\n\n\nWe still have two circles with the same radii but they are no longer horizontally aligned. In this case, the red line no longer covers half the area of each circle, but a smaller area instead. This area is limited by the dashed red line. That line crosses the point where both circles meet.\n\n\n\nNow take that line and repeat it and you get another wave, a smoother one.\n\n\n\n\n\n\n\n\n\n\n\nI think you get the idea. By controlling the position and size of the circles, we can create any wave we want. We can even create variables for them, which I will call P and S, respectively.\n\n\n\n\n\n\n\nYou have probably noticed that, in the online generator, we control the wave using two inputs. They map to the above variables. S is the “Size of the wave” and P is the “curvature of the wave”.\n\n\n\nI am defining P as P = m*S where m is the variable you adjust when updating the curvature of the wave. This allows us to always have the same curvature, even if we update S.\n\n\n\nm can be any value between 0 and 2. 0 will give us the first particular case where both circles are aligned horizontally. 2 is a kind of maximum value. We can go bigger, but after a few tests I found that anything above 2 produces bad, flat shapes.\n\n\n\nLet’s not forget the radius of our circle! That can also be defined using S and P like this:\n\n\n\nR = sqrt(P² + S²)/2\n\n\n\nWhen P is equal to 0, we will have R = S/2.\n\n\n\nWe have everything to start converting all of this into gradients in CSS!\n\n\nCreating gradients\n\n\nOur waves use circles, and when talking about circles we talk about radial gradients. And since two circles define our wave, we will logically be using two radial gradients.\n\n\n\nWe will start with the particular case where P is equal to 0. Here is the illustration of the first gradient:\n\n\n\nCodePen Embed Fallback\n\n\n\nThis gradient creates the first curvature while filling in the entire bottom area —the “water” of the wave so to speak.\n\n\n\n\n\n\n\n.wave {\n  --size: 50px;\n\n  mask: radial-gradient(var(--size) at 50% 0%, #0000 99%, red 101%) \n    50% var(--size)/calc(4 * var(--size)) 100% repeat-x;\n}\n\n\n\nThe --size variable defines the radius and the size of the radial gradient. If we compare it with the S variable, then it’s equal to S/2.\n\n\n\nNow let’s add the second gradient:\n\n\n\nCodePen Embed Fallback\n\n\n\nThe second gradient is nothing but a circle to complete our wave:\n\n\n\nradial-gradient(var(--size) at 50% var(--size), blue 99%, #0000 101%) \n  calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%\n\n\n\nIf you check the previous article you will see that I am simply repeating what I already did there.\n\n\n\nI followed both articles but the gradient configurations are not the same.\n\n\n\nThat’s because we can reach the same result using different gradient configurations. You will notice a slight difference in the alignment if you compare both configurations, but the trick is the same. This can be confusing if you are unfamiliar with gradients, but don’t worry. With some practice, you get used to them and you will find by yourself that different syntax can lead to the same result.\n\n\n\nHere is the full code for our first wave:\n\n\n\n.wave {\n  --size: 50px;\n\n  mask:\n    radial-gradient(var(--size) at 50% var(--size),#000 99%, #0000 101%) \n      calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--size) at 50% 0px, #0000 99%, #000 101%) \n      50% var(--size)/calc(4 * var(--size)) 100% repeat-x;\n}\n\n\n\nNow let’s take this code and adjust it to where we introduce a variable that makes this fully reusable for creating any wave we want. As we saw in the previous section, the main trick is to move the circles so they are no more aligned so let’s update the position of each one. We will move the first one up and the second down.\n\n\n\nOur code will look like this:\n\n\n\n.wave {\n  --size: 50px;\n  --p: 25px;\n\n  mask:\n    radial-gradient(var(--size) at 50% calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--size) at 50% calc(-1*var(--p)), #0000 99%, #000 101%) \n      50% var(--size) / calc(4 * var(--size)) 100% repeat-x;\n}\n\n\n\nI have introduced a new --p variable that’s used it to define the center position of each circle. The first gradient is using 50% calc(-1*var(--p)), so its center moves up while the second one is using calc(var(--size) + var(--p)) to move it down.\n\n\n\nA demo is worth a thousand words:\n\n\n\nCodePen Embed Fallback\n\n\n\nThe circles are neither aligned nor touch one another. We spaced them far apart without changing their radii, so we lost our wave. But we can fix things up by using the same math we used earlier to calculate the new radius. Remember that R = sqrt(P² + S²)/2. In our case, --size is equal to S/2; the same for --p which is also equal to P/2 since we are moving both circles. So, the distance between their center points is double the value of --p for this:\n\n\n\nR = sqrt(var(--size) * var(--size) + var(--p) * var(--p))\n\n\n\nThat gives us a result of 55.9px.\n\n\n\nCodePen Embed Fallback\n\n\n\nOur wave is back! Let’s plug that equation into our CSS:\n\n\n\n.wave {\n  --size: 50px;\n  --p: 25px;\n  --R: sqrt(var(--p) * var(--p) + var(--size)*var(--size));\n\n  mask:\n    radial-gradient(var(--R) at 50% calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      calc(50% - 2*var(--size)) 0 / calc(4 * var(--size)) 100%,\n    radial-gradient(var(--R) at 50% calc(-1*var(--p)), #0000 99%, #000 101%) \n      50% var(--size)/calc(4 * var(--size)) 100% repeat-x;\n}\n\n\n\nThis is valid CSS code. sqrt() is part of the specification, but at the time I’m writing this, there is no browser support for it. That means we need a sprinkle of JavaScript or Sass to calculate that value until we get broader sqrt() support.\n\n\n\nThis is pretty darn cool: all it takes is two gradients to get a cool wave that you can apply to any element using the mask property. No more trial and error — all you need is to update two variables and you’re good to go!\n\n\nReversing the wave\n\n\nWhat if we want the waves going the other direction, where we’re filling in the “sky” instead of the “water”. Believe it or not, all we have to do is to update two values:\n\n\n\n.wave {\n  --size: 50px;\n  --p: 25px;\n  --R: sqrt(var(--p) * var(--p) + var(--size) * var(--size));\n\n  mask:\n    radial-gradient(var(--R) at 50% calc(100% - (var(--size) + var(--p))), #000 99%, #0000 101%)\n      calc(50% - 2 * var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--R) at 50% calc(100% + var(--p)), #0000 99%, #000 101%) \n      50% calc(100% - var(--size)) / calc(4 * var(--size)) 100% repeat-x;\n}\n\n\n\nAll I did there is add an offset equal to 100%, highlighted above. Here’s the result:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe can consider a more friendly syntax using keyword values to make it even easier:\n\n\n\n.wave {\n  --size: 50px;\n  --p: 25px;\n  --R: sqrt(var(--p)*var(--p) + var(--size) * var(--size));\n\n  mask:\n    radial-gradient(var(--R) at left 50% bottom calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      calc(50% - 2 * var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), #0000 99%, #000 101%) \n      left 50% bottom var(--size) / calc(4 * var(--size)) 100% repeat-x;\n}\n\n\n\nWe’re using the left and bottom keywords to specify the sides and the offset. By default, the browser defaults to left and top — that’s why we use 100% to move the element to the bottom. In reality, we are moving it from the top by 100%, so it’s really the same as saying bottom. Much easier to read than math!\n\n\n\nWith this updated syntax, all we have to do is to swap bottom for top — or vice versa — to change the direction of the wave.\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd if you want to get both top and bottom waves, we combine all the gradients in a single declaration:\n\n\n\n.wave {\n  --size: 50px;\n  --p: 25px;\n  --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));\n\n  mask:\n    /* Gradient 1 */\n    radial-gradient(var(--R) at left 50% bottom calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      left calc(50% - 2*var(--size)) bottom 0 / calc(4 * var(--size)) 51% repeat-x,\n    /* Gradient 2 */\n    radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), #0000 99%, #000 101%) \n      left 50% bottom var(--size) / calc(4 * var(--size)) calc(51% - var(--size)) repeat-x,\n    /* Gradient 3 */\n    radial-gradient(var(--R) at left 50% top calc(var(--size) + var(--p)), #000 99%, #0000 101%) \n      left calc(50% - 2 * var(--size)) top 0 / calc(4 * var(--size)) 51% repeat-x,\n    /* Gradient 4 */\n    radial-gradient(var(--R) at left 50% top calc(-1 * var(--p)), #0000 99%, #000 101%) \n      left 50% top var(--size) / calc(4 * var(--size)) calc(51% - var(--size)) repeat-x;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you check the code, you will see that in addition to combining all the gradients, I have also reduced their height from 100% to 51% so that they both cover half of the element. Yes, 51%. We need that little extra percent for a small overlap that avoid gaps.\n\n\n\nWhat about the left and right sides?\n\n\n\nIt’s your homework! Take what we did with the top and bottom sides and try to update the values to get the right and left values. Don’t worry, it’s easy and the only thing you need to do is to swap values.\n\n\n\nIf you have trouble, you can always use the online generator to check the code and visualize the result.\n\n\nWavy lines\n\n\nEarlier, we made our first wave using a red line then filled the bottom portion of the element. How about that wavy line? That’s a wave too! Even better is if we can control its thickness with a variable so we can reuse it. Let’s do it!\n\n\n\n\n\n\n\n\n\nWe are not going to start from scratch but rather take the previous code and update it. The first thing to do is to update the color stops of the gradients. Both gradients start from a transparent color to an opaque one, or vice versa. To simulate a line or border, we need to start from transparent, go to opaque, then back to transparent again:\n\n\n\n#0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%\n\n\n\nI think you already guessed that the --b variable is what we’re using to control the line thickness. Let’s apply this to our gradients:\n\n\n\nCodePen Embed Fallback\n\n\n\nYeah, the result is far from a wavy line. But looking closely, we can see that one gradient is correctly creating the bottom curvature. So, all we really need to do is rectify the second gradient. Instead of keeping a full circle, let’s make partial one like the other gradient.\n\n\n\nCodePen Embed Fallback\n\n\n\nStill far, but we have both curvatures we need! If you check the code, you will see that we have two identical gradients. The only difference is their positioning:\n\n\n\n.wave {\n  --size: 50px;\n  --b: 10px;\n  --p: 25px;\n  --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));\n\n  --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;\n  mask:\n    radial-gradient(var(--R) at left 50% bottom calc(-1*var(--p)), var(--_g)) \n      calc(50% - 2*var(--size)) 0/calc(4*var(--size)) 100%,\n    radial-gradient(var(--R) at left 50% top    calc(-1*var(--p)), var(--_g)) \n      50% var(--size)/calc(4*var(--size)) 100%;\n}\n\n\n\nNow we need to adjust the size and position for the final shape. We no longer need the gradient to be full-height, so we can replace 100% with this:\n\n\n\n/* Size plus thickness */\ncalc(var(--size) + var(--b))\n\n\n\nThere is no mathematical logic behind this value. It only needs to be big enough for the curvature. We will see its effect on the pattern in just a bit. In the meantime, let’s also update the position to vertically center the gradients:\n\n\n\n.wave {\n  --size: 50px;\n  --b: 10px;\n  --p: 25px;\n  --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));\n\n  --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;  \n  mask:\n    radial-gradient(var(--R) at left 50% bottom calc(-1*var(--p)), var(--_g)) \n      calc(50% - 2*var(--size)) 50%/calc(4 * var(--size)) calc(var(--size) + var(--b)) no-repeat,\n    radial-gradient(var(--R) at left 50% top calc(-1 * var(--p)), var(--_g)) 50%\n      50%/calc(4 * var(--size)) calc(var(--size) + var(--b)) no-repeat;\n}\n\n\n\nStill not quite there:\n\n\n\nCodePen Embed Fallback\n\n\n\nOne gradient needs to move a bit down and the other a bit up. Both need to move by half of their height.\n\n\n\nCodePen Embed Fallback\n\n\n\nWe are almost there! We need a small fix for the radius to have a perfect overlap. Both lines need to offset by half the border (--b) thickness:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe got it! A perfect wavy line that we can easily adjust by controlling a few variables:\n\n\n\n.wave {\n  --size: 50px;\n  --b: 10px;\n  --p: 25px;\n  --R: calc(sqrt(var(--p) * var(--p) + var(--size) * var(--size)) + var(--b) / 2);\n\n  --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;\n  mask:\n    radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), var(--_g)) \n     calc(50% - 2*var(--size)) calc(50% - var(--size)/2 - var(--b)/2) / calc(4 * var(--size)) calc(var(--size) + var(--b)) repeat-x,\n    radial-gradient(var(--R) at left 50% top calc(-1*var(--p)),var(--_g)) \n     50%  calc(50% + var(--size)/2 + var(--b)/2) / calc(4 * var(--size)) calc(var(--size) + var(--b)) repeat-x;\n}\n\n\n\nI know that the logic takes a bit to grasp. That’s fine and as I said, creating a wavy shape in CSS is not easy, not to mention the tricky math behind it. That’s why the online generator is a lifesaver — you can easily get the final code even if you don’t fully understand the logic behind it.\n\n\nWavy patterns\n\n\nWe can make a pattern from the wavy line we just created!\n\n\n\nOh no, the code of the pattern will be even more difficult to understand!\n\n\n\nNot at all! We already have the code. All we need to do is to remove repeat-x from what we already have, and tada. 🎉\n\n\n\nCodePen Embed Fallback\n\n\n\nA nice wavy pattern. Remember the equation I said we’d revisit?\n\n\n\n/* Size plus thickness */\ncalc(var(--size) + var(--b))\n\n\n\nWell, this is what controls the distance between the lines in the pattern. We can make a variable out of it, but there’s no need for more complexity. I’m not even using a variable for that in the generator. Maybe I’ll change that later.\n\n\n\nHere is the same pattern going in a different direction:\n\n\n\nCodePen Embed Fallback\n\n\n\nI am providing you with the code in that demo, but I’d for you to dissect it and understand what changes I made to make that happen.\n\n\nSimplifying the code\n\n\nIn all the previous demos, we always define the --size and --p independently. But do you recall how I mentioned earlier that the online generator evaluates P as equal to m*S, where m controls the curvature of the wave? By defining a fixed multiplier, we can work with one particular wave and the code can become easier. This is what we will need in most cases: a specific wavy shape and a variable to control its size.\n\n\n\nLet’s update our code and introduce the m variable:\n\n\n\n.wave {\n  --size: 50px;\n  --R: calc(var(--size) * sqrt(var(--m) * var(--m) + 1));\n\n  mask:\n    radial-gradient(var(--R) at 50% calc(var(--size) * (1 + var(--m))), #000 99%, #0000 101%) \n      calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,\n    radial-gradient(var(--R) at 50% calc(-1 * var(--size) * var(--m)), #0000 99%, #000 101%) \n      50% var(--size) / calc(4 * var(--size)) 100% repeat-x;\n  }\n\n\n\nAs you can see, we no longer need the --p variable. I replaced it with var(--m)*var(--size), and optimized some of the math accordingly. Now, If we want to work with a particular wavy shape, we can omit the --m variable and replace it with a fixed value. Let’s try .8 for example.\n\n\n\n--size: 50px;\n--R: calc(var(--size) * 1.28);\n\nmask:\n  radial-gradient(var(--R) at 50% calc(1.8 * var(--size)), #000 99%, #0000 101%) \n    calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,\n  radial-gradient(var(--R) at 50% calc(-.8 * var(--size)), #0000 99%, #000 101%) \n    50% var(--size) / calc(4 * var(--size)) 100% repeat-x;\n\n\n\nSee how the code is easier now? Only one variable to control your wave, plus you no more need to rely on sqrt() which has no browser support!\n\n\n\nCodePen Embed Fallback\n\n\n\nYou can apply the same logic to all the demos we saw even for the wavy lines and the pattern. I started with a detailed mathmatical explanation and gave the generic code, but you may find yourself needing easier code in a real use case. This is what I am doing all the time. I rarely use the generic code, but I always consider a simplified version especially that, in most of the cases, I am using some known values that don’t need to be stored as variables. (Spoiler alert: I will be sharing a few examples at the end!)\n\n\nLimitations to this approach\n\n\nMathematically, the code we made should give us perfect wavy shapes and patterns, but in reality, we will face some strange results. So, yes, this method has its limitations. For example, the online generator is capable of producing poor results, especially with wavy lines. Part of the issue is due to a particular combination of values where the result gets scrambled, like using a big value for the border thickness compared to the size:\n\n\n\n\n\n\n\nFor the other cases, it’s the issue related to some rounding that will results in misalignment and gaps between the waves:\n\n\n\n\n\n\n\nThat said, I still think the method we covered remains a good one because it produces smooth waves in most cases, and we can easily avoid the bad results by playing with different values until we get it perfect.\n\n\nWrapping up\n\n\nI hope that after this article, you will no more to fumble around with trial and error to build a wavy shape or pattern. In addition to the online generator, you have all the math secrets behind creating any kind of wave you want!\n\n\n\nThe article ends here but now you have a powerful tool to create fancy designs that use wavy shapes. Here’s inspiration to get you started…\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nWhat about you? Use my online generator (or write the code manually if you already learned all the math by heart) and show me your creations! Let’s have a good collection in the comment section.\n\nHow to Create Wavy Shapes & Patterns in CSS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373403",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-26T13:13:30.000Z",
      "date_modified": "2022-09-26T13:13:30.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373057",
      "url": "https://css-tricks.com/how-to-customize-wordpress-block-theme-cover-templates-with-dynamic-post-feature-images/",
      "title": "How To Customize WordPress Block Theme Cover Templates with Dynamic Post Feature Images",
      "summary": "If we browse the WordPress theme directory, a majority of themes showcase cover images. It is a feature in popular demand. The cover page trend is true even in the block theme directory screenshots as well.\nLet’s consider the …\n\nHow To Customize WordPress Block Theme Cover Templates with Dynamic Post Feature Images originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>If we browse the <a href=\"https://wordpress.org/themes/\" rel=\"noopener\">WordPress theme directory</a>, a majority of themes showcase cover images. It is a feature in popular demand. The cover page trend is true even in the <a href=\"https://wordpress.org/themes/\" rel=\"noopener\">block theme directory</a> screenshots as well.</p>\n\n\n\n<p>Let’s consider the following example from <a href=\"https://github.com/WordPress/twentytwenty\" rel=\"noopener\">Twenty Twenty</a>&nbsp;(a classic theme) which includes a <a href=\"https://github.com/WordPress/twentytwenty/blob/master/templates/template-cover.php\" rel=\"noopener\">cover template</a>&nbsp;that can be used to display both in single post and page, where the post’s featured image displays at the top that stretches across the browser screen, with post title and other desired meta data below. Cover templates allow creating content that stands out from the traditional constraints of displaying content.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"867\" height=\"547\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-coverpage-2020.jpg?resize=867%2C547&#038;ssl=1\" alt=\"\" class=\"wp-image-373270\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-coverpage-2020.jpg?w=867&amp;ssl=1 867w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-coverpage-2020.jpg?resize=300%2C189&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-coverpage-2020.jpg?resize=768%2C485&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><em>Screenshot showing a single post with Twenty Twenty cover template</em>.</figcaption></figure>\n\n\n\n<p>Creating cover templates currently requires writing PHP code as captured here in the <a href=\"https://github.com/WordPress/twentytwenty/blob/master/template-parts/content-cover.php\" rel=\"noopener\">Twenty Twenty default theme’s cover template</a>. If we look at the <code>template-parts/content-cover.php</code>&nbsp;file, it contains the <a href=\"https://github.com/WordPress/twentytwenty/blob/master/templates/template-cover.php\" rel=\"noopener\">code</a>&nbsp;for displaying content when the <code>cover-template</code>&nbsp;is used.</p>\n\n\n\n<p>Thus, it is not possible to create a customized cover page if you do not possess a deep knowledge of PHP. For many ordinary WordPress users, the only option is to use plugin like <a href=\"https://wordpress.org/plugins/custom-post-type-ui/\" rel=\"noopener\">Custom Post Type UI</a>&nbsp;as described in <a href=\"https://www.youtube.com/watch?v=XBmjW2aqBFk\" rel=\"noopener\">this short video</a>.</p>\n\n\n\n<span id=\"more-373057\"></span>\n\n\n<h3 id=\"cover-sections-in-block-themes\">Cover sections in block themes</h3>\n\n\n<p>Since <a href=\"https://wordpress.org/news/2021/07/tatum/\" rel=\"noopener\">WordPress 5.8</a>, theme authors could create custom templates (like single post, author, category, and others) with a top hero section using <a href=\"https://developer.wordpress.org/block-editor/\" rel=\"noopener\">block editor</a>&nbsp;cover block and bundled into their themes with minimal or no code.</p>\n\n\n\n<p>Before diving into how top large cover sections are created in block themes templates, let’s briefly look at the two block themes <a href=\"https://wordpress.org/themes/twentytwentytwo/\" rel=\"noopener\">Twenty Twenty-Two</a>&nbsp;and <a href=\"https://wordpress.org/themes/wabi/\" rel=\"noopener\">Wabi</a>&nbsp;by Rich Tabor (full review <a href=\"https://wptavern.com/unearthing-hidden-treasures-in-the-wabi-wordpress-block-theme\" rel=\"noopener\">here</a>).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"390\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi.jpg?resize=1024%2C390&#038;ssl=1\" alt=\"\" class=\"wp-image-373271\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=1024%2C390&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=300%2C114&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=768%2C293&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=1536%2C585&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=2048%2C780&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><em>Screenshot showing cover page thumbnails of Twenty Twenty-Two (left) and Wabi (right) themes.</em></figcaption></figure>\n\n\n\n<p>Behind-the-scenes, Twenty Twenty-Two implements a large header by <a href=\"https://themes.trac.wordpress.org/browser/twentytwentytwo/1.2/inc/patterns/hidden-bird.php\" rel=\"noopener\">adding a hidden image stored as a pattern</a>&nbsp;in the <a href=\"https://themes.trac.wordpress.org/browser/twentytwentytwo/1.2/parts/header-large-dark.html\" rel=\"noopener\"><code>header-dark-large</code></a>&nbsp;parts. Whereas, in the Wabi theme, the large header background color in a single post is implemented with <a href=\"https://themes.trac.wordpress.org/browser/wabi/1.0.4/templates/single.html\" rel=\"noopener\">accent background colors and a 50px height spacer block</a>&nbsp;(lines: 5-9). The accent colors are managed by the <a href=\"https://themes.trac.wordpress.org/browser/wabi/1.0.4/assets/js/accent-color.js\" rel=\"noopener\"><code>assets/js/accent-colors.js</code></a>&nbsp;file.</p>\n\n\n\n<p>Many others chose to create a top cover section by using <a href=\"https://wordpress.org/support/article/cover-block/\" rel=\"noopener\">cover block</a>, which allowed users to change the background color and add a static image from Media Library or upload from media devices &#8211; without writing any code. With this approach, images from the <a href=\"https://make.wordpress.org/core/2022/04/14/whats-new-in-gutenberg-13-0-14-april/#highlight-2\" rel=\"noopener\">post featured image block</a>&nbsp;had to be added manually to each single post if you wanted to have the post featured image as the background image in single posts.</p>\n\n\n<h3 id=\"cover-blocks-with-dynamic-post-featured-image\">Cover Blocks with dynamic post featured image</h3>\n\n\n<p>WordPress 6.0 made available another cool <a href=\"https://make.wordpress.org/core/2022/04/14/whats-new-in-gutenberg-13-0-14-april/#highlight-2\" rel=\"noopener\">featured image cover blocks</a>&nbsp;feature, which allows use of the featured image of any post or page as the background image in the cover block.</p>\n\n\n\n<p>In the following <a href=\"https://www.youtube.com/watch?v=2-1kwfDzZXg\" rel=\"noopener\">short video</a>, Automattic engineers discuss adding featured images to cover blocks with an example from <a href=\"https://github.com/Automattic/themes/tree/trunk/archeo\" rel=\"noopener\">Archeo</a>&nbsp;theme:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"Using the Post Featured Image with the Cover Block\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/2-1kwfDzZXg?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>The image block including post featured image block can be further customized using <code><a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#presets\" rel=\"noopener\">duotone</a></code>&nbsp;color in <code>theme.json</code>&nbsp;as discussed in this short <a href=\"https://www.youtube.com/watch?v=YPU-sT96f2g\" rel=\"noopener\">Connecting The Dots</a>&nbsp;YouTube video (Automattic’s Anne McCarthy).</p>\n\n\n\n<p><strong>Use case examples (Wei,</strong> <strong>Bright Mode)</strong></p>\n\n\n\n<p>If we browse the thumbnail images in the <a href=\"https://wordpress.org/themes/tags/full-site-editing/\" rel=\"noopener\">block theme directory</a>, we see a majority of them include large cover header sections. If we dig into their template files, they make use of cover blocks with static image background.</p>\n\n\n\n<p>Some recently developed themes are using cover blocks with the dynamic post featured image background (e.g., Archeo, Wei, Frost, Bright Mode, etc.). A brief overview of the new feature is available in <a href=\"https://github.com/WordPress/gutenberg/pull/39658#issuecomment-1117870716\" rel=\"noopener\">this short GitHub video</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"412\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode.jpg?resize=1024%2C412&#038;ssl=1\" alt=\"\" class=\"wp-image-373272\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=1024%2C412&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=300%2C121&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=768%2C309&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=1536%2C618&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=2048%2C824&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><em>Screenshot showing cover page thumbnails of Wei (left) and Bright-mode (right) themes.</em></figcaption></figure>\n\n\n\n<p>Combining dynamic accent colors features of <a href=\"https://wptavern.com/unearthing-hidden-treasures-in-the-wabi-wordpress-block-theme\" rel=\"noopener\">Wabi</a>&nbsp;theme with cover and post featured image blocks, Rich Tabor further expands his creativity in his new <a href=\"https://wordpress.org/themes/wei/\" rel=\"noopener\">Wei</a>&nbsp;theme (full review available <a href=\"https://wptavern.com/wei-a-free-minimalist-wordpress-theme-from-rich-tabor\" rel=\"noopener\">here</a>) to display dynamic cover images from a single post.</p>\n\n\n\n<p>In his Wei announcement post, <a href=\"https://richtabor.com/wei/\" rel=\"noopener\">Rich Tabor writes</a>:&nbsp;“Behind-the-scenes, the <code>single.html</code>&nbsp;template is using a Cover block that leverages the post’s featured image. Then the duotone is applied by the color scheme assigned to the post. This way, just about any image will look fine”.</p>\n\n\n\n<p class=\"is-style-explanation\">If you would like to dig deeper into the Wei theme&#8217;s header cover block and learn how to create your own, here is a <a href=\"https://www.youtube.com/watch?v=DGH9AMYzyrg&amp;t=1s\" rel=\"noopener\">short video</a>&nbsp;from <a href=\"https://twitter.com/fklux\" rel=\"noopener\">Fränk Klein</a>&nbsp;(WP Development Courses) who explains step-by-step how it was created.</p>\n\n\n\n<p>Similar to the Wei theme, <a href=\"https://briangardner.com/\" rel=\"noopener\">Brian Gardner</a>&nbsp;also makes use of cover block with post featured image block in his recent <a href=\"https://wordpress.org/themes/bright-mode/\" rel=\"noopener\">Bright Mode</a>&nbsp;theme to display standout contents with <a href=\"https://bg.design/bright-mode/styles/\" rel=\"noopener\">vibrant colors</a>.</p>\n\n\n\n<p><a href=\"https://wptavern.com/bright-mode-a-new-block-theme-with-vibrant-colors-patterns-and-custom-block-styles\" rel=\"noopener\">Brian told WPTavern</a>: “he loves most about the theme is the way the Cover Block is used on <a href=\"https://bg.design/bright-mode/showcase/\" rel=\"noopener\">single pages</a>. It pulls the featured image into the Cover block and also offers custom block styles for shadows and full-height options. [&#8230;] I feel as though this really presents what’s possible with modern WordPress.”</p>\n\n\n\n<p class=\"is-style-explanation\">For more detail, here is its <a href=\"https://bg.design/bright-mode/\" rel=\"noopener\">demo site</a>&nbsp;and <a href=\"https://wptavern.com/bright-mode-a-new-block-theme-with-vibrant-colors-patterns-and-custom-block-styles\" rel=\"noopener\">full review of Brian’s Bright Mode theme</a>.</p>\n\n\n<h3 id=\"designing-complex-layouts-with-block-editor\">Designing complex layouts with block editor</h3>\n\n\n<p>Recently, WordPress launched a new block editor designed <a href=\"https://wordpress.org/\" rel=\"noopener\">landing homepage</a> and a <a href=\"https://wordpress.org/download/\" rel=\"noopener\">download page</a>. The announcement <a href=\"https://wptavern.com/wordpress-launches-new-homepage-and-download-page-designs\" rel=\"noopener\">attracted mixed reactions</a> from its readers, including from <a href=\"https://profiles.wordpress.org/matt/\" rel=\"noopener\">Matt Mullenweg</a> (Automattic) who commented on the 33-days taken to design and launch such a &#8220;simple page&#8221;. You can find <a href=\"https://make.wordpress.org/meta/2022/08/01/developing-the-redesigned-home-and-download-pages/#comment-936\" rel=\"noopener\">additional behind the scene discussions here</a>.</p>\n\n\n\n<p>In response, Jamie Marsland of Pootlepress created <a href=\"https://www.youtube.com/watch?v=mRrrYGpz9Qo\" rel=\"noopener\">this YouTube video</a> where he reproduces a nearly identical homepage in nearly 20 minutes.</p>\n\n\n\n<p>Commenting on Marsland video, <a href=\"https://wptavern.com/jamie-marsland-recreates-wordpress-org-homepage-in-20-minutes-using-the-block-editor\" rel=\"noopener\">Sarah Gooding of WP Travern writes</a>: &#8220;He is what one might describe as a power user with the block editor. He can quickly shuffle rows, columns, and groups around, adjusting padding and margins as necessary, and assign each section the corresponding color for the design. At this point, this is not something most average WordPress users could do.&#8221;</p>\n\n\n\n<p>Though the block editor has come a long way, there are still growing pain points to most theme developers and ordinary users to create and design complex layouts with it.</p>\n\n\n<h2 id=\"adding-enhancement-to-tt2-gopher-blocks\">Adding enhancement to TT2 Gopher blocks</h2>\n\n\n<p>In this section, I will walk you through how I added enhancements to the <a href=\"https://github.com/tinjure20/TT2-gopher-blocks\" rel=\"noopener\">TT2 Gopher Blocks theme</a>&nbsp;that I referenced in my previous article. Inspired by cover blocks from themes that I described earlier, I wanted to add three cover templates (author, category, and single-cover) to the theme.</p>\n\n\n\n<p>While browsing websites, we notice two types of cover headers. The mostly observed header is cover section blended with the site header (site title and top navigation) into the cover block (e.g., Twenty Twenty, Twenty Twenty-Two, Wei, Wabi, Frost, Bright Mode, etc.). We also find header cover section which is not blended with site header and positioned just underneath, such as this <a href=\"https://www.bbc.com/future\" rel=\"noopener\">BBC Future</a>&nbsp;website. For TT2 Gopher blocks theme, I opted for the latter.</p>\n\n\n<h3 id=\"creating-cover-header-patterns\">Creating cover header patterns</h3>\n\n\n<p>First, let’s create cover header patterns for author, single, and others (categories, tags) templates using cover blocks. Then we will convert them into patterns (as described <a href=\"https://css-tricks.com/how-to-create-block-theme-patterns-in-wordpress-6-0/#aa-section-2-creating-and-loading-patterns-without-registration\">here previously</a>) and call the respective header cover patterns into the templates.</p>\n\n\n\n<p>If you are familiar to working with the block editor, design your header section using cover blocks in the site editor and then convert the cover header code into patterns. However, if you are not familiar with FSE editor, then the easiest way is to copy patterns from the <a href=\"https://wordpress.org/patterns/\" rel=\"noopener\">patterns directory</a>&nbsp;in a post, make necessary modification and convert it into a pattern.</p>\n\n\n\n<p>In my <a href=\"https://css-tricks.com/how-to-create-block-theme-patterns-in-wordpress-6-0/#aa-section-3-creating-and-using-patterns-with-low-code\">previous CSS-Tricks article</a>, I discussed in detail on creating and using block patterns. Here is a brief overview of the workflow that I am using to create the single post cover header pattern:</p>\n\n\n\n<p><em><strong>Single post cover header pattern</strong></em></p>\n\n\n\n<p><em>Step 1</em>: Using FSE interface, let&#8217;s create a new blank file and start building block structure as shown on the left panel.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"444\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=1024%2C444&#038;ssl=1\" alt=\"\" class=\"wp-image-373274\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=1024%2C444&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=300%2C130&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=768%2C333&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=1536%2C667&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?w=2000&amp;ssl=1 2000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Screenshot of the WordPress UI with the Full Site Editor. A block is being assembled with post date, categories, and post title.</figcaption></figure>\n\n\n\n<p>Alternatively, this could be done in a post or page first, and then copy and paste the markup into a pattern file, later.</p>\n\n\n\n<p><em>Step 2</em>: Next, to covert the above markup into a pattern, first we should copy its code markup and paste into a new <code>/patterns/header-single-cover.php</code>&nbsp;in our code editor. We should also add required pattern file header markup (e.g., title, slug, categories, inserter, etc.).</p>\n\n\n\n<p>Here is the entire code of the <code>/patterns/header-single-cover.php</code>&nbsp;file:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"10\"><code markup=\"tt\">&lt;?php\n    /**\n     * Title: Header cover single\n     * Slug: tt2gopher/header-cover-single\n     * Categories: tt2gopher-header\n     * Block Types: core/template-part/header\n     * inserter: yes\n     */\n?>\n    &lt;!-- wp:cover {\"url\":\"https://pd.w.org/2022/08/15062ed5f5707b5c5.85694718-2048x1536.jpg\",\"id\":100,\"dimRatio\":0,\"overlayColor\":\"foreground\",\"focalPoint\":{\"x\":\"0.40\",\"y\":\"0.37\"},\"minHeight\":50,\"minHeightUnit\":\"vh\",\"isDark\":false,\"align\":\"full\",\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#00a5ff\"]},\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}}} -->\n    &lt;div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0px;margin-bottom:0px;min-height:50vh\">&lt;span aria-hidden=\"true\" class=\"wp-block-cover__background has-foreground-background-color has-background-dim-0 has-background-dim\">&lt;/span>&lt;img class=\"wp-block-cover__image-background wp-image-100\" alt=\"\" src=\"https://pd.w.org/2022/08/15062ed5f5707b5c5.85694718-2048x1536.jpg\" style=\"object-position:40% 37%\" data-object-fit=\"cover\" data-object-position=\"40% 37%\"/>&lt;div class=\"wp-block-cover__inner-container\">&lt;!-- wp:group {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|base\"}}},\"spacing\":{\"blockGap\":\"10px\"}},\"textColor\":\"base\",\"layout\":{\"wideSize\":\"800px\"}} -->\n    &lt;div class=\"wp-block-group has-base-color has-text-color has-link-color\">&lt;!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"10px\"}},\"textColor\":\"primary\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"center\"},\"fontSize\":\"small\"} -->\n    &lt;div class=\"wp-block-group has-primary-color has-text-color has-small-font-size\">&lt;!-- wp:post-date {\"textColor\":\"foreground\"} /-->\n    \n    &lt;!-- wp:paragraph -->\n    &lt;p>|&lt;/p>\n    &lt;!-- /wp:paragraph -->\n    \n    &lt;!-- wp:post-terms {\"term\":\"category\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|foreground\"}}}}} /-->&lt;/div>\n    &lt;!-- /wp:group -->\n    \n    &lt;!-- wp:post-title {\"textAlign\":\"center\",\"level\":1,\"style\":{\"typography\":{\"fontStyle\":\"normal\",\"fontWeight\":\"400\"}},\"textColor\":\"foreground\",\"fontSize\":\"max-60\"} /-->&lt;/div>\n    &lt;!-- /wp:group -->&lt;/div>&lt;/div>\n    &lt;!-- /wp:cover --></code></pre>\n\n\n\n<p><em>Step 3</em>: For this demo, I have used <a href=\"https://wordpress.org/photos/photo/15062ed5f5/\" rel=\"noopener\">this image from photos directory</a>&nbsp;as a filler background image, and applied the <em>Midnight</em>&nbsp;duotone color. To use post featured image dynamically, we should add <code>\"useFeaturedImage\":true</code>&nbsp;in the cover block by replacing the above filler image link just before the <code>\"dimRatio\":50</code>&nbsp;such that the line 10 should look like the following:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- wp:cover {\"useFeaturedImage\":true,\"dimRatio\":0,\"overlayColor\":\"foreground\",\"focalPoint\":{\"x\":\"0.40\",\"y\":\"0.37\"},\"minHeight\":50,\"minHeightUnit\":\"vh\",\"isDark\":false,\"align\":\"full\",\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#00a5ff\"]},\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}}} --></code></pre>\n\n\n\n<p>Alternatively, the filler image could also be changed by clicking <strong>Replace</strong> and selecting <strong>Use featured image</strong> option:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"247\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=1024%2C247&#038;ssl=1\" alt=\"\" class=\"wp-image-373273\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=1024%2C247&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=300%2C72&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=768%2C185&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=1536%2C371&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?w=1600&amp;ssl=1 1600w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Screenshot of the WordPress UI with &#8216;Replace&#8217; and &#8216;Use featured image&#8217; selected.</figcaption></figure>\n\n\n\n<p>Now, the header cover patterns should be visible in the patterns inserter panel for use anywhere in the templates, posts, and pages.</p>\n\n\n\n<p><em><strong>Archive cover headers</strong></em></p>\n\n\n\n<p>Inspired by <a href=\"https://wptavern.com/fse-outreach-13-building-an-author-template-from-the-wordpress-site-editor\" rel=\"noopener\">this WP Tavern post</a>&nbsp;and a step-by-step walkthrough to create an author template header, I wanted to create a similar cover header and add to TT2 Gopher theme, too.</p>\n\n\n\n<p>First, let’s create the archive cover header pattern for <code>author.html</code> the template as well, following the above workflow. In this case, I am creating this in a new blank page, by adding blocks (as shown below in list view):</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"386\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=1024%2C386&#038;ssl=1\" alt=\"\" class=\"wp-image-373275\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=1024%2C386&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=300%2C113&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=768%2C290&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=1536%2C580&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=2048%2C773&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Screenshot of the WordPress UI for an Author page using a single post header cover.</figcaption></figure>\n\n\n\n<p>In the background for the cover, I used the same image used in the single post header cover.</p>\n\n\n\n<p>Because we would like to display a short author biography on the author block, a biographical statement should also be added to the user profile page, or else a blank space will be displayed in the front-end.</p>\n\n\n\n<p>The following is the markup code of the <code>header-author-cover</code>, that we will use pattern, in the next step:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">    &lt;!-- wp:cover {\"url\":\"https://pd.w.org/2022/03/8256241eff74ef542.61868565.jpeg\",\"id\":226,\"dimRatio\":10,\"focalPoint\":{\"x\":\"0.50\",\"y\":\"0.75\"},\"minHeight\":200,\"minHeightUnit\":\"px\",\"isDark\":false,\"align\":\"full\",\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#00a5ff\"]}}} -->\n    &lt;div class=\"wp-block-cover alignfull is-light\" style=\"min-height:200px\">&lt;span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-10 has-background-dim\">&lt;/span>&lt;img class=\"wp-block-cover__image-background wp-image-226\" alt=\"\" src=\"https://pd.w.org/2022/03/8256241eff74ef542.61868565.jpeg\" style=\"object-position:50% 75%\" data-object-fit=\"cover\" data-object-position=\"50% 75%\"/>&lt;div class=\"wp-block-cover__inner-container\">&lt;!-- wp:group {\"layout\":{\"inherit\":true}} -->\n    &lt;div class=\"wp-block-group\">&lt;!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"1rem\",\"right\":\"2rem\",\"bottom\":\"1rem\",\"left\":\"2rem\"}}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n    &lt;div class=\"wp-block-group\" style=\"padding-top:1rem;padding-right:2rem;padding-bottom:1rem;padding-left:2rem\">&lt;!-- wp:avatar {\"size\":70,\"isLink\":true,\"align\":\"right\",\"style\":{\"border\":{\"radius\":\"9999px\"}}} /-->\n    \n    &lt;!-- wp:group -->\n    &lt;div class=\"wp-block-group\">&lt;!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"6px\"}},\"layout\":{\"type\":\"flex\"},\"fontSize\":\"large\"} -->\n    &lt;div class=\"wp-block-group has-large-font-size\">&lt;!-- wp:paragraph {\"textColor\":\"foreground\",\"fontSize\":\"large\"} -->\n    &lt;p class=\"has-foreground-color has-text-color has-large-font-size\">Published by:&lt;/p>\n    &lt;!-- /wp:paragraph -->\n    \n    &lt;!-- wp:post-author-name {\"isLink\":true,\"style\":{\"typography\":{\"fontStyle\":\"large\",\"fontWeight\":\"600\"},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|background\"}}}},\"textColor\":\"foreground\"} /-->&lt;/div>\n    &lt;!-- /wp:group -->\n    \n    &lt;!-- wp:post-author-biography {\"textColor\":\"foreground\",\"fontSize\":\"small\"} /-->\n    \n    &lt;!-- wp:separator {\"backgroundColor\":\"foreground\"} -->\n    &lt;hr class=\"wp-block-separator has-text-color has-foreground-color has-alpha-channel-opacity has-foreground-background-color has-background\"/>\n    &lt;!-- /wp:separator -->&lt;/div>\n    &lt;!-- /wp:group -->&lt;/div>\n    &lt;!-- /wp:group -->&lt;/div>\n    &lt;!-- /wp:group -->&lt;/div>&lt;/div>\n    &lt;!-- /wp:cover --></code></pre>\n\n\n\n<p>To covert the markup into a <code>header-author-cover</code>&nbsp;pattern, we should add the required pattern file header markup as described earlier. By editing the <code>header-author-cover.php</code>&nbsp;pattern, we can create similar header covers for tags, taxonomy, and other custom templates.</p>\n\n\n\n<p class=\"is-style-explanation\">The <a href=\"https://github.com/tinjure20/TT2-gopher-blocks/blob/Branch-1/templates/category.html\" rel=\"noopener\"><code>header-category-cover.php</code>&nbsp;pattern for my <code>category.html</code>&nbsp;template is available on GitHub</a>.</p>\n\n\n<h3 id=\"creating-templates-with-header-cover-blocks\">Creating Templates with header cover blocks</h3>\n\n\n<p><a href=\"https://wordpress.org/news/2022/05/arturo/\" rel=\"noopener\">WordPress 6.0</a>&nbsp;and the recent <a href=\"https://make.wordpress.org/core/2022/07/20/whats-new-in-gutenberg-13-7-20-july/#templates\" rel=\"noopener\">Gutenberg 13.7</a>&nbsp;extended template creating features into the block editor, thus making it possible for many WordPress users, without deep knowledge of coding, to create their customized templates.</p>\n\n\n\n<p>For more detailed information and use cases, here is a <a href=\"https://make.wordpress.org/core/2022/07/21/core-editor-improvement-deeper-customization-with-more-template-options/\" rel=\"noopener\">thorough customization note by Justin Tadlock</a>.</p>\n\n\n\n<p><a href=\"https://wordpress.org/support/article/wordpress-editor/\" rel=\"noopener\">Block editor</a> allows creating various types of templates, including cover templates. Let&#8217;s briefly overview how combining <a href=\"https://wordpress.org/support/article/cover-block/\" rel=\"noopener\">cover block</a>&nbsp;and <a href=\"https://wordpress.org/support/article/post-featured-image-block/\" rel=\"noopener\">post featured image block</a>&nbsp;with new template UI makes easy to create various types of cover custom templates even with no or low coding skills.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"653\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template.jpg?resize=1024%2C653&#038;ssl=1\" alt=\"\" class=\"wp-image-373276\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=1024%2C653&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=300%2C191&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=768%2C490&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=1536%2C980&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=2048%2C1306&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Screenshot of the WordPress UI displaying available templates provided by TT2 Gopher Blocks &#8211; Single, Page, Index, Home, 404, Blank, and Archive.</figcaption></figure>\n\n\n\n<p>Creating templates has been made much easier with Gutenberg 13.7. How to create block templates <a href=\"https://developer.wordpress.org/themes/block-themes/templates-and-template-parts/#how-to-create-templates-with-code\" rel=\"noopener\">with codes</a>&nbsp;and <a href=\"https://developer.wordpress.org/themes/block-themes/templates-and-template-parts/#how-to-create-templates-in-the-site-editor\" rel=\"noopener\">in site editor</a>&nbsp;is described in the&nbsp;<em>Theme handbook</em> and in <a href=\"https://css-tricks.com/a-deep-introduction-to-wordpress-block-themes/#aa-creating-templates-and-template-parts\">my previous article</a>.</p>\n\n\n\n<p><em><strong>Author template with cover block</strong></em></p>\n\n\n\n<p>Top (header section) markup of the <code>author.html</code> template is shown below (line 6):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"6\"><code markup=\"tt\">    &lt;!-- wp:template-part {\"slug\":\"header-small-dark\",\"theme\":\"TT2-GOPHER-V2\",\"tagName\":\"header\"} /-->\n    \n    &lt;!-- wp:group {\"tagName\":\"main\",\"style\":{\"spacing\":{\"margin\":{\"top\":\"0\",\"bottom\":\"0px\"},\"padding\":{\"bottom\":\"80px\"},\"blockGap\":\"0px\"}},\"className\":\"site-content\"} -->\n    &lt;main class=\"wp-block-group site-content\" style=\"margin-top:0;margin-bottom:0px;padding-bottom:80px\">\n    \n        &lt;!-- wp:pattern {\"slug\":\"tt2gopher/header-author-cover\"} /-->\n    \n    ...\n    ...\n    ...\n    &lt;!-- /wp:group -->\n    ...</code></pre>\n\n\n\n<p>Here are screenshots of cover headers for the <code>author.html</code> and <code>category.html</code> templates:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"141\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover.jpg?resize=1024%2C141&#038;ssl=1\" alt=\"\" class=\"wp-image-373277\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=1024%2C141&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=300%2C41&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=768%2C106&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=1536%2C211&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=2048%2C282&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Screenshot of Author Page header (left) with author name, avatar, and biography. And screenshot of Category Page header (right).</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\">The entire <a href=\"https://github.com/tinjure20/TT2-gopher-blocks/tree/Branch-1/templates\" rel=\"noopener\">code for both templates is available on GitHub</a>.</p>\n\n\n\n<p><em><strong>Single post with cover block</strong></em></p>\n\n\n\n<p>To display cover block in our single post, we have to call the <code>header-cover-single pattern</code>&nbsp;below the header section (line 3):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"3\"><code markup=\"tt\">    &lt;!-- wp:template-part {\"slug\":\"header-small-dark\",\"tagName\":\"header\"} /-->\n    \n     &lt;!-- wp:pattern {\"slug\":\"tt2gopher/header-cover-single\"} /-->\n    \n    &lt;!-- wp:spacer {\"height\":32} -->\n    &lt;div style=\"height:32px\" aria-hidden=\"true\" class=\"wp-block-spacer\">&lt;/div>\n    &lt;!-- /wp:spacer -->\n    ....\n    ....\n    ....</code></pre>\n\n\n\n<p>Here is a screen capture showing the front-end view of the single post with the header cover section:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"592\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=1024%2C592&#038;ssl=1\" alt=\"\" class=\"wp-image-373278\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=1024%2C592&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=300%2C173&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=768%2C444&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=1536%2C888&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?w=2000&amp;ssl=1 2000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Screenshot of TT2 Gopher Blocks Single Post with Header Cover Section Pattern.</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\">The entire <a href=\"https://github.com/tinjure20/TT2-gopher-blocks/blob/Branch-1/templates/single-cover.html\" rel=\"noopener\"><code>single-cover.html</code>&nbsp;template is available on GitHub</a>.</p>\n\n\n\n<p>You can find additional step-by-step walkthrough tutorials on creating a <a href=\"https://wptavern.com/making-an-impression-how-to-build-a-post-hero-header-with-blocks\" rel=\"noopener\">hero header post section</a>&nbsp;and <a href=\"https://wptavern.com/featured-cover-blocks-and-the-future-of-binding-data-to-generic-wordpress-blocks\" rel=\"noopener\">using post featured image background cover blocks</a>&nbsp;on&nbsp;<em>WP Tavern</em>&nbsp;and <a href=\"https://fullsiteediting.com/\" rel=\"noopener\">Full Site Editing</a> website.</p>\n\n\n\n<p>There you have it!</p>\n\n\n<h3 id=\"helpful-resources\">Helpful Resources</h3>\n\n<h4 id=\"featured-image-cover-block\">Featured image cover block</h4>\n\n\n<ul><li><a href=\"https://wordpress.org/support/article/post-featured-image-block/\" rel=\"noopener\">Post Featured Image Block</a> (WordPress Support)</li><li><a href=\"https://www.youtube.com/watch?v=2-1kwfDzZXg\" rel=\"noopener\">Using the Post Featured Image with the Cover Block YouTube</a> (Dave on WP)</li><li><a href=\"https://wordpress.com/support/wordpress-editor/blocks/cover-block/\" rel=\"noopener\">Cover Block Step by Step tutorial</a> (WordPress Support)</li><li><a href=\"https://wptavern.com/featured-cover-blocks-and-the-future-of-binding-data-to-generic-wordpress-blocks\" rel=\"noopener\">Featured Cover Blocks and the Future of Binding Data to Generic WordPress Blocks</a> (WP Tavern)</li><li><a href=\"https://www.pootlepress.com/2021/11/custom-single-post-layouts-with-wordpress-gutenberg/\" rel=\"noopener\">Custom Single Post Layouts with WordPress Gutenberg</a> (Pootlepress)</li><li><a href=\"https://github.com/WordPress/gutenberg/pull/39658#event-6362139353\" rel=\"noopener\">Makes cover block dynamic and adds featured image binding #39658</a> (GitHub)</li></ul>\n\n\n<h4 id=\"blog-posts\">Blog posts</h4>\n\n\n<ul><li><a href=\"https://wptavern.com/featured-cover-blocks-and-the-future-of-binding-data-to-generic-wordpress-blocks\" rel=\"noopener\">Featured Cover Blocks and the Future of Binding Data to Generic WordPress Blocks</a> (WPTavern)</li><li><a href=\"https://wptavern.com/making-an-impression-how-to-build-a-post-hero-header-with-blocks\" rel=\"noopener\">Making an Impression: How To Build a Post Hero Header With Blocks</a> (WPTavern)</li><li><a href=\"https://make.wordpress.org/core/2022/07/21/core-editor-improvement-deeper-customization-with-more-template-options/\" rel=\"noopener\">Core Editor Improvement: Deeper customization with more template options</a> (Make WordPress Core)</li></ul>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n\n\n\n<p>Even though the block themes, in general, are <a href=\"https://wptavern.com/wordpress-themes-team-contributors-get-pushback-on-proposal-to-improve-block-themes-visibility-in-the-directory\" rel=\"noopener\">getting lots of pushback from WordPress community members</a>, in my opinion, <a href=\"https://richtabor.com/a-new-era/\" rel=\"noopener\">they are the future of WordPress</a>,&nbsp;too. With block themes, amateur theme authors, without the deep coding skills and mastery of PHP and JavaScript languages, can now create themes with complex layouts with a hero cover section as described in this article combined with <a href=\"https://css-tricks.com/how-to-create-block-theme-patterns-in-wordpress-6-0/\">patterns</a>&nbsp;and <a href=\"https://css-tricks.com/creating-style-variations-in-wordpress-block-themes/\">style variations</a>.</p>\n\n\n\n<p>As an early Gutenberg user, I couldn’t be more excited with the new theming tools like <a href=\"https://wordpress.org/plugins/create-block-theme/\" rel=\"noopener\">create block theme</a>&nbsp;plugin and others which allow theme authors to achieve the following directly from block editor UI without writing any code:</p>\n\n\n\n<ul><li>(i) <a href=\"https://github.com/WordPress/create-block-theme#create-block-theme\" rel=\"noopener\">create</a></li><li>(ii) overwrite theme files and export</li><li>(iii) generate blank or a child theme, and</li><li>(iv) modify and save style variation of the current theme</li></ul>\n\n\n\n<p>Additionally, the recent iterations of the Gutenberg plugin allow enabling <a href=\"https://make.wordpress.org/core/2022/08/04/whats-new-in-gutenberg-13-8-3-august/#fluid-typography-support\" rel=\"noopener\">fluid typography</a> and <a href=\"https://gutenbergtimes.com/layouts-and-wide-alignments-in-wordpress-then-now-and-upcoming-changes/\" rel=\"noopener\">layout alignments</a>&nbsp;and other stylistic controls using only <code>theme.json</code>&nbsp;file without JavaScript and a line of CSS rules.</p>\n\n\n\n<p>Thank you for reading and share your comments and thoughts below!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-customize-wordpress-block-theme-cover-templates-with-dynamic-post-feature-images/\">How To Customize WordPress Block Theme Cover Templates with Dynamic Post Feature Images</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "If we browse the WordPress theme directory, a majority of themes showcase cover images. It is a feature in popular demand. The cover page trend is true even in the block theme directory screenshots as well.\n\n\n\nLet’s consider the following example from Twenty Twenty (a classic theme) which includes a cover template that can be used to display both in single post and page, where the post’s featured image displays at the top that stretches across the browser screen, with post title and other desired meta data below. Cover templates allow creating content that stands out from the traditional constraints of displaying content.\n\n\n\nScreenshot showing a single post with Twenty Twenty cover template.\n\n\n\nCreating cover templates currently requires writing PHP code as captured here in the Twenty Twenty default theme’s cover template. If we look at the template-parts/content-cover.php file, it contains the code for displaying content when the cover-template is used.\n\n\n\nThus, it is not possible to create a customized cover page if you do not possess a deep knowledge of PHP. For many ordinary WordPress users, the only option is to use plugin like Custom Post Type UI as described in this short video.\n\n\n\n\n\n\nCover sections in block themes\n\n\nSince WordPress 5.8, theme authors could create custom templates (like single post, author, category, and others) with a top hero section using block editor cover block and bundled into their themes with minimal or no code.\n\n\n\nBefore diving into how top large cover sections are created in block themes templates, let’s briefly look at the two block themes Twenty Twenty-Two and Wabi by Rich Tabor (full review here).\n\n\n\nScreenshot showing cover page thumbnails of Twenty Twenty-Two (left) and Wabi (right) themes.\n\n\n\nBehind-the-scenes, Twenty Twenty-Two implements a large header by adding a hidden image stored as a pattern in the header-dark-large parts. Whereas, in the Wabi theme, the large header background color in a single post is implemented with accent background colors and a 50px height spacer block (lines: 5-9). The accent colors are managed by the assets/js/accent-colors.js file.\n\n\n\nMany others chose to create a top cover section by using cover block, which allowed users to change the background color and add a static image from Media Library or upload from media devices – without writing any code. With this approach, images from the post featured image block had to be added manually to each single post if you wanted to have the post featured image as the background image in single posts.\n\n\nCover Blocks with dynamic post featured image\n\n\nWordPress 6.0 made available another cool featured image cover blocks feature, which allows use of the featured image of any post or page as the background image in the cover block.\n\n\n\nIn the following short video, Automattic engineers discuss adding featured images to cover blocks with an example from Archeo theme:\n\n\n\n\n\n\n\n\n\nThe image block including post featured image block can be further customized using duotone color in theme.json as discussed in this short Connecting The Dots YouTube video (Automattic’s Anne McCarthy).\n\n\n\nUse case examples (Wei, Bright Mode)\n\n\n\nIf we browse the thumbnail images in the block theme directory, we see a majority of them include large cover header sections. If we dig into their template files, they make use of cover blocks with static image background.\n\n\n\nSome recently developed themes are using cover blocks with the dynamic post featured image background (e.g., Archeo, Wei, Frost, Bright Mode, etc.). A brief overview of the new feature is available in this short GitHub video.\n\n\n\nScreenshot showing cover page thumbnails of Wei (left) and Bright-mode (right) themes.\n\n\n\nCombining dynamic accent colors features of Wabi theme with cover and post featured image blocks, Rich Tabor further expands his creativity in his new Wei theme (full review available here) to display dynamic cover images from a single post.\n\n\n\nIn his Wei announcement post, Rich Tabor writes: “Behind-the-scenes, the single.html template is using a Cover block that leverages the post’s featured image. Then the duotone is applied by the color scheme assigned to the post. This way, just about any image will look fine”.\n\n\n\nIf you would like to dig deeper into the Wei theme’s header cover block and learn how to create your own, here is a short video from Fränk Klein (WP Development Courses) who explains step-by-step how it was created.\n\n\n\nSimilar to the Wei theme, Brian Gardner also makes use of cover block with post featured image block in his recent Bright Mode theme to display standout contents with vibrant colors.\n\n\n\nBrian told WPTavern: “he loves most about the theme is the way the Cover Block is used on single pages. It pulls the featured image into the Cover block and also offers custom block styles for shadows and full-height options. […] I feel as though this really presents what’s possible with modern WordPress.”\n\n\n\nFor more detail, here is its demo site and full review of Brian’s Bright Mode theme.\n\n\nDesigning complex layouts with block editor\n\n\nRecently, WordPress launched a new block editor designed landing homepage and a download page. The announcement attracted mixed reactions from its readers, including from Matt Mullenweg (Automattic) who commented on the 33-days taken to design and launch such a “simple page”. You can find additional behind the scene discussions here.\n\n\n\nIn response, Jamie Marsland of Pootlepress created this YouTube video where he reproduces a nearly identical homepage in nearly 20 minutes.\n\n\n\nCommenting on Marsland video, Sarah Gooding of WP Travern writes: “He is what one might describe as a power user with the block editor. He can quickly shuffle rows, columns, and groups around, adjusting padding and margins as necessary, and assign each section the corresponding color for the design. At this point, this is not something most average WordPress users could do.”\n\n\n\nThough the block editor has come a long way, there are still growing pain points to most theme developers and ordinary users to create and design complex layouts with it.\n\n\nAdding enhancement to TT2 Gopher blocks\n\n\nIn this section, I will walk you through how I added enhancements to the TT2 Gopher Blocks theme that I referenced in my previous article. Inspired by cover blocks from themes that I described earlier, I wanted to add three cover templates (author, category, and single-cover) to the theme.\n\n\n\nWhile browsing websites, we notice two types of cover headers. The mostly observed header is cover section blended with the site header (site title and top navigation) into the cover block (e.g., Twenty Twenty, Twenty Twenty-Two, Wei, Wabi, Frost, Bright Mode, etc.). We also find header cover section which is not blended with site header and positioned just underneath, such as this BBC Future website. For TT2 Gopher blocks theme, I opted for the latter.\n\n\nCreating cover header patterns\n\n\nFirst, let’s create cover header patterns for author, single, and others (categories, tags) templates using cover blocks. Then we will convert them into patterns (as described here previously) and call the respective header cover patterns into the templates.\n\n\n\nIf you are familiar to working with the block editor, design your header section using cover blocks in the site editor and then convert the cover header code into patterns. However, if you are not familiar with FSE editor, then the easiest way is to copy patterns from the patterns directory in a post, make necessary modification and convert it into a pattern.\n\n\n\nIn my previous CSS-Tricks article, I discussed in detail on creating and using block patterns. Here is a brief overview of the workflow that I am using to create the single post cover header pattern:\n\n\n\nSingle post cover header pattern\n\n\n\nStep 1: Using FSE interface, let’s create a new blank file and start building block structure as shown on the left panel.\n\n\n\nScreenshot of the WordPress UI with the Full Site Editor. A block is being assembled with post date, categories, and post title.\n\n\n\nAlternatively, this could be done in a post or page first, and then copy and paste the markup into a pattern file, later.\n\n\n\nStep 2: Next, to covert the above markup into a pattern, first we should copy its code markup and paste into a new /patterns/header-single-cover.php in our code editor. We should also add required pattern file header markup (e.g., title, slug, categories, inserter, etc.).\n\n\n\nHere is the entire code of the /patterns/header-single-cover.php file:\n\n\n\n<?php\n    /**\n     * Title: Header cover single\n     * Slug: tt2gopher/header-cover-single\n     * Categories: tt2gopher-header\n     * Block Types: core/template-part/header\n     * inserter: yes\n     */\n?>\n    <!-- wp:cover {\"url\":\"https://pd.w.org/2022/08/15062ed5f5707b5c5.85694718-2048x1536.jpg\",\"id\":100,\"dimRatio\":0,\"overlayColor\":\"foreground\",\"focalPoint\":{\"x\":\"0.40\",\"y\":\"0.37\"},\"minHeight\":50,\"minHeightUnit\":\"vh\",\"isDark\":false,\"align\":\"full\",\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#00a5ff\"]},\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}}} -->\n    <div class=\"wp-block-cover alignfull is-light\" style=\"margin-top:0px;margin-bottom:0px;min-height:50vh\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-foreground-background-color has-background-dim-0 has-background-dim\"></span><img class=\"wp-block-cover__image-background wp-image-100\" alt=\"\" src=\"https://pd.w.org/2022/08/15062ed5f5707b5c5.85694718-2048x1536.jpg\" style=\"object-position:40% 37%\" data-object-fit=\"cover\" data-object-position=\"40% 37%\"/><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|base\"}}},\"spacing\":{\"blockGap\":\"10px\"}},\"textColor\":\"base\",\"layout\":{\"wideSize\":\"800px\"}} -->\n    <div class=\"wp-block-group has-base-color has-text-color has-link-color\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"10px\"}},\"textColor\":\"primary\",\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\",\"justifyContent\":\"center\"},\"fontSize\":\"small\"} -->\n    <div class=\"wp-block-group has-primary-color has-text-color has-small-font-size\"><!-- wp:post-date {\"textColor\":\"foreground\"} /-->\n    \n    <!-- wp:paragraph -->\n    <p>|</p>\n    <!-- /wp:paragraph -->\n    \n    <!-- wp:post-terms {\"term\":\"category\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|foreground\"}}}}} /--></div>\n    <!-- /wp:group -->\n    \n    <!-- wp:post-title {\"textAlign\":\"center\",\"level\":1,\"style\":{\"typography\":{\"fontStyle\":\"normal\",\"fontWeight\":\"400\"}},\"textColor\":\"foreground\",\"fontSize\":\"max-60\"} /--></div>\n    <!-- /wp:group --></div></div>\n    <!-- /wp:cover -->\n\n\n\nStep 3: For this demo, I have used this image from photos directory as a filler background image, and applied the Midnight duotone color. To use post featured image dynamically, we should add \"useFeaturedImage\":true in the cover block by replacing the above filler image link just before the \"dimRatio\":50 such that the line 10 should look like the following:\n\n\n\n<!-- wp:cover {\"useFeaturedImage\":true,\"dimRatio\":0,\"overlayColor\":\"foreground\",\"focalPoint\":{\"x\":\"0.40\",\"y\":\"0.37\"},\"minHeight\":50,\"minHeightUnit\":\"vh\",\"isDark\":false,\"align\":\"full\",\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#00a5ff\"]},\"spacing\":{\"margin\":{\"top\":\"0px\",\"bottom\":\"0px\"}}}} -->\n\n\n\nAlternatively, the filler image could also be changed by clicking Replace and selecting Use featured image option:\n\n\n\nScreenshot of the WordPress UI with ‘Replace’ and ‘Use featured image’ selected.\n\n\n\nNow, the header cover patterns should be visible in the patterns inserter panel for use anywhere in the templates, posts, and pages.\n\n\n\nArchive cover headers\n\n\n\nInspired by this WP Tavern post and a step-by-step walkthrough to create an author template header, I wanted to create a similar cover header and add to TT2 Gopher theme, too.\n\n\n\nFirst, let’s create the archive cover header pattern for author.html the template as well, following the above workflow. In this case, I am creating this in a new blank page, by adding blocks (as shown below in list view):\n\n\n\nScreenshot of the WordPress UI for an Author page using a single post header cover.\n\n\n\nIn the background for the cover, I used the same image used in the single post header cover.\n\n\n\nBecause we would like to display a short author biography on the author block, a biographical statement should also be added to the user profile page, or else a blank space will be displayed in the front-end.\n\n\n\nThe following is the markup code of the header-author-cover, that we will use pattern, in the next step:\n\n\n\n    <!-- wp:cover {\"url\":\"https://pd.w.org/2022/03/8256241eff74ef542.61868565.jpeg\",\"id\":226,\"dimRatio\":10,\"focalPoint\":{\"x\":\"0.50\",\"y\":\"0.75\"},\"minHeight\":200,\"minHeightUnit\":\"px\",\"isDark\":false,\"align\":\"full\",\"style\":{\"color\":{\"duotone\":[\"#000000\",\"#00a5ff\"]}}} -->\n    <div class=\"wp-block-cover alignfull is-light\" style=\"min-height:200px\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-background-dim-10 has-background-dim\"></span><img class=\"wp-block-cover__image-background wp-image-226\" alt=\"\" src=\"https://pd.w.org/2022/03/8256241eff74ef542.61868565.jpeg\" style=\"object-position:50% 75%\" data-object-fit=\"cover\" data-object-position=\"50% 75%\"/><div class=\"wp-block-cover__inner-container\"><!-- wp:group {\"layout\":{\"inherit\":true}} -->\n    <div class=\"wp-block-group\"><!-- wp:group {\"style\":{\"spacing\":{\"padding\":{\"top\":\"1rem\",\"right\":\"2rem\",\"bottom\":\"1rem\",\"left\":\"2rem\"}}},\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n    <div class=\"wp-block-group\" style=\"padding-top:1rem;padding-right:2rem;padding-bottom:1rem;padding-left:2rem\"><!-- wp:avatar {\"size\":70,\"isLink\":true,\"align\":\"right\",\"style\":{\"border\":{\"radius\":\"9999px\"}}} /-->\n    \n    <!-- wp:group -->\n    <div class=\"wp-block-group\"><!-- wp:group {\"style\":{\"spacing\":{\"blockGap\":\"6px\"}},\"layout\":{\"type\":\"flex\"},\"fontSize\":\"large\"} -->\n    <div class=\"wp-block-group has-large-font-size\"><!-- wp:paragraph {\"textColor\":\"foreground\",\"fontSize\":\"large\"} -->\n    <p class=\"has-foreground-color has-text-color has-large-font-size\">Published by:</p>\n    <!-- /wp:paragraph -->\n    \n    <!-- wp:post-author-name {\"isLink\":true,\"style\":{\"typography\":{\"fontStyle\":\"large\",\"fontWeight\":\"600\"},\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|background\"}}}},\"textColor\":\"foreground\"} /--></div>\n    <!-- /wp:group -->\n    \n    <!-- wp:post-author-biography {\"textColor\":\"foreground\",\"fontSize\":\"small\"} /-->\n    \n    <!-- wp:separator {\"backgroundColor\":\"foreground\"} -->\n    <hr class=\"wp-block-separator has-text-color has-foreground-color has-alpha-channel-opacity has-foreground-background-color has-background\"/>\n    <!-- /wp:separator --></div>\n    <!-- /wp:group --></div>\n    <!-- /wp:group --></div>\n    <!-- /wp:group --></div></div>\n    <!-- /wp:cover -->\n\n\n\nTo covert the markup into a header-author-cover pattern, we should add the required pattern file header markup as described earlier. By editing the header-author-cover.php pattern, we can create similar header covers for tags, taxonomy, and other custom templates.\n\n\n\nThe header-category-cover.php pattern for my category.html template is available on GitHub.\n\n\nCreating Templates with header cover blocks\n\n\nWordPress 6.0 and the recent Gutenberg 13.7 extended template creating features into the block editor, thus making it possible for many WordPress users, without deep knowledge of coding, to create their customized templates.\n\n\n\nFor more detailed information and use cases, here is a thorough customization note by Justin Tadlock.\n\n\n\nBlock editor allows creating various types of templates, including cover templates. Let’s briefly overview how combining cover block and post featured image block with new template UI makes easy to create various types of cover custom templates even with no or low coding skills.\n\n\n\nScreenshot of the WordPress UI displaying available templates provided by TT2 Gopher Blocks – Single, Page, Index, Home, 404, Blank, and Archive.\n\n\n\nCreating templates has been made much easier with Gutenberg 13.7. How to create block templates with codes and in site editor is described in the Theme handbook and in my previous article.\n\n\n\nAuthor template with cover block\n\n\n\nTop (header section) markup of the author.html template is shown below (line 6):\n\n\n\n    <!-- wp:template-part {\"slug\":\"header-small-dark\",\"theme\":\"TT2-GOPHER-V2\",\"tagName\":\"header\"} /-->\n    \n    <!-- wp:group {\"tagName\":\"main\",\"style\":{\"spacing\":{\"margin\":{\"top\":\"0\",\"bottom\":\"0px\"},\"padding\":{\"bottom\":\"80px\"},\"blockGap\":\"0px\"}},\"className\":\"site-content\"} -->\n    <main class=\"wp-block-group site-content\" style=\"margin-top:0;margin-bottom:0px;padding-bottom:80px\">\n    \n        <!-- wp:pattern {\"slug\":\"tt2gopher/header-author-cover\"} /-->\n    \n    ...\n    ...\n    ...\n    <!-- /wp:group -->\n    ...\n\n\n\nHere are screenshots of cover headers for the author.html and category.html templates:\n\n\n\nScreenshot of Author Page header (left) with author name, avatar, and biography. And screenshot of Category Page header (right).\n\n\n\nThe entire code for both templates is available on GitHub.\n\n\n\nSingle post with cover block\n\n\n\nTo display cover block in our single post, we have to call the header-cover-single pattern below the header section (line 3):\n\n\n\n    <!-- wp:template-part {\"slug\":\"header-small-dark\",\"tagName\":\"header\"} /-->\n    \n     <!-- wp:pattern {\"slug\":\"tt2gopher/header-cover-single\"} /-->\n    \n    <!-- wp:spacer {\"height\":32} -->\n    <div style=\"height:32px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n    <!-- /wp:spacer -->\n    ....\n    ....\n    ....\n\n\n\nHere is a screen capture showing the front-end view of the single post with the header cover section:\n\n\n\nScreenshot of TT2 Gopher Blocks Single Post with Header Cover Section Pattern.\n\n\n\nThe entire single-cover.html template is available on GitHub.\n\n\n\nYou can find additional step-by-step walkthrough tutorials on creating a hero header post section and using post featured image background cover blocks on WP Tavern and Full Site Editing website.\n\n\n\nThere you have it!\n\n\nHelpful Resources\n\nFeatured image cover block\n\n\nPost Featured Image Block (WordPress Support)Using the Post Featured Image with the Cover Block YouTube (Dave on WP)Cover Block Step by Step tutorial (WordPress Support)Featured Cover Blocks and the Future of Binding Data to Generic WordPress Blocks (WP Tavern)Custom Single Post Layouts with WordPress Gutenberg (Pootlepress)Makes cover block dynamic and adds featured image binding #39658 (GitHub)\n\n\nBlog posts\n\n\nFeatured Cover Blocks and the Future of Binding Data to Generic WordPress Blocks (WPTavern)Making an Impression: How To Build a Post Hero Header With Blocks (WPTavern)Core Editor Improvement: Deeper customization with more template options (Make WordPress Core)\n\n\n\n\n\n\n\nEven though the block themes, in general, are getting lots of pushback from WordPress community members, in my opinion, they are the future of WordPress, too. With block themes, amateur theme authors, without the deep coding skills and mastery of PHP and JavaScript languages, can now create themes with complex layouts with a hero cover section as described in this article combined with patterns and style variations.\n\n\n\nAs an early Gutenberg user, I couldn’t be more excited with the new theming tools like create block theme plugin and others which allow theme authors to achieve the following directly from block editor UI without writing any code:\n\n\n\n(i) create(ii) overwrite theme files and export(iii) generate blank or a child theme, and(iv) modify and save style variation of the current theme\n\n\n\nAdditionally, the recent iterations of the Gutenberg plugin allow enabling fluid typography and layout alignments and other stylistic controls using only theme.json file without JavaScript and a line of CSS rules.\n\n\n\nThank you for reading and share your comments and thoughts below!\n\nHow To Customize WordPress Block Theme Cover Templates with Dynamic Post Feature Images originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373057",
      "_extIcon": "https://css-tricks.com/wp-content/uploads/2022/08/maxresdefault-2.jpg",
      "date_published": "2022-09-23T16:15:19.000Z",
      "date_modified": "2022-09-23T16:15:19.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373652",
      "url": "https://css-tricks.com/the-web-is-good-now/",
      "title": "The Web is Good Now",
      "summary": "The video of Chris Coyier’s talk at CascadiaJS 2022 is now available. It’s his first in-person talk in more than two years, so it’s great to see our good friend back on stage slinging gems on what makes the web …\n\nThe Web is Good Now originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>The <a href=\"https://2022.cascadiajs.com/speakers/chris-coyier\" rel=\"noopener\">video</a> of Chris Coyier&#8217;s talk at <a href=\"https://2022.cascadiajs.com/\" rel=\"noopener\">CascadiaJS 2022</a> is now available. It&#8217;s his first in-person talk in more than two years, so it&#8217;s great to see our good friend back on stage slinging gems on what makes the web good these days.</p>\n\n\n\n<p>Container Queries! WAAPI! Scroll Timelines! <code>offset-path</code>! FLIP! Variable fonts! Fluid type! We really are <a href=\"https://css-tricks.com/the-all-powerful-front-end-developer/\">all-powerful front-end developers</a> these days.</p>\n\n\n\n<p>Chris really packs a bunch into a 25-minute slot. It feels good to pause for that brief amount of time to reflect on the great new things for building websites and celebrate the fact that we get to use them.</p>\n\n\n\n<p>And there&#8217;s nothing better than watching Chris greet the enture room as a bunch of &#8220;web nerds&#8221;. &#x1f913;</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"The Web is Good Now | Chris Coyier | CascadiaJS 2022\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/F18oy48jkrk?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n<p><a href=\"https://2022.cascadiajs.com/speakers/chris-coyier\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/the-web-is-good-now/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-web-is-good-now/\">The Web is Good Now</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "The video of Chris Coyier’s talk at CascadiaJS 2022 is now available. It’s his first in-person talk in more than two years, so it’s great to see our good friend back on stage slinging gems on what makes the web good these days.\n\n\n\nContainer Queries! WAAPI! Scroll Timelines! offset-path! FLIP! Variable fonts! Fluid type! We really are all-powerful front-end developers these days.\n\n\n\nChris really packs a bunch into a 25-minute slot. It feels good to pause for that brief amount of time to reflect on the great new things for building websites and celebrate the fact that we get to use them.\n\n\n\nAnd there’s nothing better than watching Chris greet the enture room as a bunch of “web nerds”. 🤓\n\n\n\n\n\n\nTo Shared Link — Permalink on CSS-Tricks\nThe Web is Good Now originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373652",
      "_extIcon": "https://css-tricks.com/wp-content/uploads/2022/09/hqdefault.jpg",
      "date_published": "2022-09-22T22:07:22.000Z",
      "date_modified": "2022-09-22T22:07:22.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373111",
      "url": "https://css-tricks.com/how-i-made-an-icon-system-out-of-css-custom-properties/",
      "title": "How I Made an Icon System Out of CSS Custom Properties",
      "summary": "SVG is the best format for icons on a website, there is no doubt about that. It allows you to have sharp icons no matter the screen pixel density, you can change the styles of the SVG on hover …\n\nHow I Made an Icon System Out of CSS Custom Properties originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>SVG is the best format for icons on a website, there is <a href=\"https://css-tricks.com/icon-fonts-vs-svg/\">no doubt about that</a>. It allows you to have sharp icons no matter the screen pixel density, you can change the styles of the SVG on hover and you can even animate the icons with CSS or JavaScript.</p>\n\n\n\n<p>There are many ways to include an SVG on a page and each technique has its own advantages and disadvantages. For the last couple of years, I have been using a Sass function to import directly my icons in my CSS and avoid having to mess up my HTML markup.</p>\n\n\n\n<span id=\"more-373111\"></span>\n\n\n\n<p>I have a Sass list with all the source codes of my icons. Each icon is then encoded into a data URI with a Sass function and stored in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\" rel=\"noopener\">custom property</a> on the root of the page.</p>\n\n\n<h3 id=\"tldr\"><abbr title=\"Too long; didn't read\">TL;DR</abbr></h3>\n\n\n<p>What I have for you here is a Sass function that creates a SVG icon library directly in your CSS.</p>\n\n\n\n<p>The SVG source code is compiled with the Sass function that encodes them in data URI and then stores the icons in CSS custom properties. You can then use any icon anywhere in your CSS like as if it was an external image.</p>\n\n\n\n<p>This is an example pulled straight from the code of my personal site:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"2\"><code markup=\"tt\">.c-filters__summary h2:after {\n  content: var(--svg-down-arrow);\n  position: relative;\n  top: 2px;\n  margin-left: auto;\n  animation: closeSummary .25s ease-out;\n}</code></pre>\n\n\n<h3 id=\"demo\">Demo</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNqKoad\" src=\"//codepen.io/anon/embed/oNqKoad?height=450&amp;theme-id=1&amp;slug-hash=oNqKoad&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNqKoad\" title=\"CodePen Embed oNqKoad\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"sass-structure\">Sass structure</h3>\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">/* All the icons source codes */\n$svg-icons: (\n  burger: '&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0...'\n);\n\n/* Sass function to encode the icons */\n@function svg($name) {\n  @return url('data:image/svg+xml, #{$encodedSVG} ');\n}\n\n/* Store each icon into a custom property */\n:root {\n  @each $name, $code in $svg-icons {\n    --svg-#{$name}: #{svg($name)};\n  }\n}\n\n/* Append a burger icon in my button */\n.menu::after {\n  content: var(--svg-burger);\n}\t\t</code></pre>\n\n\n\n<p>This technique has both pros and cons, so please take them into account before implementing this solution on your project:</p>\n\n\n<h4 id=\"pros\">Pros</h4>\n\n\n<ul><li>There are no HTTP requests for the SVG files.</li><li>All of the icons are stored in one place.</li><li>If you need to update an icon, you don&#8217;t have to go over each HTML templates file.</li><li>The icons are cached along with your CSS.</li><li>You can manually edit the source code of the icons.</li><li>It does not pollute your HTML by adding extra markup.</li><li>You can still change the color or some aspect of the icon with CSS.</li></ul>\n\n\n<h4 id=\"cons\">Cons</h4>\n\n\n<ul><li>You cannot animate or update a specific part of the SVG with CSS.</li><li>The more icons you have, the heavier your CSS compiled file will be.</li></ul>\n\n\n\n<p>I mostly use this technique for icons rather than logos or illustrations. An encoded SVG is always going to be heavier than its original file, so I still load my complex SVG with an external file either with an <code>&lt;img&gt;</code> tag or in my CSS with <code>url(path/to/file.svg)</code>.</p>\n\n\n<h3 id=\"encoding-svg-into-data-uri\">Encoding SVG into data URI</h3>\n\n\n<p>Encoding your SVG as data URIs is not new. In fact <a href=\"https://css-tricks.com/data-uris/\">Chris Coyier wrote a post</a> about it over 10 years ago to explain how to use this technique and why you should (or should not) use it.</p>\n\n\n\n<p>There are two ways to use an SVG in your CSS with data URI:</p>\n\n\n\n<ul><li>As an external image (using <code>background-image,</code>border-image<code>,</code>list-style-image,&#8230;)</li><li>As the content of a pseudo element (e.g. <code>::before</code> or <code>::after</code>)</li></ul>\n\n\n\n<p>Here is a basic example showing how you how to use those two methods:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwXorYz\" src=\"//codepen.io/anon/embed/VwXorYz?height=450&amp;theme-id=1&amp;slug-hash=VwXorYz&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwXorYz\" title=\"CodePen Embed VwXorYz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The main issue with this particular implementation is that you have to convert the SVG manually every time you need a new icon and it is not really pleasant to have this long string of unreadable code in your CSS.</p>\n\n\n\n<p>This is where Sass comes to the rescue!</p>\n\n\n<h3 id=\"using-a-sass-function\">Using a Sass function</h3>\n\n\n<p>By using Sass, we can make our life simpler by copying the source code of our SVG directly in our codebase, letting Sass encode them properly to avoid any browser error.</p>\n\n\n\n<p>This solution is mostly inspired by an existing function developed by Threespot Media and available in <a href=\"https://github.com/Threespot/frontline-sass/blob/master/src/functions/_svg-url.scss\" rel=\"noopener\">their repository</a>.</p>\n\n\n\n<p>Here are the four steps of this technique:</p>\n\n\n\n<ul><li>Create a variable with all your SVG icons listed.</li><li>List all the characters that needs to be skipped for a data URI.</li><li>Implement a function to encode the SVGs to a data URI format.</li><li>Use your function in your code.</li></ul>\n\n\n<h4 id=\"1-icons-list\">1. Icons list</h4>\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">/**\n* Add all the icons of your project in this Sass list\n*/\n$svg-icons: (\n  burger: '&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24.8 18.92\" width=\"24.8\" height=\"18.92\">&lt;path d=\"M23.8,9.46H1m22.8,8.46H1M23.8,1H1\" fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-width=\"2\"/>&lt;/svg>'\n);</code></pre>\n\n\n<h4 id=\"2-list-of-escaped-characters\">2. List of escaped characters</h4>\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss escape-chars\" data-line=\"\"><code markup=\"tt\">/**\n* Characters to escape from SVGs\n* This list allows you to have inline CSS in your SVG code as well\n*/\n$fs-escape-chars: (\n  ' ': '%20',\n  '\\'': '%22',\n  '\"': '%27',\n  '#': '%23',\n  '/': '%2F',\n  ':': '%3A',\n  '(': '%28',\n  ')': '%29',\n  '%': '%25',\n  '&lt;': '%3C',\n  '>': '%3E',\n  '\\\\': '%5C',\n  '^': '%5E',\n  '{': '%7B',\n  '|': '%7C',\n  '}': '%7D',\n);</code></pre>\n\n\n<h4 id=\"3-encode-function\">3. Encode function</h4>\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">/**\n* You can call this function by using `svg(nameOfTheSVG)`\n*/\n@function svg($name) {\n  // Check if icon exists\n  @if not map-has-key($svg-icons, $name) {\n    @error 'icon “#{$name}” does not exists in $svg-icons map';\n    @return false;\n  }\n\n  // Get icon data\n  $icon-map: map-get($svg-icons, $name);\n\n  $escaped-string: '';\n  $unquote-icon: unquote($icon-map);\n  // Loop through each character in string\n  @for $i from 1 through str-length($unquote-icon) {\n    $char: str-slice($unquote-icon, $i, $i);\n\n    // Check if character is in symbol map\n    $char-lookup: map-get($fs-escape-chars, $char);\n\n    // If it is, use escaped version\n    @if $char-lookup != null {\n        $char: $char-lookup;\n    }\n\n    // Append character to escaped string\n    $escaped-string: $escaped-string + $char;\n  }\n\n  // Return inline SVG data\n  @return url('data:image/svg+xml, #{$escaped-string} ');\n}\t\t</code></pre>\n\n\n<h4 id=\"4-add-an-svg-in-your-page\">4. Add an SVG in your page</h4>\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">button {\n  &amp;::after {\n    /* Import inline SVG */\n    content: svg(burger);\n  }\n}</code></pre>\n\n\n\n<p>If you have followed those steps, Sass should compile your code properly and output the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">button::after {\n  content: url(\"data:image/svg+xml, %3Csvg%20xmlns=%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox=%270%200%2024.8%2018.92%27%20width=%2724.8%27%20height=%2718.92%27%3E%3Cpath%20d=%27M23.8,9.46H1m22.8,8.46H1M23.8,1H1%27%20fill=%27none%27%20stroke=%27%23000%27%20stroke-linecap=%27round%27%20stroke-width=%272%27%2F%3E%3C%2Fsvg%3E \");\n}\t\t</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZExgayQ\" src=\"//codepen.io/anon/embed/ZExgayQ?height=450&amp;theme-id=1&amp;slug-hash=ZExgayQ&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZExgayQ\" title=\"CodePen Embed ZExgayQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"custom-properties\">Custom properties</h3>\n\n\n<p>The now-implemented Sass <code>svg()</code> function works great. But its biggest flaw is that an icon that is needed in multiple places in your code will be duplicated and could increase your compiled CSS file weight by a lot!</p>\n\n\n\n<p>To avoid this, we can store all our icons into <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">CSS variables</a> and use a reference to the variable instead of outputting the encoded URI every time.</p>\n\n\n\n<p>We will keep the same code we had before, but this time we will first output all the icons from the Sass list into the root of our webpage:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">/**\n  * Convert all icons into custom properties\n  * They will be available to any HTML tag since they are attached to the :root\n  */\n\n:root {\n  @each $name, $code in $svg-icons {\n    --svg-#{$name}: #{svg($name)};\n  }\n}</code></pre>\n\n\n\n<p>Now, instead of calling the <code>svg()</code> function every time we need an icon, we have to use the variable that was created with the <code>--svg</code> prefix.</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">button::after {\n  /* Import inline SVG */\n  content: var(--svg-burger);\n}</code></pre>\n\n\n<h3 id=\"optimizing-your-svgs\">Optimizing your SVGs</h3>\n\n\n<p>This technique does not provide any optimization on the source code of the SVG you are using. Make sure that you don&#8217;t leave unnecessary code; otherwise they will be encoded as well and will increase your CSS file size.</p>\n\n\n\n<p>You can check <a href=\"https://css-tricks.com/tools-for-optimizing-svg/\">this great list</a> of tools and information on how to optimize properly your SVG. My favorite tool is Jake Archibald&#8217;s <a href=\"https://jakearchibald.github.io/svgomg/\" rel=\"noopener\">SVGOMG</a> — simply drag your file in there and copy the outputted code.</p>\n\n\n<h3 id=\"bonus-updating-the-icon-on-hover\">Bonus: Updating the icon on hover</h3>\n\n\n<p>With this technique, we cannot select with CSS specific parts of the SVG. For example, there is no way to change the <code>fill</code> color of the icon when the user hovers the button. But there are a few tricks we can use with CSS to still be able to modify the look of our icon.</p>\n\n\n\n<p>For example, if you have a black icon and you want to have it white on hover, you can use the <code>invert()</code> CSS filter. We can also play with the <code>hue-rotate()</code> filter.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYdwQjp/e15ebb181a5972921dc0640525992ba6\" src=\"//codepen.io/anon/embed/LYdwQjp/e15ebb181a5972921dc0640525992ba6?height=450&amp;theme-id=1&amp;slug-hash=LYdwQjp/e15ebb181a5972921dc0640525992ba6&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYdwQjp/e15ebb181a5972921dc0640525992ba6\" title=\"CodePen Embed LYdwQjp/e15ebb181a5972921dc0640525992ba6\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"bonus-2-updating-the-i\">Bonus #2: Updating the icon using CSS mask-image property</h3>\n\n\n<p>Another trick to be able to change the color of your icon, is to use it as a mask on your pseudo-element with a background. Set your pseudo-element as <code>inline-block</code> with a <code>background-color</code> and define a <code>width</code> &amp; <code>height</code> for the size needed.</p>\n\n\n\n<p>Once you have a rectangle with the color needed, apply those four values to only keep the shape of the SVG needed:</p>\n\n\n\n<ul><li><strong><code>mask-image: var(--svg-burger)</code>:</strong> The reference to our icon.</li><li><strong><code>mask-repeat: no-repeat</code>:</strong> To prevent the mask to be duplicated.</li><li><strong><code>mask-size: contain</code>:</strong> To make the icon fit perfectly in the rectangle.</li><li><strong><code>mask-position: center</code>:</strong> To center our icon in the pseudo-element.</li></ul>\n\n\n\n<p>Don&#8217;t forget that all CSS <code>mask</code> properties still need to be prefixed with <code>-webkit-</code> for most browsers as of September 2022.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYmejea\" src=\"//codepen.io/anon/embed/LYmejea?height=450&amp;theme-id=1&amp;slug-hash=LYmejea&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYmejea\" title=\"CodePen Embed LYmejea\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Thanks to <a href=\"#comment-1797187\">Christopher</a> and <a href=\"#comment-1797209\">Mike</a> for letting me know about this trick in the comments!</p>\n\n\n<h3 id=\"thats-it\">That&#8217;s it!</h3>\n\n\n<p>I hope you find this little helper function handy in your own projects. Let me know what you think of the approach — I&#8217;d be interested to know how you&#8217;d make this better or tackle it differently!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-i-made-an-icon-system-out-of-css-custom-properties/\">How I Made an Icon System Out of CSS Custom Properties</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "SVG is the best format for icons on a website, there is no doubt about that. It allows you to have sharp icons no matter the screen pixel density, you can change the styles of the SVG on hover and you can even animate the icons with CSS or JavaScript.\n\n\n\nThere are many ways to include an SVG on a page and each technique has its own advantages and disadvantages. For the last couple of years, I have been using a Sass function to import directly my icons in my CSS and avoid having to mess up my HTML markup.\n\n\n\n\n\n\n\nI have a Sass list with all the source codes of my icons. Each icon is then encoded into a data URI with a Sass function and stored in a custom property on the root of the page.\n\n\nTL;DR\n\n\nWhat I have for you here is a Sass function that creates a SVG icon library directly in your CSS.\n\n\n\nThe SVG source code is compiled with the Sass function that encodes them in data URI and then stores the icons in CSS custom properties. You can then use any icon anywhere in your CSS like as if it was an external image.\n\n\n\nThis is an example pulled straight from the code of my personal site:\n\n\n\n.c-filters__summary h2:after {\n  content: var(--svg-down-arrow);\n  position: relative;\n  top: 2px;\n  margin-left: auto;\n  animation: closeSummary .25s ease-out;\n}\n\n\nDemo\n\n\nCodePen Embed Fallback\n\n\nSass structure\n\n\n/* All the icons source codes */\n$svg-icons: (\n  burger: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0...'\n);\n\n/* Sass function to encode the icons */\n@function svg($name) {\n  @return url('data:image/svg+xml, #{$encodedSVG} ');\n}\n\n/* Store each icon into a custom property */\n:root {\n  @each $name, $code in $svg-icons {\n    --svg-#{$name}: #{svg($name)};\n  }\n}\n\n/* Append a burger icon in my button */\n.menu::after {\n  content: var(--svg-burger);\n}\t\t\n\n\n\nThis technique has both pros and cons, so please take them into account before implementing this solution on your project:\n\n\nPros\n\n\nThere are no HTTP requests for the SVG files.All of the icons are stored in one place.If you need to update an icon, you don’t have to go over each HTML templates file.The icons are cached along with your CSS.You can manually edit the source code of the icons.It does not pollute your HTML by adding extra markup.You can still change the color or some aspect of the icon with CSS.\n\n\nCons\n\n\nYou cannot animate or update a specific part of the SVG with CSS.The more icons you have, the heavier your CSS compiled file will be.\n\n\n\nI mostly use this technique for icons rather than logos or illustrations. An encoded SVG is always going to be heavier than its original file, so I still load my complex SVG with an external file either with an <img> tag or in my CSS with url(path/to/file.svg).\n\n\nEncoding SVG into data URI\n\n\nEncoding your SVG as data URIs is not new. In fact Chris Coyier wrote a post about it over 10 years ago to explain how to use this technique and why you should (or should not) use it.\n\n\n\nThere are two ways to use an SVG in your CSS with data URI:\n\n\n\nAs an external image (using background-image,border-image,list-style-image,…)As the content of a pseudo element (e.g. ::before or ::after)\n\n\n\nHere is a basic example showing how you how to use those two methods:\n\n\n\nCodePen Embed Fallback\n\n\n\nThe main issue with this particular implementation is that you have to convert the SVG manually every time you need a new icon and it is not really pleasant to have this long string of unreadable code in your CSS.\n\n\n\nThis is where Sass comes to the rescue!\n\n\nUsing a Sass function\n\n\nBy using Sass, we can make our life simpler by copying the source code of our SVG directly in our codebase, letting Sass encode them properly to avoid any browser error.\n\n\n\nThis solution is mostly inspired by an existing function developed by Threespot Media and available in their repository.\n\n\n\nHere are the four steps of this technique:\n\n\n\nCreate a variable with all your SVG icons listed.List all the characters that needs to be skipped for a data URI.Implement a function to encode the SVGs to a data URI format.Use your function in your code.\n\n\n1. Icons list\n\n\n/**\n* Add all the icons of your project in this Sass list\n*/\n$svg-icons: (\n  burger: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24.8 18.92\" width=\"24.8\" height=\"18.92\"><path d=\"M23.8,9.46H1m22.8,8.46H1M23.8,1H1\" fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>'\n);\n\n\n2. List of escaped characters\n\n\n/**\n* Characters to escape from SVGs\n* This list allows you to have inline CSS in your SVG code as well\n*/\n$fs-escape-chars: (\n  ' ': '%20',\n  '\\'': '%22',\n  '\"': '%27',\n  '#': '%23',\n  '/': '%2F',\n  ':': '%3A',\n  '(': '%28',\n  ')': '%29',\n  '%': '%25',\n  '<': '%3C',\n  '>': '%3E',\n  '\\\\': '%5C',\n  '^': '%5E',\n  '{': '%7B',\n  '|': '%7C',\n  '}': '%7D',\n);\n\n\n3. Encode function\n\n\n/**\n* You can call this function by using `svg(nameOfTheSVG)`\n*/\n@function svg($name) {\n  // Check if icon exists\n  @if not map-has-key($svg-icons, $name) {\n    @error 'icon “#{$name}” does not exists in $svg-icons map';\n    @return false;\n  }\n\n  // Get icon data\n  $icon-map: map-get($svg-icons, $name);\n\n  $escaped-string: '';\n  $unquote-icon: unquote($icon-map);\n  // Loop through each character in string\n  @for $i from 1 through str-length($unquote-icon) {\n    $char: str-slice($unquote-icon, $i, $i);\n\n    // Check if character is in symbol map\n    $char-lookup: map-get($fs-escape-chars, $char);\n\n    // If it is, use escaped version\n    @if $char-lookup != null {\n        $char: $char-lookup;\n    }\n\n    // Append character to escaped string\n    $escaped-string: $escaped-string + $char;\n  }\n\n  // Return inline SVG data\n  @return url('data:image/svg+xml, #{$escaped-string} ');\n}\t\t\n\n\n4. Add an SVG in your page\n\n\nbutton {\n  &::after {\n    /* Import inline SVG */\n    content: svg(burger);\n  }\n}\n\n\n\nIf you have followed those steps, Sass should compile your code properly and output the following:\n\n\n\nbutton::after {\n  content: url(\"data:image/svg+xml, %3Csvg%20xmlns=%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox=%270%200%2024.8%2018.92%27%20width=%2724.8%27%20height=%2718.92%27%3E%3Cpath%20d=%27M23.8,9.46H1m22.8,8.46H1M23.8,1H1%27%20fill=%27none%27%20stroke=%27%23000%27%20stroke-linecap=%27round%27%20stroke-width=%272%27%2F%3E%3C%2Fsvg%3E \");\n}\t\t\n\n\n\nCodePen Embed Fallback\n\n\nCustom properties\n\n\nThe now-implemented Sass svg() function works great. But its biggest flaw is that an icon that is needed in multiple places in your code will be duplicated and could increase your compiled CSS file weight by a lot!\n\n\n\nTo avoid this, we can store all our icons into CSS variables and use a reference to the variable instead of outputting the encoded URI every time.\n\n\n\nWe will keep the same code we had before, but this time we will first output all the icons from the Sass list into the root of our webpage:\n\n\n\n/**\n  * Convert all icons into custom properties\n  * They will be available to any HTML tag since they are attached to the :root\n  */\n\n:root {\n  @each $name, $code in $svg-icons {\n    --svg-#{$name}: #{svg($name)};\n  }\n}\n\n\n\nNow, instead of calling the svg() function every time we need an icon, we have to use the variable that was created with the --svg prefix.\n\n\n\nbutton::after {\n  /* Import inline SVG */\n  content: var(--svg-burger);\n}\n\n\nOptimizing your SVGs\n\n\nThis technique does not provide any optimization on the source code of the SVG you are using. Make sure that you don’t leave unnecessary code; otherwise they will be encoded as well and will increase your CSS file size.\n\n\n\nYou can check this great list of tools and information on how to optimize properly your SVG. My favorite tool is Jake Archibald’s SVGOMG — simply drag your file in there and copy the outputted code.\n\n\nBonus: Updating the icon on hover\n\n\nWith this technique, we cannot select with CSS specific parts of the SVG. For example, there is no way to change the fill color of the icon when the user hovers the button. But there are a few tricks we can use with CSS to still be able to modify the look of our icon.\n\n\n\nFor example, if you have a black icon and you want to have it white on hover, you can use the invert() CSS filter. We can also play with the hue-rotate() filter.\n\n\n\nCodePen Embed Fallback\n\n\nBonus #2: Updating the icon using CSS mask-image property\n\n\nAnother trick to be able to change the color of your icon, is to use it as a mask on your pseudo-element with a background. Set your pseudo-element as inline-block with a background-color and define a width & height for the size needed.\n\n\n\nOnce you have a rectangle with the color needed, apply those four values to only keep the shape of the SVG needed:\n\n\n\nmask-image: var(--svg-burger): The reference to our icon.mask-repeat: no-repeat: To prevent the mask to be duplicated.mask-size: contain: To make the icon fit perfectly in the rectangle.mask-position: center: To center our icon in the pseudo-element.\n\n\n\nDon’t forget that all CSS mask properties still need to be prefixed with -webkit- for most browsers as of September 2022.\n\n\n\nCodePen Embed Fallback\n\n\n\nThanks to Christopher and Mike for letting me know about this trick in the comments!\n\n\nThat’s it!\n\n\nI hope you find this little helper function handy in your own projects. Let me know what you think of the approach — I’d be interested to know how you’d make this better or tackle it differently!\n\nHow I Made an Icon System Out of CSS Custom Properties originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373111",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-22T15:17:21.000Z",
      "date_modified": "2022-09-22T15:17:21.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373639",
      "url": "https://css-tricks.com/css-rules-vs-css-rulesets/",
      "title": "CSS Rules vs. CSS Rulesets",
      "summary": "The latest spec:\n\nA style rule is a qualified rule that associates a selector list with a list of property declarations and possibly a list of nested rules. They are also called rule sets in CSS2.\n\nLouis Lazaris:\n\nAs the above quote from W3C indicates, it seems \n\n…\n\nCSS Rules vs. CSS Rulesets originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p><a href=\"https://www.w3.org/TR/css-syntax-3/#style-rules\" rel=\"noopener\">The latest spec</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A&nbsp;<dfn>style rule</dfn>&nbsp;is a&nbsp;qualified rule&nbsp;that associates a&nbsp;selector list&nbsp;with a list of property declarations and possibly a list of nested rules. They are also called&nbsp;rule sets&nbsp;in&nbsp;CSS2.</p></blockquote>\n\n\n\n<p><a href=\"https://www.impressivewebs.com/css-rules-vs-css-rulesets/\" rel=\"noopener\">Louis Lazaris</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>As the above quote from W3C indicates, it seems like the W3C considers “rule set” to be a bit of an outdated term, preferring the term “style rule” (or possibly “rule” for short).</p></blockquote>\n\n\n\n<span id=\"more-373639\"></span>\n\n\n\n<p>I never noticed that! &#8220;Rule set&#8221; is so gosh darned branded on my brain that it&#8217;s gonan take losing a lot of muscle memory to start using &#8220;style rule&#8221; instead. I didn&#8217;t see a specific note in the spec&#8217;s <a href=\"https://www.w3.org/TR/css-syntax-3/#changes\" rel=\"noopener\">Changes</a> section, but you can see the change in the table of contents between versions:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1384\" height=\"704\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?resize=1384%2C704&#038;ssl=1\" alt=\"Side-by-side screenshot comparing the table of contents for both the CSS 2 and CSS 3 specifications.\" class=\"wp-image-373640\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?w=1384&amp;ssl=1 1384w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?resize=300%2C153&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?resize=1024%2C521&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?resize=768%2C391&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Louis nicely sums up the parts of a style rule as well:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Everything below is a style rule (or rule set, or just rule) */\nsection { /* Everything between the braces is a declaration block */\n  margin: 0 20px; /* This line is an individual declaration */\n  color: #888; /* Another declaration */\n}</code></pre>\n\n\n\n<p>I know nothing of the context and, at first, I was gonna poo-poo the change, but &#8220;style rule&#8221; really makes sense the more I sit with it. If the property:value pairs are<em> declarations</em> that sit in a <em>declaration block</em>, then we&#8217;ve got something less like a set of rules and more like one rule that defines the styles for a selector with a block of style declarations. &#x1f44c;</p>\n\n\n\n<p>Once again, <a href=\"https://css-tricks.com/naming-things-is-only-getting-harder/\">naming things is hard</a>.</p>\n<p><a href=\"https://www.impressivewebs.com/css-rules-vs-css-rulesets/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/css-rules-vs-css-rulesets/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-rules-vs-css-rulesets/\">CSS Rules vs. CSS Rulesets</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "The latest spec:\n\n\n\nA style rule is a qualified rule that associates a selector list with a list of property declarations and possibly a list of nested rules. They are also called rule sets in CSS2.\n\n\n\nLouis Lazaris:\n\n\n\nAs the above quote from W3C indicates, it seems like the W3C considers “rule set” to be a bit of an outdated term, preferring the term “style rule” (or possibly “rule” for short).\n\n\n\n\n\n\n\nI never noticed that! “Rule set” is so gosh darned branded on my brain that it’s gonan take losing a lot of muscle memory to start using “style rule” instead. I didn’t see a specific note in the spec’s Changes section, but you can see the change in the table of contents between versions:\n\n\n\n\n\n\n\nLouis nicely sums up the parts of a style rule as well:\n\n\n\n/* Everything below is a style rule (or rule set, or just rule) */\nsection { /* Everything between the braces is a declaration block */\n  margin: 0 20px; /* This line is an individual declaration */\n  color: #888; /* Another declaration */\n}\n\n\n\nI know nothing of the context and, at first, I was gonna poo-poo the change, but “style rule” really makes sense the more I sit with it. If the property:value pairs are declarations that sit in a declaration block, then we’ve got something less like a set of rules and more like one rule that defines the styles for a selector with a block of style declarations. 👌\n\n\n\nOnce again, naming things is hard.\nTo Shared Link — Permalink on CSS-Tricks\nCSS Rules vs. CSS Rulesets originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373639",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-21T21:53:44.000Z",
      "date_modified": "2022-09-21T21:53:44.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373167",
      "url": "https://css-tricks.com/css-checkerboard-background-but-with-rounded-corners-and-hover-styles/",
      "title": "CSS Checkerboard Background… But With Rounded Corners and Hover Styles",
      "summary": "On one hand, creating simple checkered backgrounds with CSS is easy. On the other hand, though, unless we are one of the CSS-gradient-ninjas, we are kind of stuck with basic patterns.\nAt least that’s what I thought while staring at …\n\nCSS Checkerboard Background… But With Rounded Corners and Hover Styles originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>On one hand, creating simple checkered backgrounds with CSS is easy. On the other hand, though, unless we are one of the CSS-gradient-ninjas, we are kind of stuck with basic patterns.</p>\n\n\n\n<p>At least that’s what I thought while staring at the checkered background on my screen and trying to round those corners of the squares just a little…until I remembered my favorite bullet point glyph — <code>✦</code> — and figured that if only I could place it over every intersection in the pattern, I’ll surely get the design I want.</p>\n\n\n\n<p>Turns out it&#8217;s possible! Here’s the proof.</p>\n\n\n\n<span id=\"more-373167\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKoOOGv\" src=\"//codepen.io/anon/embed/KKoOOGv?height=550&amp;theme-id=1&amp;slug-hash=KKoOOGv&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKoOOGv\" title=\"CodePen Embed KKoOOGv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Let’s start with the basic pattern:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div>&lt;/div></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div {\n background: \n  repeating-linear-gradient(\n    to right, transparent, \n    transparent 50px, \n    white 50px, \n    white 55px\n  ),\n  repeating-linear-gradient(\n    to bottom, transparent,  \n    transparent 50px, \n    white 50px, \n    white 55px\n  ),\n  linear-gradient(45deg, pink, skyblue);\n  /* more styles */\n}</code></pre>\n\n\n\n<p>What that gives us is a repeating background of squares that go from pink to blue with <code>5px</code> white gaps between them. Each square is fifty pixels wide and transparent. This is created using <a href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/#h-repeating-gradients\"><code>repeating-linear-gradient</code></a>, which creates a linear gradient image where the gradient repeats throughout the containing area.</p>\n\n\n\n<p>In other words, the first gradient in that sequence creates white horizontal stripes and the second gradient creates white vertical stripes. Layered together, they form the checkered pattern, and the third gradient fills in the rest of the space.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abGzjrd\" src=\"//codepen.io/anon/embed/abGzjrd?height=550&amp;theme-id=1&amp;slug-hash=abGzjrd&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abGzjrd\" title=\"CodePen Embed abGzjrd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now we add the star glyph I mentioned earlier, on top of the background pattern. We can do that by including it on the same <code>background</code> property as the gradients while using an encoded SVG for the shape:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4,5,6,7,8,9,10\"><code markup=\"tt\">div {\n  background: \n    repeat left -17px top -22px/55px 55px\n    url(\"data:image/svg+xml,\n    &lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 35px 35px'>\n      &lt;foreignObject width='35px' height='35px'>\n        &lt;div xmlns='http://www.w3.org/1999/xhtml' style='color: white; font-size: 35px'>✦&lt;/div>\n      &lt;/foreignObject>\n    &lt;/svg>\"\n    ), \n    repeating-linear-gradient(\n      to right, transparent,\n      transparent 50px,\n      white 50px,\n      white 55px\n    ),\n    repeating-linear-gradient(\n      to bottom, transparent,\n      transparent 50px,\n      white 50px,\n      white 55px\n    ),\n    linear-gradient(45deg, pink, skyblue);\n  /* more style */\n}</code></pre>\n\n\n\n<p>Let’s break that down. The first keyword, <code>repeat</code>, denotes that this is a repeating background image. Followed by that is the position and size of each repeating unit, respectively (<code>left -17px top -22px/55px 55px</code>). This offset position is based on the glyph and pattern’s size. You’ll see below how the glyph size is given. The offset is added to re-position the repeating glyph exactly over each intersection in the checkered pattern.</p>\n\n\n\n<p>The SVG has an HTML <code>&lt;div&gt;</code> carrying the glyph. Notice that I declared a <code>font-size</code> on it. That ultimately determines the border radius of the squares in the checkerboard pattern — the bigger the glyph, the more rounded the squares. The unrolled SVG from the data URL looks like this:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 35px 35px'>\n  &lt;foreignObject width='35px' height='35px'>\n    &lt;div xmlns='http://www.w3.org/1999/xhtml' style='color:white;font-size:35px'>✦&lt;/div>\n  &lt;/foreignObject>\n&lt;/svg></code></pre>\n\n\n\n<p>Now that a CSS pattern is established, let’s add a <code>:hover</code> effect where the glyph is removed and the white lines are made slightly translucent by using <code>rgb()</code> color values with alpha transparency.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div:hover {\n  background:\n    repeating-linear-gradient(\n      to right, transparent,\n      transparent 50px,\n      rgb(255 255 255 / 0.5) 50px,\n      rgb(255 255 255 / 0.5) 55px\n    ),\n    repeating-linear-gradient(\n      to bottom, transparent,\n      transparent 50px,\n      rgb(255 255 255 / 0.5) 50px,\n      rgb(255 255 255 / 0.5) 55px\n    ),\n  linear-gradient(45deg, pink, skyblue);\n  box-shadow: 10px 10px 20px pink;\n}</code></pre>\n\n\n\n<p>There we go! Now, not only do we have our rounded corners, but we also have more control control over the pattern for effects like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKoOOGv\" src=\"//codepen.io/anon/embed/KKoOOGv?height=600&amp;theme-id=1&amp;slug-hash=KKoOOGv&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKoOOGv\" title=\"CodePen Embed KKoOOGv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Again, this whole exercise was an attempt to get a grid of squares in a checkerboard pattern that supports rounded corners, a background gradient that serves as an overlay across the pattern, and interactive styles. I think this accomplishes the task quite well, but I’m also interested in how you might’ve approached it. Let me know in the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-checkerboard-background-but-with-rounded-corners-and-hover-styles/\">CSS Checkerboard Background&#8230; But With Rounded Corners and Hover Styles</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "On one hand, creating simple checkered backgrounds with CSS is easy. On the other hand, though, unless we are one of the CSS-gradient-ninjas, we are kind of stuck with basic patterns.\n\n\n\nAt least that’s what I thought while staring at the checkered background on my screen and trying to round those corners of the squares just a little…until I remembered my favorite bullet point glyph — ✦ — and figured that if only I could place it over every intersection in the pattern, I’ll surely get the design I want.\n\n\n\nTurns out it’s possible! Here’s the proof.\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\n\nLet’s start with the basic pattern:\n\n\n\n<div></div>\n\n\n\ndiv {\n background: \n  repeating-linear-gradient(\n    to right, transparent, \n    transparent 50px, \n    white 50px, \n    white 55px\n  ),\n  repeating-linear-gradient(\n    to bottom, transparent,  \n    transparent 50px, \n    white 50px, \n    white 55px\n  ),\n  linear-gradient(45deg, pink, skyblue);\n  /* more styles */\n}\n\n\n\nWhat that gives us is a repeating background of squares that go from pink to blue with 5px white gaps between them. Each square is fifty pixels wide and transparent. This is created using repeating-linear-gradient, which creates a linear gradient image where the gradient repeats throughout the containing area.\n\n\n\nIn other words, the first gradient in that sequence creates white horizontal stripes and the second gradient creates white vertical stripes. Layered together, they form the checkered pattern, and the third gradient fills in the rest of the space.\n\n\n\nCodePen Embed Fallback\n\n\n\nNow we add the star glyph I mentioned earlier, on top of the background pattern. We can do that by including it on the same background property as the gradients while using an encoded SVG for the shape:\n\n\n\ndiv {\n  background: \n    repeat left -17px top -22px/55px 55px\n    url(\"data:image/svg+xml,\n    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 35px 35px'>\n      <foreignObject width='35px' height='35px'>\n        <div xmlns='http://www.w3.org/1999/xhtml' style='color: white; font-size: 35px'>✦</div>\n      </foreignObject>\n    </svg>\"\n    ), \n    repeating-linear-gradient(\n      to right, transparent,\n      transparent 50px,\n      white 50px,\n      white 55px\n    ),\n    repeating-linear-gradient(\n      to bottom, transparent,\n      transparent 50px,\n      white 50px,\n      white 55px\n    ),\n    linear-gradient(45deg, pink, skyblue);\n  /* more style */\n}\n\n\n\nLet’s break that down. The first keyword, repeat, denotes that this is a repeating background image. Followed by that is the position and size of each repeating unit, respectively (left -17px top -22px/55px 55px). This offset position is based on the glyph and pattern’s size. You’ll see below how the glyph size is given. The offset is added to re-position the repeating glyph exactly over each intersection in the checkered pattern.\n\n\n\nThe SVG has an HTML <div> carrying the glyph. Notice that I declared a font-size on it. That ultimately determines the border radius of the squares in the checkerboard pattern — the bigger the glyph, the more rounded the squares. The unrolled SVG from the data URL looks like this:\n\n\n\n<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 35px 35px'>\n  <foreignObject width='35px' height='35px'>\n    <div xmlns='http://www.w3.org/1999/xhtml' style='color:white;font-size:35px'>✦</div>\n  </foreignObject>\n</svg>\n\n\n\nNow that a CSS pattern is established, let’s add a :hover effect where the glyph is removed and the white lines are made slightly translucent by using rgb() color values with alpha transparency.\n\n\n\ndiv:hover {\n  background:\n    repeating-linear-gradient(\n      to right, transparent,\n      transparent 50px,\n      rgb(255 255 255 / 0.5) 50px,\n      rgb(255 255 255 / 0.5) 55px\n    ),\n    repeating-linear-gradient(\n      to bottom, transparent,\n      transparent 50px,\n      rgb(255 255 255 / 0.5) 50px,\n      rgb(255 255 255 / 0.5) 55px\n    ),\n  linear-gradient(45deg, pink, skyblue);\n  box-shadow: 10px 10px 20px pink;\n}\n\n\n\nThere we go! Now, not only do we have our rounded corners, but we also have more control control over the pattern for effects like this:\n\n\n\nCodePen Embed Fallback\n\n\n\nAgain, this whole exercise was an attempt to get a grid of squares in a checkerboard pattern that supports rounded corners, a background gradient that serves as an overlay across the pattern, and interactive styles. I think this accomplishes the task quite well, but I’m also interested in how you might’ve approached it. Let me know in the comments!\n\nCSS Checkerboard Background… But With Rounded Corners and Hover Styles originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373167",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-20T13:19:24.000Z",
      "date_modified": "2022-09-20T13:19:24.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373184",
      "url": "https://css-tricks.com/making-a-real-time-clock-with-a-conic-gradient-face/",
      "title": "Making a Real-Time Clock With a Conic Gradient Face",
      "summary": "Gradients have been a part of the CSS spectrum for quite some time now. We see a lot of radial and linear gradients in a lot of projects, but there is one type of gradient that seems to be a …\n\nMaking a Real-Time Clock With a Conic Gradient Face originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Gradients have been a part of the CSS spectrum for quite some time now. We see a lot of radial and linear gradients in a lot of projects, but there is one type of gradient that seems to be a bit lonely: <a href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/#aa-conic-css-gradients\">the conic gradient</a>. We&#8217;re going to make a watch face using this type of gradient.</p>\n\n\n\n<span id=\"more-373184\"></span>\n\n\n<h3 id=\"working-with-conic-gradients\">Working with conic gradients</h3>\n\n\n<p>What we&#8217;re making consists of a gradient with color transitions rotated around a center point and can have multiple color values. For this clock to work, we will also be using the angle value of a conic gradient which defines the rotation or starting point. The angle is defined by using a <code>from</code> value.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background-image: conic-gradient(from 45deg, #6e7dab, #5762d5);</code></pre>\n\n\n\n<p>What is interesting about this, is that a starting angle can have a negative value in CSS, which will come in handy later.</p>\n\n\n\n<p>A simple elegant example of a conical gradient:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGLjgyO\" src=\"//codepen.io/anon/embed/bGLjgyO?height=550&amp;theme-id=1&amp;slug-hash=bGLjgyO&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGLjgyO\" title=\"CodePen Embed bGLjgyO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"building-our-basic-clock\">Building our basic clock</h3>\n\n\n<p>Let’s start by adding some HTML for the clock and the hands:</p>\n\n\n\n<p>Let’s create some default styling for our clock. For this to work properly, we will update CSS variables with JavaScript later on, so let’s scope these variables inside our <code>.clock</code> selector. For easy tweaking, let’s add the colors of the hands as well.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.clock {\n  /* general clock vars */\n  --hour-hand-color: #000;\n  --hour-hand-degrees: 0deg;\n  --minute-hand-color: #000;\n  --minute-hand-degrees: 0deg;\n  --second-hand-color: hotpink;\n  --second-hand-degrees: 0deg;\n\n  position: relative;\n  min-width: 320px;\n  width: 25vw;\n  height: 25vw;\n  min-height: 320px;\n  border-radius: 50%;\n  margin: 0 auto;\n  border: 7px solid #000;\n}\n\n/* clock hands */\n.hand {\n  position: absolute;\n  left: 50%;\n  bottom: 50%;\n  height: 45%;\n  width: 4px;\n  margin-left: -2px;\n  background: var(--second-hand-color);\n  border-radius: 6px;\n  transform-origin: bottom center;\n  transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);\n}\n.second-hand {\n  transform: rotate(var(--second-hand-degrees));\n}\n.hour-hand {\n  height: 35%;\n  border-radius: 40px;\n  background-color: var(--hour-hand-color);\n  transform: rotate(var(--hour-hand-degrees));\n}\n.minute-hand {\n  height: 50%;\n  background: var(--minute-hand-color);\n  transform: rotate(var(--minute-hand-degrees));\n}</code></pre>\n\n\n\n<p>This sets us up with the general styling we need for the clock. We’ve set <code>transform-origin</code> on the hands so that they properly rotate around the face of the clock. There are also a few custom properties in there to set angles on the hands that we’ll update with JavaScript to get the timing just right so that each hand maps to seconds, minutes, and hours accordingly.</p>\n\n\n\n<p>Here’s what we have so far:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOxPjwY\" src=\"//codepen.io/anon/embed/jOxPjwY?height=450&amp;theme-id=1&amp;slug-hash=jOxPjwY&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOxPjwY\" title=\"CodePen Embed jOxPjwY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Alright, let’s move on to updating those custom properties!</p>\n\n\n<h3 id=\"adding-the-javascript-for-our-basic-clock\">Adding the JavaScript for our basic clock</h3>\n\n\n<p>First off, we’re going to target our clock and create a function:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const clock = document.getElementById(\"clock\");\nfunction setDate() {\n  // Code to set the current time and hand angles.\n}\nsetDate();</code></pre>\n\n\n\n<p>Inside of our function we’re going to fetch the current time using the <a href=\"https://css-tricks.com/everything-you-need-to-know-about-date-in-javascript/\"><code>Date()</code> function</a> to calculate the correct angle of the hands:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const now = new Date();\nconst secondsAngle = now.getSeconds() * 6; \nconst minsAngle = now.getMinutes() * 6 + secondsAngle / 60;\nconst hourAngle = ((now.getHours() % 12) / 12) * 360 + minsAngle / 12;</code></pre>\n\n\n\n<p>Here is how this calculation works:</p>\n\n\n\n<ul><li><strong>Seconds:</strong> We take 60 seconds and multiply it by <code>6</code>, which happens to be <code>360</code>, the perfect number of angles in a full circle.</li><li><strong>Minutes:</strong> Same as seconds, but now we add the seconds angle and divide it by <code>60</code> to increase the angle just a little bit within the minute for a more accurate result.</li><li><strong>Hours:</strong> First, we calculate the remainder of the hour and divide it by <code>12</code>. Then we divide that remainder by <code>12</code> again to get a decimal value we can multiply by <code>360</code>. For example, when we’re at the 23rd hour, <code>23 / 12 =</code> <code>remain</code> <code>11</code>. Divide this by 12 and we get <code>0.916</code> which then gets multiplied by <code>360</code> for a grand total of <code>330</code>. Here, we will do the same thing we did with the minutes and add the minutes angle, divided by <code>12</code>, for a more accurate result.</li></ul>\n\n\n\n<p>Now that we have our angles, the only thing left to do is to update the variables of our clock by adding the following at the end of our function:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">clock.style.setProperty(\"--second-hand-degrees\", secondsAngle + \"deg\");\nclock.style.setProperty(\"--minute-hand-degrees\", minsAngle + \"deg\");\nclock.style.setProperty(\"--hour-hand-degrees\", hourAngle + \"deg\");</code></pre>\n\n\n\n<p>Last, but not least, we will trigger the function with an interval of a second to get a working clock:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const clock = document.getElementById(\"clock\");\nfunction setDate() {\n  // etc.\n}\n// Tick tick tick\nsetInterval(setDate, 1000);\nsetDate();</code></pre>\n\n\n\n<p>See the working demo of our basic clock:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWmPQvX\" src=\"//codepen.io/anon/embed/QWmPQvX?height=450&amp;theme-id=1&amp;slug-hash=QWmPQvX&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWmPQvX\" title=\"CodePen Embed QWmPQvX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"applying-this-to-a-conical-gradient\">Applying this to a conical gradient</h3>\n\n\n<p>OK, so the hands of our clock are working. What we really want is to map them to a conical gradient that updates as the time changes. You may have seen the same effect if you have an Apple Watch with the “Gradient” face active:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?resize=1200%2C800&#038;ssl=1\" alt=\"Black Apple Watch on a person's wrist showing a deep purple conic gradient face.\" class=\"wp-image-373185\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?resize=768%2C512&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Credit: <a href=\"https://www.macworld.com/article/233327/apple-watch-series-5-always-on-ranked.html\" rel=\"noopener\">Macworld</a></figcaption></figure>\n\n\n\n<p>To do this, let’s start by updating our <code>.clock</code> element with a conic gradient and two custom properties that control the starting and ending angles :</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.clock {\n  /* same as before */\n\n  /* conic gradient vars */\n  --start: 0deg;\n  --end: 0deg;\n\n  /* same as before */\n\n  background: \n    conic-gradient(\n      from var(--start),\n      rgb(255 255 255) 2deg,\n      rgb(0 0 0 / 0.5) var(--end),\n      rgb(255 255 255) 2deg,\n      rgb(0 0 0 / 0.7)\n  );\n}</code></pre>\n\n\n\n<p>You can play around with this a bit to style it just the way you like it. I added some extra colors in the gradient to my liking, but as long as you have a starting point and an ending point, you’re good to go.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdLebLY\" src=\"//codepen.io/anon/embed/mdLebLY?height=450&amp;theme-id=1&amp;slug-hash=mdLebLY&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdLebLY\" title=\"CodePen Embed mdLebLY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Next up, we will update our <code>setDate()</code> function so that it updates the variables for our starting and ending points on the conic gradient. The starting point will be our seconds hand, which is easy to find because it will be the same as the angle of our minutes. To make this end at the hours hand, we should make our ending point the same as the <code>hourAngle</code> variable in the script, but subtract our starting point from it.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let startPosition = minsAngle;\nlet endPosition = hourAngle - minsAngle;</code></pre>\n\n\n\n<p>Now we can update our variables with JavaScript again:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">clock.style.setProperty(\"--start\", startPosition + \"deg\");\nclock.style.setProperty(\"--end\", endPosition + \"deg\");</code></pre>\n\n\n\n<p>It looks like we could be done at this point, but there is a catch! This calculation works fine as long as the minutes hand has a smaller angle than the hours hand. Our conic gradient will get messy the moment when the minutes hand has moved past it. To fix this, we will use a negative value as a starting point. Luckily, it’s easy to spot when this happens. Before updating our variables we’ll add the following:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (minsAngle > hourAngle) {\n  startPosition = minsAngle - 360;\n  endPosition = hourAngle - startPosition;\n}</code></pre>\n\n\n\n<p>By subtracting <code>360</code> from our minutes angle, we are able to set a negative value for our <code>startposition</code> variable. Because of this negative starting point, our end position should be updated by the hour angle, subtracted by the starting position.</p>\n\n\n\n<p>There we go — now the hour and minute hands are set to gradient angles:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoRvZJm\" src=\"//codepen.io/anon/embed/PoRvZJm?height=450&amp;theme-id=1&amp;slug-hash=PoRvZJm&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoRvZJm\" title=\"CodePen Embed PoRvZJm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That’s it! But don’t let that stop you from taking this even further. Create your own styles and share them with me in the comments so I can check them out.. Here is a little inspiration to get you going:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwXPeZj\" src=\"//codepen.io/anon/embed/VwXPeZj?height=550&amp;theme-id=1&amp;slug-hash=VwXPeZj&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwXPeZj\" title=\"CodePen Embed VwXPeZj\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/making-a-real-time-clock-with-a-conic-gradient-face/\">Making a Real-Time Clock With a Conic Gradient Face</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Gradients have been a part of the CSS spectrum for quite some time now. We see a lot of radial and linear gradients in a lot of projects, but there is one type of gradient that seems to be a bit lonely: the conic gradient. We’re going to make a watch face using this type of gradient.\n\n\n\n\n\n\nWorking with conic gradients\n\n\nWhat we’re making consists of a gradient with color transitions rotated around a center point and can have multiple color values. For this clock to work, we will also be using the angle value of a conic gradient which defines the rotation or starting point. The angle is defined by using a from value.\n\n\n\nbackground-image: conic-gradient(from 45deg, #6e7dab, #5762d5);\n\n\n\nWhat is interesting about this, is that a starting angle can have a negative value in CSS, which will come in handy later.\n\n\n\nA simple elegant example of a conical gradient:\n\n\n\nCodePen Embed Fallback\n\n\nBuilding our basic clock\n\n\nLet’s start by adding some HTML for the clock and the hands:\n\n\n\nLet’s create some default styling for our clock. For this to work properly, we will update CSS variables with JavaScript later on, so let’s scope these variables inside our .clock selector. For easy tweaking, let’s add the colors of the hands as well.\n\n\n\n.clock {\n  /* general clock vars */\n  --hour-hand-color: #000;\n  --hour-hand-degrees: 0deg;\n  --minute-hand-color: #000;\n  --minute-hand-degrees: 0deg;\n  --second-hand-color: hotpink;\n  --second-hand-degrees: 0deg;\n\n  position: relative;\n  min-width: 320px;\n  width: 25vw;\n  height: 25vw;\n  min-height: 320px;\n  border-radius: 50%;\n  margin: 0 auto;\n  border: 7px solid #000;\n}\n\n/* clock hands */\n.hand {\n  position: absolute;\n  left: 50%;\n  bottom: 50%;\n  height: 45%;\n  width: 4px;\n  margin-left: -2px;\n  background: var(--second-hand-color);\n  border-radius: 6px;\n  transform-origin: bottom center;\n  transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);\n}\n.second-hand {\n  transform: rotate(var(--second-hand-degrees));\n}\n.hour-hand {\n  height: 35%;\n  border-radius: 40px;\n  background-color: var(--hour-hand-color);\n  transform: rotate(var(--hour-hand-degrees));\n}\n.minute-hand {\n  height: 50%;\n  background: var(--minute-hand-color);\n  transform: rotate(var(--minute-hand-degrees));\n}\n\n\n\nThis sets us up with the general styling we need for the clock. We’ve set transform-origin on the hands so that they properly rotate around the face of the clock. There are also a few custom properties in there to set angles on the hands that we’ll update with JavaScript to get the timing just right so that each hand maps to seconds, minutes, and hours accordingly.\n\n\n\nHere’s what we have so far:\n\n\n\nCodePen Embed Fallback\n\n\n\nAlright, let’s move on to updating those custom properties!\n\n\nAdding the JavaScript for our basic clock\n\n\nFirst off, we’re going to target our clock and create a function:\n\n\n\nconst clock = document.getElementById(\"clock\");\nfunction setDate() {\n  // Code to set the current time and hand angles.\n}\nsetDate();\n\n\n\nInside of our function we’re going to fetch the current time using the Date() function to calculate the correct angle of the hands:\n\n\n\nconst now = new Date();\nconst secondsAngle = now.getSeconds() * 6; \nconst minsAngle = now.getMinutes() * 6 + secondsAngle / 60;\nconst hourAngle = ((now.getHours() % 12) / 12) * 360 + minsAngle / 12;\n\n\n\nHere is how this calculation works:\n\n\n\nSeconds: We take 60 seconds and multiply it by 6, which happens to be 360, the perfect number of angles in a full circle.Minutes: Same as seconds, but now we add the seconds angle and divide it by 60 to increase the angle just a little bit within the minute for a more accurate result.Hours: First, we calculate the remainder of the hour and divide it by 12. Then we divide that remainder by 12 again to get a decimal value we can multiply by 360. For example, when we’re at the 23rd hour, 23 / 12 = remain 11. Divide this by 12 and we get 0.916 which then gets multiplied by 360 for a grand total of 330. Here, we will do the same thing we did with the minutes and add the minutes angle, divided by 12, for a more accurate result.\n\n\n\nNow that we have our angles, the only thing left to do is to update the variables of our clock by adding the following at the end of our function:\n\n\n\nclock.style.setProperty(\"--second-hand-degrees\", secondsAngle + \"deg\");\nclock.style.setProperty(\"--minute-hand-degrees\", minsAngle + \"deg\");\nclock.style.setProperty(\"--hour-hand-degrees\", hourAngle + \"deg\");\n\n\n\nLast, but not least, we will trigger the function with an interval of a second to get a working clock:\n\n\n\nconst clock = document.getElementById(\"clock\");\nfunction setDate() {\n  // etc.\n}\n// Tick tick tick\nsetInterval(setDate, 1000);\nsetDate();\n\n\n\nSee the working demo of our basic clock:\n\n\n\nCodePen Embed Fallback\n\n\nApplying this to a conical gradient\n\n\nOK, so the hands of our clock are working. What we really want is to map them to a conical gradient that updates as the time changes. You may have seen the same effect if you have an Apple Watch with the “Gradient” face active:\n\n\n\nCredit: Macworld\n\n\n\nTo do this, let’s start by updating our .clock element with a conic gradient and two custom properties that control the starting and ending angles :\n\n\n\n.clock {\n  /* same as before */\n\n  /* conic gradient vars */\n  --start: 0deg;\n  --end: 0deg;\n\n  /* same as before */\n\n  background: \n    conic-gradient(\n      from var(--start),\n      rgb(255 255 255) 2deg,\n      rgb(0 0 0 / 0.5) var(--end),\n      rgb(255 255 255) 2deg,\n      rgb(0 0 0 / 0.7)\n  );\n}\n\n\n\nYou can play around with this a bit to style it just the way you like it. I added some extra colors in the gradient to my liking, but as long as you have a starting point and an ending point, you’re good to go.\n\n\n\nCodePen Embed Fallback\n\n\n\nNext up, we will update our setDate() function so that it updates the variables for our starting and ending points on the conic gradient. The starting point will be our seconds hand, which is easy to find because it will be the same as the angle of our minutes. To make this end at the hours hand, we should make our ending point the same as the hourAngle variable in the script, but subtract our starting point from it.\n\n\n\nlet startPosition = minsAngle;\nlet endPosition = hourAngle - minsAngle;\n\n\n\nNow we can update our variables with JavaScript again:\n\n\n\nclock.style.setProperty(\"--start\", startPosition + \"deg\");\nclock.style.setProperty(\"--end\", endPosition + \"deg\");\n\n\n\nIt looks like we could be done at this point, but there is a catch! This calculation works fine as long as the minutes hand has a smaller angle than the hours hand. Our conic gradient will get messy the moment when the minutes hand has moved past it. To fix this, we will use a negative value as a starting point. Luckily, it’s easy to spot when this happens. Before updating our variables we’ll add the following:\n\n\n\nif (minsAngle > hourAngle) {\n  startPosition = minsAngle - 360;\n  endPosition = hourAngle - startPosition;\n}\n\n\n\nBy subtracting 360 from our minutes angle, we are able to set a negative value for our startposition variable. Because of this negative starting point, our end position should be updated by the hour angle, subtracted by the starting position.\n\n\n\nThere we go — now the hour and minute hands are set to gradient angles:\n\n\n\nCodePen Embed Fallback\n\n\n\nThat’s it! But don’t let that stop you from taking this even further. Create your own styles and share them with me in the comments so I can check them out.. Here is a little inspiration to get you going:\n\n\n\nCodePen Embed Fallback\n\nMaking a Real-Time Clock With a Conic Gradient Face originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373184",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-19T12:58:09.000Z",
      "date_modified": "2022-09-19T12:58:09.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373372",
      "url": "https://css-tricks.com/more-details-on-details/",
      "title": "More Details on `details`",
      "summary": "A lot of chatter around the ol’ <details> and <summary> elements lately! I saw Lea Verou recently tweet an observation about the element’s display behavior and that sorta splintered into more observations and usage notes from folks, including a revived …\n\nMore Details on `details` originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>A lot of chatter around the ol&#8217; <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code> elements lately! I saw <a href=\"https://twitter.com/LeaVerou/status/1563912029827747840\" rel=\"noopener\">Lea Verou recently tweet an observation</a> about the element&#8217;s <code>display</code> behavior and that sorta splintered into more observations and usage notes from folks, including a <a href=\"https://github.com/whatwg/html/issues/2272\" rel=\"noopener\">revived discussion</a> on whether <code>&lt;summary&gt;</code> should be allowed to contain interactive elements or not.</p>\n\n\n\n<p>There are a lot of dots to connect and I&#8217;ll do my best here to do exactly that.</p>\n\n\n\n<span id=\"more-373372\"></span>\n\n\n<h3 id=\"can-we-change-the-display-of-elements-nested-in-the-ltdetailsgt-element\">Can we change the display of elements nested in the <code>&lt;details&gt;</code> element?</h3>\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">In the app I’m building, I’m using &lt;details&gt; for panels but ran into some sizing weirdness.<br>Flexbox: <a href=\"https://t.co/noZvxAN35G\">https://t.co/noZvxAN35G</a><br>Grid: <a href=\"https://t.co/pis0lPjvXk\">https://t.co/pis0lPjvXk</a><br>At first I thought it was a bug, but all three engines agree. Nothing in the UA stylesheet for &lt;details&gt; seems to explain it.</p>&mdash; Lea Verou (@LeaVerou) <a href=\"https://twitter.com/LeaVerou/status/1563912029827747840?ref_src=twsrc%5Etfw\" rel=\"noopener\">August 28, 2022</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>Super weird! If we crack open DevTools, the user agent stylesheet tells us <code>&lt;details&gt;</code> is a displayed as a block element.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2128\" height=\"1024\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=2128%2C1024&#038;ssl=1\" alt=\"\" class=\"wp-image-373373\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?w=2128&amp;ssl=1 2128w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=300%2C144&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=1024%2C493&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=768%2C370&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=1536%2C739&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=2048%2C986&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Notice the required <code>&lt;summary&gt;</code> element and the two additional <code>&lt;div&gt;</code>s in there. We can override the <code>display</code>, right?</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2128\" height=\"1024\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=2128%2C1024&#038;ssl=1\" alt=\"\" class=\"wp-image-373374\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?w=2128&amp;ssl=1 2128w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=300%2C144&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=1024%2C493&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=768%2C370&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=1536%2C739&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=2048%2C986&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>What we might expect is that <code>&lt;details&gt;</code> now has an explicit height of <code>40vh</code> and three rows where the third row takes up the remaining space leftover from the first two. Like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1506\" height=\"358\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?resize=1506%2C358&#038;ssl=1\" alt=\"Open details element with a summary of foo and two child elements, one yellow and one blue. The blue element takes up the rest of the space left by summary and the first child.\" class=\"wp-image-373375\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?w=1506&amp;ssl=1 1506w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?resize=300%2C71&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?resize=1024%2C243&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?resize=768%2C183&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Ugh, but the third row doesn&#8217;t&#8230; do&#8230; that.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1530\" height=\"358\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?resize=1530%2C358&#038;ssl=1\" alt=\"Open details element with a summary of foo and two child elements, one yellow and one blue. The summary and two child elements are all the same height.\" class=\"wp-image-373376\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?w=1530&amp;ssl=1 1530w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?resize=300%2C70&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?resize=1024%2C240&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?resize=768%2C180&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Apparently what we&#8217;re dealing with is a grid container that is unable to apply grid behavior to its grid items. But the HTML spec tells us:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The&nbsp;<code><a href=\"https://html.spec.whatwg.org/#the-details-element\" rel=\"noopener\">details</a></code>&nbsp;element is <strong>expected to render as a&nbsp;<a href=\"https://drafts.csswg.org/css2/#block-boxes%E2%91%A0\" rel=\"noopener\">block box</a></strong>. The element is also expected to have an internal&nbsp;<a href=\"https://dom.spec.whatwg.org/#concept-shadow-tree\" rel=\"noopener\">shadow tree</a>&nbsp;with two&nbsp;<a href=\"https://dom.spec.whatwg.org/#concept-slot\" rel=\"noopener\">slots</a>.</p><cite>(Emphasis mine)</cite></blockquote>\n\n\n\n<p>And a little later:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The&nbsp;<code><a href=\"https://html.spec.whatwg.org/#the-details-element\" rel=\"noopener\">details</a></code>&nbsp;element&#8217;s second&nbsp;<a href=\"https://dom.spec.whatwg.org/#concept-slot\" rel=\"noopener\">slot</a>&nbsp;is expected to have its&nbsp;<code><a href=\"https://html.spec.whatwg.org/#attr-style\" rel=\"noopener\">style</a></code>&nbsp;attribute set to &#8220;<code>display: block; content-visibility: hidden;</code>&#8221; when the&nbsp;<code><a href=\"https://html.spec.whatwg.org/#the-details-element\" rel=\"noopener\">details</a></code>&nbsp;element does not have an&nbsp;<code><a href=\"https://html.spec.whatwg.org/#attr-details-open\" rel=\"noopener\">open</a></code>&nbsp;attribute. <strong>When it does have the&nbsp;<code><a href=\"https://html.spec.whatwg.org/#attr-details-open\" rel=\"noopener\">open</a></code>&nbsp;attribute, the&nbsp;<code><a href=\"https://html.spec.whatwg.org/#attr-style\" rel=\"noopener\">style</a></code>&nbsp;attribute is expected to be removed from the second&nbsp;<a href=\"https://dom.spec.whatwg.org/#concept-slot\" rel=\"noopener\">slot</a>.</strong></p><cite>(Emphasis mine, again)</cite></blockquote>\n\n\n\n<p>So, the spec says the second slot — the two additional <code>&lt;div&gt;</code>s from the example — are only coerced into being block elements when <code>&lt;details&gt;</code> is closed. When it&#8217;s open — <code>&lt;details open&gt;</code> — they should conform to the grid display that overrides the user agent styling&#8230; right?</p>\n\n\n\n<p>That&#8217;s the debate. I get that <a href=\"https://html.spec.whatwg.org/#flow-content-3\" rel=\"noopener\"><code>slots</code> are set to <code>display: contents</code> by default</a>, but jamming nested elements into slots and removing the ability to style them seems off. Is it a spec issue that the contents are slots, or a browser issue that we cannot override their <code>display</code> even though they are in the box tree? Smarter people can enlighten me but it seems like an incorrect implementation.</p>\n\n\n<h3 id=\"is-ltdetailsgt-a-container-or-an-interactive-element\">Is <code>&lt;details&gt;</code> a container or an interactive element?</h3>\n\n\n<p>Lots of folks are <a href=\"https://css-tricks.com/using-details-for-menus-and-dialogs-is-an-interesting-idea/\">using <code>&lt;details&gt;</code> to toggle menus</a> open and closed. It&#8217;s a practice <a href=\"https://github.com/github/details-menu-element\" rel=\"noopener\">popularized by GitHub</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1440\" height=\"668\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?resize=1440%2C668&#038;ssl=1\" alt=\"DevTools open with the details element highlighted in orange.\" class=\"wp-image-373379\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?w=1440&amp;ssl=1 1440w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?resize=300%2C139&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?resize=1024%2C475&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?resize=768%2C356&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Seems reasonable. The spec sure allows it:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The&nbsp;<code><a href=\"https://html.spec.whatwg.org/#the-details-element\" rel=\"noopener\">details</a></code>&nbsp;element&nbsp;<a href=\"https://html.spec.whatwg.org/#represents\" rel=\"noopener\">represents</a>&nbsp;a disclosure widget from which the user can obtain additional information <strong>or controls</strong>.</p><cite>(Emphasis mine)</cite></blockquote>\n\n\n\n<p>Alright, so we might expect that <code>&lt;details&gt;</code> is the container (it has an <a href=\"https://w3c.github.io/html-aam/#el-details\" rel=\"noopener\">implicit <code>role=group</code></a>) and <code>&lt;summary&gt;</code> is an interactive element that sets the container&#8217;s <code>open</code> state. Makes sense since <a href=\"https://w3c.github.io/html-aam/#el-summary\" rel=\"noopener\"><code>&lt;summary&gt;</code> has an implcit <code>button</code> role</a> in some contexts (but no corresponding WAI-ARIA role).</p>\n\n\n\n<p>But <a href=\"https://melsumner.github.io/details-as-a-menu\" rel=\"noopener\">Melanie Sumner did some digging</a> that not only seems to contradict that, but leads to the conclusion that using <code>&lt;details&gt;</code> as a menu probably ain&#8217;t the best thing. See what happens when <code>&lt;details&gt;</code> is rendered without the <code>&lt;summary&gt;</code> element:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLjaWEG\" src=\"//codepen.io/anon/embed/yLjaWEG?height=250&amp;theme-id=1&amp;slug-hash=yLjaWEG&amp;default-tab=html,result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLjaWEG\" title=\"CodePen Embed yLjaWEG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>It does exactly what the spec suggests when it&#8217;s missing a <code>&lt;summary&gt;</code> — it makes its own:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The first&nbsp;<code><a href=\"https://html.spec.whatwg.org/#the-summary-element\" rel=\"noopener\">summary</a></code>&nbsp;element child of the element, <em>if any</em>,&nbsp;<a href=\"https://html.spec.whatwg.org/#represents\" rel=\"noopener\">represents</a>&nbsp;the summary or legend of the details. <strong>If there is no child&nbsp;<code><a href=\"https://html.spec.whatwg.org/#the-summary-element\" rel=\"noopener\">summary</a></code>&nbsp;element, the user agent should provide its own legend (e.g. &#8220;Details&#8221;).</strong></p><cite>(Emphasis mine)</cite></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1306\" height=\"460\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?resize=1306%2C460&#038;ssl=1\" alt=\"DevTools open with the summary markup highlighted in orange.\" class=\"wp-image-373383\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?w=1306&amp;ssl=1 1306w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?resize=300%2C106&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?resize=1024%2C361&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?resize=768%2C271&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Melanie ran that through an HTML validator and — surprise! — it&#8217;s invalid:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1332\" height=\"274\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?resize=1332%2C274&#038;ssl=1\" alt=\"Error, element details is missing a required instance of child element summary.\" class=\"wp-image-373396\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?w=1332&amp;ssl=1 1332w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?resize=300%2C62&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?resize=1024%2C211&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?resize=768%2C158&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>So, <code>&lt;details&gt;</code> requires the <code>&lt;summary&gt;</code>. And when <code>&lt;summary&gt;</code> is missing, <code>&lt;details&gt;</code> creates it&#8217;s own, though it&#8217;s relayed as invalid markup. It&#8217;s all hunky-dory and valid when  <code>&lt;summary&gt;</code> is there:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"558\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?resize=1200%2C558&#038;ssl=1\" alt=\"Success message from the W3C HTML validator with the markup for a details element and summary that contains a link element.\" class=\"wp-image-373385\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?resize=300%2C140&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?resize=1024%2C476&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?resize=768%2C357&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>All of which leads to a new question: <strong>why is <code>&lt;summary&gt;</code> given an implcit <code>button</code> role when <code>&lt;details&gt;</code> is what appears to be the interactive element?</strong> Perhaps this is another case where the browser implementation is incorrect? Then again, the spec does categorize both as <a href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#interactive-elements\" rel=\"noopener\">interactive elements</a>. You can see how utterly confusing all of this becomes.</p>\n\n\n\n<p>Either way, Melanie&#8217;s ultimate conclusion that we ought to avoid using <code>&lt;details&gt;</code> for menus is based on how assistive tech reads and announces <code>&lt;details&gt;</code> that contain interactive elements. The element is announced, but there is no mention of interactive controls beyond that until you, er, <em>interact</em> with <code>&lt;details&gt;</code>. Only then will something like a list of links be announced.</p>\n\n\n\n<p>Besides, content inside a collapsed <code>&lt;details&gt;</code> is excluded from in-page searching (except in Chromium browsers, which can access the collapsed content at the time of writing), making things even more difficult to find.</p>\n\n\n<h3 id=\"should-ltsummarygt-allow-interactive-elements\">Should <code>&lt;summary&gt;</code> allow interactive elements?</h3>\n\n\n<p>That&#8217;s the question posed in <a href=\"https://github.com/whatwg/html/issues/2272\" rel=\"noopener\">this open thread</a>. The idea is that something like this would be invalid:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;details>\n  &lt;summary>&lt;a href=\"...\">Link element&lt;/a>&lt;/summary>\n&lt;/details>\n\n&lt;!-- or -->\n\n&lt;details>\n  &lt;summary>&lt;input>&lt;/summary>\n&lt;/details></code></pre>\n\n\n\n<p><a href=\"https://twitter.com/scottohara\" rel=\"noopener\">Scott O&#8217;Hara</a> sums up nicely <a href=\"https://github.com/whatwg/html/issues/2272#issuecomment-1242415594\" rel=\"noopener\">why this is an issue</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The link is not discoverable at all to JAWS when navigating with its virtual cursor. If navigating to the summary element via the Tab key, JAWS announces &#8220;example text, button&#8221; as the name and role of the element. If hitting Tab key again, JAWS again announces &#8220;example text, button&#8221; even though keyboard focus is on the link.</p><p>[&#8230;]</p><p>There is more I could go on about with the various problems different AT have with the content model for summary&#8230; but that would just extend this comment out beyond what is necessary. tldr; the summary content model produces very inconsistent and sometimes just flat out broken experiences for people using AT.</p></blockquote>\n\n\n\n<p class=\"is-style-explanation\">Scott opened tickets to correct this behavior in <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1361983\" rel=\"noopener\">Chromium</a> and <a href=\"https://bugs.webkit.org/show_bug.cgi?id=244984\" rel=\"noopener\">WebKit</a>. Thanks, Scott!</p>\n\n\n\n<p>Yet, it&#8217;s valid HTML:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1406\" height=\"520\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?resize=1406%2C520&#038;ssl=1\" alt=\"Success message from the W3C validator with details markup.\" class=\"wp-image-373387\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?w=1406&amp;ssl=1 1406w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?resize=300%2C111&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?resize=1024%2C379&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?resize=768%2C284&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Scott goes further in a <a href=\"https://www.scottohara.me//blog/2022/09/12/details-summary.html\" rel=\"noopener\">separate blog post</a>. For example, he explains how slapping <code>role=button</code> on <code>&lt;summary></code> might seem like a reasonable fix to ensure it is consistently announced by assistive tech. That would also settle the debate over whether <code>&lt;summary></code> should allow interactive elements because <a href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element\" rel=\"noopener\">buttons cannot contain interactive elements</a>. The only problem is that Safari then treats <code>&lt;summary></code> as a standard button, which loses its <code>expanded</code> and <code>collapsed</code> states. So, the correct role is announced, but now its state is not. &#x1f643;</p>\n\n\n<h3 id=\"where-do-we-go-now\">Where do we go now?</h3>\n\n\n<p>Are you scared to use <code>&lt;details&gt;</code>/<code>&lt;summary&gt;</code> with all of these issues and inconsistencies? I sure am, but only insofar as to make sure that what&#8217;s in it provides the right sort of experience and expectations for users.</p>\n\n\n\n<p>I&#8217;m just glad these conversations are happening and that they&#8217;re taking place in the open. Because of that, you can comment on Scott&#8217;s three proposed solutions for how the content model for <code>&lt;summary&gt;</code> is defined, upvote his tickets, and report your own issues and use cases while you&#8217;re at it. Hopefully, the better we understand how the elements are used and what we expect them to do, the better they are implemented.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/more-details-on-details/\">More Details on `details`</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "A lot of chatter around the ol’ <details> and <summary> elements lately! I saw Lea Verou recently tweet an observation about the element’s display behavior and that sorta splintered into more observations and usage notes from folks, including a revived discussion on whether <summary> should be allowed to contain interactive elements or not.\n\n\n\nThere are a lot of dots to connect and I’ll do my best here to do exactly that.\n\n\n\n\n\n\nCan we change the display of elements nested in the <details> element?\n\n\n\nIn the app I’m building, I’m using <details> for panels but ran into some sizing weirdness.Flexbox: https://t.co/noZvxAN35GGrid: https://t.co/pis0lPjvXkAt first I thought it was a bug, but all three engines agree. Nothing in the UA stylesheet for <details> seems to explain it.— Lea Verou (@LeaVerou) August 28, 2022\n\n\n\n\nSuper weird! If we crack open DevTools, the user agent stylesheet tells us <details> is a displayed as a block element.\n\n\n\n\n\n\n\nNotice the required <summary> element and the two additional <div>s in there. We can override the display, right?\n\n\n\n\n\n\n\nWhat we might expect is that <details> now has an explicit height of 40vh and three rows where the third row takes up the remaining space leftover from the first two. Like this:\n\n\n\n\n\n\n\nUgh, but the third row doesn’t… do… that.\n\n\n\n\n\n\n\nApparently what we’re dealing with is a grid container that is unable to apply grid behavior to its grid items. But the HTML spec tells us:\n\n\n\nThe details element is expected to render as a block box. The element is also expected to have an internal shadow tree with two slots.(Emphasis mine)\n\n\n\nAnd a little later:\n\n\n\nThe details element’s second slot is expected to have its style attribute set to “display: block; content-visibility: hidden;” when the details element does not have an open attribute. When it does have the open attribute, the style attribute is expected to be removed from the second slot.(Emphasis mine, again)\n\n\n\nSo, the spec says the second slot — the two additional <div>s from the example — are only coerced into being block elements when <details> is closed. When it’s open — <details open> — they should conform to the grid display that overrides the user agent styling… right?\n\n\n\nThat’s the debate. I get that slots are set to display: contents by default, but jamming nested elements into slots and removing the ability to style them seems off. Is it a spec issue that the contents are slots, or a browser issue that we cannot override their display even though they are in the box tree? Smarter people can enlighten me but it seems like an incorrect implementation.\n\n\nIs <details> a container or an interactive element?\n\n\nLots of folks are using <details> to toggle menus open and closed. It’s a practice popularized by GitHub.\n\n\n\n\n\n\n\nSeems reasonable. The spec sure allows it:\n\n\n\nThe details element represents a disclosure widget from which the user can obtain additional information or controls.(Emphasis mine)\n\n\n\nAlright, so we might expect that <details> is the container (it has an implicit role=group) and <summary> is an interactive element that sets the container’s open state. Makes sense since <summary> has an implcit button role in some contexts (but no corresponding WAI-ARIA role).\n\n\n\nBut Melanie Sumner did some digging that not only seems to contradict that, but leads to the conclusion that using <details> as a menu probably ain’t the best thing. See what happens when <details> is rendered without the <summary> element:\n\n\n\nCodePen Embed Fallback\n\n\n\nIt does exactly what the spec suggests when it’s missing a <summary> — it makes its own:\n\n\n\nThe first summary element child of the element, if any, represents the summary or legend of the details. If there is no child summary element, the user agent should provide its own legend (e.g. “Details”).(Emphasis mine)\n\n\n\n\n\n\n\nMelanie ran that through an HTML validator and — surprise! — it’s invalid:\n\n\n\n\n\n\n\nSo, <details> requires the <summary>. And when <summary> is missing, <details> creates it’s own, though it’s relayed as invalid markup. It’s all hunky-dory and valid when  <summary> is there:\n\n\n\n\n\n\n\nAll of which leads to a new question: why is <summary> given an implcit button role when <details> is what appears to be the interactive element? Perhaps this is another case where the browser implementation is incorrect? Then again, the spec does categorize both as interactive elements. You can see how utterly confusing all of this becomes.\n\n\n\nEither way, Melanie’s ultimate conclusion that we ought to avoid using <details> for menus is based on how assistive tech reads and announces <details> that contain interactive elements. The element is announced, but there is no mention of interactive controls beyond that until you, er, interact with <details>. Only then will something like a list of links be announced.\n\n\n\nBesides, content inside a collapsed <details> is excluded from in-page searching (except in Chromium browsers, which can access the collapsed content at the time of writing), making things even more difficult to find.\n\n\nShould <summary> allow interactive elements?\n\n\nThat’s the question posed in this open thread. The idea is that something like this would be invalid:\n\n\n\n<details>\n  <summary><a href=\"...\">Link element</a></summary>\n</details>\n\n<!-- or -->\n\n<details>\n  <summary><input></summary>\n</details>\n\n\n\nScott O’Hara sums up nicely why this is an issue:\n\n\n\nThe link is not discoverable at all to JAWS when navigating with its virtual cursor. If navigating to the summary element via the Tab key, JAWS announces “example text, button” as the name and role of the element. If hitting Tab key again, JAWS again announces “example text, button” even though keyboard focus is on the link.[…]There is more I could go on about with the various problems different AT have with the content model for summary… but that would just extend this comment out beyond what is necessary. tldr; the summary content model produces very inconsistent and sometimes just flat out broken experiences for people using AT.\n\n\n\nScott opened tickets to correct this behavior in Chromium and WebKit. Thanks, Scott!\n\n\n\nYet, it’s valid HTML:\n\n\n\n\n\n\n\nScott goes further in a separate blog post. For example, he explains how slapping role=button on <summary> might seem like a reasonable fix to ensure it is consistently announced by assistive tech. That would also settle the debate over whether <summary> should allow interactive elements because buttons cannot contain interactive elements. The only problem is that Safari then treats <summary> as a standard button, which loses its expanded and collapsed states. So, the correct role is announced, but now its state is not. 🙃\n\n\nWhere do we go now?\n\n\nAre you scared to use <details>/<summary> with all of these issues and inconsistencies? I sure am, but only insofar as to make sure that what’s in it provides the right sort of experience and expectations for users.\n\n\n\nI’m just glad these conversations are happening and that they’re taking place in the open. Because of that, you can comment on Scott’s three proposed solutions for how the content model for <summary> is defined, upvote his tickets, and report your own issues and use cases while you’re at it. Hopefully, the better we understand how the elements are used and what we expect them to do, the better they are implemented.\n\nMore Details on `details` originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373372",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-15T13:12:40.000Z",
      "date_modified": "2022-09-15T13:12:40.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373100",
      "url": "https://css-tricks.com/when-is-it-ok-to-disable-text-selection/",
      "title": "When is it OK to Disable Text Selection?",
      "summary": "Using CSS, it’s possible to prevent users from selecting text within an element using user-select: none. Now, it’s understandable why doing so might be considered “controversial”. I mean, should we be disabling standard user behaviors? Generally speaking, no, we …\n\nWhen is it OK to Disable Text Selection? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Using CSS, it’s possible to prevent users from selecting text within an element using <code>user-select: none</code>. Now, it’s understandable why doing so might be considered “controversial”. I mean, <em>should</em> we be disabling standard user behaviors? Generally speaking, no, <a href=\"https://css-tricks.com/copy-paste-the-web/\">we shouldn’t be doing that</a>. But does disabling text selection have some legitimate (albeit rare) use-cases? I think so.</p>\n\n\n\n<span id=\"more-373100\"></span>\n\n\n\n<p>In this article we’ll explore these use cases and take a look at how we can use <code>user-select: none</code> to improve (not hinder) user experiences. It’s also worth nothing that the <a href=\"https://css-tricks.com/almanac/properties/u/user-select/\"><code>user-select</code></a> property has other values besides <code>none</code> that can be used to alter the behavior of text selection rather than disable it completely, and another value that even <em>enforces</em> text selection, so we’ll also take a look at those.</p>\n\n\n<h3 id=\"possible-userselect-values\">Possible <code>user-select</code> values</h3>\n\n\n<p>Let’s kick things off by running through the different <code>user-select</code> values and what they do.</p>\n\n\n\n<p>Applying <code>user-select: none;</code> to an element means that its text content and nested text content won’t be functionally selectable or visually selectable (i.e. <code>::selection</code> won’t work). If you were to make a selection that contained some non-selectable content, the non-selectable content would be omitted from the selection, so it’s fairly well implemented. And the support is great.</p>\n\n\n<div class=\"caniuse\"><div class=\"caniuse-header\"><p>This browser support data is from <a href=\"http://caniuse.com/#feat=”user-select-none”\" rel=\"noopener\">Caniuse</a>, which has more detail. A number indicates that browser supports the feature at that version and up.</p></div><div class=\"caniuse-section\"><h4>Desktop</h4><table class=\"browser-support-table\"><thead><tr><th class=\"chrome\"><span>Chrome</span></th><th class=\"firefox\"><span>Firefox</span></th><th class=\"ie\"><span>IE</span></th><th class=\"edge\"><span>Edge</span></th><th class=\"safari\"><span>Safari</span></th></tr></thead><tbody><tr><td class=\"y yep\" title=\"Chrome - \"><span class=\"caniuse-agents-version version\">4*</span></td><td class=\"y yep\" title=\"Firefox - \"><span class=\"caniuse-agents-version version\">2*</span></td><td class=\"y yep\" title=\"IE - \"><span class=\"caniuse-agents-version version\">10*</span></td><td class=\"y yep\" title=\"Edge - \"><span class=\"caniuse-agents-version version\">12*</span></td><td class=\"y yep\" title=\"Safari - \"><span class=\"caniuse-agents-version version\">3.1*</span></td></tr></table></div><div class=\"caniuse-section\"><h4>Mobile / Tablet</h4><table class=\"browser-support-table\"><thead><tr><th class=\"and_chr\"><span>Android Chrome</span></th><th class=\"and_ff\"><span>Android Firefox</span></th><th class=\"android\"><span>Android</span></th><th class=\"ios_saf\"><span>iOS Safari</span></th></tr></thead><tbody><tr><td class=\"y yep\" title=\"Android Chrome - \"><span class=\"caniuse-agents-version version\">105</span></td><td class=\"y yep\" title=\"Android Firefox - \"><span class=\"caniuse-agents-version version\">104</span></td><td class=\"y yep\" title=\"Android - \"><span class=\"caniuse-agents-version version\">2.1*</span></td><td class=\"y yep\" title=\"iOS Safari - \"><span class=\"caniuse-agents-version version\">3.2*</span></td></tr></table></div></div>\n\n\n\n<p>Conversely, <code>user-select: text</code> makes the content selectable. You’d use this value to overwrite <code>user-select: none</code>.</p>\n\n\n\n<p><code>user-select: contain</code> is an interesting one. Applying it means that if a selection begins within the element then it must end within it too, containing it. This oddly doesn’t apply when the selection begins <em>before</em> the element, however, which is probably why no browser currently supports it. (Internet Explorer and earlier versions of Microsoft Edge previously supported it under the guise of <code>user-select: element</code>.)</p>\n\n\n\n<p>With <code>user-select: all</code>, selecting part of the element’s content results in all of it being selected automatically. It’s all or nothing, which is very uncompromising but useful in circumstances where users are more likely to copy content to their clipboard (e.g. sharing and embedding links, code snippets, etc.). Instead of double-clicking, users will only need to click once for the content to auto-select.</p>\n\n\n\n<p>Be careful, though, since this isn’t always the feature you think it is. What if users only want to select <em>part</em> of the content (e.g. only the font name part of a Google Fonts snippet or one part of a code snippet)? It’s still better to handle ”<a href=\"https://css-tricks.com/native-browser-copy-clipboard/\">copy to clipboard</a>” using JavaScript in many scenarios.</p>\n\n\n\n<p>A better application of <code>user-select: all</code> is to ensure that quotes are copied entirely and accurately.</p>\n\n\n\n<p>The behavior of <code>user-select: auto</code> (the initial value of <code>user-select</code>) depends on the element and how it’s used. You can find out more about this in <a href=\"https://css-tricks.com/almanac/properties/u/user-select/\">our almanac</a>.</p>\n\n\n\n<p>Now let’s turn to exploring use cases for <code>user-select: none</code>…</p>\n\n\n<h3 id=\"stripping-nontext-from-the-selection\">Stripping non-text from the selection</h3>\n\n\n<p>When you’re copying content from a web page, it’s probably from an article or some other type of long-form content, right? You probably don’t want your selection to include images, emoji (which can sometimes copy as text, e.g. “:thinkingface:”), and other things that you might expect to find wrapped in an <code>&lt;aside&gt;</code> element (e.g. in-article calls to action, ads, or something else that’s not part of the main content).</p>\n\n\n\n<p>To prevent something from being included in selections, make sure that it’s wrapped in an HTML element and then apply <code>user-select: none</code> to it:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;p>lorem &lt;span style=\"user-select: none\">&#x1f914;&lt;/span> ipsum&lt;/p>\n\n&lt;aside style=\"user-select: none\">\n  &lt;h1>Heading&lt;/h1>\n  &lt;p>Paragraph&lt;/p>\n  &lt;a>Call to action&lt;/a>\n&lt;/aside></code></pre>\n\n\n\n<p>In scenarios like this, we’re not disabling selection, but rather <em>optimizing</em> it. It’s also worth mentioning that selecting doesn’t necessarily mean copying — many readers (including myself) like to select content as they read it so that they can remember where they are (like a bookmark), another reason to optimize rather than disable completely.</p>\n\n\n<h3 id=\"preventing-accidental-selection\">Preventing accidental selection</h3>\n\n\n<p>Apply <code>user-select: none</code> to links that look like buttons (e.g. <code>&lt;a href=\"/whatever\" class=\"button\"&gt;Click Me!&lt;/a&gt;</code>).</p>\n\n\n\n<p>It’s not possible to select the text content of a <code>&lt;button&gt;</code> or <code>&lt;input type=\"submit\"&gt;</code> because, well, why would you? However, this behavior doesn’t apply to links because traditionally they form part of a paragraph that should be selectable.</p>\n\n\n\n<p>Fair enough.</p>\n\n\n\n<p>We could argue that <a href=\"https://css-tricks.com/buttons-vs-links/\">making links look like buttons is an anti-pattern</a>, but whatever. It’s not breaking the internet, is it? That ship has sailed anyway, so if you’re using links designed to look like buttons then they should mimic the behavior of buttons, not just for consistency but to prevent users from accidentally selecting the content instead of triggering the interaction.</p>\n\n\n\n<p>I’m certainly prone to selecting things accidentally since I use my laptop in bed more than I care to admit. Plus, there are several medical conditions that can affect control and coordination, turning an intended click into an unintended drag/selection, so there are accessibility concerns that can be addressed with <code>user-select</code> too.</p>\n\n\n\n<p>Interactions that require dragging (intentionally) do exist too of course (e.g. in browser games), but these are uncommon. Still, it just shows that <code>user-select</code> does in fact have quite a few use-cases.</p>\n\n\n<h3 id=\"avoiding-paywalled-content-theft\">Avoiding paywalled content theft</h3>\n\n\n<p>Paywalled content gets a lot of hate, but if you feel that you need to protect your content, it’s your content — nobody has the right steal it just because they don’t believe they should pay for it.</p>\n\n\n\n<p>If you do want to go down this route, there are many ways to make it more difficult for users to bypass paywalls (or similarly, copy copyrighted content such as the published work of others).</p>\n\n\n\n<p>Blurring the content with CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">article { filter: blur(&lt;radius>); }</code></pre>\n\n\n\n<p>Disabling the keyboard shortcuts for DevTools:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.addEventListener(\"keydown\", function (e) {\n  if (e.keyCode == 123) e.preventDefault();\n  else if ((e.ctrlKey || e.metaKey) &amp;&amp; e.altKey &amp;&amp; e.keyCode == 73) e.preventDefault();\n  else if ((e.ctrlKey || e.metaKey) &amp;&amp; e.altKey &amp;&amp; e.keyCode == 74) e.preventDefault();\n  else if ((e.ctrlKey || e.metaKey) &amp;&amp; e.altKey &amp;&amp; e.keyCode == 85) e.preventDefault();\n});</code></pre>\n\n\n\n<p>Disabling access to DevTools via the context menu by disabling the context menu itself:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.addEventListener(\"contextmenu\", e => e.preventDefault())</code></pre>\n\n\n\n<p>And of course, to prevent users from copying the content when they’re not allowed to read it at the source, applying <code>user-select: none</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;article style=\"user-select: none\"></code></pre>\n\n\n<h3 id=\"any-other-use-cases\">Any other use cases?</h3>\n\n\n<p>Those are the three use cases I could think of for preventing text selection. Several others crossed my mind, but they all seemed like a stretch. But what about you? Have you had to disable text selection on anything? I’d like to know!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/when-is-it-ok-to-disable-text-selection/\">When is it OK to Disable Text Selection?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Using CSS, it’s possible to prevent users from selecting text within an element using user-select: none. Now, it’s understandable why doing so might be considered “controversial”. I mean, should we be disabling standard user behaviors? Generally speaking, no, we shouldn’t be doing that. But does disabling text selection have some legitimate (albeit rare) use-cases? I think so.\n\n\n\n\n\n\n\nIn this article we’ll explore these use cases and take a look at how we can use user-select: none to improve (not hinder) user experiences. It’s also worth nothing that the user-select property has other values besides none that can be used to alter the behavior of text selection rather than disable it completely, and another value that even enforces text selection, so we’ll also take a look at those.\n\n\nPossible user-select values\n\n\nLet’s kick things off by running through the different user-select values and what they do.\n\n\n\nApplying user-select: none; to an element means that its text content and nested text content won’t be functionally selectable or visually selectable (i.e. ::selection won’t work). If you were to make a selection that contained some non-selectable content, the non-selectable content would be omitted from the selection, so it’s fairly well implemented. And the support is great.\n\n\nThis browser support data is from Caniuse, which has more detail. A number indicates that browser supports the feature at that version and up.DesktopChromeFirefoxIEEdgeSafari4*2*10*12*3.1*Mobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS Safari1051042.1*3.2*\n\n\n\nConversely, user-select: text makes the content selectable. You’d use this value to overwrite user-select: none.\n\n\n\nuser-select: contain is an interesting one. Applying it means that if a selection begins within the element then it must end within it too, containing it. This oddly doesn’t apply when the selection begins before the element, however, which is probably why no browser currently supports it. (Internet Explorer and earlier versions of Microsoft Edge previously supported it under the guise of user-select: element.)\n\n\n\nWith user-select: all, selecting part of the element’s content results in all of it being selected automatically. It’s all or nothing, which is very uncompromising but useful in circumstances where users are more likely to copy content to their clipboard (e.g. sharing and embedding links, code snippets, etc.). Instead of double-clicking, users will only need to click once for the content to auto-select.\n\n\n\nBe careful, though, since this isn’t always the feature you think it is. What if users only want to select part of the content (e.g. only the font name part of a Google Fonts snippet or one part of a code snippet)? It’s still better to handle ”copy to clipboard” using JavaScript in many scenarios.\n\n\n\nA better application of user-select: all is to ensure that quotes are copied entirely and accurately.\n\n\n\nThe behavior of user-select: auto (the initial value of user-select) depends on the element and how it’s used. You can find out more about this in our almanac.\n\n\n\nNow let’s turn to exploring use cases for user-select: none…\n\n\nStripping non-text from the selection\n\n\nWhen you’re copying content from a web page, it’s probably from an article or some other type of long-form content, right? You probably don’t want your selection to include images, emoji (which can sometimes copy as text, e.g. “:thinkingface:”), and other things that you might expect to find wrapped in an <aside> element (e.g. in-article calls to action, ads, or something else that’s not part of the main content).\n\n\n\nTo prevent something from being included in selections, make sure that it’s wrapped in an HTML element and then apply user-select: none to it:\n\n\n\n<p>lorem <span style=\"user-select: none\">🤔</span> ipsum</p>\n\n<aside style=\"user-select: none\">\n  <h1>Heading</h1>\n  <p>Paragraph</p>\n  <a>Call to action</a>\n</aside>\n\n\n\nIn scenarios like this, we’re not disabling selection, but rather optimizing it. It’s also worth mentioning that selecting doesn’t necessarily mean copying — many readers (including myself) like to select content as they read it so that they can remember where they are (like a bookmark), another reason to optimize rather than disable completely.\n\n\nPreventing accidental selection\n\n\nApply user-select: none to links that look like buttons (e.g. <a href=\"/whatever\" class=\"button\">Click Me!</a>).\n\n\n\nIt’s not possible to select the text content of a <button> or <input type=\"submit\"> because, well, why would you? However, this behavior doesn’t apply to links because traditionally they form part of a paragraph that should be selectable.\n\n\n\nFair enough.\n\n\n\nWe could argue that making links look like buttons is an anti-pattern, but whatever. It’s not breaking the internet, is it? That ship has sailed anyway, so if you’re using links designed to look like buttons then they should mimic the behavior of buttons, not just for consistency but to prevent users from accidentally selecting the content instead of triggering the interaction.\n\n\n\nI’m certainly prone to selecting things accidentally since I use my laptop in bed more than I care to admit. Plus, there are several medical conditions that can affect control and coordination, turning an intended click into an unintended drag/selection, so there are accessibility concerns that can be addressed with user-select too.\n\n\n\nInteractions that require dragging (intentionally) do exist too of course (e.g. in browser games), but these are uncommon. Still, it just shows that user-select does in fact have quite a few use-cases.\n\n\nAvoiding paywalled content theft\n\n\nPaywalled content gets a lot of hate, but if you feel that you need to protect your content, it’s your content — nobody has the right steal it just because they don’t believe they should pay for it.\n\n\n\nIf you do want to go down this route, there are many ways to make it more difficult for users to bypass paywalls (or similarly, copy copyrighted content such as the published work of others).\n\n\n\nBlurring the content with CSS:\n\n\n\narticle { filter: blur(<radius>); }\n\n\n\nDisabling the keyboard shortcuts for DevTools:\n\n\n\ndocument.addEventListener(\"keydown\", function (e) {\n  if (e.keyCode == 123) e.preventDefault();\n  else if ((e.ctrlKey || e.metaKey) && e.altKey && e.keyCode == 73) e.preventDefault();\n  else if ((e.ctrlKey || e.metaKey) && e.altKey && e.keyCode == 74) e.preventDefault();\n  else if ((e.ctrlKey || e.metaKey) && e.altKey && e.keyCode == 85) e.preventDefault();\n});\n\n\n\nDisabling access to DevTools via the context menu by disabling the context menu itself:\n\n\n\ndocument.addEventListener(\"contextmenu\", e => e.preventDefault())\n\n\n\nAnd of course, to prevent users from copying the content when they’re not allowed to read it at the source, applying user-select: none:\n\n\n\n<article style=\"user-select: none\">\n\n\nAny other use cases?\n\n\nThose are the three use cases I could think of for preventing text selection. Several others crossed my mind, but they all seemed like a stretch. But what about you? Have you had to disable text selection on anything? I’d like to know!\n\nWhen is it OK to Disable Text Selection? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373100",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-14T13:03:04.000Z",
      "date_modified": "2022-09-14T13:03:04.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373367",
      "url": "https://css-tricks.com/webkit-features-in-safari-16-0/",
      "title": "WebKit Features in Safari 16.0",
      "summary": "Whew boy, Safari 16 is officially out in the wild and it packs in a bunch of features, some new and exciting (Subgrid! Container Queries! Font Palettes!) and others we’ve been waiting on for better cross-browser support (Motion Path! Overscroll …\n\nWebKit Features in Safari 16.0 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Whew boy, <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-16-release-notes\" rel=\"noopener\">Safari 16 is officially out in the wild</a> and it packs in a bunch of features, some new and exciting (Subgrid! Container Queries! Font Palettes!) and others we&#8217;ve been waiting on for better cross-browser support (Motion Path! Overscroll Behavior! AVIF!). I imagine <a href=\"https://jensimmons.com\" rel=\"noopener\">Jen Simmons</a> typing cheerfully writing out all of the new goodies in the <a href=\"https://webkit.org/blog/13152/webkit-features-in-safari-16-0/\" rel=\"noopener\">roundup announcement</a>.</p>\n\n\n\n<span id=\"more-373367\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/New-WebKit-Features-in-Safari-16.0.001.png?resize=1920%2C1080&#038;ssl=1\" alt=\"A list of new WebKit features.\" class=\"wp-image-373369\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/New-WebKit-Features-in-Safari-16.0.001.png?w=1920&amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/New-WebKit-Features-in-Safari-16.0.001.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/New-WebKit-Features-in-Safari-16.0.001.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/New-WebKit-Features-in-Safari-16.0.001.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/New-WebKit-Features-in-Safari-16.0.001.png?resize=1536%2C864&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Source: <a href=\"https://webkit.org/blog/13152/webkit-features-in-safari-16-0/\" rel=\"noopener\">WebKit.org</a></figcaption></figure>\n\n\n\n<p>Just gonna drop in the new CSS features from the release notes:</p>\n\n\n\n<ul><li><strong>Added size queries support for Container Queries.</strong> Chrome started supporting it in Version 105, so all we need is Firefox to join the party to get The Big Three&#x2122; covered.</li><li><strong>Added support for Container Query Units.</strong> <a href=\"https://css-tricks.com/container-units-should-be-pretty-handy/\">These units</a> go hand-in-hand with Container Queries. Once again, we need Firefox.</li><li><strong>Added support for Subgrid.</strong> Now it&#8217;s Safari and Firefox with support coverage. The good news is that <a href=\"https://chromestatus.com/feature/5663795354533888\" rel=\"noopener\">Chrome is currently developing it</a> as well.</li><li><strong>Added support for animatable Grids.</strong> Very cool! Chrome has always had some implementation of this and Firefox started supporting it <a href=\"https://css-irl.info/animating-css-grid/\" rel=\"noopener\">back in 2019</a>.</li><li><strong>Added support for Offset Path.</strong> This is also known as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Motion_Path\" rel=\"noopener\">Motion Path</a>, and we&#8217;ve had <a href=\"https://www.danielcwilson.com/blog/2020/01/motion-path-quirks/\" rel=\"noopener\">broad browser support since 2020</a>. It&#8217;s nice to see Safari on board.</li><li><strong>Added support for Overscroll Behavior.</strong> Now we can modify &#8220;scroll chaining&#8221; and overflow affordances with the <code><a href=\"https://css-tricks.com/almanac/properties/o/overscroll-behavior/\">overscroll-behavior</a></code> property.</li><li><strong>Added support for&nbsp;<code>text-align-last</code>.</strong> Now we&#8217;re all set with cross-browser support for <a href=\"https://css-tricks.com/almanac/properties/t/text-align-last/\">this property</a>!</li><li><strong>Added support for the&nbsp;<code>resolution</code>&nbsp;media query.</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/resolution\" rel=\"noopener\">All set here as well!</a></li></ul>\n\n\n\n<p>There are quite a few nice updates to Safari&#8217;s developer tools, too. We&#8217;ve got a Flexbox inspector, a Timelines tab (with an experimental screenshots timeline), and Container Queries info, to name a few. There&#8217;s a full <a href=\"https://developer.apple.com/videos/play/wwdc2022/10048/\" rel=\"noopener\">32-minute video</a> that walks through everything, too.</p>\n\n\n\n<p>I thought <a href=\"https://css-tricks.com/safari-15-new-ui-theme-colors-and-a-css-tricks-cameo/\">Safari 15</a> was a pretty killer release, but 16 is pretty epic in comparison. I know there&#8217;s a &#8220;Safari is the new Internet Explorer&#8221; vibe in some circles, but I&#8217;m happy to see big jumps like this and appreciate all the forward momentum. Go Safari Team!</p>\n<p><a href=\"https://webkit.org/blog/13152/webkit-features-in-safari-16-0/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/webkit-features-in-safari-16-0/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/webkit-features-in-safari-16-0/\">WebKit Features in Safari 16.0</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Whew boy, Safari 16 is officially out in the wild and it packs in a bunch of features, some new and exciting (Subgrid! Container Queries! Font Palettes!) and others we’ve been waiting on for better cross-browser support (Motion Path! Overscroll Behavior! AVIF!). I imagine Jen Simmons typing cheerfully writing out all of the new goodies in the roundup announcement.\n\n\n\n\n\n\n\nSource: WebKit.org\n\n\n\nJust gonna drop in the new CSS features from the release notes:\n\n\n\nAdded size queries support for Container Queries. Chrome started supporting it in Version 105, so all we need is Firefox to join the party to get The Big Three™ covered.Added support for Container Query Units. These units go hand-in-hand with Container Queries. Once again, we need Firefox.Added support for Subgrid. Now it’s Safari and Firefox with support coverage. The good news is that Chrome is currently developing it as well.Added support for animatable Grids. Very cool! Chrome has always had some implementation of this and Firefox started supporting it back in 2019.Added support for Offset Path. This is also known as Motion Path, and we’ve had broad browser support since 2020. It’s nice to see Safari on board.Added support for Overscroll Behavior. Now we can modify “scroll chaining” and overflow affordances with the overscroll-behavior property.Added support for text-align-last. Now we’re all set with cross-browser support for this property!Added support for the resolution media query. All set here as well!\n\n\n\nThere are quite a few nice updates to Safari’s developer tools, too. We’ve got a Flexbox inspector, a Timelines tab (with an experimental screenshots timeline), and Container Queries info, to name a few. There’s a full 32-minute video that walks through everything, too.\n\n\n\nI thought Safari 15 was a pretty killer release, but 16 is pretty epic in comparison. I know there’s a “Safari is the new Internet Explorer” vibe in some circles, but I’m happy to see big jumps like this and appreciate all the forward momentum. Go Safari Team!\nTo Shared Link — Permalink on CSS-Tricks\nWebKit Features in Safari 16.0 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373367",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-13T16:14:13.000Z",
      "date_modified": "2022-09-13T16:14:13.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373081",
      "url": "https://css-tricks.com/the-basics-of-remix/",
      "title": "The Basics of Remix",
      "summary": "You’ve probably heard a lot of hype around one of the newest kids on the framework block, Remix. It may be surprising that it got its start back in 2019, but it was originally only available as a subscription-based premium …\n\nThe Basics of Remix originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>You’ve probably heard a lot of hype around one of the newest kids on the framework block, Remix. It may be surprising that it got its start back in 2019, but it was originally only available as a subscription-based premium framework. In 2021, the founders raised seed funding and open sourced the framework to let users start using Remix for free. The floodgates opened and everyone seems to be talking about it, good or bad. Let’s dive in and look at some of the basics of Remix.</p>\n\n\n\n<span id=\"more-373081\"></span>\n\n\n\n<p>Remix is a server “edge” first JavaScript framework. It uses React, <a href=\"https://github.com/brophdawg11/remix-routers\" rel=\"noopener\">at least for now</a>, for the front end and prioritizes server-side rendering the application <a href=\"https://remix.run/blog/remix-and-the-edge\" rel=\"noopener\">on the edge</a>. Platforms can take the server-side code and run it as <a href=\"https://whitep4nth3r.com/blog/what-is-the-edge-serverless-functions/#what-is-a-serverless-function\" rel=\"noopener\">serverless or edge functions</a> making it cheaper than a traditional server and putting it closer to your users. The Remix founders like to call it a “center stack” framework because it adapts the requests and responses made between the server and the client for the platform it is being run on.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"450\" height=\"181\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/aefd6f6bd29afb5e06d19fca53bf3bb22df8707b-521x209-1.png?resize=450%2C181&#038;ssl=1\" alt=\"\" class=\"wp-image-373082\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/aefd6f6bd29afb5e06d19fca53bf3bb22df8707b-521x209-1.png?w=450&amp;ssl=1 450w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/aefd6f6bd29afb5e06d19fca53bf3bb22df8707b-521x209-1.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"deploying-remix\">Deploying Remix</h3>\n\n\n<p>Because Remix requires a server, let’s talk about how you can deploy it. Remix does not provide the server itself — you bring the server — allowing it to be run in any <a href=\"https://nodejs.org/en/\" rel=\"noopener\">Node.js</a> or <a href=\"https://deno.land/\" rel=\"noopener\">Deno</a> environment, including <a href=\"https://www.netlify.com/blog/how-to-use-remix-framework-with-edge-functions/\" rel=\"noopener\">Netlify Edge</a> and <a href=\"https://www.digitalocean.com/products/app-platform?utm_medium=content _acq&amp;utm_source=css-tricks&amp;utm_campaign=global_do_fto&amp;utm_content=the_basics_of_remix\" rel=\"noopener\">DigitalOcean&#8217;s App Platform</a>. Remix itself is a <dfn><a href=\"https://remix.run/docs/en/v1/pages/technical-explanation#compiler\" rel=\"noopener\">compiler</a></dfn>, a program that translates the requests for the platform it is running on. This process uses <a href=\"https://esbuild.github.io/\" rel=\"noopener\">esbuild</a> to create handlers for the requests to the server. The HTTP handlers it uses are built on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" rel=\"noopener\">Web Fetch API</a> and are ran on the server by <em>adapting</em> them for the platform they will be deployed to.</p>\n\n\n<h3 id=\"remix-stacks\">Remix stacks</h3>\n\n\n<p>Remix stacks are projects that have some common tools that come preconfigured for you. There are <a href=\"https://remix.run/docs/en/v1/pages/stacks\" rel=\"noopener\">three official stacks</a> that are maintained by the Remix team and they are all named after musical genres. There is also a number of community Remix stacks including the <a href=\"https://github.com/netlify-templates/kpop-stack\" rel=\"noopener\">K-Pop Stack</a> created by the Templates Team at Netlify. This stack is a powerhouse and includes a <a href=\"https://supabase.com/\" rel=\"noopener\">Supabase</a> database and authentication, <a href=\"https://tailwindcss.com/\" rel=\"noopener\">Tailwind</a> for styling, <a href=\"https://cypress.io/\" rel=\"noopener\">Cypress</a> end-to-end testing, <a href=\"https://prettier.io/\" rel=\"noopener\">Prettier</a> code formatting, <a href=\"https://eslint.org/\" rel=\"noopener\">ESLint</a> linting, and <a href=\"https://typescriptlang.org/\" rel=\"noopener\">TypeScript</a> static typing. <a href=\"https://www.netlify.com/blog/deploy-your-remix-supabase-app-today/\" rel=\"noopener\">Check out Tara  Manicsic’s post on deploying the K-Pop Stack.</a></p>\n\n\n<h3 id=\"caching-routes\">Caching routes</h3>\n\n\n<p>Even though Remix requires a server, it can still take advantage of the <a href=\"https://jamstack.org/\" rel=\"noopener\">Jamstack</a> benefits by caching routes. A static site or static site generation (SSG) is when all of your content is rendered at build time and stays <em>static</em> until another rebuild. The content is pre-generated and can be put on a CDN. This provides many benefits and speedy site loads for the end user. However, Remix does not do typical SSG like other popular React frameworks, including Next.js and Gatsby. To get the some of the benefits of SSG, you can use the native <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\" rel=\"noopener\">Cache-Control HTTP header</a> in a Remix <a href=\"https://remix.run/docs/en/v1/api/conventions#headers\" rel=\"noopener\">headers function</a> to cache a particular route or directly in the <code>root.tsx</code> file.</p>\n\n\n\n<pre rel=\"TOML\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">[[headers]]\n  for = \"/build/*\"\n  [headers.values]\n    \"Cache-Control\" = \"public, max-age=31536000, s-maxage=31536000\"</code></pre>\n\n\n\n<p>Then add in your <a href=\"#headers-functions\">headers function</a> where you want it. This caches for one hour:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function headers() {\n  return {\n    \"Cache-Control\": \"public, s-maxage=360\",\n  };\n};</code></pre>\n\n\n<h3 id=\"remixing-routing\">Remixing routing</h3>\n\n\n<p>A lot of frameworks have leaned into routing based on file systems. This is a technique where a designated folder is used to define routes for your application. They typically have special syntax for declaring dynamic routes and endpoints. The biggest difference currently between Remix and other popular frameworks is the ability to use <a href=\"https://remix.run/docs/en/v1/guides/routing#what-is-nested-routing\" rel=\"noopener\">nested routing</a>.</p>\n\n\n\n<p>Every Remix app starts with the <code>root.tsx</code> file. This is where the entire base of the app is rendered. You’ll find some of the common HTML layout here like the <code>&lt;html&gt;</code> tag, the <code>&lt;head&gt;</code> tag, and then the <code>&lt;body&gt;</code> tag with the components needed to render the app. The one thing to point out here is the <code>&lt;Scripts&gt;</code> component is what enables JavaScript on the site; some things will work without it, but not everything. The <code>root.tsx</code> file acts as a parent layout for everything inside of the <code>routes</code> directory, everything in routes is rendered where the <code>&lt;Outlet/&gt;</code> component is in <code>root.tsx</code>. This is the base of nested routing in Remix.</p>\n\n\n<h4 id=\"nested-routing\">Nested routing</h4>\n\n\n<p>Not only was Remix founded by some of the team from <a href=\"https://reactrouter.com/\" rel=\"noopener\">React Router</a>, it also <em>uses</em> React Router. In fact, they are <a href=\"https://remix.run/blog/remixing-react-router\" rel=\"noopener\">bringing some of the good things about Remix back to React Router</a>. A complex problem that the maintainers of Next.js and SvelteKit are trying to solve right now is nested routing.</p>\n\n\n\n<p>Nested routing is unlike traditional routing. Where a new route would take a user to a new page, each nested route is a separate section of the same page. It allows for separation of concerns by keeping business logic associated with only the files that need it. Remix is able to handle errors localized to only the section of the page the nested route is at. The other routes on the page are still usable and the route that broke can provide relevant context to the error without the entire page crashing.</p>\n\n\n\n<p>Remix does this when a root file in <code>app/routes</code> is named the same as a directory of files that will load inside of the base file. The root file becomes a <em>layout</em> for the files in the directory by using an <code>&lt;Outlet /&gt;</code> component to tell Remix where to load the other routes.</p>\n\n\n<h4 id=\"outlet-component\">Outlet component</h4>\n\n\n<p>The <code>&lt;Outlet /&gt;</code> Component is a signal to Remix for where it should render content for nested routes. It&#8217;s put in the file at the root of the <code>app/routes</code> directory with the same name as the nested routes. The following code goes in a <code>app/routes/about.tsx</code> file and includes the outlet for the files inside <code>app/routes/about</code> folder:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Outlet } from \"@remix-run/react\";\n\nexport default function About() {\n  return (\n    &lt;>\n      &lt;section>\n        I am the parent layout. I will be on any page inside of my named directory.\n      &lt;/section>\n      { /* All of my children, the files in the named directory, will go here. */ }\n      &lt;Outlet />\n    &lt;/>\n  )\n}</code></pre>\n\n\n<h4 id=\"folder-structure\">Folder structure</h4>\n\n\n<p>Any file in the <code>app/routes/</code> directory becomes a route at the URL of its name. A directory can also be added with an <code>index.tsx</code> file.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">app/\n├── routes/\n│   │\n│   └── blog\n|   |   ├── index.tsx ## The /blog route\n│   └── about.tsx  ## The /about route\n│   ├── index.tsx  ## The / or home route\n└── root.tsx</code></pre>\n\n\n\n<p>If a route has the same name as a directory, the named file becomes a layout file for the files inside the directory and the layout file needs an <a href=\"#outlet-component\">Outlet component</a> to place the nested route in.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">app/\n├── routes/\n│   │\n│   └── about\n│   │   ├── index.tsx\n│   ├── about.tsx ## this is a layout for /about/index.tsx\n│   ├── index.tsx\n└── root.tsx</code></pre>\n\n\n\n<p>Layouts can also be created by prefixing them with a double underscore (<code>__</code>).</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">app/\n├── routes/\n│   │\n│   └── about\n│   │   ├── index.tsx\n│   ├── index.tsx\n│   ├── about.tsx\n│   ├── __blog.tsx ## this is also a layout\n└── root.tsx</code></pre>\n\n\n\n<p><code>https://your-url.com/about</code> will still render the <code>app/routes/about.tsx</code> file, but will also render whatever is in <code>app/routes/about/index.tsx</code> where the <a href=\"#outlet-component\">Outlet component</a> is in the markup of <code>app/routes/about.tsx</code>.</p>\n\n\n<h4 id=\"dynamic-routes\">Dynamic Routes</h4>\n\n\n<p>A dynamic route is a route that changes based on information in the url. That may be a name of a blog post or a customer id, but no matter what it is the <code>$</code> syntax added to the front of the route signals to Remix that it is dynamic. The name doesn’t matter other than the <code>$</code> prefix.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">app/\n├── routes/\n│   │\n│   └── about\n│   │   ├── $id.tsx\n│   │   ├── index.tsx\n│   ├── about.tsx ## this is a layout for /about/index.tsx\n│   ├── index.tsx\n└── root.tsx</code></pre>\n\n\n<h3 id=\"fetch-that-data\">Fetch that data!</h3>\n\n\n<p>Since Remix renders all of its data on the server, you don’t see a lot of the things that have become the standard of a React app, like <code>useState()</code> and <code>useEffect()</code> hooks, in Remix. There is less need for client-side state since it has already been evaluated on the server.</p>\n\n\n\n<p>It also doesn’t matter what type of server you use for fetching data. Since Remix sits between the request and response and translates it appropriately, you can use the standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" rel=\"noopener\">Web Fetch API</a>. Remix does this in a <code>loader</code> function that <strong>only</strong> runs on the server and uses the <code>useLoaderData()</code> hook to render the data in the component. Here’s an example using the <a href=\"https://cataas.com/\" rel=\"noopener\">Cat as a Service API</a> to render a random cat image.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Outlet, useLoaderData } from '@remix-run/react'\n\nexport async function loader() {\n  const response = await fetch('&lt;https://cataas.com/cat?json=true>')\n  const data = await response.json()\n  return {\n    data\n  }\n}\n\nexport default function AboutLayout() {\n  const cat = useLoaderData&lt;typeof loader>()\n  return (\n    &lt;>\n      &lt;img\n        src={`https://cataas.com/cat/${cat}`}\n        alt=\"A random cat.\"\n      />\n      &lt;Outlet />\n    &lt;/>\n  )\n}</code></pre>\n\n\n<h4 id=\"route-parameters\">Route parameters</h4>\n\n\n<p>In dynamic routes, routes prefixed with <code>$</code> need to be able to access the URL parameter to handle that data that should be rendered. The <code>loader</code> function has access to these through a <code>params</code> argument.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { useLoaderData } from '@remix-run/react'\nimport type { LoaderArgs } from '@remix-run/node'\n\nexport async function loader({ params }: LoaderArgs) {\n  return {\n      params\n  }\n}\n\nexport default function AboutLayout() {\n  const { params } = useLoaderData&lt;typeof loader>()\n  return &lt;p>The url parameter is {params.tag}.&lt;/p>\n}</code></pre>\n\n\n<h3 id=\"other-remix-functions\">Other Remix functions</h3>\n\n\n<p>Remix has a few other helper functions that add extra functionality to normal HTML elements and attributes in the <a href=\"https://remix.run/docs/en/v1/api/conventions#route-module-api\" rel=\"noopener\">route module API</a>. Each route can define its own of these types of functions.</p>\n\n\n<h4 id=\"action-function\">Action function</h4>\n\n\n<p>An <code>action</code> function allows you to add extra functionality to a form action using the standard web <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\" rel=\"noopener\">FormData API</a>.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export async function action({ request }) {\n  const body = await request.formData();\n  const todo = await fakeCreateTodo({\n      title: body.get(\"title\"),\n  });\n  return redirect(`/todos/${todo.id}`);\n}</code></pre>\n\n\n<h4 id=\"headers-function\">Headers function</h4>\n\n\n<p>Any <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" rel=\"noopener\">HTTP standard headers</a> can go in a <code>headers</code> function. Because each route can have a header, to avoid conflicts with nested routes, the deepest route — or the URL with the most forward slashes (<code>/</code>) — wins. You can also get the headers passed through, <code>actionHeaders</code>, <code>loaderHeaders</code>, or <code>parentHeaders</code></p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function headers({\n  actionHeaders,\n  loaderHeaders,\n  parentHeaders,\n}) {\n  return {\n\"Cache-Control\": loaderHeaders.get(\"Cache-Control\"),\n  };\n}</code></pre>\n\n\n<h4 id=\"meta-function\">Meta function</h4>\n\n\n<p>This function will set the meta tags for the HTML document. One is set in the <code>root.tsx</code> file by default, but they can be updated for each route.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function meta() {\n  return {\n    title: \"Your page title\",\n    description: \"A new description for each route.\",\n  };\n};</code></pre>\n\n\n<h4 id=\"links-function\">Links function</h4>\n\n\n<p>HTML <code>link</code> elements live in the <code>&lt;head&gt;</code> tag of an HTML document and they import CSS, among other things. The <code>links</code> function, not to be confused with the <a href=\"https://remix.run/docs/en/v1/api/remix#link\" rel=\"noopener\"><code>&lt;Link /&gt;</code> component</a>, allows you to only import things in the routes that need them. So, for example, CSS files can be scoped and only imported on the routes that need those specific files. The <code>link</code> elements are returned from a <code>links()</code> function as an array of objects and can either be a <code>HtmlLinkDescriptor</code> from the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\" rel=\"noopener\"><code>link</code> API</a> or a <code>PageLinkDescriptor</code> that can prefetch the data for a page.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function links() {\n  return [\n    // add a favicon\n    {\n      rel: \"icon\",\n      href: \"/favicon.png\",\n      type: \"image/png\",\n    },\n    // add an external stylesheet\n    {\n      rel: \"stylesheet\",\n      href: \"&lt;https://example.com/some/styles.css>\",\n      crossOrigin: \"true\",\n    },\n    // add a local stylesheet,\n    { rel: \"stylesheet\", href: stylesHref },\n\n    // prefetch a page's data\n    { page: \"/about/community\" }\n  ]\n}</code></pre>\n\n\n<h4 id=\"linking-between-routes\">Linking between routes</h4>\n\n\n<p>Remix provides a component to go between the different routes in your app called <code>&lt;Link/&gt;</code>. To get client-side routing, use the <code>&lt;Link to=\"\"&gt;Name&lt;/Link&gt;</code> component instead of <code>&lt;a href=\"\"&gt;Name&lt;/a&gt;</code>. The <code>&lt;Link /&gt;</code> component also takes a prop of <code>prefetch</code> with accepts <code>none</code> by default, <code>intent</code> to prefetch the data if Remix detects the user hovers or focuses the link, or <code>render</code> which will fetch the route’s data as soon as the link is rendered.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Link } from \"@remix-run/react\";\n\nexport default function Nav() {\n  return (\n    &lt;nav>\n      &lt;Link to=\"/\">Home&lt;/Link>{\" \"}\n      &lt;Link to=\"/about\">About&lt;/Link>{\" \"}\n      &lt;Link to=\"/about/community\" prefetch=\"intent\">Community&lt;/Link>\n    &lt;/nav>\n  );\n}</code></pre>\n\n\n<h3 id=\"next-steps\">Next steps</h3>\n\n\n<p>Now you know the basics of Remix and you’re ready to get started actually building applications, right? Remix provides a <a href=\"https://remix.run/docs/en/v1/tutorials/jokes\" rel=\"noopener\">Jokes app</a> and a <a href=\"https://remix.run/docs/en/v1/tutorials/blog\" rel=\"noopener\">Blog tutorial</a> to get you started implementing this basic knowledge. You can also start from scratch and create a brand new Remix app. Or if you are ready to dive in, give the <a href=\"https://github.com/netlify-templates/kpop-stack\" rel=\"noopener\">K-Pop Stack</a> a try. I have really enjoyed my time with Remix and love the focus on web standards and bringing it back to the basics. Now it’s your turn to start creating!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-basics-of-remix/\">The Basics of Remix</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "You’ve probably heard a lot of hype around one of the newest kids on the framework block, Remix. It may be surprising that it got its start back in 2019, but it was originally only available as a subscription-based premium framework. In 2021, the founders raised seed funding and open sourced the framework to let users start using Remix for free. The floodgates opened and everyone seems to be talking about it, good or bad. Let’s dive in and look at some of the basics of Remix.\n\n\n\n\n\n\n\nRemix is a server “edge” first JavaScript framework. It uses React, at least for now, for the front end and prioritizes server-side rendering the application on the edge. Platforms can take the server-side code and run it as serverless or edge functions making it cheaper than a traditional server and putting it closer to your users. The Remix founders like to call it a “center stack” framework because it adapts the requests and responses made between the server and the client for the platform it is being run on.\n\n\n\n\n\n\nDeploying Remix\n\n\nBecause Remix requires a server, let’s talk about how you can deploy it. Remix does not provide the server itself — you bring the server — allowing it to be run in any Node.js or Deno environment, including Netlify Edge and DigitalOcean’s App Platform. Remix itself is a compiler, a program that translates the requests for the platform it is running on. This process uses esbuild to create handlers for the requests to the server. The HTTP handlers it uses are built on the Web Fetch API and are ran on the server by adapting them for the platform they will be deployed to.\n\n\nRemix stacks\n\n\nRemix stacks are projects that have some common tools that come preconfigured for you. There are three official stacks that are maintained by the Remix team and they are all named after musical genres. There is also a number of community Remix stacks including the K-Pop Stack created by the Templates Team at Netlify. This stack is a powerhouse and includes a Supabase database and authentication, Tailwind for styling, Cypress end-to-end testing, Prettier code formatting, ESLint linting, and TypeScript static typing. Check out Tara  Manicsic’s post on deploying the K-Pop Stack.\n\n\nCaching routes\n\n\nEven though Remix requires a server, it can still take advantage of the Jamstack benefits by caching routes. A static site or static site generation (SSG) is when all of your content is rendered at build time and stays static until another rebuild. The content is pre-generated and can be put on a CDN. This provides many benefits and speedy site loads for the end user. However, Remix does not do typical SSG like other popular React frameworks, including Next.js and Gatsby. To get the some of the benefits of SSG, you can use the native Cache-Control HTTP header in a Remix headers function to cache a particular route or directly in the root.tsx file.\n\n\n\n[[headers]]\n  for = \"/build/*\"\n  [headers.values]\n    \"Cache-Control\" = \"public, max-age=31536000, s-maxage=31536000\"\n\n\n\nThen add in your headers function where you want it. This caches for one hour:\n\n\n\nexport function headers() {\n  return {\n    \"Cache-Control\": \"public, s-maxage=360\",\n  };\n};\n\n\nRemixing routing\n\n\nA lot of frameworks have leaned into routing based on file systems. This is a technique where a designated folder is used to define routes for your application. They typically have special syntax for declaring dynamic routes and endpoints. The biggest difference currently between Remix and other popular frameworks is the ability to use nested routing.\n\n\n\nEvery Remix app starts with the root.tsx file. This is where the entire base of the app is rendered. You’ll find some of the common HTML layout here like the <html> tag, the <head> tag, and then the <body> tag with the components needed to render the app. The one thing to point out here is the <Scripts> component is what enables JavaScript on the site; some things will work without it, but not everything. The root.tsx file acts as a parent layout for everything inside of the routes directory, everything in routes is rendered where the <Outlet/> component is in root.tsx. This is the base of nested routing in Remix.\n\n\nNested routing\n\n\nNot only was Remix founded by some of the team from React Router, it also uses React Router. In fact, they are bringing some of the good things about Remix back to React Router. A complex problem that the maintainers of Next.js and SvelteKit are trying to solve right now is nested routing.\n\n\n\nNested routing is unlike traditional routing. Where a new route would take a user to a new page, each nested route is a separate section of the same page. It allows for separation of concerns by keeping business logic associated with only the files that need it. Remix is able to handle errors localized to only the section of the page the nested route is at. The other routes on the page are still usable and the route that broke can provide relevant context to the error without the entire page crashing.\n\n\n\nRemix does this when a root file in app/routes is named the same as a directory of files that will load inside of the base file. The root file becomes a layout for the files in the directory by using an <Outlet /> component to tell Remix where to load the other routes.\n\n\nOutlet component\n\n\nThe <Outlet /> Component is a signal to Remix for where it should render content for nested routes. It’s put in the file at the root of the app/routes directory with the same name as the nested routes. The following code goes in a app/routes/about.tsx file and includes the outlet for the files inside app/routes/about folder:\n\n\n\nimport { Outlet } from \"@remix-run/react\";\n\nexport default function About() {\n  return (\n    <>\n      <section>\n        I am the parent layout. I will be on any page inside of my named directory.\n      </section>\n      { /* All of my children, the files in the named directory, will go here. */ }\n      <Outlet />\n    </>\n  )\n}\n\n\nFolder structure\n\n\nAny file in the app/routes/ directory becomes a route at the URL of its name. A directory can also be added with an index.tsx file.\n\n\n\napp/\n├── routes/\n│   │\n│   └── blog\n|   |   ├── index.tsx ## The /blog route\n│   └── about.tsx  ## The /about route\n│   ├── index.tsx  ## The / or home route\n└── root.tsx\n\n\n\nIf a route has the same name as a directory, the named file becomes a layout file for the files inside the directory and the layout file needs an Outlet component to place the nested route in.\n\n\n\napp/\n├── routes/\n│   │\n│   └── about\n│   │   ├── index.tsx\n│   ├── about.tsx ## this is a layout for /about/index.tsx\n│   ├── index.tsx\n└── root.tsx\n\n\n\nLayouts can also be created by prefixing them with a double underscore (__).\n\n\n\napp/\n├── routes/\n│   │\n│   └── about\n│   │   ├── index.tsx\n│   ├── index.tsx\n│   ├── about.tsx\n│   ├── __blog.tsx ## this is also a layout\n└── root.tsx\n\n\n\nhttps://your-url.com/about will still render the app/routes/about.tsx file, but will also render whatever is in app/routes/about/index.tsx where the Outlet component is in the markup of app/routes/about.tsx.\n\n\nDynamic Routes\n\n\nA dynamic route is a route that changes based on information in the url. That may be a name of a blog post or a customer id, but no matter what it is the $ syntax added to the front of the route signals to Remix that it is dynamic. The name doesn’t matter other than the $ prefix.\n\n\n\napp/\n├── routes/\n│   │\n│   └── about\n│   │   ├── $id.tsx\n│   │   ├── index.tsx\n│   ├── about.tsx ## this is a layout for /about/index.tsx\n│   ├── index.tsx\n└── root.tsx\n\n\nFetch that data!\n\n\nSince Remix renders all of its data on the server, you don’t see a lot of the things that have become the standard of a React app, like useState() and useEffect() hooks, in Remix. There is less need for client-side state since it has already been evaluated on the server.\n\n\n\nIt also doesn’t matter what type of server you use for fetching data. Since Remix sits between the request and response and translates it appropriately, you can use the standard Web Fetch API. Remix does this in a loader function that only runs on the server and uses the useLoaderData() hook to render the data in the component. Here’s an example using the Cat as a Service API to render a random cat image.\n\n\n\nimport { Outlet, useLoaderData } from '@remix-run/react'\n\nexport async function loader() {\n  const response = await fetch('<https://cataas.com/cat?json=true>')\n  const data = await response.json()\n  return {\n    data\n  }\n}\n\nexport default function AboutLayout() {\n  const cat = useLoaderData<typeof loader>()\n  return (\n    <>\n      <img\n        src={`https://cataas.com/cat/${cat}`}\n        alt=\"A random cat.\"\n      />\n      <Outlet />\n    </>\n  )\n}\n\n\nRoute parameters\n\n\nIn dynamic routes, routes prefixed with $ need to be able to access the URL parameter to handle that data that should be rendered. The loader function has access to these through a params argument.\n\n\n\nimport { useLoaderData } from '@remix-run/react'\nimport type { LoaderArgs } from '@remix-run/node'\n\nexport async function loader({ params }: LoaderArgs) {\n  return {\n      params\n  }\n}\n\nexport default function AboutLayout() {\n  const { params } = useLoaderData<typeof loader>()\n  return <p>The url parameter is {params.tag}.</p>\n}\n\n\nOther Remix functions\n\n\nRemix has a few other helper functions that add extra functionality to normal HTML elements and attributes in the route module API. Each route can define its own of these types of functions.\n\n\nAction function\n\n\nAn action function allows you to add extra functionality to a form action using the standard web FormData API.\n\n\n\nexport async function action({ request }) {\n  const body = await request.formData();\n  const todo = await fakeCreateTodo({\n      title: body.get(\"title\"),\n  });\n  return redirect(`/todos/${todo.id}`);\n}\n\n\nHeaders function\n\n\nAny HTTP standard headers can go in a headers function. Because each route can have a header, to avoid conflicts with nested routes, the deepest route — or the URL with the most forward slashes (/) — wins. You can also get the headers passed through, actionHeaders, loaderHeaders, or parentHeaders\n\n\n\nexport function headers({\n  actionHeaders,\n  loaderHeaders,\n  parentHeaders,\n}) {\n  return {\n\"Cache-Control\": loaderHeaders.get(\"Cache-Control\"),\n  };\n}\n\n\nMeta function\n\n\nThis function will set the meta tags for the HTML document. One is set in the root.tsx file by default, but they can be updated for each route.\n\n\n\nexport function meta() {\n  return {\n    title: \"Your page title\",\n    description: \"A new description for each route.\",\n  };\n};\n\n\nLinks function\n\n\nHTML link elements live in the <head> tag of an HTML document and they import CSS, among other things. The links function, not to be confused with the <Link /> component, allows you to only import things in the routes that need them. So, for example, CSS files can be scoped and only imported on the routes that need those specific files. The link elements are returned from a links() function as an array of objects and can either be a HtmlLinkDescriptor from the link API or a PageLinkDescriptor that can prefetch the data for a page.\n\n\n\nexport function links() {\n  return [\n    // add a favicon\n    {\n      rel: \"icon\",\n      href: \"/favicon.png\",\n      type: \"image/png\",\n    },\n    // add an external stylesheet\n    {\n      rel: \"stylesheet\",\n      href: \"<https://example.com/some/styles.css>\",\n      crossOrigin: \"true\",\n    },\n    // add a local stylesheet,\n    { rel: \"stylesheet\", href: stylesHref },\n\n    // prefetch a page's data\n    { page: \"/about/community\" }\n  ]\n}\n\n\nLinking between routes\n\n\nRemix provides a component to go between the different routes in your app called <Link/>. To get client-side routing, use the <Link to=\"\">Name</Link> component instead of <a href=\"\">Name</a>. The <Link /> component also takes a prop of prefetch with accepts none by default, intent to prefetch the data if Remix detects the user hovers or focuses the link, or render which will fetch the route’s data as soon as the link is rendered.\n\n\n\nimport { Link } from \"@remix-run/react\";\n\nexport default function Nav() {\n  return (\n    <nav>\n      <Link to=\"/\">Home</Link>{\" \"}\n      <Link to=\"/about\">About</Link>{\" \"}\n      <Link to=\"/about/community\" prefetch=\"intent\">Community</Link>\n    </nav>\n  );\n}\n\n\nNext steps\n\n\nNow you know the basics of Remix and you’re ready to get started actually building applications, right? Remix provides a Jokes app and a Blog tutorial to get you started implementing this basic knowledge. You can also start from scratch and create a brand new Remix app. Or if you are ready to dive in, give the K-Pop Stack a try. I have really enjoyed my time with Remix and love the focus on web standards and bringing it back to the basics. Now it’s your turn to start creating!\n\nThe Basics of Remix originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373081",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-13T12:59:46.000Z",
      "date_modified": "2022-09-13T12:59:46.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372991",
      "url": "https://css-tricks.com/building-interactive-figma-widgets/",
      "title": "Building Interactive Figma Widgets",
      "summary": "Figma has always encouraged collaboration between developers and designers. It strives on an endless treasury of community-made plugins. Need 3D elements? There’s a plugin for that. Need abstract SVGs? There’s a plugin for that, too.\nThat said, the design part of Figma has …\n\nBuilding Interactive Figma Widgets originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Figma has always&nbsp;encouraged collaboration&nbsp;between developers and designers. It strives on an endless treasury of community-made plugins. Need&nbsp;3D elements?&nbsp;<a href=\"https://www.figma.com/community/plugin/769588393361258724\" rel=\"noopener\">There’s a plugin for that.</a>&nbsp;Need&nbsp;abstract SVGs?&nbsp;<a href=\"https://www.figma.com/community/plugin/1113450281250896805\" rel=\"noopener\">There’s a plugin for that</a>, too.</p>\n\n\n\n<p>That said, the design part of Figma has always been relatively static — always working with unmovable rectangles connected to each other through predefined user interactions. But what if I told you that your designs could suddenly come to life — that they could be animated, interactive, and even stateful? Then, what would separate concept from implementation?</p>\n\n\n\n<p>Figma&nbsp;<a href=\"https://www.figma.com/blog/whats-new-in-figma-june-2022/\" rel=\"noopener\">announced in June</a>&nbsp;that it’s bringing JavaScript-powered widgets to the table. Now, designers have can browse and implement logic-driven components straight in Figma!</p>\n\n\n\n<p>Say hello to&nbsp;<a href=\"https://www.figma.com/widget-docs/\" rel=\"noopener\">the Widgets API</a>! You want to know what it is and how to use it? That’s exactly what we’re going to do together in this post.</p>\n\n\n\n<span id=\"more-372991\"></span>\n\n\n<h3 id=\"figma-widgets-open-up-tons-of-possibilities\">Figma widgets open up tons of possibilities</h3>\n\n\n<p>Imagine that you’re working around the clock with your partner to design a large restaurant application. You’re both already collaborating on the same Figma board; both of you are sharing the exact same document with changes happening on the fly.</p>\n\n\n\n<p>Surely, you already know that collaboration involves more that just the design process:</p>\n\n\n\n<ul><li>project management,</li><li>hosting polls to gather votes,</li><li>importing and visualizing mock data,</li><li>and perhaps even playing a multiplayer game to cool-off after many hours of work.</li></ul>\n\n\n\n<p>We just require one person to manage everything and send-out links to other members of the group. But oh, that’s not very efficient, is it?</p>\n\n\n\n<p>Well, that’s where widgets come into play. We can conceivably do all of that — yes, everything —without ever leaving Figma.</p>\n\n\n\n<p>Here are just a few of the ways you might want to use widgets in Figma:</p>\n\n\n\n<ul><li>Creating tasks for&nbsp;<a href=\"https://www.figma.com/community/widget/1094001923188252679\" rel=\"noopener\">Jira</a>&nbsp;and&nbsp;<a href=\"https://www.figma.com/community/widget/1098405969270214551\" rel=\"noopener\">Asana</a></li><li>Creating&nbsp;<a href=\"https://www.figma.com/community/widget/1101944648482192724\" rel=\"noopener\">issues in GitHub</a></li><li>Displaying&nbsp;<a href=\"https://www.figma.com/community/widget/1039517642144861562\" rel=\"noopener\">Dynamic Data</a></li><li>Recording&nbsp;<a href=\"https://www.figma.com/community/widget/1100947233945489758\" rel=\"noopener\">voice memos</a></li><li>Creating&nbsp;<a href=\"https://www.figma.com/community/widget/1036372982291551669\" rel=\"noopener\">task lists</a></li><li><s>Wasting time</s>&nbsp;Playing&nbsp;<a href=\"https://www.figma.com/community/widget/1123835477666234652\" rel=\"noopener\">Tic-Tac-Toe</a></li><li>Tracking&nbsp;<a href=\"https://www.figma.com/community/widget/1026880323669555103\" rel=\"noopener\">activities</a></li><li>Creating&nbsp;<a href=\"https://www.figma.com/community/widget/1052257340061758363/FigJenda\" rel=\"noopener\">timers</a></li></ul>\n\n\n\n<p>The list goes&nbsp;<a href=\"https://www.figma.com/community/widgets\" rel=\"noopener\">on and on</a>. As you can tell, there’s already a plethora of widgets that you can freely use in your documents. In fact, you can add Widgets straight to your board from the Widgets menu (<code>Shift</code>+<code>I</code>).</p>\n\n\n\n<p>But we’re not here to learn how to use widgets, because that’s easy. Let us do what we do best: we’re gonna create our own Figma widget! This one will be inspired by&nbsp;<a href=\"https://quotesondesign.com/\" rel=\"noopener\">Chris Coyier’s design quotes website</a>. We’ll take the API, feed it into the widget, then display random design quotes directly in Figma.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"1125\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/quotesondesign.com_Screenshot.png?resize=2000%2C1125&#038;ssl=1\" alt=\"\" class=\"wp-image-372995\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/quotesondesign.com_Screenshot.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/quotesondesign.com_Screenshot.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/quotesondesign.com_Screenshot.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/quotesondesign.com_Screenshot.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/quotesondesign.com_Screenshot.png?resize=1536%2C864&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"heres-what-we-need\">Here’s what we need</h3>\n\n\n<p>I don’t like to be the bearer of bad news, but in order to develop widgets, you must be on Windows or Mac. Linux users, I’m sorry, but you’re out of luck. (You could still&nbsp;<a href=\"https://itsfoss.com/install-windows-10-virtualbox-linux/\" rel=\"noopener\">use a VM</a>&nbsp;if you want to follow along.)</p>\n\n\n\n<p>We’re gonna&nbsp;<a href=\"https://www.figma.com/downloads/\" rel=\"noopener\">download the Figma Desktop</a>&nbsp;application. The simplest way to get started is by generating a widget template, straight from the app.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/1.png?resize=1024%2C576&#038;ssl=1\" alt=\"\" class=\"wp-image-373861\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/1.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/1.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/1.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/1.png?resize=1536%2C864&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/1.png?w=1598&amp;ssl=1 1598w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Let’s create a new board by opening the widgets menu (<code>Shift</code>+&nbsp;<code>I</code>), switching to the&nbsp;<strong>Development</strong>&nbsp;tab, and creating a new item.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/2.png?resize=1024%2C576&#038;ssl=1\" alt=\"\" class=\"wp-image-373860\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/2.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/2.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/2.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/2.png?resize=1536%2C864&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/2.png?w=1598&amp;ssl=1 1598w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Following that, Figma will prompt you to name the new widget and decide whether it’s more tailored towards&nbsp;<a href=\"https://help.figma.com/hc/en-us/articles/1500004290201-Compare-Figma-and-FigJam\" rel=\"noopener\">design boards or FigJam boards</a>&nbsp;too. The former option is sufficient for the purposes of this article.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1598\" height=\"899\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/3.png?resize=1598%2C899&#038;ssl=1\" alt=\"\" class=\"wp-image-373858\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/3.png?w=1598&amp;ssl=1 1598w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/3.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/3.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/3.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/3.png?resize=1536%2C864&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And the customization doesn’t end here; Figma will also give you the option to start with a pre-made counter widget or an iFrame-enabled alternative that also gives you access to the Canvas and Fetch APIs (as well as all other browser APIs). We’ll go with the simple “Empty” option, but we’ll eventually modify it ourselves to make use of the Fetch API.</p>\n\n\n\n<p>You’ll then be prompted to save your new widget project to a special directory in your system. Once that’s done, launch your terminal and direct it to that folder. Don’t run any commands yet — we’ll do that later and purposefully get an error with the goal of learning more about the Widgets API.</p>\n\n\n<h3 id=\"designing-the-widget\">Designing the widget</h3>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"899\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screenshot_from_2022-08-23_14-51-27_1_clipdrop-enhance.webp.png?resize=1600%2C899&#038;ssl=1\" alt=\"\" class=\"wp-image-373862\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screenshot_from_2022-08-23_14-51-27_1_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screenshot_from_2022-08-23_14-51-27_1_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screenshot_from_2022-08-23_14-51-27_1_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screenshot_from_2022-08-23_14-51-27_1_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screenshot_from_2022-08-23_14-51-27_1_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’re pulling the design straight from&nbsp;<a href=\"https://quotesondesign.com/\" rel=\"noopener\">Chris Coyier’s design quotes website</a>. So, let’s go there and dive into by firing up DevTools.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/7EoQulkK?cover=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>The two key shortcuts that I’m using here are&nbsp;<code>Ctrl</code>+<code>Shift</code>+<code>C</code>&nbsp;(or&nbsp;<code>Cmd</code>+<code>Shift</code>+<code>C</code>) to toggle the “Pick element” tool, and&nbsp;<code>Shift</code>+<code>Click</code>&nbsp;to change the color format to HEX code. We’re doing this to learn about the colors, fonts, font weights and font sizes used in Chris’s website. All this information is critical to build a closely-resembling widget in Figma, which will be our next step! You can&nbsp;<a href=\"https://www.figma.com/file/H7tMwLt87kALvGohsbLlrB/Quotes-Widget%3A-Item\" rel=\"noopener\">grab the designed component</a>&nbsp;and use it in your own canvas.</p>\n\n\n\n<p>I won’t go into much detail here as this article’s main topic is building widgets by writing code. But I can’t stress enough how important it is to take good care of your&nbsp;<a href=\"https://www.figma.com/widget-docs/prototyping-widget-ui/\" rel=\"noopener\">widgets’ style</a>… CSS-Tricks already has a plethora of&nbsp;<a href=\"https://css-tricks.com/tag/figma/\">design-oriented Figma tutorials</a>; you won’t regret adding them to your reading list.</p>\n\n\n<h3 id=\"creating-the-layout-for-our-widget\">Creating the layout for our widget</h3>\n\n\n<p>With design out of the way, it’s time to take our programming fingers out and start building the gears of our widget.</p>\n\n\n\n<p>It’s very interesting how Figma translates its design building blocks to React-like components. Frame elements with the auto-layout feature, for example, are represented as the&nbsp;<code>&lt;AutoLayout /&gt;</code>&nbsp;component in code. In addition to that, we’ll be using two more components:&nbsp;<code>&lt;Text /&gt;</code>&nbsp;and&nbsp;<code>&lt;SVG /&gt;.</code></p>\n\n\n\n<p><a href=\"https://www.figma.com/file/H7tMwLt87kALvGohsbLlrB/Quotes-Widget%3A-Item?node-id=0%3A1\" rel=\"noopener\">Take a look at my Figma board</a>… I’m precisely asking you to focus on the object tree. It’s what we need to be able to translate our widget design to JSX code.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"899\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_1.png?resize=1600%2C899&#038;ssl=1\" alt=\"\" class=\"wp-image-372999\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_1.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_1.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_1.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_1.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_1.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As you can see, our design quotes widget demands three components to be imported. That’s a decent number of components considering that the&nbsp;<a href=\"https://www.figma.com/widget-docs/api/api-reference/#components\" rel=\"noopener\">full API</a>&nbsp;only contains eight layer-based nodes. But as you’ll soon see, these modules are more than sufficient to craft all kinds of layouts.</p>\n\n\n\n<pre rel=\"Typescript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// code.tsx\nconst { widget } = figma;\nconst { AutoLayout, Text, SVG } = widget;</code></pre>\n\n\n\n<p>And with this, we have all we need to go ahead and build the skeleton of our widget like we would in React:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function QuotesWidget() {\n  const quote = `...`;\n  const author = `...`;\n\n  return (\n    &lt;AutoLayout>\n      &lt;SVG />\n      &lt;AutoLayout>\n        &lt;Text>{quote}&lt;/Text>\n        &lt;Text>— {author}&lt;/Text>\n      &lt;/AutoLayout>\n      &lt;SVG />\n    &lt;/AutoLayout>\n  );\n}\n\nwidget.register(QuotesWidget);</code></pre>\n\n\n\n<p>This code is very confusing, to say the least. Right now, we can’t tell the design layers apart. Thankfully, we’re able to easily solve this issue through the use of the&nbsp;<code>name</code>&nbsp;property.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;AutoLayout name={\"Quote\"}>\n  &lt;SVG name={\"LeftQuotationMark\"} />\n  &lt;AutoLayout name={\"QuoteContent\"}>\n    &lt;Text name={\"QuoteText\"}>{quote}&lt;/Text>\n    &lt;Text name={\"QuoteAuthor\"}>— {author}&lt;/Text>\n  &lt;/AutoLayout>\n  &lt;SVG name={\"RightQuotationMark\"} />\n&lt;/AutoLayout>;</code></pre>\n\n\n\n<p>And, of course, we still can’t see our quotation mark SVGs, so let’s work on fixing that. The&nbsp;<code>&lt;SVG/&gt;</code>&nbsp;component accept a&nbsp;<code>src</code>property that takes the source code for an SVG element. There isn’t much to say on this one, so let’s keep it simple and jump straight back to code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const leftQuotationSvgSrc = `&lt;svg width=\"117\" height=\"103\" viewBox=\"0 0 117 103\" fill=\"none\" xmlns=\"&lt;http://www.w3.org/2000/svg>\">\n  // shortened for brevity\n&lt;/svg>`;\nconst rightQuotationSvgSrc = `&lt;svg width=\"118\" height=\"103\" viewBox=\"0 0 118 103\" fill=\"none\" xmlns=\"&lt;http://www.w3.org/2000/svg>\">\n// shortened for brevity\n&lt;/svg>`;\n\nfunction QuotesWidget() {\n  return (\n    &lt;SVG name={\"LeftQuotationMark\"} src={leftQuotationSvgSrc} />\n    &lt;SVG name={\"RightQuotationMark\"} src={rightQuotationSvgSrc} />\n  );\n}</code></pre>\n\n\n\n<p>I think we can all agree that everything is much clearer now! When we name things, their purpose suddenly becomes much more obvious to the readers of our code.</p>\n\n\n<h3 id=\"previewing-our-widget-in-realtime\">Previewing our widget in real-time</h3>\n\n\n<p>Figma offers a great developer experience when building widgets, including (but not limited to )&nbsp;<a href=\"https://www.figma.com/widget-docs/prototyping-widget-ui/#widget-state-and-rendering\" rel=\"noopener\">hot-reloading</a>. With this feature, we’re able to code and preview changes to our widget in real-time.</p>\n\n\n\n<p>Get started by opening the widgets menu (<code>Shift</code>+<code>I</code>), switching to the development tab and clicking or dragging your new widget to the board. Unable to locate your widget? Don’t worry, just click on the three-dot menu and import your widget’s&nbsp;<code>manifest.json</code>&nbsp;file. Yes, that’s all it takes bring it back to existence!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"1124\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_6.png?resize=2000%2C1124&#038;ssl=1\" alt=\"\" class=\"wp-image-373000\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_6.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_6.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_6.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_6.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_6.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Wait, did you get an error message at the bottom of your screen?</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"899\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7_clipdrop-enhance.webp.png?resize=1600%2C899&#038;ssl=1\" alt=\"\" class=\"wp-image-373863\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If so, let’s investigate. Click on “<strong>Open console</strong>” and read what it has to say. If the&nbsp;<strong>Open console</strong>&nbsp;button is gone, there’s an alternative way to open the debugging console. Click on the Figma logo, jump to the widgets category and reveal the development menu.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"575\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_8_clipdrop-enhance.webp.png?resize=1024%2C575&#038;ssl=1\" alt=\"\" class=\"wp-image-373864\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_8_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_8_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_8_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_8_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_8_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That error is likely due to the fact that we haven’t compiled our TypeScript to JavaScript yet. We can do that in the command line by running&nbsp;<code>npm install</code>&nbsp;and&nbsp;<code>npm run watch</code>. (or&nbsp;<code>yarn</code>&nbsp;and&nbsp;<code>yarn watch</code>&nbsp;). No errors this time!</p>\n\n\n\n<p>One more obstacle you might hit is that the widget fails to re-render any time the code is changed. We can easily force our widget to update using the following context menu command:&nbsp;<strong>Widgets</strong>&nbsp;→&nbsp;<strong>Re-render widget</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"575\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_9_clipdrop-enhance.webp.png?resize=1024%2C575&#038;ssl=1\" alt=\"\" class=\"wp-image-373865\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_9_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_9_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_9_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_9_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_9_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"styling-the-widget\">Styling the widget</h3>\n\n\n<p>As it currently stands, the&nbsp;<em>looks</em>&nbsp;of our widgets are still pretty far from our final goal.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"575\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_10_clipdrop-enhance.webp.png?resize=1024%2C575&#038;ssl=1\" alt=\"\" class=\"wp-image-373866\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_10_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_10_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_10_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_10_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_10_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>So how do we style Figma components from code? Maybe with CSS like we would do in a React project? Negative. With Figma widgets,&nbsp;<em>all</em>&nbsp;the styling happens through a set of&nbsp;<a href=\"https://www.figma.com/widget-docs/api/component-AutoLayout#layoutprops\" rel=\"noopener\">well-documented props</a>. Lucky for us, these items are named almost&nbsp;<em>identically</em>&nbsp;to their counterparts in Figma.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"575\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_4.png?resize=1024%2C575&#038;ssl=1\" alt=\"\" class=\"wp-image-373005\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_4.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_4.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_4.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_4.png?resize=1536%2C863&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_4.png?w=2000&amp;ssl=1 2000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’ll get started by configuring our two&nbsp;<code>&lt;AutoLayout /&gt;</code>&nbsp;components. As you can see in the infographic above, prop names are pretty descriptive of their purpose. This makes it easy for us to jump straight into code and start making some changes. I won’t be showing the whole code again, so please rely on the component names to guide you where the snippets belongs.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;AutoLayout\n  name={\"Quote\"}\n  direction={\"horizontal\"}\n  verticalAlignItems={\"start\"}\n  horizontalAlignItems={\"center\"}\n  spacing={54}\n  padding={{\n    horizontal: 61,\n    vertical: 47,\n  }}\n>\n  &lt;AutoLayout\n    name={\"QuoteContent\"}\n    direction={\"vertical\"}\n    verticalAlignItems={\"end\"}\n    horizontalAlignItems={\"start\"}\n    spacing={10}\n    padding={{\n      horizontal: 0,\n      vertical: 0,\n    }}\n  >&lt;/AutoLayout>\n&lt;/AutoLayout>;</code></pre>\n\n\n\n<p>We just made a lot of progress! Let’s save and jump back to Figma to see how our widget looks like. Remember how Figma reloads widgets automatically upon new changes?</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"899\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp-1.png?resize=1600%2C899&#038;ssl=1\" alt=\"\" class=\"wp-image-373869\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp-1.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp-1.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp-1.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp-1.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp-1.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But it’s not quite there yet. We must also add a background color to the root component:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;AutoLayout name={\"Quote\"} fill={\"#ffffff\"}></code></pre>\n\n\n\n<p>Again, take a look at your Figma board and notice how changes can be reflected almost immediately back into the widget.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"575\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp.png?resize=1024%2C575&#038;ssl=1\" alt=\"\" class=\"wp-image-373867\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_11_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Let’s move along this guide and style the&nbsp;<code>&lt;Text&gt;</code>&nbsp;components.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"1124\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_5.png?resize=2000%2C1124&#038;ssl=1\" alt=\"\" class=\"wp-image-373008\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_5.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_5.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_5.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_5.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_5.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>After taking a look at the&nbsp;<a href=\"https://www.figma.com/widget-docs/api/component-Text#text-style-props\" rel=\"noopener\">Widgets API documentation</a>, it’s again clear that property names are almost identical to their counterparts in the Figma app, as can be seen in the infographic above. We’ll also be using values from the last section where we inspected Chris’ website.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"899\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_13_clipdrop-enhance.webp.png?resize=1600%2C899&#038;ssl=1\" alt=\"\" class=\"wp-image-373868\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_13_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_13_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_13_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_13_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_13_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;Text name={'QuoteText'}\n  fontFamily={'Lora'}\n  fontSize={36}\n  width={700}\n  fill={'#545454'}\n  fontWeight={'normal'}\n>{quote}&lt;/Text>\n\n&lt;Text name={'QuoteAuthor'}\n  fontFamily={'Raleway'}\n  fontSize={26}\n  width={700}\n  fill={'#16B6DF'}\n  fontWeight={'bold'}\n  textCase={'upper'}\n>— {author}&lt;/Text></code></pre>\n\n\n<h3 id=\"adding-state-to-the-widget\">Adding state to the widget</h3>\n\n\n<p>Oour widget currently displays the same quote, but we want to pull from the entire pool of quotes at random. We must add&nbsp;<em><a href=\"https://reactjs.org/docs/state-and-lifecycle.html\" rel=\"noopener\">state</a></em>&nbsp;to our widget, which all React developers know is a variable whose change triggers the re-rendering of our component.</p>\n\n\n\n<p>With Figma, state is created with the&nbsp;<code><a href=\"https://www.figma.com/widget-docs/widget-state/\" rel=\"noopener\">useSyncedState</a></code> hook; it’s pretty much&nbsp;<a href=\"https://reactjs.org/docs/hooks-state.html\" rel=\"noopener\">React’s&nbsp;<code>useState</code></a>, but it requires programmers to specify a&nbsp;unique&nbsp;key. This requirement stems from the fact that Figma must sync our widget’s state across&nbsp;<em>all</em>&nbsp;clients that may be viewing the same design board, but through different computers.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const { useSyncedState } = widget;\n\nfunction QuotesWidget() {\n  const [quote, setQuote] = useSyncedState(\"quote-text\", \"\");\n  const [author, setAuthor] = useSyncedState(\"quote-author\", \"\");\n}</code></pre>\n\n\n\n<p>That’s all the change that we need for now. In the next section, we’ll figure out how to fetch data from the Internet. Spoiler Alert: it’s not as simple as it seems.</p>\n\n\n<h3 id=\"fetching-data-from-the-network\">Fetching data from the network</h3>\n\n\n<p>Recall when Figma gave us the choice to start with an iFrame-enabled widget. Although we didn’t go with that option, we must still implement some of its features. Let me explain why we can’t simply call&nbsp;<code>fetch()</code>&nbsp;within our widget code.</p>\n\n\n\n<p>When you use a widget, you are running JavaScript code on your own computer that’s written by someone else. While all widgets are thoroughly reviewed by the Figma staff, it’s still a huge security hole as we all know how much&nbsp;<a href=\"https://css-tricks.com/what-is-xss/\">damage can be created by even one line of JavaScript</a>.</p>\n\n\n\n<p>As a result, Figma cannot simply&nbsp;<code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\" rel=\"noopener\">eval()</a></code>&nbsp;any widget code written by anonymous programmers. Long story short, the team decided that the best solution was running third-party code in a closely-guarded sandbox environment. And as you might have guessed, browser APIs are unavailable in such an environment.</p>\n\n\n\n<p>But don’t fret, Figma’s solution to this second problem is&nbsp;<code>&lt;iframe&gt;</code>s. Any HTML code that we write in a file, preferably called&nbsp;<code>ui.html</code>, will have access to all browser APIs. You might be wondering how we can trigger this code from the widget, but we’ll look into that later. Right now, let’s jump back into code:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// manifest.json\n{\n  \"ui\": \"ui.html\"\n}</code></pre>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- ui.html -->\n&lt;script>\nwindow.onmessage = async (event) => {\n  if (event.data.pluginMessage.type === 'networkRequest') {\n    // TODO: fetch data from the server\n\n    window.parent.postMessage({\n      pluginMessage: {\n        // TODO: return fetched data\n      }\n    }, '*')\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>That’s the general template for widget-to-<code>iframe</code>&nbsp;communication. Let’s use it to fetch data from the server:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- ui.html -->\n&lt;script>\nwindow.onmessage = async (event) => {\n  if (event.data.pluginMessage.type === 'networkRequest') {\n    // Get random number from 0 to 100\n    const randomPage = Math.round(Math.random() * 100)\n\n    // Get a random quote from the Design Quotes API\n    const res = await fetch(`https://quotesondesign.com/wp-json/wp/v2/posts/?orderby=rand&amp;per_page=1&amp;page=${randomPage}&amp;_fields=title,yoast_head_json`)\n    const data = await res.json()\n\n    // Extract author name and quote content from response\n    const authorName = data[0].title.rendered\n    const quoteContent = data[0].yoast_head_json.og_description\n\n    window.parent.postMessage({\n      pluginMessage: {\n        authorName,\n        quoteContent\n      }\n    }, '*')\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>We’re leaving out error-handling to keep this simple and to-the-point. Let’s jump back into the widget code and see how we access functions defined in the&nbsp;<code>&lt;iframe&gt;</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function fetchData() {\n  return new Promise&lt;void>(resolve => {\n    figma.showUI(__html__, {visible: false})\n    figma.ui.postMessage({type: 'networkRequest'})\n\n    figma.ui.onmessage = async ({authorName, quoteContent}) => {\n      setAuthor(authorName)\n      setQuote(quoteContent)\n\n      resolve()\n    }\n  })\n}</code></pre>\n\n\n\n<p>As you can see, we’re first telling Figma to expose access to our hidden&nbsp;<code>&lt;iframe&gt;</code>&nbsp;and to trigger an event with the name&nbsp;<code>\"networkRequest\"</code>. We’re handling this event in the&nbsp;<code>ui.html</code>&nbsp;file by checking&nbsp;<code>event.data.pluginMessage.type === 'networkRequest',</code>&nbsp;and then posting data back to the widget.</p>\n\n\n\n<p>But nothing is happening yet… We still haven’t called the&nbsp;<code>fetchData()</code>&nbsp;function. If we call it directly in the component function, the following error occurs in the console:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Cannot use showUI during widget rendering.</code></pre>\n\n\n\n<p>Figma is telling us not to call&nbsp;<code>showUI</code>&nbsp;directly in the function body… So, where should we put it? The answer to that is one new hook and one new function:&nbsp;<code><a href=\"https://www.figma.com/widget-docs/api/properties/widget-useeffect/\" rel=\"noopener\">useEffect</a></code>&nbsp;and&nbsp;<code><a href=\"https://www.figma.com/widget-docs/api/properties/widget-waitfortask/\" rel=\"noopener\">waitForTask</a></code>. You might already have familiarity with&nbsp;<code>useEffect</code>&nbsp;if you’re a React developer, but we’re gonna use it here to fetch data from the server when the widget component mounts.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const { useEffect, waitForTask } = widget;\n\nfunction QuotesWidget() {\n  useEffect(() => {\n    waitForTask(fetchData());\n  });\n}</code></pre>\n\n\n\n<p>But this will result in yet another “error” where our widget will keep re-rendering with a new quote, forever. This happens because&nbsp;<code>useEffect</code>, by definition, triggers again whenever the widget’s state changes, nay when we call&nbsp;<code>fetchData</code>. And while&nbsp;<a href=\"https://css-tricks.com/run-useeffect-only-once/\">there’s a technique</a>&nbsp;to only call&nbsp;<code>useEffect</code>&nbsp;once in React, it does not work on Figma’s implementation. From Figma’s docs:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Because of&nbsp;How Widgets Run, <code>useEffect</code> should handle being called multiple times with the same state.</p></blockquote>\n\n\n\n<p>Thankfully, there’s a simple workaround that we can take advantage of and call&nbsp;<code>useEffect</code>&nbsp;only once when the component first mounts, and it’s by checking whether or not the state’s values are still empty:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function QuotesWidget() {\n  useEffect(() => {\n    if (!author.length &amp; !quote.length) {\n      waitForTask(fetchData());\n    }\n  });\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">You might run into a scary “<strong>memory access out of bounds”</strong>&nbsp;error. It’s&nbsp;<a href=\"https://forum.figma.com/t/memory-access-out-of-bounds/6300\" rel=\"noopener\">quite common to see in plugin and widget development</a>. Just restart Figma and it won’t be there anymore.</p>\n\n\n\n<p>You might have noticed that sometimes, the quote text contains weird characters.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"899\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_15_clipdrop-enhance.webp.png?resize=1600%2C899&#038;ssl=1\" alt=\"\" class=\"wp-image-373870\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_15_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_15_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_15_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_15_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_15_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>These are&nbsp;<a href=\"https://en.wikipedia.org/wiki/List_of_Unicode_characters\" rel=\"noopener\">Unicode characters</a>&nbsp;and we must properly format them in code:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- ui.html -->\n&lt;script>\nwindow.onmessage = async (event) => {\n  // ...\n  const quoteContent = decodeEntities(data[0].yoast_head_json.og_description);\n};\n\n// &lt;https://stackoverflow.com/a/9609450>\nvar decodeEntities = (function () {\n  // this prevents any overhead from creating the object each time\n  var element = document.createElement(\"div\");\n\n  function decodeHTMLEntities(str) {\n    if (str &amp;&amp; typeof str === \"string\") {\n      // strip script/html tags\n      str = str.replace(/&lt;script[^>]*>([\\\\\\\\S\\\\\\\\s]*?)&lt;\\\\\\\\/script>/gim, \"\");\n      str = str.replace(/&lt;\\\\\\\\/?\\\\\\\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gim, \"\");\n      element.innerHTML = str;\n      str = element.textContent;\n      element.textContent = \"\";\n    }\n\n    return str;\n  }\n\n  return decodeHTMLEntities;\n})();\n&lt;/script></code></pre>\n\n\n\n<p>And&nbsp;<em>voilà</em>, our widget fetched a brand new design quote every single time it’s added to the design board.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/lpNG7FTn?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n<h3 id=\"adding-a-property-menu-to-our-widget\">Adding a property menu to our widget</h3>\n\n\n<p>While our widget fetches a fresh quote upon instantiation, it would be much more practical if we could do this process again but without deleting it. This section will be short as the solution is quite remarkable. With&nbsp;<a href=\"https://www.figma.com/widget-docs/handling-user-events/#property-menus\" rel=\"noopener\">property menus</a>, we can add interactivity to our widget with a single call to the&nbsp;<code><a href=\"https://www.figma.com/widget-docs/api/type-PropertyMenu\" rel=\"noopener\">usePropertyMenu</a></code>&nbsp;hook.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1438\" height=\"736\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/widget_property_menu-6c38e8d52bc63b92f3bd558c18372088-1.png?resize=1438%2C736&#038;ssl=1\" alt=\"\" class=\"wp-image-373018\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/widget_property_menu-6c38e8d52bc63b92f3bd558c18372088-1.png?w=1438&amp;ssl=1 1438w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/widget_property_menu-6c38e8d52bc63b92f3bd558c18372088-1.png?resize=300%2C154&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/widget_property_menu-6c38e8d52bc63b92f3bd558c18372088-1.png?resize=1024%2C524&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/widget_property_menu-6c38e8d52bc63b92f3bd558c18372088-1.png?resize=768%2C393&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Credit:&nbsp;<a href=\"https://www.figma.com/widget-docs/handling-user-events#click-listeners\" rel=\"noopener\">Figma Docs</a>.</figcaption></figure>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const { usePropertyMenu } = widget;\n\nfunction QuotesWidget() {\n  usePropertyMenu(\n    [\n      {\n        itemType: \"action\",\n        propertyName: \"generate\",\n\ttooltip: \"Generate\",\n        icon: `&lt;svg width=\"22\" height=\"15\" viewBox=\"0 0 22 15\" fill=\"none\" xmlns=\"&lt;http://www.w3.org/2000/svg&gt;\"&gt;\n          &lt;!-- Shortened for brevity -->\n        &lt;/svg>`,\n      },\n    ],\n    () => fetchData()\n  );\n}</code></pre>\n\n\n\n<p>With one simple hook we’re able to create a button that appears near our widget when it’s selected. That was the last piece that we needed to add in order to complete this project.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/5mZYlodV?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n<h3 id=\"publishing-our-widget-to-the-public\">Publishing our widget to the public</h3>\n\n\n<p>There’s not much use in building a widget if, well, no one&nbsp;<em>uses</em>&nbsp;it. And while&nbsp;<a href=\"https://help.figma.com/hc/en-us/articles/5736579713943-Create-private-widgets-for-an-organization\" rel=\"noopener\">Figma grants organizations with the option to launch&nbsp;<strong>private</strong>&nbsp;widgets</a>&nbsp;for internal use, it’s much more common to release these little programs to the world.</p>\n\n\n\n<p>Figma has a delicate widget review process that may take up 5 to 10 business days. And while the design quotes widget we built together is&nbsp;<a href=\"https://www.figma.com/community/widget/1143528205203220816\" rel=\"noopener\">already in the widget library</a>,&nbsp;I will still demonstrate how it got there.&nbsp;<strong>Please don’t attempt to re-publish this widget again as that will only result in removal</strong>. But if you gave it some significant alterations, go ahead and share your own widget with the community!</p>\n\n\n\n<p>Get started by clicking the widgets menu (<code>Shift</code>+<code>I</code>) and switching to the&nbsp;<strong>Development</strong>&nbsp;tab to view our widget. Click on the three-dots menu and press&nbsp;<strong>Publish</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"899\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7-2_clipdrop-enhance.webp.png?resize=1600%2C899&#038;ssl=1\" alt=\"\" class=\"wp-image-373871\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7-2_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7-2_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7-2_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7-2_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_7-2_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Figma will prompt you to enter some details about your widget, such as a title, description, and some tags. We’ll also need a 128×128 icon image and a 1920×960 banner image.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"899\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_6-1_clipdrop-enhance.webp.png?resize=1600%2C899&#038;ssl=1\" alt=\"\" class=\"wp-image-373859\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_6-1_clipdrop-enhance.webp.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_6-1_clipdrop-enhance.webp.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_6-1_clipdrop-enhance.webp.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_6-1_clipdrop-enhance.webp.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Figma_Widgets_6-1_clipdrop-enhance.webp.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>After importing all these assets, we still need a screenshot of our widget. Close the publishing modal (don’t worry, you won’t lose your data) and right-click on the widget to reveal an interesting context menu. Find the&nbsp;<strong>Copy/Paste as</strong>category and select&nbsp;<strong>Copy as PNG</strong>.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/yQExLuJW?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>With that done, let’s go back to the publishing modal and paste the widget’s screenshot:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/out2-1.gif?resize=1024%2C576&#038;ssl=1\" alt=\"\" class=\"wp-image-373023\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>Scroll down and finally publish your modal. Celebrate! &#x1f389;</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/iU8dac4e?cover=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"1124\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_8-1.png?resize=2000%2C1124&#038;ssl=1\" alt=\"\" class=\"wp-image-373024\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_8-1.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_8-1.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_8-1.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_8-1.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Figma_Widgets_8-1.png?resize=1536%2C863&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Figma will reach out to you in a couple of days about the status of your modal’s review. In the case of a rejection, you’ll be given the&nbsp;<a href=\"https://help.figma.com/hc/en-us/articles/4410337103639-Publish-widgets-to-the-Figma-Community#Widgets_review_process\" rel=\"noopener\">opportunity to make changes and submit again</a>.</p>\n\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n\n<p>We just built a Figma widget from scratch! There are many things not covered here, such as&nbsp;<a href=\"https://www.figma.com/widget-docs/handling-user-events\" rel=\"noopener\">click events</a>,&nbsp;<a href=\"https://www.figma.com/widget-docs/text-editing\" rel=\"noopener\">input forms</a>, and&nbsp;<a href=\"https://www.figma.com/widget-docs/images-in-widgets\" rel=\"noopener\">much more</a>. You can dig into the full source code for the widget in&nbsp;<a href=\"https://github.com/eludadev/figma-design-quotes\" rel=\"noopener\">this GitHub repo</a>.</p>\n\n\n\n<p>To those who aspire to take their Figma skills to greater levels, I suggest exploring the Widgets community and using what catches your eye as inspiration. Keep building more widgets, keep sharpening your React skills, and before you even realize it, you’ll be teaching me how to do all this.</p>\n\n\n<h3 id=\"further-resources\">Further resources</h3>\n\n\n<p>I had to refer to lots of documentation while I was making this widget. I thought I’d share what I found to help the most.</p>\n\n\n<h4 id=\"build-more-widgets\">Build more widgets:</h4>\n\n\n<ul><li><a href=\"https://www.figma.com/widget-docs/best-practices\" rel=\"noopener\">Best practices for building widgets</a></li><li><a href=\"https://github.com/figma/widget-samples\" rel=\"noopener\">Official Figma widget examples, with code</a></li></ul>\n\n\n<h4 id=\"learn-widgets-in-greater-depth\">Learn widgets in greater depth:</h4>\n\n\n<ul><li><a href=\"https://www.figma.com/widget-docs/api/api-reference/#hooks\" rel=\"noopener\">All widget hooks</a></li><li><a href=\"https://www.figma.com/widget-docs/api/api-reference/#components\" rel=\"noopener\">All widget components</a></li><li><a href=\"https://www.figma.com/widget-docs/how-widgets-run\" rel=\"noopener\">How widgets run behind the scenes</a></li></ul>\n\n\n<h4 id=\"widgets-vs-plugins\">Widgets vs. plugins</h4>\n\n\n<ul><li><a href=\"https://www.figma.com/widget-docs/widgets-vs-plugins\" rel=\"noopener\">Widgets vs Plugins</a></li><li><a href=\"https://www.figma.com/plugin-docs/\" rel=\"noopener\">Introduction to Figma Plugins</a></li><li><a href=\"https://www.figma.com/plugin-docs/how-plugins-run\" rel=\"noopener\">How plugins run behind the scenes</a></li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/building-interactive-figma-widgets/\">Building Interactive Figma Widgets</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Figma has always encouraged collaboration between developers and designers. It strives on an endless treasury of community-made plugins. Need 3D elements? There’s a plugin for that. Need abstract SVGs? There’s a plugin for that, too.\n\n\n\nThat said, the design part of Figma has always been relatively static — always working with unmovable rectangles connected to each other through predefined user interactions. But what if I told you that your designs could suddenly come to life — that they could be animated, interactive, and even stateful? Then, what would separate concept from implementation?\n\n\n\nFigma announced in June that it’s bringing JavaScript-powered widgets to the table. Now, designers have can browse and implement logic-driven components straight in Figma!\n\n\n\nSay hello to the Widgets API! You want to know what it is and how to use it? That’s exactly what we’re going to do together in this post.\n\n\n\n\n\n\nFigma widgets open up tons of possibilities\n\n\nImagine that you’re working around the clock with your partner to design a large restaurant application. You’re both already collaborating on the same Figma board; both of you are sharing the exact same document with changes happening on the fly.\n\n\n\nSurely, you already know that collaboration involves more that just the design process:\n\n\n\nproject management,hosting polls to gather votes,importing and visualizing mock data,and perhaps even playing a multiplayer game to cool-off after many hours of work.\n\n\n\nWe just require one person to manage everything and send-out links to other members of the group. But oh, that’s not very efficient, is it?\n\n\n\nWell, that’s where widgets come into play. We can conceivably do all of that — yes, everything —without ever leaving Figma.\n\n\n\nHere are just a few of the ways you might want to use widgets in Figma:\n\n\n\nCreating tasks for Jira and AsanaCreating issues in GitHubDisplaying Dynamic DataRecording voice memosCreating task listsWasting time Playing Tic-Tac-ToeTracking activitiesCreating timers\n\n\n\nThe list goes on and on. As you can tell, there’s already a plethora of widgets that you can freely use in your documents. In fact, you can add Widgets straight to your board from the Widgets menu (Shift+I).\n\n\n\nBut we’re not here to learn how to use widgets, because that’s easy. Let us do what we do best: we’re gonna create our own Figma widget! This one will be inspired by Chris Coyier’s design quotes website. We’ll take the API, feed it into the widget, then display random design quotes directly in Figma.\n\n\n\n\n\n\nHere’s what we need\n\n\nI don’t like to be the bearer of bad news, but in order to develop widgets, you must be on Windows or Mac. Linux users, I’m sorry, but you’re out of luck. (You could still use a VM if you want to follow along.)\n\n\n\nWe’re gonna download the Figma Desktop application. The simplest way to get started is by generating a widget template, straight from the app.\n\n\n\n\n\n\n\nLet’s create a new board by opening the widgets menu (Shift+ I), switching to the Development tab, and creating a new item.\n\n\n\n\n\n\n\nFollowing that, Figma will prompt you to name the new widget and decide whether it’s more tailored towards design boards or FigJam boards too. The former option is sufficient for the purposes of this article.\n\n\n\n\n\n\n\nAnd the customization doesn’t end here; Figma will also give you the option to start with a pre-made counter widget or an iFrame-enabled alternative that also gives you access to the Canvas and Fetch APIs (as well as all other browser APIs). We’ll go with the simple “Empty” option, but we’ll eventually modify it ourselves to make use of the Fetch API.\n\n\n\nYou’ll then be prompted to save your new widget project to a special directory in your system. Once that’s done, launch your terminal and direct it to that folder. Don’t run any commands yet — we’ll do that later and purposefully get an error with the goal of learning more about the Widgets API.\n\n\nDesigning the widget\n\n\n\n\n\n\nWe’re pulling the design straight from Chris Coyier’s design quotes website. So, let’s go there and dive into by firing up DevTools.\n\n\n\n\n\n\n\n\n\nThe two key shortcuts that I’m using here are Ctrl+Shift+C (or Cmd+Shift+C) to toggle the “Pick element” tool, and Shift+Click to change the color format to HEX code. We’re doing this to learn about the colors, fonts, font weights and font sizes used in Chris’s website. All this information is critical to build a closely-resembling widget in Figma, which will be our next step! You can grab the designed component and use it in your own canvas.\n\n\n\nI won’t go into much detail here as this article’s main topic is building widgets by writing code. But I can’t stress enough how important it is to take good care of your widgets’ style… CSS-Tricks already has a plethora of design-oriented Figma tutorials; you won’t regret adding them to your reading list.\n\n\nCreating the layout for our widget\n\n\nWith design out of the way, it’s time to take our programming fingers out and start building the gears of our widget.\n\n\n\nIt’s very interesting how Figma translates its design building blocks to React-like components. Frame elements with the auto-layout feature, for example, are represented as the <AutoLayout /> component in code. In addition to that, we’ll be using two more components: <Text /> and <SVG />.\n\n\n\nTake a look at my Figma board… I’m precisely asking you to focus on the object tree. It’s what we need to be able to translate our widget design to JSX code.\n\n\n\n\n\n\n\nAs you can see, our design quotes widget demands three components to be imported. That’s a decent number of components considering that the full API only contains eight layer-based nodes. But as you’ll soon see, these modules are more than sufficient to craft all kinds of layouts.\n\n\n\n// code.tsx\nconst { widget } = figma;\nconst { AutoLayout, Text, SVG } = widget;\n\n\n\nAnd with this, we have all we need to go ahead and build the skeleton of our widget like we would in React:\n\n\n\nfunction QuotesWidget() {\n  const quote = `...`;\n  const author = `...`;\n\n  return (\n    <AutoLayout>\n      <SVG />\n      <AutoLayout>\n        <Text>{quote}</Text>\n        <Text>— {author}</Text>\n      </AutoLayout>\n      <SVG />\n    </AutoLayout>\n  );\n}\n\nwidget.register(QuotesWidget);\n\n\n\nThis code is very confusing, to say the least. Right now, we can’t tell the design layers apart. Thankfully, we’re able to easily solve this issue through the use of the name property.\n\n\n\n<AutoLayout name={\"Quote\"}>\n  <SVG name={\"LeftQuotationMark\"} />\n  <AutoLayout name={\"QuoteContent\"}>\n    <Text name={\"QuoteText\"}>{quote}</Text>\n    <Text name={\"QuoteAuthor\"}>— {author}</Text>\n  </AutoLayout>\n  <SVG name={\"RightQuotationMark\"} />\n</AutoLayout>;\n\n\n\nAnd, of course, we still can’t see our quotation mark SVGs, so let’s work on fixing that. The <SVG/> component accept a srcproperty that takes the source code for an SVG element. There isn’t much to say on this one, so let’s keep it simple and jump straight back to code:\n\n\n\nconst leftQuotationSvgSrc = `<svg width=\"117\" height=\"103\" viewBox=\"0 0 117 103\" fill=\"none\" xmlns=\"<http://www.w3.org/2000/svg>\">\n  // shortened for brevity\n</svg>`;\nconst rightQuotationSvgSrc = `<svg width=\"118\" height=\"103\" viewBox=\"0 0 118 103\" fill=\"none\" xmlns=\"<http://www.w3.org/2000/svg>\">\n// shortened for brevity\n</svg>`;\n\nfunction QuotesWidget() {\n  return (\n    <SVG name={\"LeftQuotationMark\"} src={leftQuotationSvgSrc} />\n    <SVG name={\"RightQuotationMark\"} src={rightQuotationSvgSrc} />\n  );\n}\n\n\n\nI think we can all agree that everything is much clearer now! When we name things, their purpose suddenly becomes much more obvious to the readers of our code.\n\n\nPreviewing our widget in real-time\n\n\nFigma offers a great developer experience when building widgets, including (but not limited to ) hot-reloading. With this feature, we’re able to code and preview changes to our widget in real-time.\n\n\n\nGet started by opening the widgets menu (Shift+I), switching to the development tab and clicking or dragging your new widget to the board. Unable to locate your widget? Don’t worry, just click on the three-dot menu and import your widget’s manifest.json file. Yes, that’s all it takes bring it back to existence!\n\n\n\n\n\n\n\nWait, did you get an error message at the bottom of your screen?\n\n\n\n\n\n\n\nIf so, let’s investigate. Click on “Open console” and read what it has to say. If the Open console button is gone, there’s an alternative way to open the debugging console. Click on the Figma logo, jump to the widgets category and reveal the development menu.\n\n\n\n\n\n\n\nThat error is likely due to the fact that we haven’t compiled our TypeScript to JavaScript yet. We can do that in the command line by running npm install and npm run watch. (or yarn and yarn watch ). No errors this time!\n\n\n\nOne more obstacle you might hit is that the widget fails to re-render any time the code is changed. We can easily force our widget to update using the following context menu command: Widgets → Re-render widget.\n\n\n\n\n\n\nStyling the widget\n\n\nAs it currently stands, the looks of our widgets are still pretty far from our final goal.\n\n\n\n\n\n\n\nSo how do we style Figma components from code? Maybe with CSS like we would do in a React project? Negative. With Figma widgets, all the styling happens through a set of well-documented props. Lucky for us, these items are named almost identically to their counterparts in Figma.\n\n\n\n\n\n\n\nWe’ll get started by configuring our two <AutoLayout /> components. As you can see in the infographic above, prop names are pretty descriptive of their purpose. This makes it easy for us to jump straight into code and start making some changes. I won’t be showing the whole code again, so please rely on the component names to guide you where the snippets belongs.\n\n\n\n<AutoLayout\n  name={\"Quote\"}\n  direction={\"horizontal\"}\n  verticalAlignItems={\"start\"}\n  horizontalAlignItems={\"center\"}\n  spacing={54}\n  padding={{\n    horizontal: 61,\n    vertical: 47,\n  }}\n>\n  <AutoLayout\n    name={\"QuoteContent\"}\n    direction={\"vertical\"}\n    verticalAlignItems={\"end\"}\n    horizontalAlignItems={\"start\"}\n    spacing={10}\n    padding={{\n      horizontal: 0,\n      vertical: 0,\n    }}\n  ></AutoLayout>\n</AutoLayout>;\n\n\n\nWe just made a lot of progress! Let’s save and jump back to Figma to see how our widget looks like. Remember how Figma reloads widgets automatically upon new changes?\n\n\n\n\n\n\n\nBut it’s not quite there yet. We must also add a background color to the root component:\n\n\n\n<AutoLayout name={\"Quote\"} fill={\"#ffffff\"}>\n\n\n\nAgain, take a look at your Figma board and notice how changes can be reflected almost immediately back into the widget.\n\n\n\n\n\n\n\nLet’s move along this guide and style the <Text> components.\n\n\n\n\n\n\n\nAfter taking a look at the Widgets API documentation, it’s again clear that property names are almost identical to their counterparts in the Figma app, as can be seen in the infographic above. We’ll also be using values from the last section where we inspected Chris’ website.\n\n\n\n\n\n\n\n<Text name={'QuoteText'}\n  fontFamily={'Lora'}\n  fontSize={36}\n  width={700}\n  fill={'#545454'}\n  fontWeight={'normal'}\n>{quote}</Text>\n\n<Text name={'QuoteAuthor'}\n  fontFamily={'Raleway'}\n  fontSize={26}\n  width={700}\n  fill={'#16B6DF'}\n  fontWeight={'bold'}\n  textCase={'upper'}\n>— {author}</Text>\n\n\nAdding state to the widget\n\n\nOour widget currently displays the same quote, but we want to pull from the entire pool of quotes at random. We must add state to our widget, which all React developers know is a variable whose change triggers the re-rendering of our component.\n\n\n\nWith Figma, state is created with the useSyncedState hook; it’s pretty much React’s useState, but it requires programmers to specify a unique key. This requirement stems from the fact that Figma must sync our widget’s state across all clients that may be viewing the same design board, but through different computers.\n\n\n\nconst { useSyncedState } = widget;\n\nfunction QuotesWidget() {\n  const [quote, setQuote] = useSyncedState(\"quote-text\", \"\");\n  const [author, setAuthor] = useSyncedState(\"quote-author\", \"\");\n}\n\n\n\nThat’s all the change that we need for now. In the next section, we’ll figure out how to fetch data from the Internet. Spoiler Alert: it’s not as simple as it seems.\n\n\nFetching data from the network\n\n\nRecall when Figma gave us the choice to start with an iFrame-enabled widget. Although we didn’t go with that option, we must still implement some of its features. Let me explain why we can’t simply call fetch() within our widget code.\n\n\n\nWhen you use a widget, you are running JavaScript code on your own computer that’s written by someone else. While all widgets are thoroughly reviewed by the Figma staff, it’s still a huge security hole as we all know how much damage can be created by even one line of JavaScript.\n\n\n\nAs a result, Figma cannot simply eval() any widget code written by anonymous programmers. Long story short, the team decided that the best solution was running third-party code in a closely-guarded sandbox environment. And as you might have guessed, browser APIs are unavailable in such an environment.\n\n\n\nBut don’t fret, Figma’s solution to this second problem is <iframe>s. Any HTML code that we write in a file, preferably called ui.html, will have access to all browser APIs. You might be wondering how we can trigger this code from the widget, but we’ll look into that later. Right now, let’s jump back into code:\n\n\n\n// manifest.json\n{\n  \"ui\": \"ui.html\"\n}\n\n\n\n<!-- ui.html -->\n<script>\nwindow.onmessage = async (event) => {\n  if (event.data.pluginMessage.type === 'networkRequest') {\n    // TODO: fetch data from the server\n\n    window.parent.postMessage({\n      pluginMessage: {\n        // TODO: return fetched data\n      }\n    }, '*')\n  }\n}\n</script>\n\n\n\nThat’s the general template for widget-to-iframe communication. Let’s use it to fetch data from the server:\n\n\n\n<!-- ui.html -->\n<script>\nwindow.onmessage = async (event) => {\n  if (event.data.pluginMessage.type === 'networkRequest') {\n    // Get random number from 0 to 100\n    const randomPage = Math.round(Math.random() * 100)\n\n    // Get a random quote from the Design Quotes API\n    const res = await fetch(`https://quotesondesign.com/wp-json/wp/v2/posts/?orderby=rand&per_page=1&page=${randomPage}&_fields=title,yoast_head_json`)\n    const data = await res.json()\n\n    // Extract author name and quote content from response\n    const authorName = data[0].title.rendered\n    const quoteContent = data[0].yoast_head_json.og_description\n\n    window.parent.postMessage({\n      pluginMessage: {\n        authorName,\n        quoteContent\n      }\n    }, '*')\n  }\n}\n</script>\n\n\n\nWe’re leaving out error-handling to keep this simple and to-the-point. Let’s jump back into the widget code and see how we access functions defined in the <iframe>:\n\n\n\nfunction fetchData() {\n  return new Promise<void>(resolve => {\n    figma.showUI(__html__, {visible: false})\n    figma.ui.postMessage({type: 'networkRequest'})\n\n    figma.ui.onmessage = async ({authorName, quoteContent}) => {\n      setAuthor(authorName)\n      setQuote(quoteContent)\n\n      resolve()\n    }\n  })\n}\n\n\n\nAs you can see, we’re first telling Figma to expose access to our hidden <iframe> and to trigger an event with the name \"networkRequest\". We’re handling this event in the ui.html file by checking event.data.pluginMessage.type === 'networkRequest', and then posting data back to the widget.\n\n\n\nBut nothing is happening yet… We still haven’t called the fetchData() function. If we call it directly in the component function, the following error occurs in the console:\n\n\n\nCannot use showUI during widget rendering.\n\n\n\nFigma is telling us not to call showUI directly in the function body… So, where should we put it? The answer to that is one new hook and one new function: useEffect and waitForTask. You might already have familiarity with useEffect if you’re a React developer, but we’re gonna use it here to fetch data from the server when the widget component mounts.\n\n\n\nconst { useEffect, waitForTask } = widget;\n\nfunction QuotesWidget() {\n  useEffect(() => {\n    waitForTask(fetchData());\n  });\n}\n\n\n\nBut this will result in yet another “error” where our widget will keep re-rendering with a new quote, forever. This happens because useEffect, by definition, triggers again whenever the widget’s state changes, nay when we call fetchData. And while there’s a technique to only call useEffect once in React, it does not work on Figma’s implementation. From Figma’s docs:\n\n\n\nBecause of How Widgets Run, useEffect should handle being called multiple times with the same state.\n\n\n\nThankfully, there’s a simple workaround that we can take advantage of and call useEffect only once when the component first mounts, and it’s by checking whether or not the state’s values are still empty:\n\n\n\nfunction QuotesWidget() {\n  useEffect(() => {\n    if (!author.length & !quote.length) {\n      waitForTask(fetchData());\n    }\n  });\n}\n\n\n\nYou might run into a scary “memory access out of bounds” error. It’s quite common to see in plugin and widget development. Just restart Figma and it won’t be there anymore.\n\n\n\nYou might have noticed that sometimes, the quote text contains weird characters.\n\n\n\n\n\n\n\nThese are Unicode characters and we must properly format them in code:\n\n\n\n<!-- ui.html -->\n<script>\nwindow.onmessage = async (event) => {\n  // ...\n  const quoteContent = decodeEntities(data[0].yoast_head_json.og_description);\n};\n\n// <https://stackoverflow.com/a/9609450>\nvar decodeEntities = (function () {\n  // this prevents any overhead from creating the object each time\n  var element = document.createElement(\"div\");\n\n  function decodeHTMLEntities(str) {\n    if (str && typeof str === \"string\") {\n      // strip script/html tags\n      str = str.replace(/<script[^>]*>([\\\\\\\\S\\\\\\\\s]*?)<\\\\\\\\/script>/gim, \"\");\n      str = str.replace(/<\\\\\\\\/?\\\\\\\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gim, \"\");\n      element.innerHTML = str;\n      str = element.textContent;\n      element.textContent = \"\";\n    }\n\n    return str;\n  }\n\n  return decodeHTMLEntities;\n})();\n</script>\n\n\n\nAnd voilà, our widget fetched a brand new design quote every single time it’s added to the design board.\n\n\n\n\n\n\n\n\nAdding a property menu to our widget\n\n\nWhile our widget fetches a fresh quote upon instantiation, it would be much more practical if we could do this process again but without deleting it. This section will be short as the solution is quite remarkable. With property menus, we can add interactivity to our widget with a single call to the usePropertyMenu hook.\n\n\n\nCredit: Figma Docs.\n\n\n\nconst { usePropertyMenu } = widget;\n\nfunction QuotesWidget() {\n  usePropertyMenu(\n    [\n      {\n        itemType: \"action\",\n        propertyName: \"generate\",\n\ttooltip: \"Generate\",\n        icon: `<svg width=\"22\" height=\"15\" viewBox=\"0 0 22 15\" fill=\"none\" xmlns=\"<http://www.w3.org/2000/svg>\">\n          <!-- Shortened for brevity -->\n        </svg>`,\n      },\n    ],\n    () => fetchData()\n  );\n}\n\n\n\nWith one simple hook we’re able to create a button that appears near our widget when it’s selected. That was the last piece that we needed to add in order to complete this project.\n\n\n\n\n\n\n\n\nPublishing our widget to the public\n\n\nThere’s not much use in building a widget if, well, no one uses it. And while Figma grants organizations with the option to launch private widgets for internal use, it’s much more common to release these little programs to the world.\n\n\n\nFigma has a delicate widget review process that may take up 5 to 10 business days. And while the design quotes widget we built together is already in the widget library, I will still demonstrate how it got there. Please don’t attempt to re-publish this widget again as that will only result in removal. But if you gave it some significant alterations, go ahead and share your own widget with the community!\n\n\n\nGet started by clicking the widgets menu (Shift+I) and switching to the Development tab to view our widget. Click on the three-dots menu and press Publish.\n\n\n\n\n\n\n\nFigma will prompt you to enter some details about your widget, such as a title, description, and some tags. We’ll also need a 128×128 icon image and a 1920×960 banner image.\n\n\n\n\n\n\n\nAfter importing all these assets, we still need a screenshot of our widget. Close the publishing modal (don’t worry, you won’t lose your data) and right-click on the widget to reveal an interesting context menu. Find the Copy/Paste ascategory and select Copy as PNG.\n\n\n\n\n\n\n\n\n\nWith that done, let’s go back to the publishing modal and paste the widget’s screenshot:\n\n\n\n\n\n\n\nScroll down and finally publish your modal. Celebrate! 🎉\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigma will reach out to you in a couple of days about the status of your modal’s review. In the case of a rejection, you’ll be given the opportunity to make changes and submit again.\n\n\nConclusion\n\n\nWe just built a Figma widget from scratch! There are many things not covered here, such as click events, input forms, and much more. You can dig into the full source code for the widget in this GitHub repo.\n\n\n\nTo those who aspire to take their Figma skills to greater levels, I suggest exploring the Widgets community and using what catches your eye as inspiration. Keep building more widgets, keep sharpening your React skills, and before you even realize it, you’ll be teaching me how to do all this.\n\n\nFurther resources\n\n\nI had to refer to lots of documentation while I was making this widget. I thought I’d share what I found to help the most.\n\n\nBuild more widgets:\n\n\nBest practices for building widgetsOfficial Figma widget examples, with code\n\n\nLearn widgets in greater depth:\n\n\nAll widget hooksAll widget componentsHow widgets run behind the scenes\n\n\nWidgets vs. plugins\n\n\nWidgets vs PluginsIntroduction to Figma PluginsHow plugins run behind the scenes\n\nBuilding Interactive Figma Widgets originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372991",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-12T13:05:20.000Z",
      "date_modified": "2022-09-12T13:05:20.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372952",
      "url": "https://css-tricks.com/how-i-made-a-pure-css-puzzle-game/",
      "title": "How I Made a Pure CSS Puzzle Game",
      "summary": "I recently discovered the joy of creating CSS-only games. It’s always fascinating how HTML and CSS are capable of handling the logic of an entire online game, so I had to try it! Such games usually rely on the ol’ …\n\nHow I Made a Pure CSS Puzzle Game originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>I recently discovered the joy of creating CSS-only games. It’s always fascinating how HTML and CSS are capable of handling the logic of an entire online game, so I had to try it! Such games usually rely on the ol’ Checkbox Hack where we combine the checked/unchecked state of a HTML input with the <code>:checked</code> pseudo-class in CSS. We can do a lot of magic with that one combination!</p>\n\n\n\n<p>In fact, I challenged myself to build an entire game without Checkbox. I wasn’t sure if it would be possible, but it definitely is, and I’m going to show you how.</p>\n\n\n\n<span id=\"more-372952\"></span>\n\n\n\n<p class=\"is-style-explanation\">In addition to the puzzle game we will study in this article, I have made <a href=\"https://github.com/Afif13/CSS-Games\" rel=\"noopener\">a collection of pure CSS games</a>, most of them without the Checkbox Hack. (They are also available <a href=\"https://codepen.io/collection/vBeQev\" rel=\"noopener\">on CodePen</a>.)</p>\n\n\n<h3 id=\"want-to-play-before-we-start\">Want to play before we start?</h3>\n\n\n<p>I personally prefer playing the game in full screen mode, but you can play it below or <a href=\"https://css-games.com/puzzle/\" rel=\"noopener\">open it up over here</a>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjLWpOJ\" src=\"//codepen.io/anon/embed/preview/JjLWpOJ?height=750&amp;theme-id=1&amp;slug-hash=JjLWpOJ&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjLWpOJ\" title=\"CodePen Embed JjLWpOJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Cool right? I know, it’s not the Best Puzzle Game You Ever Saw&#x2122; but it’s also not bad at all for something that only uses CSS and a few lines of HTML. You can easily adjust the size of the grid, change the number of cells to control the difficulty level, and use whatever image you want!</p>\n\n\n\n<p>We’re going to remake that demo together, then put a little extra sparkle in it at the end for some kicks.</p>\n\n\n<h3 id=\"the-drag-and-drop-functionality\">The drag and drop functionality</h3>\n\n\n<p>While the structure of the puzzle is fairly straightforward with CSS Grid, the ability to drag and drop puzzle pieces is a bit trickier. I had to relying on a combination of transitions, hover effects, and sibling selectors to get it done.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBovmzJ/12cfa04f7448b6195a151b1f7334be39\" src=\"//codepen.io/anon/embed/preview/qBovmzJ/12cfa04f7448b6195a151b1f7334be39?height=450&amp;theme-id=1&amp;slug-hash=qBovmzJ/12cfa04f7448b6195a151b1f7334be39&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBovmzJ/12cfa04f7448b6195a151b1f7334be39\" title=\"CodePen Embed qBovmzJ/12cfa04f7448b6195a151b1f7334be39\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you hover over the empty box in that demo, the image moves inside of it and stays there even if you move the cursor out of the box. The trick is to add a big transition duration and delay — so big that the image takes lots of time to return to its initial position.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">img {\n  transform: translate(200%);\n  transition: 999s 999s; /* very slow move on mouseout */\n}\n.box:hover img {\n  transform: translate(0);\n  transition: 0s; /* instant move on hover */\n}</code></pre>\n\n\n\n<p>Specifying only the <a href=\"https://css-tricks.com/almanac/properties/t/transition-delay/\"><code>transition-delay</code></a> is enough, but using big values on both the delay and the duration decreases the chance that a player ever sees the image move back. If you wait for <code>999s + 999s</code> — which is approximately 30 minutes — then you will see the image move. But you won’t, right? I mean, no one’s going to take that long between turns unless they walk away from the game. So, I consider this a good trick for switching between two states.</p>\n\n\n\n<p>Did you notice that hovering the image also triggers the changes? That’s because the image is part of the box element, which is not good for us. We can fix this by adding <code>pointer-events: none</code> to the image but we won’t be able to drag it later.</p>\n\n\n\n<p>That means we have to introduce another element inside the <code>.box</code>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abYMwOa/052a633089aa1a268afb833dbb20318d\" src=\"//codepen.io/anon/embed/preview/abYMwOa/052a633089aa1a268afb833dbb20318d?height=450&amp;theme-id=1&amp;slug-hash=abYMwOa/052a633089aa1a268afb833dbb20318d&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abYMwOa/052a633089aa1a268afb833dbb20318d\" title=\"CodePen Embed abYMwOa/052a633089aa1a268afb833dbb20318d\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That extra <code>div</code> (we’re using a class of <code>.a</code>) will take the same area as the image (thanks to CSS Grid and <code>grid-area: 1 / 1</code>) and will be the element that triggers the hover effect. And that is where the sibling selector comes into play:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"9\"><code markup=\"tt\">.a {\n  grid-area: 1 / 1;\n}\nimg {\n  grid-area: 1 / 1;\n  transform: translate(200%);\n  transition: 999s 999s;\n}\n.a:hover + img {\n  transform: translate(0);\n  transition: 0s;\n}</code></pre>\n\n\n\n<p>Hovering on the <code>.a</code> element moves the image, and since it is taking up all space inside the box, it’s like we are hovering over the box instead! Hovering the image is no longer a problem!</p>\n\n\n\n<p>Let’s drag and drop our image inside the box and see the result:</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='237' src='https://videopress.com/embed/FIC4Glwe?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>Did you see that? You first grab the image and move it to the box, nothing fancy. But once you release the image you trigger the hover effect that moves the image, and then we simulate a drag and drop feature. If you release the mouse outside the box, nothing happens.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Hmm, your simulation isn’t perfect because we can also hover the box and get the same effect.</p></blockquote>\n\n\n\n<p>True and we will rectify this. We need to disable the hover effect and allow it only if we release the image inside the box. We will play with the dimension of our <code>.a</code> element to make that happen.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYRPZmY/a13c4a79bba27ee277cb2994d021f9dd\" src=\"//codepen.io/anon/embed/preview/vYRPZmY/a13c4a79bba27ee277cb2994d021f9dd?height=450&amp;theme-id=1&amp;slug-hash=vYRPZmY/a13c4a79bba27ee277cb2994d021f9dd&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYRPZmY/a13c4a79bba27ee277cb2994d021f9dd\" title=\"CodePen Embed vYRPZmY/a13c4a79bba27ee277cb2994d021f9dd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, hovering the box does nothing. But if you start dragging the image, the <code>.a</code> element appears, and once released inside the box, we can trigger the hover effect and move the image.</p>\n\n\n\n<p>Let’s dissect the code:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.a {\n  width: 0%;\n  transition: 0s .2s; /* add a small delay to make sure we catch the hover effect */\n}\n.box:active .a { /* on :active increase the width */\n  width: 100%;\n  transition: 0s; /* instant change */\n}\nimg {\n  transform: translate(200%);\n  transition: 999s 999s;\n}\n.a:hover + img {\n  transform: translate(0);\n  transition: 0s;\n}</code></pre>\n\n\n\n<p>Clicking on the image fires the <a href=\"https://css-tricks.com/almanac/selectors/a/active/\"><code>:active</code></a> pseudo-class that makes the <code>.a</code> element full-width (it is initially equal to <code>0</code>). The active state will remain <em>active</em> until we release the image. If we release the image inside the box, the <code>.a</code> element goes back to <code>width: 0</code>, but we will trigger the hover effect before it happens and the image will fall inside the box! If you release it outside the box, nothing happens.</p>\n\n\n\n<p>There is a little quirk: clicking the empty box also moves the image and breaks our feature. Currently, <code>:active</code> is linked to the <code>.box</code> element, so clicking on it or any of its children will activate it; and by doing this, we end up showing the <code>.a</code> element and triggering the hover effect.</p>\n\n\n\n<p>We can fix that by playing with <a href=\"https://css-tricks.com/almanac/properties/p/pointer-events/\"><code>pointer-events</code></a>. It allows us to disable any interaction with the <code>.box</code> while maintaining the interactions with the child elements.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n  pointer-events: none;\n}\n.box * {\n  pointer-events: initial;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOzJwzY/997ddd236d506cec87e0ed344a28cdc4\" src=\"//codepen.io/anon/embed/preview/jOzJwzY/997ddd236d506cec87e0ed344a28cdc4?height=450&amp;theme-id=1&amp;slug-hash=jOzJwzY/997ddd236d506cec87e0ed344a28cdc4&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOzJwzY/997ddd236d506cec87e0ed344a28cdc4\" title=\"CodePen Embed jOzJwzY/997ddd236d506cec87e0ed344a28cdc4\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p><em>Now</em> our drag and drop feature is perfect. Unless you can find how to hack it, the only way to move the image is to drag it and drop it inside the box.</p>\n\n\n<h3 id=\"building-the-puzzle-grid\">Building the puzzle grid</h3>\n\n\n<p>Putting the puzzle together is going to feel easy peasy compared to what we just did for the drag and drop feature. We are going to rely on CSS grid and background tricks to create the puzzle.</p>\n\n\n\n<p>Here’s our grid, written in Pug for convenience:</p>\n\n\n\n<pre rel=\"Pug\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">- let n = 4; /* number of columns/rows */\n- let image = \"https://picsum.photos/id/1015/800/800\";\n\ng(style=`--i:url(${image})`)\n  - for(let i = 0; i &lt; n*n; i++)\n    z\n      a\n      b(draggable=\"true\") </code></pre>\n\n\n\n<p>The code may look strange but it compiles into plain HTML:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;g style=\"--i: url(https://picsum.photos/id/1015/800/800)\">\n &lt;z>\n   &lt;a>&lt;/a>\n   &lt;b draggable=\"true\">&lt;/b>\n &lt;/z>\n &lt;z>\n   &lt;a>&lt;/a>\n   &lt;b draggable=\"true\">&lt;/b>\n &lt;/z>\n &lt;z>\n   &lt;a>&lt;/a>\n   &lt;b draggable=\"true\">&lt;/b>\n &lt;/z>\n  &lt;!-- etc. -->\n&lt;/g></code></pre>\n\n\n\n<p>I bet you’re wondering what’s up with those tags. None of these elements have any special meaning — I just find that the code is much easier to write using <code>&lt;z&gt;</code> than a bunch of <code>&lt;div class=\"z\"&gt;</code> or whatever.</p>\n\n\n\n<p>This is how I’ve mapped them out:</p>\n\n\n\n<ul><li><code>&lt;g&gt;</code> is our grid container that contains <code>N*N</code> <code>&lt;z&gt;</code> elements.</li><li><code>&lt;z&gt;</code> represents our grid items. It plays the role of the <code>.box</code> element we saw in the previous section.</li><li><code>&lt;a&gt;</code> triggers the hover effect.</li><li><code>&lt;b&gt;</code> represents a portion of our image. We apply the <code>draggable</code> attribute on it because it cannot be dragged by default.</li></ul>\n\n\n\n<p>Alright, let’s register our grid container on <code>&lt;g&gt;</code>. This is in Sass instead of CSS:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">$n : 4; /* number of columns/rows */\n\ng {\n  --s: 300px; /* size of the puzzle */\n\n  display: grid;\n  max-width: var(--s);\n  border: 1px solid;\n  margin: auto;\n  grid-template-columns: repeat($n, 1fr);\n}</code></pre>\n\n\n\n<p>We’re actually going to make our grid children — the <code>&lt;z&gt;</code> elements — grids as well and have both <code>&lt;a&gt;</code> and <code>&lt;b&gt;</code> within the same grid area:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">z {\n  aspect-ratio: 1;\n  display: grid;\n  outline: 1px dashed;\n}\na {\n  grid-area: 1/1;\n}\nb {\n  grid-area: 1/1;\n}</code></pre>\n\n\n\n<p>As you can see, nothing fancy — we created a grid with a specific size. The rest of the CSS we need is for the drag and drop feature, which requires us to randomly place the pieces around the board. I’m going to turn to Sass for this, again for the convenience of being able to loop through and style all the puzzle pieces with a function:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">b {\n  background: var(--i) 0/var(--s) var(--s);\n}\n\n@for $i from 1 to ($n * $n + 1) {\n  $r: (random(180));\n  $x: (($i - 1)%$n);\n  $y: floor(($i - 0.001) / $n);\n  z:nth-of-type(#{$i}) b{\n    background-position: ($x / ($n - 1)) * 100% ($y / ($n - 1)) * 100%;\n    transform: \n      translate((($n - 1) / 2 - $x) * 100%, (($n - 1)/2 - $y) * 100%) \n      rotate($r * 1deg) \n      translate((random(100)*1% + ($n - 1) * 100%)) \n      rotate((random(20) - 10 - $r) * 1deg)\n   }\n}</code></pre>\n\n\n\n<p>You may have noticed that I’m using the Sass <code>random()</code> function. That’s how we get the randomized positions for the puzzle pieces. Remember that we will <em>disable</em> that position when hovering over the <code>&lt;a&gt;</code> element after dragging and dropping its corresponding <code>&lt;b&gt;</code> element inside the grid cell.</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">z a:hover ~ b {\n  transform: translate(0);\n  transition: 0s;\n}</code></pre>\n\n\n\n<p>In that same loop, I am also defining the background configuration for each piece of the puzzle. All of them will logically share the same image as the background, and its size should be equal to the size of the whole grid (defined with the <code>--s</code> variable). Using the same <code>background-image</code> and some math, we update the <code>background-position</code> to show only a piece of the image.</p>\n\n\n\n<p>That’s it! Our CSS-only puzzle game is technically done!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjLWpOJ\" src=\"//codepen.io/anon/embed/preview/JjLWpOJ?height=750&amp;theme-id=1&amp;slug-hash=JjLWpOJ&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjLWpOJ\" title=\"CodePen Embed JjLWpOJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But we can always do better, right? I showed you <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1/#aa-css-grid-of-puzzle-pieces\">how to make a grid of puzzle piece shapes</a> in another article. Let’s take that same idea and apply it here, shall we?</p>\n\n\n<h3 id=\"puzzle-piece-shapes\">Puzzle piece shapes</h3>\n\n\n<p>Here’s our new puzzle game. Same functionality but with more realistic shapes!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjLQzqZ\" src=\"//codepen.io/anon/embed/preview/JjLQzqZ?height=800&amp;theme-id=1&amp;slug-hash=JjLQzqZ&amp;default-tab=result\" height=\"800\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjLQzqZ\" title=\"CodePen Embed JjLQzqZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This is an illustration of the shapes on the grid:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"512\" height=\"474\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661177005808_image.png?resize=512%2C474&#038;ssl=1\" alt=\"\" class=\"wp-image-372956\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661177005808_image.png?w=512&amp;ssl=1 512w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661177005808_image.png?resize=300%2C278&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you look closely you’ll notice that we have nine different puzzle-piece shapes: the <strong>four corners</strong>, the <strong>four edges</strong>, and <strong>one for everything else</strong>.</p>\n\n\n\n<p>The grid of puzzle pieces I made in the other article I referred to is a little more straightforward:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJvWKPm\" src=\"//codepen.io/anon/embed/preview/OJvWKPm?height=650&amp;theme-id=1&amp;slug-hash=OJvWKPm&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJvWKPm\" title=\"CodePen Embed OJvWKPm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We can use the same technique that combines CSS masks and gradients to create the different shapes. In case you are unfamiliar with <code>mask</code> and gradients, I highly recommend checking <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1/#aa-css-grid-of-puzzle-pieces\">that simplified case</a> to better understand the technique before moving to the next part.</p>\n\n\n\n<p>First, we need to use specific selectors to target each group of elements that shares the same shape. We have nine groups, so we will use eight selectors, plus a default selector that selects all of them.</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">z  /* 0 */\n\nz:first-child  /* 1 */\n\nz:nth-child(-n + 4):not(:first-child) /* 2 */\n\nz:nth-child(5) /* 3 */\n\nz:nth-child(5n + 1):not(:first-child):not(:nth-last-child(5)) /* 4 */\n\nz:nth-last-child(5)  /* 5 */\n\nz:nth-child(5n):not(:nth-child(5)):not(:last-child) /* 6 */\n\nz:last-child /* 7 */\n\nz:nth-last-child(-n + 4):not(:last-child) /* 8 */</code></pre>\n\n\n\n<p>Here is a figure that shows how that maps to our grid:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"516\" height=\"510\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661262663737_puzzleselectors.png?resize=516%2C510&#038;ssl=1\" alt=\"\" class=\"wp-image-372955\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661262663737_puzzleselectors.png?w=516&amp;ssl=1 516w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661262663737_puzzleselectors.png?resize=300%2C297&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now let’s tackle the shapes. Let’s focus on learning just one or two of the shapes because they all use the same technique — and that way, you have some homework to keep learning!</p>\n\n\n\n<p>For the puzzle pieces in the center of the grid, <code>0</code>:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">mask: \n  radial-gradient(var(--r) at calc(50% - var(--r) / 2) 0, #0000 98%, #000) var(--r)  \n    0 / 100% var(--r) no-repeat,\n  radial-gradient(var(--r) at calc(100% - var(--r)) calc(50% - var(--r) / 2), #0000 98%, #000) \n    var(--r) 50% / 100% calc(100% - 2 * var(--r)) no-repeat,\n  radial-gradient(var(--r) at var(--r) calc(50% - var(--r) / 2), #000 98%, #0000),\n  radial-gradient(var(--r) at calc(50% + var(--r) / 2) calc(100% - var(--r)), #000 98%, #0000);</code></pre>\n\n\n\n<p>The code may look complex, but let’s focus on one gradient at a time to see what’s happening:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOzREJJ/5fb492364fdf7959ee7c847023046a14\" src=\"//codepen.io/anon/embed/preview/jOzREJJ/5fb492364fdf7959ee7c847023046a14?height=450&amp;theme-id=1&amp;slug-hash=jOzREJJ/5fb492364fdf7959ee7c847023046a14&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOzREJJ/5fb492364fdf7959ee7c847023046a14\" title=\"CodePen Embed jOzREJJ/5fb492364fdf7959ee7c847023046a14\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Two gradients create two circles (marked green and purple in the demo), and two other gradients create the slots that other pieces connect to (the one marked blue fills up most of the shape while the one marked red fills the top portion). A CSS variable, <code>--r</code>, sets the radius of the circular shapes.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"695\" height=\"548\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661372912423_image.png?resize=695%2C548&#038;ssl=1\" alt=\"\" class=\"wp-image-372957\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661372912423_image.png?w=695&amp;ssl=1 695w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661372912423_image.png?resize=300%2C237&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The shape of the puzzle pieces in the center (marked <code>0</code> in the illustration) is the hardest to make as it uses four gradients and has four curvatures. All the others pieces juggle fewer gradients.</p>\n\n\n\n<p>For example, the puzzle pieces along the top edge of the puzzle (marked <code>2</code> in the illustration) uses three gradients instead of four:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">mask: \n  radial-gradient(var(--r) at calc(100% - var(--r)) calc(50% + var(--r) / 2), #0000 98%, #000) var(--r) calc(-1 * var(--r)) no-repeat,\n  radial-gradient(var(--r) at var(--r) calc(50% - var(--r) / 2), #000 98%, #0000),\n  radial-gradient(var(--r) at calc(50% + var(--r) / 2) calc(100% - var(--r)), #000 98%, #0000);</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMoNRz/78b3cc58c4d64c91a396c875e98c73a7\" src=\"//codepen.io/anon/embed/preview/eYMoNRz/78b3cc58c4d64c91a396c875e98c73a7?height=450&amp;theme-id=1&amp;slug-hash=eYMoNRz/78b3cc58c4d64c91a396c875e98c73a7&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMoNRz/78b3cc58c4d64c91a396c875e98c73a7\" title=\"CodePen Embed eYMoNRz/78b3cc58c4d64c91a396c875e98c73a7\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We removed the first (top) gradient and adjusted the values of the second gradient so that it covers the space left behind. You won’t notice a big difference in the code if you compare the two examples. It should be noted that we can find different background configurations to create the same shape. If you start playing with gradients you will for sure come up with something different than what I did. You may even write something that’s more concise — if so, share it in the comments!</p>\n\n\n\n<p>In addition to creating the shapes, you will also find that I am increasing the width and/or the height of the elements like below:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">height: calc(100% + var(--r));\nwidth: calc(100% + var(--r));</code></pre>\n\n\n\n<p>The pieces of the puzzle need to overflow their grid cell to connect.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"855\" height=\"433\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661373660234_image.png?resize=855%2C433&#038;ssl=1\" alt=\"\" class=\"wp-image-372958\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661373660234_image.png?w=855&amp;ssl=1 855w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661373660234_image.png?resize=300%2C152&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8559D50905E282404F2940BDAE97EA3CEC10D9C6A84E57A9093CA82C345644FE_1661373660234_image.png?resize=768%2C389&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"final-demo\">Final demo</h3>\n\n\n<p>Here is the full demo again. If you compare it with the first version you will see the same code structure to create the grid and the drag-and-drop feature, plus the code to create the shapes.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjLQzqZ\" src=\"//codepen.io/anon/embed/preview/JjLQzqZ?height=800&amp;theme-id=1&amp;slug-hash=JjLQzqZ&amp;default-tab=result\" height=\"800\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjLQzqZ\" title=\"CodePen Embed JjLQzqZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-container-2 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-games.com/puzzle-v2/\" rel=\"noopener\">Play it online</a></div>\n</div>\n\n\n<h3 id=\"possible-enhancements\">Possible enhancements</h3>\n\n\n<p>The article ends here but we could keep enhancing our puzzle with even more features! How about a a timer? Or maybe some sort of congratulations when the player finishes the puzzle?</p>\n\n\n\n<p>I may consider all these features in a future version, so <a href=\"https://github.com/Afif13/CSS-Games\" rel=\"noopener\">keep an eye on my GitHub repo</a>.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>And <a href=\"https://css-tricks.com/is-css-a-programming-language/\">CSS isn’t a programming language</a>, they say. Ha!</p>\n\n\n\n<p>I’m not trying to spark some #HotDrama by that. I say it because we did some really tricky logic stuff and covered a lot of CSS properties and techniques along the way. We played with CSS Grid, transitions, masking, gradients, selectors, and background properties. Not to mention the few Sass tricks we used to make our code easy to adjust.</p>\n\n\n\n<p>The goal was not to build the game, but to explore CSS and discover new properties and tricks that you can use in other projects. Creating an online game in CSS is a challenge that pushes you to explore CSS features in great detail and learn how to use them. Plus, it’s just a lot of fun that we get something to play with when all is said and done.</p>\n\n\n\n<p>Whether CSS is a programming language or not, doesn&#8217;t change the fact that we always learn by building and creating innovative stuff.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-i-made-a-pure-css-puzzle-game/\">How I Made a Pure CSS Puzzle Game</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I recently discovered the joy of creating CSS-only games. It’s always fascinating how HTML and CSS are capable of handling the logic of an entire online game, so I had to try it! Such games usually rely on the ol’ Checkbox Hack where we combine the checked/unchecked state of a HTML input with the :checked pseudo-class in CSS. We can do a lot of magic with that one combination!\n\n\n\nIn fact, I challenged myself to build an entire game without Checkbox. I wasn’t sure if it would be possible, but it definitely is, and I’m going to show you how.\n\n\n\n\n\n\n\nIn addition to the puzzle game we will study in this article, I have made a collection of pure CSS games, most of them without the Checkbox Hack. (They are also available on CodePen.)\n\n\nWant to play before we start?\n\n\nI personally prefer playing the game in full screen mode, but you can play it below or open it up over here.\n\n\n\nCodePen Embed Fallback\n\n\n\nCool right? I know, it’s not the Best Puzzle Game You Ever Saw™ but it’s also not bad at all for something that only uses CSS and a few lines of HTML. You can easily adjust the size of the grid, change the number of cells to control the difficulty level, and use whatever image you want!\n\n\n\nWe’re going to remake that demo together, then put a little extra sparkle in it at the end for some kicks.\n\n\nThe drag and drop functionality\n\n\nWhile the structure of the puzzle is fairly straightforward with CSS Grid, the ability to drag and drop puzzle pieces is a bit trickier. I had to relying on a combination of transitions, hover effects, and sibling selectors to get it done.\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you hover over the empty box in that demo, the image moves inside of it and stays there even if you move the cursor out of the box. The trick is to add a big transition duration and delay — so big that the image takes lots of time to return to its initial position.\n\n\n\nimg {\n  transform: translate(200%);\n  transition: 999s 999s; /* very slow move on mouseout */\n}\n.box:hover img {\n  transform: translate(0);\n  transition: 0s; /* instant move on hover */\n}\n\n\n\nSpecifying only the transition-delay is enough, but using big values on both the delay and the duration decreases the chance that a player ever sees the image move back. If you wait for 999s + 999s — which is approximately 30 minutes — then you will see the image move. But you won’t, right? I mean, no one’s going to take that long between turns unless they walk away from the game. So, I consider this a good trick for switching between two states.\n\n\n\nDid you notice that hovering the image also triggers the changes? That’s because the image is part of the box element, which is not good for us. We can fix this by adding pointer-events: none to the image but we won’t be able to drag it later.\n\n\n\nThat means we have to introduce another element inside the .box:\n\n\n\nCodePen Embed Fallback\n\n\n\nThat extra div (we’re using a class of .a) will take the same area as the image (thanks to CSS Grid and grid-area: 1 / 1) and will be the element that triggers the hover effect. And that is where the sibling selector comes into play:\n\n\n\n.a {\n  grid-area: 1 / 1;\n}\nimg {\n  grid-area: 1 / 1;\n  transform: translate(200%);\n  transition: 999s 999s;\n}\n.a:hover + img {\n  transform: translate(0);\n  transition: 0s;\n}\n\n\n\nHovering on the .a element moves the image, and since it is taking up all space inside the box, it’s like we are hovering over the box instead! Hovering the image is no longer a problem!\n\n\n\nLet’s drag and drop our image inside the box and see the result:\n\n\n\n\n\n\n\n\n\nDid you see that? You first grab the image and move it to the box, nothing fancy. But once you release the image you trigger the hover effect that moves the image, and then we simulate a drag and drop feature. If you release the mouse outside the box, nothing happens.\n\n\n\nHmm, your simulation isn’t perfect because we can also hover the box and get the same effect.\n\n\n\nTrue and we will rectify this. We need to disable the hover effect and allow it only if we release the image inside the box. We will play with the dimension of our .a element to make that happen.\n\n\n\nCodePen Embed Fallback\n\n\n\nNow, hovering the box does nothing. But if you start dragging the image, the .a element appears, and once released inside the box, we can trigger the hover effect and move the image.\n\n\n\nLet’s dissect the code:\n\n\n\n.a {\n  width: 0%;\n  transition: 0s .2s; /* add a small delay to make sure we catch the hover effect */\n}\n.box:active .a { /* on :active increase the width */\n  width: 100%;\n  transition: 0s; /* instant change */\n}\nimg {\n  transform: translate(200%);\n  transition: 999s 999s;\n}\n.a:hover + img {\n  transform: translate(0);\n  transition: 0s;\n}\n\n\n\nClicking on the image fires the :active pseudo-class that makes the .a element full-width (it is initially equal to 0). The active state will remain active until we release the image. If we release the image inside the box, the .a element goes back to width: 0, but we will trigger the hover effect before it happens and the image will fall inside the box! If you release it outside the box, nothing happens.\n\n\n\nThere is a little quirk: clicking the empty box also moves the image and breaks our feature. Currently, :active is linked to the .box element, so clicking on it or any of its children will activate it; and by doing this, we end up showing the .a element and triggering the hover effect.\n\n\n\nWe can fix that by playing with pointer-events. It allows us to disable any interaction with the .box while maintaining the interactions with the child elements.\n\n\n\n.box {\n  pointer-events: none;\n}\n.box * {\n  pointer-events: initial;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nNow our drag and drop feature is perfect. Unless you can find how to hack it, the only way to move the image is to drag it and drop it inside the box.\n\n\nBuilding the puzzle grid\n\n\nPutting the puzzle together is going to feel easy peasy compared to what we just did for the drag and drop feature. We are going to rely on CSS grid and background tricks to create the puzzle.\n\n\n\nHere’s our grid, written in Pug for convenience:\n\n\n\n- let n = 4; /* number of columns/rows */\n- let image = \"https://picsum.photos/id/1015/800/800\";\n\ng(style=`--i:url(${image})`)\n  - for(let i = 0; i < n*n; i++)\n    z\n      a\n      b(draggable=\"true\") \n\n\n\nThe code may look strange but it compiles into plain HTML:\n\n\n\n<g style=\"--i: url(https://picsum.photos/id/1015/800/800)\">\n <z>\n   <a></a>\n   <b draggable=\"true\"></b>\n </z>\n <z>\n   <a></a>\n   <b draggable=\"true\"></b>\n </z>\n <z>\n   <a></a>\n   <b draggable=\"true\"></b>\n </z>\n  <!-- etc. -->\n</g>\n\n\n\nI bet you’re wondering what’s up with those tags. None of these elements have any special meaning — I just find that the code is much easier to write using <z> than a bunch of <div class=\"z\"> or whatever.\n\n\n\nThis is how I’ve mapped them out:\n\n\n\n<g> is our grid container that contains N*N <z> elements.<z> represents our grid items. It plays the role of the .box element we saw in the previous section.<a> triggers the hover effect.<b> represents a portion of our image. We apply the draggable attribute on it because it cannot be dragged by default.\n\n\n\nAlright, let’s register our grid container on <g>. This is in Sass instead of CSS:\n\n\n\n$n : 4; /* number of columns/rows */\n\ng {\n  --s: 300px; /* size of the puzzle */\n\n  display: grid;\n  max-width: var(--s);\n  border: 1px solid;\n  margin: auto;\n  grid-template-columns: repeat($n, 1fr);\n}\n\n\n\nWe’re actually going to make our grid children — the <z> elements — grids as well and have both <a> and <b> within the same grid area:\n\n\n\nz {\n  aspect-ratio: 1;\n  display: grid;\n  outline: 1px dashed;\n}\na {\n  grid-area: 1/1;\n}\nb {\n  grid-area: 1/1;\n}\n\n\n\nAs you can see, nothing fancy — we created a grid with a specific size. The rest of the CSS we need is for the drag and drop feature, which requires us to randomly place the pieces around the board. I’m going to turn to Sass for this, again for the convenience of being able to loop through and style all the puzzle pieces with a function:\n\n\n\nb {\n  background: var(--i) 0/var(--s) var(--s);\n}\n\n@for $i from 1 to ($n * $n + 1) {\n  $r: (random(180));\n  $x: (($i - 1)%$n);\n  $y: floor(($i - 0.001) / $n);\n  z:nth-of-type(#{$i}) b{\n    background-position: ($x / ($n - 1)) * 100% ($y / ($n - 1)) * 100%;\n    transform: \n      translate((($n - 1) / 2 - $x) * 100%, (($n - 1)/2 - $y) * 100%) \n      rotate($r * 1deg) \n      translate((random(100)*1% + ($n - 1) * 100%)) \n      rotate((random(20) - 10 - $r) * 1deg)\n   }\n}\n\n\n\nYou may have noticed that I’m using the Sass random() function. That’s how we get the randomized positions for the puzzle pieces. Remember that we will disable that position when hovering over the <a> element after dragging and dropping its corresponding <b> element inside the grid cell.\n\n\n\nz a:hover ~ b {\n  transform: translate(0);\n  transition: 0s;\n}\n\n\n\nIn that same loop, I am also defining the background configuration for each piece of the puzzle. All of them will logically share the same image as the background, and its size should be equal to the size of the whole grid (defined with the --s variable). Using the same background-image and some math, we update the background-position to show only a piece of the image.\n\n\n\nThat’s it! Our CSS-only puzzle game is technically done!\n\n\n\nCodePen Embed Fallback\n\n\n\nBut we can always do better, right? I showed you how to make a grid of puzzle piece shapes in another article. Let’s take that same idea and apply it here, shall we?\n\n\nPuzzle piece shapes\n\n\nHere’s our new puzzle game. Same functionality but with more realistic shapes!\n\n\n\nCodePen Embed Fallback\n\n\n\nThis is an illustration of the shapes on the grid:\n\n\n\n\n\n\n\nIf you look closely you’ll notice that we have nine different puzzle-piece shapes: the four corners, the four edges, and one for everything else.\n\n\n\nThe grid of puzzle pieces I made in the other article I referred to is a little more straightforward:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe can use the same technique that combines CSS masks and gradients to create the different shapes. In case you are unfamiliar with mask and gradients, I highly recommend checking that simplified case to better understand the technique before moving to the next part.\n\n\n\nFirst, we need to use specific selectors to target each group of elements that shares the same shape. We have nine groups, so we will use eight selectors, plus a default selector that selects all of them.\n\n\n\nz  /* 0 */\n\nz:first-child  /* 1 */\n\nz:nth-child(-n + 4):not(:first-child) /* 2 */\n\nz:nth-child(5) /* 3 */\n\nz:nth-child(5n + 1):not(:first-child):not(:nth-last-child(5)) /* 4 */\n\nz:nth-last-child(5)  /* 5 */\n\nz:nth-child(5n):not(:nth-child(5)):not(:last-child) /* 6 */\n\nz:last-child /* 7 */\n\nz:nth-last-child(-n + 4):not(:last-child) /* 8 */\n\n\n\nHere is a figure that shows how that maps to our grid:\n\n\n\n\n\n\n\nNow let’s tackle the shapes. Let’s focus on learning just one or two of the shapes because they all use the same technique — and that way, you have some homework to keep learning!\n\n\n\nFor the puzzle pieces in the center of the grid, 0:\n\n\n\nmask: \n  radial-gradient(var(--r) at calc(50% - var(--r) / 2) 0, #0000 98%, #000) var(--r)  \n    0 / 100% var(--r) no-repeat,\n  radial-gradient(var(--r) at calc(100% - var(--r)) calc(50% - var(--r) / 2), #0000 98%, #000) \n    var(--r) 50% / 100% calc(100% - 2 * var(--r)) no-repeat,\n  radial-gradient(var(--r) at var(--r) calc(50% - var(--r) / 2), #000 98%, #0000),\n  radial-gradient(var(--r) at calc(50% + var(--r) / 2) calc(100% - var(--r)), #000 98%, #0000);\n\n\n\nThe code may look complex, but let’s focus on one gradient at a time to see what’s happening:\n\n\n\nCodePen Embed Fallback\n\n\n\nTwo gradients create two circles (marked green and purple in the demo), and two other gradients create the slots that other pieces connect to (the one marked blue fills up most of the shape while the one marked red fills the top portion). A CSS variable, --r, sets the radius of the circular shapes.\n\n\n\n\n\n\n\nThe shape of the puzzle pieces in the center (marked 0 in the illustration) is the hardest to make as it uses four gradients and has four curvatures. All the others pieces juggle fewer gradients.\n\n\n\nFor example, the puzzle pieces along the top edge of the puzzle (marked 2 in the illustration) uses three gradients instead of four:\n\n\n\nmask: \n  radial-gradient(var(--r) at calc(100% - var(--r)) calc(50% + var(--r) / 2), #0000 98%, #000) var(--r) calc(-1 * var(--r)) no-repeat,\n  radial-gradient(var(--r) at var(--r) calc(50% - var(--r) / 2), #000 98%, #0000),\n  radial-gradient(var(--r) at calc(50% + var(--r) / 2) calc(100% - var(--r)), #000 98%, #0000);\n\n\n\nCodePen Embed Fallback\n\n\n\nWe removed the first (top) gradient and adjusted the values of the second gradient so that it covers the space left behind. You won’t notice a big difference in the code if you compare the two examples. It should be noted that we can find different background configurations to create the same shape. If you start playing with gradients you will for sure come up with something different than what I did. You may even write something that’s more concise — if so, share it in the comments!\n\n\n\nIn addition to creating the shapes, you will also find that I am increasing the width and/or the height of the elements like below:\n\n\n\nheight: calc(100% + var(--r));\nwidth: calc(100% + var(--r));\n\n\n\nThe pieces of the puzzle need to overflow their grid cell to connect.\n\n\n\n\n\n\nFinal demo\n\n\nHere is the full demo again. If you compare it with the first version you will see the same code structure to create the grid and the drag-and-drop feature, plus the code to create the shapes.\n\n\n\nCodePen Embed Fallback\n\n\n\n\nPlay it online\n\n\n\nPossible enhancements\n\n\nThe article ends here but we could keep enhancing our puzzle with even more features! How about a a timer? Or maybe some sort of congratulations when the player finishes the puzzle?\n\n\n\nI may consider all these features in a future version, so keep an eye on my GitHub repo.\n\n\nWrapping up\n\n\nAnd CSS isn’t a programming language, they say. Ha!\n\n\n\nI’m not trying to spark some #HotDrama by that. I say it because we did some really tricky logic stuff and covered a lot of CSS properties and techniques along the way. We played with CSS Grid, transitions, masking, gradients, selectors, and background properties. Not to mention the few Sass tricks we used to make our code easy to adjust.\n\n\n\nThe goal was not to build the game, but to explore CSS and discover new properties and tricks that you can use in other projects. Creating an online game in CSS is a challenge that pushes you to explore CSS features in great detail and learn how to use them. Plus, it’s just a lot of fun that we get something to play with when all is said and done.\n\n\n\nWhether CSS is a programming language or not, doesn’t change the fact that we always learn by building and creating innovative stuff.\n\nHow I Made a Pure CSS Puzzle Game originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372952",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-09T13:21:29.000Z",
      "date_modified": "2022-09-09T13:21:29.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372979",
      "url": "https://css-tricks.com/whats-new-with-forms-in-2022/",
      "title": "What’s New With Forms in 2022?",
      "summary": "Browsers are constantly adding new HTML, JavaScript and CSS features. Here are some useful additions to working with forms that you might have missed…\nrequestSubmit()\nSafari 16 will be the final browser to add support for requestSubmit.\nBefore we …\n\nWhat’s New With Forms in 2022? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Browsers are constantly adding new HTML, JavaScript and CSS features. Here are some useful additions to working with forms that you might have missed…</p>\n\n\n\n<span id=\"more-372979\"></span>\n\n\n<h3 id=\"requestsubmit\"><code>requestSubmit()</code></h3>\n\n\n<p><a href=\"https://caniuse.com/?search=requestSubmit\" rel=\"noopener\">Safari 16</a> will be the final browser to add support for <code>requestSubmit</code>.</p>\n\n\n\n<p>Before we look at how <code>.requestSubmit()</code> works, let’s remind ourselves how programmatically submitting a form with JavaScript works when using the <code>.submit()</code> method. Submitting a form with <code>submit()</code> does not trigger a submit event. So in the following code, the form is submitted, <code>preventDefault()</code> has no effect, and nothing is logged to the console:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const form = document.forms[0];\nform.addEventListener('submit', function(event) {\n  // code to submit the form goes here\n  event.preventDefault();\n  console.log('form submitted!');\n});\n\ndocument.querySelector('.btn').addEventListener('click', function() {\n  form.submit();\n})</code></pre>\n\n\n\n<p><code>.submit()</code> will also ignore any HTML form validation. Given the following markup, the form will be submitted when the input is empty even though the input has a <code>required</code> attribute:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;form>   \n  &lt;label for=\"name\">Name&lt;/label>\n  &lt;input required name=\"name\" id=\"name\" type=\"text\">\n&lt;/form></code></pre>\n\n\n\n<p><code>.requestSubmit()</code> is an alternative way to submit a form using JavaScript, but in contrast to <code>.submit()</code>, HTML form validation will prevent the form from being submitted. If all the data entered in the form passes validation, the <code>submit</code> event will be fired, meaning “form submitted!” would be logged to the console in the following example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">form.addEventListener('submit', function(event) {\n  event.preventDefault();\n  console.log('form submitted!');\n});\n\ndocument.querySelector('.btn').addEventListener('click', function() {\n  form.requestSubmit();\n})</code></pre>\n\n\n\n<p>You could already achieve this by programmatically clicking the form’s submit button, but <code>requestSubmit</code> is perhaps a more elegant solution.</p>\n\n\n<h3 id=\"submitter-property-of-submit-event\"><code>submitter</code> property of submit event</h3>\n\n\n<p>The <code>SubmitEvent.submitter</code> property gained <a href=\"https://caniuse.com/mdn-api_submitevent_submitter\" rel=\"noopener\">full cross-browser support</a> with the release of Safari 15.4. This read-only property specifies the <code>&lt;button&gt;</code> or <code>&lt;input type=\"submit\"&gt;</code> element that caused a form to be submitted.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;form>\n  &lt;button name=\"foo\" value=\"bar\" type=\"submit\">Bar&lt;/button>\n  &lt;button name=\"foo\" value=\"baz\" type=\"submit\">Baz&lt;/button>\n&lt;/form></code></pre>\n\n\n\n<p>When you have multiple submit buttons or inputs, each with a different value, only the value of the button or input that was clicked on to submit the form will be sent to the server, rather than both values. That’s nothing new. What is new is that the event listener for the submit event now has access to the <code>event.submitter</code> property. You can use this to add a class to the button or input that triggered the form submission, for example, or to obtain its <code>value</code> or any other of its HTML attributes.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.forms[0].addEventListener('submit', function(event) {\n  event.preventDefault();\n  console.log(event.submitter.value);\n  console.log(event.submitter.formaction);\n  event.submitter.classList.add('spinner-animation');\n})</code></pre>\n\n\n<h3 id=\"formdata-event\"><code>formdata</code> event</h3>\n\n\n<p>This isn’t particularly new, but only <a href=\"https://caniuse.com/mdn-api_formdataevent\" rel=\"noopener\">achieved cross-browser support</a> with the release of Safari 15. The main use case for the <code>formdata</code> event is enabling custom elements to take part in form submissions. Outside of web components, though, it can still be useful.</p>\n\n\n\n<p>You add a <code>formdata</code> event listener to the form you want to interact with:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.querySelector('form').addEventListener('formdata', handleFormdata);</code></pre>\n\n\n\n<p>The event is fired both by a regular HTML form submission and also by an occurrence of <code>new FormData()</code>. <code>event.formData</code> holds all of the data being submitted.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function handleFormdata(event) {\n  for (const entry of event.formData.values()) {\n    console.log(entry);\n  }\n}</code></pre>\n\n\n\n<p>The callback function for the <code>formdata</code> event listener runs before the data is sent to the server, giving you a chance to add to or modify the data being sent.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function handleFormdata(event) {\n  event.formData.append('name', 'John');\n}</code></pre>\n\n\n\n<p>You could have modified or appended the <code>FormData</code> inside the submit event handler but <code>formdata</code> allows you to separate out the logic. It’s also an alternative to using hidden inputs in the markup of your form in cases where you are submitting the form “the old fashioned way” — i.e. relying on the built-in functionality of HTML to submit the form rather than doing it with <code>fetch</code>.</p>\n\n\n<h3 id=\"showpicker-for-input-elements\"><code>showPicker()</code> for input elements</h3>\n\n\n<p><code>showPicker()</code> has been <a href=\"https://caniuse.com/?search=showPicker\" rel=\"noopener\">supported</a> since Chrome 99, Firefox 101, and in the upcoming Safari 16. For an input element whose type attribute is either Date, Month, Week, Time, <code>datetime-local</code>, color, or file, <code>showPicker()</code> provides a programmatic way to display the selection UI. For color and file inputs, it’s always been possible to programmatically show the picker by calling <code>.click</code> on the input:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.querySelector('input[type=\"color\"]').click();</code></pre>\n\n\n\n<p>That approach doesn’t work on date inputs, which is why this new API was added. <code>.showPicker()</code> will also work with color and file inputs but there’s no real advantage to using it over <code>.click()</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"930\" height=\"726\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_1D10429F982A9F25F1E75E6799ABEAA4EAF24C27F477961C36F8FE7BAE1D4D7A_1661513159201_ScreenShot2022-08-26at12.25.52PM.png?resize=930%2C726&#038;ssl=1\" alt=\"Datepicker open to August 2022.\" class=\"wp-image-372980\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_1D10429F982A9F25F1E75E6799ABEAA4EAF24C27F477961C36F8FE7BAE1D4D7A_1661513159201_ScreenShot2022-08-26at12.25.52PM.png?w=930&amp;ssl=1 930w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_1D10429F982A9F25F1E75E6799ABEAA4EAF24C27F477961C36F8FE7BAE1D4D7A_1661513159201_ScreenShot2022-08-26at12.25.52PM.png?resize=300%2C234&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_1D10429F982A9F25F1E75E6799ABEAA4EAF24C27F477961C36F8FE7BAE1D4D7A_1661513159201_ScreenShot2022-08-26at12.25.52PM.png?resize=768%2C600&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"inert-attribute\">Inert attribute</h3>\n\n\n<p>It’s always been possible to disable multiple inputs at once by wrapping them in a HTML <code>fieldset</code> and disabling the <code>fieldset</code>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwXOVQq\" src=\"//codepen.io/anon/embed/VwXOVQq?height=450&amp;theme-id=1&amp;slug-hash=VwXOVQq&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwXOVQq\" title=\"CodePen Embed VwXOVQq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Inert is a new HTML attribute. It isn’t only for forms, but forms are certainly a key use-case. Unlike the <code>disabled</code> attribute, <code>inert</code> can be applied to a <code>form</code> element itself. Everything within the form will be non-focusable and non-clickable. When it comes to assistive technologies, <code>inert</code> is similar to setting <code>aria-hidden=\"true\"</code>. Unlike the <code>disabled</code> attribute, <code>inert</code> does not apply any styling by default, but it’s easy to add your own:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">form[inert] {\n  opacity: .2;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRxawag\" src=\"//codepen.io/anon/embed/GRxawag?height=450&amp;theme-id=1&amp;slug-hash=GRxawag&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRxawag\" title=\"CodePen Embed GRxawag\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"theres-more-to-come\">There’s more to come…</h3>\n\n\n<p>The big one is styling <code>&lt;select&gt;</code> elements, something developers have wanted for decades. It looks set to finally become a reality sometime soon with the introduction of <code><a href=\"https://css-tricks.com/the-selectmenu-element/\">selectmenu</a></code>.</p>\n\n\n\n<p>But that’s it for now! The recent updates bring full browser support to form features we’ve been waiting for, making them prime for production use.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/whats-new-with-forms-in-2022/\">What’s New With Forms in 2022?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Browsers are constantly adding new HTML, JavaScript and CSS features. Here are some useful additions to working with forms that you might have missed…\n\n\n\n\n\n\nrequestSubmit()\n\n\nSafari 16 will be the final browser to add support for requestSubmit.\n\n\n\nBefore we look at how .requestSubmit() works, let’s remind ourselves how programmatically submitting a form with JavaScript works when using the .submit() method. Submitting a form with submit() does not trigger a submit event. So in the following code, the form is submitted, preventDefault() has no effect, and nothing is logged to the console:\n\n\n\nconst form = document.forms[0];\nform.addEventListener('submit', function(event) {\n  // code to submit the form goes here\n  event.preventDefault();\n  console.log('form submitted!');\n});\n\ndocument.querySelector('.btn').addEventListener('click', function() {\n  form.submit();\n})\n\n\n\n.submit() will also ignore any HTML form validation. Given the following markup, the form will be submitted when the input is empty even though the input has a required attribute:\n\n\n\n<form>   \n  <label for=\"name\">Name</label>\n  <input required name=\"name\" id=\"name\" type=\"text\">\n</form>\n\n\n\n.requestSubmit() is an alternative way to submit a form using JavaScript, but in contrast to .submit(), HTML form validation will prevent the form from being submitted. If all the data entered in the form passes validation, the submit event will be fired, meaning “form submitted!” would be logged to the console in the following example:\n\n\n\nform.addEventListener('submit', function(event) {\n  event.preventDefault();\n  console.log('form submitted!');\n});\n\ndocument.querySelector('.btn').addEventListener('click', function() {\n  form.requestSubmit();\n})\n\n\n\nYou could already achieve this by programmatically clicking the form’s submit button, but requestSubmit is perhaps a more elegant solution.\n\n\nsubmitter property of submit event\n\n\nThe SubmitEvent.submitter property gained full cross-browser support with the release of Safari 15.4. This read-only property specifies the <button> or <input type=\"submit\"> element that caused a form to be submitted.\n\n\n\n<form>\n  <button name=\"foo\" value=\"bar\" type=\"submit\">Bar</button>\n  <button name=\"foo\" value=\"baz\" type=\"submit\">Baz</button>\n</form>\n\n\n\nWhen you have multiple submit buttons or inputs, each with a different value, only the value of the button or input that was clicked on to submit the form will be sent to the server, rather than both values. That’s nothing new. What is new is that the event listener for the submit event now has access to the event.submitter property. You can use this to add a class to the button or input that triggered the form submission, for example, or to obtain its value or any other of its HTML attributes.\n\n\n\ndocument.forms[0].addEventListener('submit', function(event) {\n  event.preventDefault();\n  console.log(event.submitter.value);\n  console.log(event.submitter.formaction);\n  event.submitter.classList.add('spinner-animation');\n})\n\n\nformdata event\n\n\nThis isn’t particularly new, but only achieved cross-browser support with the release of Safari 15. The main use case for the formdata event is enabling custom elements to take part in form submissions. Outside of web components, though, it can still be useful.\n\n\n\nYou add a formdata event listener to the form you want to interact with:\n\n\n\ndocument.querySelector('form').addEventListener('formdata', handleFormdata);\n\n\n\nThe event is fired both by a regular HTML form submission and also by an occurrence of new FormData(). event.formData holds all of the data being submitted.\n\n\n\nfunction handleFormdata(event) {\n  for (const entry of event.formData.values()) {\n    console.log(entry);\n  }\n}\n\n\n\nThe callback function for the formdata event listener runs before the data is sent to the server, giving you a chance to add to or modify the data being sent.\n\n\n\nfunction handleFormdata(event) {\n  event.formData.append('name', 'John');\n}\n\n\n\nYou could have modified or appended the FormData inside the submit event handler but formdata allows you to separate out the logic. It’s also an alternative to using hidden inputs in the markup of your form in cases where you are submitting the form “the old fashioned way” — i.e. relying on the built-in functionality of HTML to submit the form rather than doing it with fetch.\n\n\nshowPicker() for input elements\n\n\nshowPicker() has been supported since Chrome 99, Firefox 101, and in the upcoming Safari 16. For an input element whose type attribute is either Date, Month, Week, Time, datetime-local, color, or file, showPicker() provides a programmatic way to display the selection UI. For color and file inputs, it’s always been possible to programmatically show the picker by calling .click on the input:\n\n\n\ndocument.querySelector('input[type=\"color\"]').click();\n\n\n\nThat approach doesn’t work on date inputs, which is why this new API was added. .showPicker() will also work with color and file inputs but there’s no real advantage to using it over .click().\n\n\n\n\n\n\nInert attribute\n\n\nIt’s always been possible to disable multiple inputs at once by wrapping them in a HTML fieldset and disabling the fieldset:\n\n\n\nCodePen Embed Fallback\n\n\n\nInert is a new HTML attribute. It isn’t only for forms, but forms are certainly a key use-case. Unlike the disabled attribute, inert can be applied to a form element itself. Everything within the form will be non-focusable and non-clickable. When it comes to assistive technologies, inert is similar to setting aria-hidden=\"true\". Unlike the disabled attribute, inert does not apply any styling by default, but it’s easy to add your own:\n\n\n\nform[inert] {\n  opacity: .2;\n}\n\n\n\nCodePen Embed Fallback\n\n\nThere’s more to come…\n\n\nThe big one is styling <select> elements, something developers have wanted for decades. It looks set to finally become a reality sometime soon with the introduction of selectmenu.\n\n\n\nBut that’s it for now! The recent updates bring full browser support to form features we’ve been waiting for, making them prime for production use.\n\nWhat’s New With Forms in 2022? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372979",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-08T13:12:51.000Z",
      "date_modified": "2022-09-08T13:12:51.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372968",
      "url": "https://css-tricks.com/overlapping-bar-charts/",
      "title": "Overlapping Bar Charts",
      "summary": "As the name suggests, overlapping charts visualize two different sets of data in a single diagram. The idea is that the overlapping bars allow us to compare data, say, year-over-year. They are also useful for things like tracking progress for …\n\nOverlapping Bar Charts originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>As the name suggests, overlapping charts visualize two different sets of data in a single diagram. The idea is that the overlapping bars allow us to compare data, say, year-over-year. They are also useful for things like tracking progress for a goal where one bar represents the goal and the other shows the current amount.</p>\n\n\n\n<p>But they’re beautiful too!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/overlapping-charts-collage.jpg?resize=1200%2C600&#038;ssl=1\" alt=\"A two-by-two grid of overlapping chart examples.\" class=\"wp-image-372970\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/overlapping-charts-collage.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/overlapping-charts-collage.jpg?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/overlapping-charts-collage.jpg?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/overlapping-charts-collage.jpg?resize=768%2C384&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Your mind is probably like mine and is already starting to figure out how you’d go off and code that. Here’s how I tackled it.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjLMXZx\" src=\"//codepen.io/anon/embed/JjLMXZx?height=550&amp;theme-id=1&amp;slug-hash=JjLMXZx&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjLMXZx\" title=\"CodePen Embed JjLMXZx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-html\">The HTML</h3>\n\n\n<p>We’re going to start with markup because, well, that’s how we know what needs styling.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"container\">\n  &lt;div class=\"chart\">\n    &lt;dl class=\"numbers\">\n      &lt;dd>&lt;span>100%&lt;/span>&lt;/dd>\n      &lt;!-- all the way to 0% -->\n    &lt;/dl>\n    &lt;dl class=\"bars\">\n      &lt;div>\n          &lt;dt>2018&lt;/dt>\n          &lt;dd>\n            &lt;div class=\"bar\" data-percentage=\"50\">&lt;/div>\n            &lt;div class=\"bar overlap\" data-percentage=\"53\">&lt;/div>\n          &lt;/dd>\n        &lt;/div>\n      &lt;div>\n      &lt;!-- more bars -->\n    &lt;/dl>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>We will be using description lists (<code>&lt;dl&gt;</code>) as it is a much more semantic approach as compared to standard ordered and unordered lists. Another reason is that we are including a label within each bar. Normal lists do not have a tag within them to add a title or description unlike definition lists. In simple terms, it just makes more sense and is more readable too.</p>\n\n\n\n<p>The first description list, <code>.numbers</code>, is the y-axis. The <code>.bars</code> is where the data is visualized and I’ve made a definition list to build the x-axis as well. Each list item contains a <code>.bar</code> and the label as a description term (dt).</p>\n\n\n\n<p>And what’s up with the data <a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/\">attribute</a>? The <code>data-percentage</code> is being used to specify the height of the bar, which ultimately represents its value on the y-axis. We could manually set it in CSS for each bar, but that is repetitive and a lot of extra code that can be replaced with a few lines of CSS.</p>\n\n\n<h3 id=\"the-basic-chart-styles\">The basic chart styles</h3>\n\n\n<p>We’re working with a lot of two-dimensional directions, so flexbox is going to be our friend for getting everything lined up. We can make the <code>.chart</code> element a flexible container that positions the y-axis labels and the chart beside one another in the <code>row</code> direction.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.chart {\n  display: flex;\n}</code></pre>\n\n\n\n<p>We don’t even need to specify the direction since flexbox defaults to <code>row</code>. Let’s do that and then add flexbox to the list of labels along the y-axis while we’re at it since we know those will run in the <code>column</code> direction.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.numbers {\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  margin: 0 15px 0 0;\n  padding: 0;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxWpZLr\" src=\"//codepen.io/anon/embed/xxWpZLr?height=500&amp;theme-id=1&amp;slug-hash=xxWpZLr&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxWpZLr\" title=\"CodePen Embed xxWpZLr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Believe it or not, we can use flexbox again for the bars since, they too, are running in a <code>row</code> direction.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.bars {\n  display: flex;\n  flex: auto; /* fill up the rest of the `.chart` space */\n  gap: 60px;\n}</code></pre>\n\n\n\n<p>I’ve set this up so that the <code>.bars</code> automatically take up whatever space is leftover by the <code>y-axis</code> <code>.numbers</code>.</p>\n\n\n\n<p>You probably noticed it in the HTML, but “bar” is actually two bars where one overlaps the other. I wrapped those in a generic <code>&lt;div&gt;</code> that we can use as yet another flexible container that holds the definition term (<code>&lt;dt&gt;</code>) we’re using as a label and the description details (<code>&lt;dd&gt;</code>) that holds both bar values:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.bars > div {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  position: relative;\n}</code></pre>\n\n\n\n<p>Each bar is going to be the same width, hence <code>flex: 1</code>. We’re relatively positioning the element while we’re at it because we’re about to absolutely position each bar and we want to make sure they stay in their containers.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxpVQv\" src=\"//codepen.io/anon/embed/mdxpVQv?height=550&amp;theme-id=1&amp;slug-hash=mdxpVQv&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxpVQv\" title=\"CodePen Embed mdxpVQv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Each bar has a percentage height that corresponds to the values along the vertical y-axis. You may also remember that we gave each bar a <code>data-percentage</code> attribute — we’re going to sprinkle in a little JavaScript that sets the height of each bar using those values.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">var bars = document.querySelectorAll(\"dd .bar\");\nbars.forEach((bar) => {\n  var height = bar.getAttribute(\"data-percentage\");\n  bar.style.height = height + \"%\";\n});</code></pre>\n\n\n\n<p>That’s our basic chart!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BarJjEB\" src=\"//codepen.io/anon/embed/BarJjEB?height=550&amp;theme-id=1&amp;slug-hash=BarJjEB&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BarJjEB\" title=\"CodePen Embed BarJjEB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We want to get this to where we can see the bars overlapping one another. That’s next!</p>\n\n\n<h3 id=\"overlapping-bars\">Overlapping bars</h3>\n\n\n<p>The trick to get one bar to overlap another is funny because we’re often trying to <em>prevent</em> things from overlapping visually in CSS. But in this case, we actually want that to happen.</p>\n\n\n\n<p>The bars are already overlapping; it’s just tough to tell. Notice in the HTML that the second <code>.bar</code> in each set has an additional <code>.overlap</code> class. Let’s use that to differentiate the bars. You’re totally free to choose your own styling for this. I’m adding a little padding to the <code>.overlap</code> bars so that they are wider than the other bars. Then I’m tweaking the stacking order using <code>z-index</code> so that the <code>.overlap</code> bars sit below the other bars.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxWpVxj\" src=\"//codepen.io/anon/embed/xxWpVxj?height=550&amp;theme-id=1&amp;slug-hash=xxWpVxj&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxWpVxj\" title=\"CodePen Embed xxWpVxj\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"lets-add-a-legend\">Let’s add a legend</h3>\n\n\n<p><em>Legend.</em> Such a great word, isn’t it? Packed with all kinds of meaning. In this case, it’s a more than a nice touch because, visually, we’re jamming two bars in spaces that are typically reserved for one bar. A legend provides context that explains what each bar represents.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;figure class=\"legend\">\n  &lt;div class=\"type1\">Estimate&lt;/div>\n  &lt;div class=\"type2\">Actual&lt;/div>\n&lt;/figure></code></pre>\n\n\n\n<p>Using a <code>&lt;figure&gt;</code> feels correct to me. They’re often used to wrap images, but the spec <a href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#the-figure-element\" rel=\"noopener\">says</a> they’re used “to annotate illustrations, diagrams, photos, code listings, etc.” and we’re working with a diagram. We could probably use an unordered list to hold the items, but I went with an unsemantic <code>&lt;div&gt;</code>. If anyone has an opinion on the best way to mark this up, I’m all ears in the comments!</p>\n\n\n\n<p>Once again, styling is totally up to you:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwXyayJ\" src=\"//codepen.io/anon/embed/VwXyayJ?height=550&amp;theme-id=1&amp;slug-hash=VwXyayJ&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwXyayJ\" title=\"CodePen Embed VwXyayJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"accessibility-considerations\">Accessibility considerations</h3>\n\n\n<p>We’ve spent a bunch of our effort on making decisions for the markup and styling of our overlapping bar chart. It’s great so far, but we’re definitely not done because there’s more we can do to make this a more <em>accessible</em> experience. Not everyone is a sighted web surfer, so there’s some additional work to do to convey the content in those contexts.</p>\n\n\n\n<p>Specifically, we need to:</p>\n\n\n\n<ol><li>check that our colors have plenty of contrast between them,</li><li>allow keyboard users to tab to each overlapping bar, and</li><li>make sure screen readers announce the content.</li></ol>\n\n\n<h4 id=\"color-contrasts\">Color contrasts</h4>\n\n\n<p>We need enough contrast between:</p>\n\n\n\n<ul><li>the overlapping bars</li><li>the bars and the chart background</li><li>the label text and background</li></ul>\n\n\n\n<p>I did a little homework in advance on the colors I used in the examples we’ve look at so far, making sure that there is enough <a href=\"https://css-tricks.com/understanding-web-accessibility-color-contrast-guidelines-and-ratios/\">contrast between the foregrounds and backgrounds</a> to achieve WCAG AA compliance.</p>\n\n\n\n<p>Here’s what I’m using:</p>\n\n\n\n<ul><li>Overlapping bars: (<code>#25DEAA</code> and <code>#696969</code>: 3.16:1 ratio)</li><li>Bars and chart background (<code>#696969</code> and <code>#111</code>: 3.43:1 ratio)</li><li>Y-axis label text and background (<code>#fff</code> and <code>#333</code>: 12.63: 1 ratio)</li></ul>\n\n\n<h4 id=\"tabbing-between-bars\">Tabbing between bars</h4>\n\n\n<p>To get this where keyboard users can select each individual bar with the <kbd>Tab</kbd> key, we can reach for the HTML <code>tabindex</code> attribute. We can use the following JavaScript inside the for-each function to add this property to each bar (both of them). We will set the tab index to <code>0</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">bar.setAttribute(\"tabindex\", 0);</code></pre>\n\n\n\n<p>We can also add some CSS to improve the outline when the bar is selected while we’re at it:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.bar:focus {\n  outline: 1.5px solid #f1f1f1;\n}</code></pre>\n\n\n<h4 id=\"announcing-content-on-screen-readers\">Announcing content on screen readers</h4>\n\n\n<p>Another important aspect of accessibility is making sure screen readers can announce the bars and their percentages.</p>\n\n\n\n<p>We’re working with two different charts in one: a chart that shows “Estimated” values and another that shows “Actual” values. It’d be great if the user knew which bar was being announced, so let’s label them with the <code>aria-label</code> attribute:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"bar\" data-percentage=\"50\" aria-label=\"Estimate\">50%&lt;/div></code></pre>\n\n\n\n<p>Notice that we have the bar’s value directly in the HTML as well. That will get announced, but we still want to visually hide it. We could use <code>transparent</code> text for that, but another way is to use the <a href=\"https://css-tricks.com/inclusively-hidden/\">classic <code>.visually-hidden</code> trick</a> by wrapping the value in <code>span</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"bar\" data-percentage=\"50\" aria-label=\"Estimate\">\n  &lt;span class=\"visually-hidden\">50%&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.visually-hidden {\n  clip: rect(0 0 0 0); \n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap; \n  width: 1px;\n}</code></pre>\n\n\n\n<p>While we’re talking about announcing content, we can probably prevent the y-axis labels from being read. It’s not like the user is missing information, as the actual percentages for each bar are already available and announced. We can use the <code>aria-hidden</code> attribute for that:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;dl class=\"numbers\" aria-hidden=\"true\">\n  &lt;dd>&lt;span>100%&lt;/span>&lt;/dd>\n  &lt;dd>&lt;span>80%&lt;/span>&lt;/dd>\n  &lt;dd>&lt;span>60%&lt;/span>&lt;/dd>\n  &lt;dd>&lt;span>40%&lt;/span>&lt;/dd>\n  &lt;dd>&lt;span>20%&lt;/span>&lt;/dd>\n  &lt;dd>&lt;span>0%&lt;/span>&lt;/dd>\n&lt;/dl></code></pre>\n\n\n\n<p>I also think it’s OK for screen readers to ignore the legend since it’s a visual aid:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;figure class=\"legend\" aria-hidden=\"true\">\n  &lt;div class=\"type1\">Estimate&lt;/div>\n  &lt;div class=\"type2\">Actual&lt;/div>\n&lt;/figure></code></pre>\n\n\n<h3 id=\"the-final-demo\">The final demo</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjLMXZx\" src=\"//codepen.io/anon/embed/JjLMXZx?height=550&amp;theme-id=1&amp;slug-hash=JjLMXZx&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjLMXZx\" title=\"CodePen Embed JjLMXZx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"thats-a-wrap\">That’s a wrap!</h3>\n\n\n<p>There we go, a chart with overlapping bars! It’s a nice way to compare data and I hope you can find a use for it on some project.</p>\n\n\n\n<p>Are there other ways we could have approached this? Of course! Everything we covered here is merely walking you through my thought process. I imagine some of you would have taken a different approach — if that’s you, please share! It’d be great to see other CSS layout techniques and perspectives on nailing the accessibility.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/overlapping-bar-charts/\">Overlapping Bar Charts</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "As the name suggests, overlapping charts visualize two different sets of data in a single diagram. The idea is that the overlapping bars allow us to compare data, say, year-over-year. They are also useful for things like tracking progress for a goal where one bar represents the goal and the other shows the current amount.\n\n\n\nBut they’re beautiful too!\n\n\n\n\n\n\n\nYour mind is probably like mine and is already starting to figure out how you’d go off and code that. Here’s how I tackled it.\n\n\n\nCodePen Embed Fallback\n\n\nThe HTML\n\n\nWe’re going to start with markup because, well, that’s how we know what needs styling.\n\n\n\n<div class=\"container\">\n  <div class=\"chart\">\n    <dl class=\"numbers\">\n      <dd><span>100%</span></dd>\n      <!-- all the way to 0% -->\n    </dl>\n    <dl class=\"bars\">\n      <div>\n          <dt>2018</dt>\n          <dd>\n            <div class=\"bar\" data-percentage=\"50\"></div>\n            <div class=\"bar overlap\" data-percentage=\"53\"></div>\n          </dd>\n        </div>\n      <div>\n      <!-- more bars -->\n    </dl>\n  </div>\n</div>\n\n\n\nWe will be using description lists (<dl>) as it is a much more semantic approach as compared to standard ordered and unordered lists. Another reason is that we are including a label within each bar. Normal lists do not have a tag within them to add a title or description unlike definition lists. In simple terms, it just makes more sense and is more readable too.\n\n\n\nThe first description list, .numbers, is the y-axis. The .bars is where the data is visualized and I’ve made a definition list to build the x-axis as well. Each list item contains a .bar and the label as a description term (dt).\n\n\n\nAnd what’s up with the data attribute? The data-percentage is being used to specify the height of the bar, which ultimately represents its value on the y-axis. We could manually set it in CSS for each bar, but that is repetitive and a lot of extra code that can be replaced with a few lines of CSS.\n\n\nThe basic chart styles\n\n\nWe’re working with a lot of two-dimensional directions, so flexbox is going to be our friend for getting everything lined up. We can make the .chart element a flexible container that positions the y-axis labels and the chart beside one another in the row direction.\n\n\n\n.chart {\n  display: flex;\n}\n\n\n\nWe don’t even need to specify the direction since flexbox defaults to row. Let’s do that and then add flexbox to the list of labels along the y-axis while we’re at it since we know those will run in the column direction.\n\n\n\n.numbers {\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  margin: 0 15px 0 0;\n  padding: 0;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBelieve it or not, we can use flexbox again for the bars since, they too, are running in a row direction.\n\n\n\n.bars {\n  display: flex;\n  flex: auto; /* fill up the rest of the `.chart` space */\n  gap: 60px;\n}\n\n\n\nI’ve set this up so that the .bars automatically take up whatever space is leftover by the y-axis .numbers.\n\n\n\nYou probably noticed it in the HTML, but “bar” is actually two bars where one overlaps the other. I wrapped those in a generic <div> that we can use as yet another flexible container that holds the definition term (<dt>) we’re using as a label and the description details (<dd>) that holds both bar values:\n\n\n\n.bars > div {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  position: relative;\n}\n\n\n\nEach bar is going to be the same width, hence flex: 1. We’re relatively positioning the element while we’re at it because we’re about to absolutely position each bar and we want to make sure they stay in their containers.\n\n\n\nCodePen Embed Fallback\n\n\n\nEach bar has a percentage height that corresponds to the values along the vertical y-axis. You may also remember that we gave each bar a data-percentage attribute — we’re going to sprinkle in a little JavaScript that sets the height of each bar using those values.\n\n\n\nvar bars = document.querySelectorAll(\"dd .bar\");\nbars.forEach((bar) => {\n  var height = bar.getAttribute(\"data-percentage\");\n  bar.style.height = height + \"%\";\n});\n\n\n\nThat’s our basic chart!\n\n\n\nCodePen Embed Fallback\n\n\n\nWe want to get this to where we can see the bars overlapping one another. That’s next!\n\n\nOverlapping bars\n\n\nThe trick to get one bar to overlap another is funny because we’re often trying to prevent things from overlapping visually in CSS. But in this case, we actually want that to happen.\n\n\n\nThe bars are already overlapping; it’s just tough to tell. Notice in the HTML that the second .bar in each set has an additional .overlap class. Let’s use that to differentiate the bars. You’re totally free to choose your own styling for this. I’m adding a little padding to the .overlap bars so that they are wider than the other bars. Then I’m tweaking the stacking order using z-index so that the .overlap bars sit below the other bars.\n\n\n\nCodePen Embed Fallback\n\n\nLet’s add a legend\n\n\nLegend. Such a great word, isn’t it? Packed with all kinds of meaning. In this case, it’s a more than a nice touch because, visually, we’re jamming two bars in spaces that are typically reserved for one bar. A legend provides context that explains what each bar represents.\n\n\n\n<figure class=\"legend\">\n  <div class=\"type1\">Estimate</div>\n  <div class=\"type2\">Actual</div>\n</figure>\n\n\n\nUsing a <figure> feels correct to me. They’re often used to wrap images, but the spec says they’re used “to annotate illustrations, diagrams, photos, code listings, etc.” and we’re working with a diagram. We could probably use an unordered list to hold the items, but I went with an unsemantic <div>. If anyone has an opinion on the best way to mark this up, I’m all ears in the comments!\n\n\n\nOnce again, styling is totally up to you:\n\n\n\nCodePen Embed Fallback\n\n\nAccessibility considerations\n\n\nWe’ve spent a bunch of our effort on making decisions for the markup and styling of our overlapping bar chart. It’s great so far, but we’re definitely not done because there’s more we can do to make this a more accessible experience. Not everyone is a sighted web surfer, so there’s some additional work to do to convey the content in those contexts.\n\n\n\nSpecifically, we need to:\n\n\n\ncheck that our colors have plenty of contrast between them,allow keyboard users to tab to each overlapping bar, andmake sure screen readers announce the content.\n\n\nColor contrasts\n\n\nWe need enough contrast between:\n\n\n\nthe overlapping barsthe bars and the chart backgroundthe label text and background\n\n\n\nI did a little homework in advance on the colors I used in the examples we’ve look at so far, making sure that there is enough contrast between the foregrounds and backgrounds to achieve WCAG AA compliance.\n\n\n\nHere’s what I’m using:\n\n\n\nOverlapping bars: (#25DEAA and #696969: 3.16:1 ratio)Bars and chart background (#696969 and #111: 3.43:1 ratio)Y-axis label text and background (#fff and #333: 12.63: 1 ratio)\n\n\nTabbing between bars\n\n\nTo get this where keyboard users can select each individual bar with the Tab key, we can reach for the HTML tabindex attribute. We can use the following JavaScript inside the for-each function to add this property to each bar (both of them). We will set the tab index to 0:\n\n\n\nbar.setAttribute(\"tabindex\", 0);\n\n\n\nWe can also add some CSS to improve the outline when the bar is selected while we’re at it:\n\n\n\n.bar:focus {\n  outline: 1.5px solid #f1f1f1;\n}\n\n\nAnnouncing content on screen readers\n\n\nAnother important aspect of accessibility is making sure screen readers can announce the bars and their percentages.\n\n\n\nWe’re working with two different charts in one: a chart that shows “Estimated” values and another that shows “Actual” values. It’d be great if the user knew which bar was being announced, so let’s label them with the aria-label attribute:\n\n\n\n<div class=\"bar\" data-percentage=\"50\" aria-label=\"Estimate\">50%</div>\n\n\n\nNotice that we have the bar’s value directly in the HTML as well. That will get announced, but we still want to visually hide it. We could use transparent text for that, but another way is to use the classic .visually-hidden trick by wrapping the value in span:\n\n\n\n<div class=\"bar\" data-percentage=\"50\" aria-label=\"Estimate\">\n  <span class=\"visually-hidden\">50%</span>\n</div>\n\n\n\n.visually-hidden {\n  clip: rect(0 0 0 0); \n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap; \n  width: 1px;\n}\n\n\n\nWhile we’re talking about announcing content, we can probably prevent the y-axis labels from being read. It’s not like the user is missing information, as the actual percentages for each bar are already available and announced. We can use the aria-hidden attribute for that:\n\n\n\n<dl class=\"numbers\" aria-hidden=\"true\">\n  <dd><span>100%</span></dd>\n  <dd><span>80%</span></dd>\n  <dd><span>60%</span></dd>\n  <dd><span>40%</span></dd>\n  <dd><span>20%</span></dd>\n  <dd><span>0%</span></dd>\n</dl>\n\n\n\nI also think it’s OK for screen readers to ignore the legend since it’s a visual aid:\n\n\n\n<figure class=\"legend\" aria-hidden=\"true\">\n  <div class=\"type1\">Estimate</div>\n  <div class=\"type2\">Actual</div>\n</figure>\n\n\nThe final demo\n\n\nCodePen Embed Fallback\n\n\nThat’s a wrap!\n\n\nThere we go, a chart with overlapping bars! It’s a nice way to compare data and I hope you can find a use for it on some project.\n\n\n\nAre there other ways we could have approached this? Of course! Everything we covered here is merely walking you through my thought process. I imagine some of you would have taken a different approach — if that’s you, please share! It’d be great to see other CSS layout techniques and perspectives on nailing the accessibility.\n\nOverlapping Bar Charts originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372968",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-07T13:46:58.000Z",
      "date_modified": "2022-09-07T13:46:58.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372850",
      "url": "https://css-tricks.com/hacking-css-animation-state-and-playback-time/",
      "title": "Hacking CSS Animation State and Playback Time",
      "summary": "CSS-only Wolfenstein is a little project that I made a few weeks ago. It was an experiment with CSS 3D transformations and animations.\nInspired by the FPS demo and another Wolfenstein CodePen, I decided to build my own version. …\n\nHacking CSS Animation State and Playback Time originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p><a href=\"https://codepen.io/coolwanglu/full/VwXyavg\" rel=\"noopener\">CSS-only Wolfenstein</a> is a little project that I made a few weeks ago. It was an experiment with CSS 3D transformations and animations.</p>\n\n\n\n<p>Inspired by the <a href=\"https://keithclark.co.uk/labs/css-fps/\" rel=\"noopener\">FPS demo</a> and another <a href=\"https://codepen.io/M_J_Robbins/pen/XpQZOG\" rel=\"noopener\">Wolfenstein CodePen</a>, I decided to build my own version. It is loosely based on Episode 1 &#8211; Floor 9 of the original Wolfenstein 3D game.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwXyavg\" src=\"//codepen.io/anon/embed/VwXyavg?height=450&amp;theme-id=1&amp;slug-hash=VwXyavg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwXyavg\" title=\"CodePen Embed VwXyavg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">Editor: This game intentionally requires some quick reaction to avoid a Game Over screen.</p>\n\n\n\n<p>Here is a playthrough video:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-4-3 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"css only wolfenstein\" width=\"500\" height=\"375\" src=\"https://www.youtube.com/embed/e-62uqSn43s?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<span id=\"more-372850\"></span>\n\n\n\n<p>In a nutshell, my project is nothing but a carefully scripted long CSS animation. Plus a few instances of the <a href=\"https://css-tricks.com/the-checkbox-hack/\">checkbox hack</a>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:checked ~ div { animation-name: spin; }</code></pre>\n\n\n\n<p>The environment consists of 3D grid faces and the animations are mostly plain 3D translations and rotations. Nothing really fancy.</p>\n\n\n\n<p>However, two problems were particularly tricky to solve:</p>\n\n\n\n<ul><li>Play the &#8220;weapon firing&#8221; animation whenever the player clicks on an enemy.</li><li>When the fast-moving boss got the last hit, enter a dramatic slow motion.</li></ul>\n\n\n\n<p>At a technical-level, this meant:</p>\n\n\n\n<ul><li>Replay an animation when the next checkbox is checked.</li><li>Slow down an animation, when a checkbox is checked.</li></ul>\n\n\n\n<p>In fact, neither was properly solved in my project! I either ended up using workarounds or just gave up.</p>\n\n\n\n<p>On the other hand, after some digging, eventually I found the key to both problems: altering the properties of running CSS animations. In this article, we will explore further on this topic:</p>\n\n\n\n<ul><li>Lots of interactive examples.</li><li>Dissections: how does each example work (or not work)?</li><li>Behind-the-scene: how do browsers handle animation states?</li></ul>\n\n\n\n<p>Let me <a href=\"https://en.wiktionary.org/wiki/%E6%8B%8B%E7%A3%9A%E5%BC%95%E7%8E%89#Idiom\" rel=\"noopener\">&#8220;toss my bricks&#8221;</a>.</p>\n\n\n<h3 id=\"problem-1-replaying-animation\">Problem 1: Replaying Animation</h3>\n\n<h4 id=\"the-first-example-just-another-checkbox\">The first example: &#8220;just another checkbox&#8221;</h4>\n\n\n<p>My first intuition was &#8220;just add another checkbox&#8221;, which does not work:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYRzopw\" src=\"//codepen.io/anon/embed/vYRzopw?height=450&amp;theme-id=1&amp;slug-hash=vYRzopw&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYRzopw\" title=\"CodePen Embed vYRzopw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Each checkbox works individually, but not both together. If one checkbox is already checked, the other no longer works.</p>\n\n\n\n<p>Here&#8217;s how it works (or &#8220;does not work&#8221;):</p>\n\n\n\n<ol><li>The <code>animation-name</code> of <code>&lt;div&gt;</code> is <code>none</code> by default.</li><li>The user clicks on one checkbox, <code>animation-name</code> becomes <code>spin</code>, and the animation starts from the beginning.</li><li>After a while, the user clicks on the other checkbox. A new CSS rule takes effect, but <code>animation-name</code> is <em>still</em> <code>spin</code>, which means no animation is added nor removed. The animation simply continues playing as if nothing happened.</li></ol>\n\n\n<h4 id=\"the-second-example-cloning-the-animation\">The second example: &#8220;cloning the animation&#8221;</h4>\n\n\n<p>One working approach is to clone the animation:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#spin1:checked ~ div { animation-name: spin1; }\n#spin2:checked ~ div { animation-name: spin2; }</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWYLZEQ\" src=\"//codepen.io/anon/embed/NWYLZEQ?height=450&amp;theme-id=1&amp;slug-hash=NWYLZEQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWYLZEQ\" title=\"CodePen Embed NWYLZEQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here&#8217;s how it works:</p>\n\n\n\n<ol><li><code>animation-name</code> is <code>none</code> initially.</li><li>The user clicks on &#8220;Spin!&#8221;, <code>animation-name</code> becomes <code>spin1</code>. The animation <code>spin1</code> is started from the beginning because it was just added.</li><li>The user clicks on &#8220;Spin again!&#8221;, <code>animation-name</code> becomes <code>spin2</code>. The animation <code>spin2</code> is started from the beginning because it was just added.</li></ol>\n\n\n\n<p>Note that in Step #3, <code>spin1</code> is removed because of the order of the CSS rules. It won&#8217;t work if &#8220;Spin again!&#8221; is checked first.</p>\n\n\n<h4 id=\"the-third-example-appending-the-same-animation\">The third example: &#8220;appending the same animation&#8221;</h4>\n\n\n<p>Another working approach is to &#8220;append the same animation&#8221;:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#spin1:checked ~ div { animation-name: spin; }\n#spin2:checked ~ div { animation-name: spin, spin; }</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNdZXam\" src=\"//codepen.io/anon/embed/rNdZXam?height=450&amp;theme-id=1&amp;slug-hash=rNdZXam&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNdZXam\" title=\"CodePen Embed rNdZXam\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This is similar to the previous example. You can actually understand the behavior this way:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#spin1:checked ~ div { animation-name: spin1; }\n#spin2:checked ~ div { animation-name: spin2, spin1; }</code></pre>\n\n\n\n<p>Note that when &#8220;Spin again!&#8221; is checked, the old running animation becomes the second animation in the new list, which could be unintuitive. A direct consequence is: the trick won&#8217;t work if <code>animation-fill-mode</code> is <code>forwards</code>. Here&#8217;s a demo:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMLqRG\" src=\"//codepen.io/anon/embed/eYMLqRG?height=450&amp;theme-id=1&amp;slug-hash=eYMLqRG&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMLqRG\" title=\"CodePen Embed eYMLqRG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you wonder why this is the case, here are some clues:</p>\n\n\n\n<ul><li><code>animation-fill-mode</code> is <code>none</code> by default, which means &#8220;The animation has no effect at all if not playing&#8221;.</li><li><code>animation-fill-mode: forwards;</code> means &#8220;After the animation finishes playing, it must stay at the last keyframe forever&#8221;.</li><li><code>spin1</code>’s decision always override <code>spin2</code>’s because <code>spin1</code> appears later in the list.</li><li>Suppose the user clicks on &#8220;Spin!&#8221;, waits for a full spin, then clicks on &#8220;Spin again!&#8221;. At this moment. <code>spin1</code> is already finished, and <code>spin2</code> just starts. </li></ul>\n\n\n<h4 id=\"discussion\"><strong>Discussion</strong></h4>\n\n\n<p>Rule of thumb: you cannot &#8220;restart&#8221; an existing CSS animation. Instead, you want to add and play a new animation. This may be confirmed by <a href=\"https://www.w3.org/TR/css-animations-1/#animations\" rel=\"noopener\">the W3C spec</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Once an animation has started it continues until it ends or the animation-name is removed.</p></blockquote>\n\n\n\n<p>Now comparing the last two examples, I think in practice, &#8220;cloning animations&#8221; should often work better, especially when CSS preprocessor is available.</p>\n\n\n<h3 id=\"problem-2-slow-motion\">Problem 2: Slow Motion</h3>\n\n\n<p>One might think that slowing an animation is just a matter of setting a longer <code>animation-duration</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div { animation-duration: 0.5s; }\n#slowmo:checked ~ div { animation-duration: 1.5s; }</code></pre>\n\n\n\n<p>Indeed, this works:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaJywx\" src=\"//codepen.io/anon/embed/YzaJywx?height=450&amp;theme-id=1&amp;slug-hash=YzaJywx&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaJywx\" title=\"CodePen Embed YzaJywx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>&#8230; or does it?</p>\n\n\n\n<p>With a few tweaks, it should be easier to see the issue.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abYRvZN\" src=\"//codepen.io/anon/embed/abYRvZN?height=450&amp;theme-id=1&amp;slug-hash=abYRvZN&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abYRvZN\" title=\"CodePen Embed abYRvZN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Yes, the animation is slowed down. And no, it does not look good. The dog (almost) always &#8220;jumps&#8221; when you toggle the checkbox. Furthermore, the dog seems to jump to a random position rather than the initial one. How come?</p>\n\n\n\n<p>It would be easier to understand it if we introduced two &#8220;shadow elements&#8221;:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNqajZw\" src=\"//codepen.io/anon/embed/oNqajZw?height=450&amp;theme-id=1&amp;slug-hash=oNqajZw&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNqajZw\" title=\"CodePen Embed oNqajZw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Both shadow elements are running the same animations with different <code>animation-duration</code>. And they are not affected by the checkbox.</p>\n\n\n\n<p>When you toggle the checkbox, the element just immediately switches between the states of two shadow elements.</p>\n\n\n\n<p>Quoting <a href=\"https://www.w3.org/TR/css-animations-1/#animations\" rel=\"noopener\">the W3C spec</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Changes to the values of animation properties while the animation is running apply as if the animation had those values from when it began.</p></blockquote>\n\n\n\n<p>This follows the <a href=\"https://drafts.csswg.org/web-animations-1/#stateless\" rel=\"noopener\">stateless</a> design, which allows browsers to easily determine the animated value. The actual calculation is described <a href=\"https://drafts.csswg.org/css-transitions/#application\" rel=\"noopener\">here</a> and <a href=\"https://drafts.csswg.org/web-animations-1/#core-animation-effect-calculations\" rel=\"noopener\">here</a>.</p>\n\n\n<h4 id=\"another-attempt\"><strong>Another Attempt</strong></h4>\n\n\n<p>One idea is to pause the current animation, then add a slower animation that takes over from there:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div {\n  animation-name: spin1;\n  animation-duration: 2s;\n}\n\n#slowmo:checked ~ div {\n  animation-name: spin1, spin2;\n  animation-duration: 2s, 5s;\n  animation-play-state: paused, running;\n}</code></pre>\n\n\n\n<p>So it works:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwXEvyy\" src=\"//codepen.io/anon/embed/VwXEvyy?height=450&amp;theme-id=1&amp;slug-hash=VwXEvyy&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwXEvyy\" title=\"CodePen Embed VwXEvyy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>&#8230; or does it?</p>\n\n\n\n<p>It does slow down when you click on &#8220;Slowmo!&#8221;. But if you wait for a full circle, you will see a &#8220;jump&#8221;. Actually, it always jumps to the position when &#8220;Slowmo!&#8221; is clicked on.</p>\n\n\n\n<p>The reason is we don&#8217;t have a <code>from</code> keyframe defined &#8211; and we shouldn&#8217;t. When the user clicks on &#8220;Slowmo!&#8221;, <code>spin1</code> is paused at some position, and <code>spin2</code> starts at exactly the same position. We simply cannot predict that position beforehand &#8230; or can we?</p>\n\n\n<h4 id=\"a-working-solution\">A Working Solution</h4>\n\n\n<p>We can! By using a custom property, we can capture the angle in the first animation, then pass it to the second animation:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div {\n  transform: rotate(var(--angle1));\n  animation-name: spin1;\n  animation-duration: 2s;\n}\n\n#slowmo:checked ~ div {\n  transform: rotate(var(--angle2));\n  animation-name: spin1, spin2;\n  animation-duration: 2s, 5s;\n  animation-play-state: paused, running;\n}\n\n@keyframes spin1 {\n  to {\n    --angle1: 360deg;\n  }\n}\n\n@keyframes spin2 {\n  from {\n    --angle2: var(--angle1);\n  }\n  to {\n    --angle2: calc(var(--angle1) + 360deg);\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYdgpgO\" src=\"//codepen.io/anon/embed/LYdgpgO?height=450&amp;theme-id=1&amp;slug-hash=LYdgpgO&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYdgpgO\" title=\"CodePen Embed LYdgpgO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">Note: <code>@property</code> is used in this example, which is <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@property#browser_compatibility\" rel=\"noopener\">not supported by all browsers</a>.</p>\n\n\n<h4 id=\"the-perfect-solution\"><strong>The &#8220;Perfect&#8221; Solution</strong></h4>\n\n\n<p>There is a caveat to the previous solution: &#8220;exiting slowmo&#8221; does not work well.</p>\n\n\n\n<p>Here is a better solution:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMPJZW\" src=\"//codepen.io/anon/embed/eYMPJZW?height=450&amp;theme-id=1&amp;slug-hash=eYMPJZW&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMPJZW\" title=\"CodePen Embed eYMPJZW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In this version, slow motion can be entered or exited seamlessly. No experimental feature is used either. So is it the perfect solution? Yes and no.</p>\n\n\n\n<p>This solution works like &#8220;shifting&#8221; &#8220;gears&#8221;:</p>\n\n\n\n<ul><li>Gears: there are two <code>&lt;div></code>s. One is the parent of the other. Both have the <code>spin</code> animation but with different <code>animation-duration</code>. The final state of the element is the accumulation of both animations.</li><li>Shifting: At the beginning, only one <code>&lt;div></code> has its animation running. The other is paused. When the checkbox is toggled, both animations swap their states.</li></ul>\n\n\n\n<p>While I really like the result, there is one problem: it is a nice exploit of the <code>spin</code> animation, which does not work for other types of animations in general.</p>\n\n\n<h4 id=\"a-practical-solution-with-js\"><strong>A Practical Solution (with JS)</strong></h4>\n\n\n<p>For general animations, it is possible to achieve the slow motion function with a bit of JavaScript:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNqaLdG\" src=\"//codepen.io/anon/embed/oNqaLdG?height=450&amp;theme-id=1&amp;slug-hash=oNqaLdG&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNqaLdG\" title=\"CodePen Embed oNqaLdG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>A quick explanation:</p>\n\n\n\n<ul><li>A custom property is used to track the animation progress.</li><li>The animation is &#8220;restarted&#8221; when the checkbox is toggled.</li><li>The JS code computes the correct <code>animation-delay</code> to ensure a seamless transition. I recommend <a href=\"https://css-tricks.com/starting-css-animations-mid-way/\">this article</a> if you are not familiar with negative values of <code>animation-delay</code>.</li></ul>\n\n\n\n<p>You can view this solution as a hybrid of &#8220;restarting animation&#8221; and the &#8220;gear-shifting&#8221; approach.</p>\n\n\n\n<p>Here it is important to track the animation progress correctly. Workarounds are possible if <code>@property</code> is not available. As an example, this version uses <code>z-index</code> to track the progress:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaJGWR\" src=\"//codepen.io/anon/embed/YzaJGWR?height=450&amp;theme-id=1&amp;slug-hash=YzaJGWR&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaJGWR\" title=\"CodePen Embed YzaJGWR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Side-note: originally, I also tried to create a CSS-only version but did not succeed. While not 100% sure, I think it is because <code>animation-delay</code> is <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay#formal_definition\" rel=\"noopener\">not animatable</a>.</p>\n\n\n\n<p>Here is a version with minimal JavaScript. Only &#8220;entering slowmo&#8221; works.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWYObgw\" src=\"//codepen.io/anon/embed/NWYObgw?height=450&amp;theme-id=1&amp;slug-hash=NWYObgw&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWYObgw\" title=\"CodePen Embed NWYObgw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-default\">Please let me know if you manage to create a working CSS-only version!</p>\n\n\n<h4 id=\"slowmo-any-animation-with-js\">Slow-mo Any Animation (with JS)</h4>\n\n\n<p>Lastly, I&#8217;d like to share a solution that works for (almost) any animation, even with multiple complicated <code>@keyframes</code>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOeBLeW\" src=\"//codepen.io/anon/embed/gOeBLeW?height=450&amp;theme-id=1&amp;slug-hash=gOeBLeW&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOeBLeW\" title=\"CodePen Embed gOeBLeW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Basically, you need to add an animation progress tracker, then carefully compute <code>animation-delay</code> for the new animation. However, sometimes it could be tricky (but possible) to get the correct values.</p>\n\n\n\n<p>For example:</p>\n\n\n\n<ul><li><code>animation-timing-function</code> is not <code>linear</code>.</li><li><code>animation-direction</code> is not <code>normal</code>.</li><li>multiple values in <code>animation-name</code> with different <code>animation-duration</code>’s and <code>animation-delay</code>’s.</li></ul>\n\n\n\n<p>This method is also described <a href=\"https://drafts.csswg.org/web-animations-1/#seamlessly-updating-the-playback-rate-of-an-animation\" rel=\"noopener\">here</a> for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API\" rel=\"noopener\">Web Animations API</a>.</p>\n\n\n<h3 id=\"acknowledgments\">Acknowledgments</h3>\n\n\n<p>I started down this path after encountering CSS-only projects. Some were <a href=\"https://codepen.io/_fbrz/pen/poYgWz\" rel=\"noopener\">delicate artwork</a>, and some were <a href=\"https://codepen.io/ste-vg/pen/oKYjKV\" rel=\"noopener\">complex contraptions</a>. My favorites are those involving 3D objects, for example, this <a href=\"https://codepen.io/amit_sheen/pen/abBgWvJ\" rel=\"noopener\">bouncing ball</a> and this <a href=\"https://codepen.io/davidkpiano/pen/aqNZxX\" rel=\"noopener\">packing cube</a>.</p>\n\n\n\n<p>In the beginning, I had no clue how these were made. Later I read and learned a lot from <a href=\"https://css-tricks.com/how-i-live-coded-my-most-hearted-codepen-demo/\">this nice tutorial by Ana Tudor</a>.</p>\n\n\n\n<p>As it turned out, building and animating 3D objects with CSS is not much different from doing it with <a href=\"https://www.blender.org/\" rel=\"noopener\">Blender</a>, just with a bit different flavor.</p>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>In this article we examined the behavior of CSS animations when an <code>animate-*</code> property is altered. Especially we worked out solutions for &#8220;replaying an animation&#8221; and &#8220;animation slow-mo&#8221;.</p>\n\n\n\n<p>I hope you find this article interesting. Please let me know your thoughts!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/hacking-css-animation-state-and-playback-time/\">Hacking CSS Animation State and Playback Time</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "CSS-only Wolfenstein is a little project that I made a few weeks ago. It was an experiment with CSS 3D transformations and animations.\n\n\n\nInspired by the FPS demo and another Wolfenstein CodePen, I decided to build my own version. It is loosely based on Episode 1 – Floor 9 of the original Wolfenstein 3D game.\n\n\n\nCodePen Embed Fallback\n\n\n\nEditor: This game intentionally requires some quick reaction to avoid a Game Over screen.\n\n\n\nHere is a playthrough video:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a nutshell, my project is nothing but a carefully scripted long CSS animation. Plus a few instances of the checkbox hack.\n\n\n\n:checked ~ div { animation-name: spin; }\n\n\n\nThe environment consists of 3D grid faces and the animations are mostly plain 3D translations and rotations. Nothing really fancy.\n\n\n\nHowever, two problems were particularly tricky to solve:\n\n\n\nPlay the “weapon firing” animation whenever the player clicks on an enemy.When the fast-moving boss got the last hit, enter a dramatic slow motion.\n\n\n\nAt a technical-level, this meant:\n\n\n\nReplay an animation when the next checkbox is checked.Slow down an animation, when a checkbox is checked.\n\n\n\nIn fact, neither was properly solved in my project! I either ended up using workarounds or just gave up.\n\n\n\nOn the other hand, after some digging, eventually I found the key to both problems: altering the properties of running CSS animations. In this article, we will explore further on this topic:\n\n\n\nLots of interactive examples.Dissections: how does each example work (or not work)?Behind-the-scene: how do browsers handle animation states?\n\n\n\nLet me “toss my bricks”.\n\n\nProblem 1: Replaying Animation\n\nThe first example: “just another checkbox”\n\n\nMy first intuition was “just add another checkbox”, which does not work:\n\n\n\nCodePen Embed Fallback\n\n\n\nEach checkbox works individually, but not both together. If one checkbox is already checked, the other no longer works.\n\n\n\nHere’s how it works (or “does not work”):\n\n\n\nThe animation-name of <div> is none by default.The user clicks on one checkbox, animation-name becomes spin, and the animation starts from the beginning.After a while, the user clicks on the other checkbox. A new CSS rule takes effect, but animation-name is still spin, which means no animation is added nor removed. The animation simply continues playing as if nothing happened.\n\n\nThe second example: “cloning the animation”\n\n\nOne working approach is to clone the animation:\n\n\n\n#spin1:checked ~ div { animation-name: spin1; }\n#spin2:checked ~ div { animation-name: spin2; }\n\n\n\nCodePen Embed Fallback\n\n\n\nHere’s how it works:\n\n\n\nanimation-name is none initially.The user clicks on “Spin!”, animation-name becomes spin1. The animation spin1 is started from the beginning because it was just added.The user clicks on “Spin again!”, animation-name becomes spin2. The animation spin2 is started from the beginning because it was just added.\n\n\n\nNote that in Step #3, spin1 is removed because of the order of the CSS rules. It won’t work if “Spin again!” is checked first.\n\n\nThe third example: “appending the same animation”\n\n\nAnother working approach is to “append the same animation”:\n\n\n\n#spin1:checked ~ div { animation-name: spin; }\n#spin2:checked ~ div { animation-name: spin, spin; }\n\n\n\nCodePen Embed Fallback\n\n\n\nThis is similar to the previous example. You can actually understand the behavior this way:\n\n\n\n#spin1:checked ~ div { animation-name: spin1; }\n#spin2:checked ~ div { animation-name: spin2, spin1; }\n\n\n\nNote that when “Spin again!” is checked, the old running animation becomes the second animation in the new list, which could be unintuitive. A direct consequence is: the trick won’t work if animation-fill-mode is forwards. Here’s a demo:\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you wonder why this is the case, here are some clues:\n\n\n\nanimation-fill-mode is none by default, which means “The animation has no effect at all if not playing”.animation-fill-mode: forwards; means “After the animation finishes playing, it must stay at the last keyframe forever”.spin1’s decision always override spin2’s because spin1 appears later in the list.Suppose the user clicks on “Spin!”, waits for a full spin, then clicks on “Spin again!”. At this moment. spin1 is already finished, and spin2 just starts. \n\n\nDiscussion\n\n\nRule of thumb: you cannot “restart” an existing CSS animation. Instead, you want to add and play a new animation. This may be confirmed by the W3C spec:\n\n\n\nOnce an animation has started it continues until it ends or the animation-name is removed.\n\n\n\nNow comparing the last two examples, I think in practice, “cloning animations” should often work better, especially when CSS preprocessor is available.\n\n\nProblem 2: Slow Motion\n\n\nOne might think that slowing an animation is just a matter of setting a longer animation-duration:\n\n\n\ndiv { animation-duration: 0.5s; }\n#slowmo:checked ~ div { animation-duration: 1.5s; }\n\n\n\nIndeed, this works:\n\n\n\nCodePen Embed Fallback\n\n\n\n… or does it?\n\n\n\nWith a few tweaks, it should be easier to see the issue.\n\n\n\nCodePen Embed Fallback\n\n\n\nYes, the animation is slowed down. And no, it does not look good. The dog (almost) always “jumps” when you toggle the checkbox. Furthermore, the dog seems to jump to a random position rather than the initial one. How come?\n\n\n\nIt would be easier to understand it if we introduced two “shadow elements”:\n\n\n\nCodePen Embed Fallback\n\n\n\nBoth shadow elements are running the same animations with different animation-duration. And they are not affected by the checkbox.\n\n\n\nWhen you toggle the checkbox, the element just immediately switches between the states of two shadow elements.\n\n\n\nQuoting the W3C spec:\n\n\n\nChanges to the values of animation properties while the animation is running apply as if the animation had those values from when it began.\n\n\n\nThis follows the stateless design, which allows browsers to easily determine the animated value. The actual calculation is described here and here.\n\n\nAnother Attempt\n\n\nOne idea is to pause the current animation, then add a slower animation that takes over from there:\n\n\n\ndiv {\n  animation-name: spin1;\n  animation-duration: 2s;\n}\n\n#slowmo:checked ~ div {\n  animation-name: spin1, spin2;\n  animation-duration: 2s, 5s;\n  animation-play-state: paused, running;\n}\n\n\n\nSo it works:\n\n\n\nCodePen Embed Fallback\n\n\n\n… or does it?\n\n\n\nIt does slow down when you click on “Slowmo!”. But if you wait for a full circle, you will see a “jump”. Actually, it always jumps to the position when “Slowmo!” is clicked on.\n\n\n\nThe reason is we don’t have a from keyframe defined – and we shouldn’t. When the user clicks on “Slowmo!”, spin1 is paused at some position, and spin2 starts at exactly the same position. We simply cannot predict that position beforehand … or can we?\n\n\nA Working Solution\n\n\nWe can! By using a custom property, we can capture the angle in the first animation, then pass it to the second animation:\n\n\n\ndiv {\n  transform: rotate(var(--angle1));\n  animation-name: spin1;\n  animation-duration: 2s;\n}\n\n#slowmo:checked ~ div {\n  transform: rotate(var(--angle2));\n  animation-name: spin1, spin2;\n  animation-duration: 2s, 5s;\n  animation-play-state: paused, running;\n}\n\n@keyframes spin1 {\n  to {\n    --angle1: 360deg;\n  }\n}\n\n@keyframes spin2 {\n  from {\n    --angle2: var(--angle1);\n  }\n  to {\n    --angle2: calc(var(--angle1) + 360deg);\n  }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nNote: @property is used in this example, which is not supported by all browsers.\n\n\nThe “Perfect” Solution\n\n\nThere is a caveat to the previous solution: “exiting slowmo” does not work well.\n\n\n\nHere is a better solution:\n\n\n\nCodePen Embed Fallback\n\n\n\nIn this version, slow motion can be entered or exited seamlessly. No experimental feature is used either. So is it the perfect solution? Yes and no.\n\n\n\nThis solution works like “shifting” “gears”:\n\n\n\nGears: there are two <div>s. One is the parent of the other. Both have the spin animation but with different animation-duration. The final state of the element is the accumulation of both animations.Shifting: At the beginning, only one <div> has its animation running. The other is paused. When the checkbox is toggled, both animations swap their states.\n\n\n\nWhile I really like the result, there is one problem: it is a nice exploit of the spin animation, which does not work for other types of animations in general.\n\n\nA Practical Solution (with JS)\n\n\nFor general animations, it is possible to achieve the slow motion function with a bit of JavaScript:\n\n\n\nCodePen Embed Fallback\n\n\n\nA quick explanation:\n\n\n\nA custom property is used to track the animation progress.The animation is “restarted” when the checkbox is toggled.The JS code computes the correct animation-delay to ensure a seamless transition. I recommend this article if you are not familiar with negative values of animation-delay.\n\n\n\nYou can view this solution as a hybrid of “restarting animation” and the “gear-shifting” approach.\n\n\n\nHere it is important to track the animation progress correctly. Workarounds are possible if @property is not available. As an example, this version uses z-index to track the progress:\n\n\n\nCodePen Embed Fallback\n\n\n\nSide-note: originally, I also tried to create a CSS-only version but did not succeed. While not 100% sure, I think it is because animation-delay is not animatable.\n\n\n\nHere is a version with minimal JavaScript. Only “entering slowmo” works.\n\n\n\nCodePen Embed Fallback\n\n\n\nPlease let me know if you manage to create a working CSS-only version!\n\n\nSlow-mo Any Animation (with JS)\n\n\nLastly, I’d like to share a solution that works for (almost) any animation, even with multiple complicated @keyframes:\n\n\n\nCodePen Embed Fallback\n\n\n\nBasically, you need to add an animation progress tracker, then carefully compute animation-delay for the new animation. However, sometimes it could be tricky (but possible) to get the correct values.\n\n\n\nFor example:\n\n\n\nanimation-timing-function is not linear.animation-direction is not normal.multiple values in animation-name with different animation-duration’s and animation-delay’s.\n\n\n\nThis method is also described here for the Web Animations API.\n\n\nAcknowledgments\n\n\nI started down this path after encountering CSS-only projects. Some were delicate artwork, and some were complex contraptions. My favorites are those involving 3D objects, for example, this bouncing ball and this packing cube.\n\n\n\nIn the beginning, I had no clue how these were made. Later I read and learned a lot from this nice tutorial by Ana Tudor.\n\n\n\nAs it turned out, building and animating 3D objects with CSS is not much different from doing it with Blender, just with a bit different flavor.\n\n\nConclusion\n\n\nIn this article we examined the behavior of CSS animations when an animate-* property is altered. Especially we worked out solutions for “replaying an animation” and “animation slow-mo”.\n\n\n\nI hope you find this article interesting. Please let me know your thoughts!\n\nHacking CSS Animation State and Playback Time originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372850",
      "_extIcon": "https://css-tricks.com/wp-content/uploads/2022/08/hqdefault.jpg",
      "date_published": "2022-09-06T18:00:28.000Z",
      "date_modified": "2022-09-06T18:00:28.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372853",
      "url": "https://css-tricks.com/flutter-for-front-end-web-developers/",
      "title": "Flutter For Front-End Web Developers",
      "summary": "I started as a front-end web developer and then became a Flutter developer. I think there were some concepts that helped me adopt Flutter easier. There were also some new concepts that were different.\nIn this article, I want to …\n\nFlutter For Front-End Web Developers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>I started as a front-end web developer and then became a <a href=\"https://flutter.dev/\" rel=\"noopener\">Flutter</a> developer. I think there were some concepts that helped me adopt Flutter easier. There were also some new concepts that were different.</p>\n\n\n\n<p>In this article, I want to share my experience and inspire anyone feeling paralyzed with choosing one ecosystem over the other by showing how concepts transfer over and any new concepts are learnable.</p>\n\n\n\n<span id=\"more-372853\"></span>\n\n\n<h3 id=\"concepts-that-transferred-over\"><strong>Concepts That Transferred Over</strong></h3>\n\n\n<p>This section shows places where front-end web development and Flutter resemble. It explains skills that you already have that are an advantage to you if you start Flutter.</p>\n\n\n<h4 id=\"1-implementing-user-interfaces-uis\"><strong>1. Implementing User Interfaces (UIs)</strong></h4>\n\n\n<p>To implement a given UI in front-end web, you compose HTML elements and style them with CSS. To implement UIs in Flutter, you compose <em>widgets</em> and style them with <em>properties</em>.</p>\n\n\n\n<p>Like CSS, the <code><a href=\"https://api.flutter.dev/flutter/dart-ui/Color-class.html\" rel=\"noopener\">Color</a></code> class in Dart works with &#8220;rgba&#8221; and &#8220;hex&#8221;. Also like CSS, Flutter uses pixels for space and size units.</p>\n\n\n\n<p>In Flutter, we have Dart classes and enums for almost all CSS properties and their values. For example:</p>\n\n\n\n<ul><li><a href=\"https://api.flutter.dev/flutter/painting/BorderRadius-class.html\" rel=\"noopener\"><code>BorderRadius</code></a></li><li><a href=\"https://api.flutter.dev/flutter/painting/BoxShadow-class.html\" rel=\"noopener\"><code>BoxShadow</code></a></li><li><code><a href=\"https://api.flutter.dev/flutter/dart-ui/FontWeight-class.html\" rel=\"noopener\">FontWeight</a></code></li><li><code><a href=\"https://api.flutter.dev/flutter/widgets/Opacity-class.html\" rel=\"noopener\">Opacity</a></code></li><li><code><a href=\"https://api.flutter.dev/flutter/widgets/Padding-class.html\" rel=\"noopener\">Padding</a></code></li><li>&#8230;</li></ul>\n\n\n\n<p>Flutter also has <a href=\"https://api.flutter.dev/flutter/widgets/Column-class.html\" rel=\"noopener\"><code>Column</code></a>&nbsp;and&nbsp;<a href=\"https://api.flutter.dev/flutter/widgets/Row-class.html\" rel=\"noopener\"><code>Row</code></a>&nbsp;widgets. These are the Flutter equivalent for&nbsp;<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\"><code>display: flex</code></a>&nbsp;in CSS. To configure <code>justify-content</code> and <code>align-items</code> styles, you use <code>MainAxisAlignment</code> and <code>CrossAxisAlignment</code> properties. To adjust the&nbsp;<code>flex-grow</code>&nbsp;style, wrap the affected child(ren) widget(s) of the <code>Column</code>/<code>Row</code>, in an <code>Expanded</code> or <code>Flexible</code>.</p>\n\n\n\n<p>For the advanced UIs, Flutter has the <a href=\"https://api.flutter.dev/flutter/widgets/CustomPaint-class.html\" rel=\"noopener\"><code>CustomPaint</code></a>&nbsp;class &#8211; it is to Flutter what the&nbsp;<a href=\"https://css-tricks.com/tag/canvas/\"><code>Canvas API</code></a>&nbsp;is to web development.&nbsp;<code>CustomPaint</code>&nbsp;gives you a painter to draw any UI as you wish. You will usually use&nbsp;<code>CustomPaint</code>&nbsp;when you want something that is really complex. Also, <code>CustomPaint</code> is the go-to way when a combination of widgets doesn&#8217;t work.</p>\n\n\n<h4 id=\"2-developing-for-multiple-screen-resolutions\"><strong>2. Developing For Multiple </strong>Screen Resolutions</h4>\n\n\n<p>Websites run on browsers and mobile apps run on devices. As such, while developing for either platform, you have to keep the platform in mind. Each platform implements the same features (camera, location, notifications, etc.) in different ways.</p>\n\n\n\n<p>As a web developer, you think about your website&#8217;s responsiveness. You use media queries to handle what your website looks like in smaller and wider screens.</p>\n\n\n\n<p>Coming over from mobile web development to Flutter, you have the&nbsp;<a href=\"https://api.flutter.dev/flutter/widgets/MediaQuery-class.html\" rel=\"noopener\"><code>MediaQuery</code></a>&nbsp;helper class. The&nbsp;<code>MediaQuery</code>&nbsp;class gives you the current device&nbsp;<a href=\"https://api.flutter.dev/flutter/widgets/MediaQueryData/orientation.html\" rel=\"noopener\"><code>orientation</code></a>&nbsp;(landscape or portrait). It also gives you the current viewport&nbsp;<a href=\"https://api.flutter.dev/flutter/widgets/MediaQueryData/size.html\" rel=\"noopener\"><code>size</code></a>, the&nbsp;<a href=\"https://api.flutter.dev/flutter/widgets/MediaQueryData/devicePixelRatio.html\" rel=\"noopener\"><code>devicePixelRatio</code></a>, among other device info. Together, these values give you insights about the mobile device&#8217;s configuration. You can use them to change what your mobile app looks like at various screen sizes.</p>\n\n\n<h4 id=\"3-working-with-debuggers-editors-and-command-line-tools\"><strong>3. Working with Debuggers, Editors, and Command Line Tools</strong></h4>\n\n\n<p>Desktop browsers have developer tools. These tools include an inspector, a console, a network monitor, etc. These tools improve the web development process. Flutter too has its own <a href=\"https://docs.flutter.dev/development/tools/devtools/overview\" rel=\"noopener\">DevTools</a>. It has its widget inspector, debugger, network monitor, among other features.</p>\n\n\n\n<p>IDE support is also similar. Visual Studio Code is one of the most popular IDE for web development. There are many web-related extensions for VS Code. Flutter too supports VS Code. So while transitioning, you don&#8217;t need to change IDE. There are Dart and Flutter extensions for VS Code. Flutter also works well with Android Studio. Both Android Studio and VS Code support Flutter DevTools. These IDE integrations make Flutter tooling complete.</p>\n\n\n\n<p>Most front-end JavaScript frameworks come with their <a href=\"https://en.wikipedia.org/wiki/Command-line_interface\" rel=\"noopener\">command-line interface (CLI)</a>. For example: <a href=\"https://angular.io/cli\" rel=\"noopener\">Angular CLI</a>, <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\" rel=\"noopener\">Create React App</a>, <a href=\"https://cli.vuejs.org/\" rel=\"noopener\">Vue CLI</a>, etc. Flutter also comes with an exclusive <a href=\"https://docs.flutter.dev/reference/flutter-cli\" rel=\"noopener\">CLI</a>. The Flutter CLI permits you to build, create, and develop Angular projects. It has commands for analyzing and testing Flutter projects.</p>\n\n\n<h3 id=\"concepts-that-were-new\"><strong>Concepts That Were New</strong></h3>\n\n\n<p>This section talks about Flutter-specific concepts that are easier or non-existent in web development. It explains ideas you should keep in mind as you enter Flutter.</p>\n\n\n<h4 id=\"how-to-handle-scrolling\"><strong>How To Handle Scrolling</strong></h4>\n\n\n<p>When developing for the web, default scrolling behavior is handled by web browsers. Yet, you are free to customize scrolling with CSS (using <a href=\"https://css-tricks.com/almanac/properties/o/overflow/\"><code>overflow</code></a>).</p>\n\n\n\n<p>This is not the case in Flutter. Widget groups don&#8217;t scroll by default. When you sense that widget groups might overflow, you have to proactively configure scrolling.</p>\n\n\n\n<p>In Flutter, you configure scrolling by using peculiar widgets that permit scrolling. For example: <a href=\"https://api.flutter.dev/flutter/widgets/ListView-class.html\" rel=\"noopener\"><code>ListView</code></a>, <a href=\"https://api.flutter.dev/flutter/widgets/SingleChildScrollView-class.html\" rel=\"noopener\"><code>SingleChildScrollView</code></a>, <a href=\"https://api.flutter.dev/flutter/widgets/CustomScrollView-class.html\" rel=\"noopener\"><code>CustomScrollView</code></a>, etc. These scrollable widgets give you great control over scrolling. With&nbsp;<code>CustomScrollView</code>, you can configure expert and complex scroll mechanisms within the application.</p>\n\n\n\n<p>On Flutter&#8217;s side, using&nbsp;<code>ScrollViews</code>&nbsp;is inevitable. Android and iOS have <a href=\"https://developer.android.com/reference/android/widget/ScrollView\" rel=\"noopener\"><code>ScrollView</code></a> and <a href=\"https://developer.apple.com/documentation/uikit/uiscrollview\" rel=\"noopener\"><code>UIScrollView</code></a>&nbsp;to handle scrolling. Flutter needs a way to unify the rendering and developer experience by using its&nbsp;<code>ScrollViews</code>,&nbsp;too.</p>\n\n\n\n<p>It may help to stop thinking about the flow of document structure and instead consider the application as an open canvas for a device&#8217;s native painting mechanisms.</p>\n\n\n<h4 id=\"2-setting-up-your-development-environment\"><strong>2. Setting Up Your Development Environment</strong></h4>\n\n\n<p>To create the simplest website, you can create a file with a&nbsp;<code>.html</code>&nbsp;extension and open it in a browser. Flutter is not that simple. To use Flutter, you need to have installed the Flutter SDK&nbsp;<em>and</em>&nbsp;have configured Flutter for a test device. So if you want to code Flutter for Android, you need to <a href=\"https://docs.flutter.dev/get-started/install/windows#android-setup\" rel=\"noopener\">set up the Android SDK</a>. You will also need to configure at least one Android device (an Android Emulator or a physical device).</p>\n\n\n\n<p>This is the same case for Apple devices (iOS and macOS). After installing Flutter on a Mac, you still need to set up Xcode before going further. You will also need at least an iOS simulator or an iPhone to test Flutter on iOS. Flutter for desktop is also a considerable setup. On Windows, you need to set up the Windows Development SDK with Visual Studio (not VS Code). On Linux, you will install more packages.</p>\n\n\n\n<p>Without extra setup, Flutter works on browsers. As a result, you could overlook the extra setup for target devices. In most cases, you would use Flutter for mobile app development. Hence, you would want to setup at least Android or iOS. Flutter comes with the <code>flutter doctor</code> command. This command reports the status of your development setup. That way, you know what to work on, in the setup, if need be.</p>\n\n\n\n<p>This doesn&#8217;t mean that development in Flutter is slow. Flutter comes with a powerful engine. The <code>flutter run</code> command permits hot-reloading to the test device while coding. But then you will need to press&nbsp;<code>R</code>&nbsp;to actually hot-reload. This is not an issue. <a href=\"https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter\" rel=\"noopener\">Flutter&#8217;s VS Code extension</a> permits auto-hot-reload on file changes.</p>\n\n\n<h4 id=\"3-packaging-and-deployment\"><strong>3. Packaging and Deployment</strong></h4>\n\n\n<p>Deploying websites is cheaper and easier compared to deploying mobile applications. When you deploy websites, you access them through domain names. These domain names are usually renewed annually. However, they are optional.</p>\n\n\n\n<p>Today, many platforms offer free hosting.</p>\n\n\n\n<p class=\"is-style-explanation\">For example: <a href=\"https://www.digitalocean.com/products/app-platform?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=some-thoughts-for-front-end-web-developers-considering-flutter\">DigitalOcean</a> gives you a free subdomain on <code>.ondigitalocean.com</code>.</p>\n\n\n\n<p>You can use these domains if you are building a documentation website. You can also use them when you are not worried about branding.</p>\n\n\n\n<p>In Flutter&#8217;s world with mobile applications, you usually in most cases deploy your app to two places.</p>\n\n\n\n<ul><li><a href=\"https://developer.apple.com/ios/submit/\" rel=\"noopener\">App Store</a> (for iOS devices)</li><li><a href=\"https://support.google.com/googleplay/android-developer/answer/9859152?hl=en\" rel=\"noopener\">Google Play</a> (for Android devices)</li></ul>\n\n\n\n<p>You have to register a developer account on each of these platforms. Registering a developer account requires a fee or subscription and identity verification.</p>\n\n\n\n<p>For App Store, you need to enroll for the Apple Developer program. You need to maintain <a href=\"https://developer.apple.com/support/enrollment/\" rel=\"noopener\">an annual subscription of $99</a>. For Google Play, you need to make a <a href=\"https://support.google.com/googleplay/android-developer/answer/6112435?hl=en#zippy=%2Cstep-pay-registration-fee\" rel=\"noopener\">one-time $25 payment</a>&nbsp;for the account.</p>\n\n\n\n<p>These stores review every app reviewed before it goes live.</p>\n\n\n\n<p>Also bear in mind that users don&#8217;t easily consume app updates. Users must explicitly update installed applications. This is in contrast to the web where everyone just gets to see the latest deployed version of a website.</p>\n\n\n\n<p>Managing deployed applications is relatively more demanding than managing deployed websites. However, this shouldn&#8217;t scare you. After all, there are millions of apps deployed on either stores so you can add yours, too.</p>\n\n\n<h3 id=\"additional-thoughts-on-flutter\"><strong>Additional Thoughts On Flutter</strong></h3>\n\n\n<p>Flutter is a cross-platform tool to build desktop, mobile, or web applications. Flutter apps are pixel-perfect. Flutter paints the same UI on each app irrespective of the target platform. This is because each Flutter app contains the Flutter engine. This engine renders the Flutter UI code. Flutter provides a canvas for each device and allows you to paint as you want. The engine communicates with the target platform to handle events and interactions.</p>\n\n\n\n<p>Flutter is efficient. It has high-performance levels. This is because it is built with Dart and it leverages Dart&#8217;s features.</p>\n\n\n\n<p>With these many benefits, Flutter is a good choice for many applications. Cross-platform apps save money and time during production and maintenance. However, Flutter (and cross-platform solutions) might not be an optimum choice in some cases.</p>\n\n\n\n<p>Don’t use Flutter if you want users to use platform developer tools with your application. Platform developer tools here mean device-specific tools like Android developer options. It also includes browser developer tools.</p>\n\n\n\n<p>Don&#8217;t use Flutter for web if you expect browser extensions to interact with the website.</p>\n\n\n\n<p>Also, don&#8217;t use Flutter for content-heavy websites.</p>\n\n\n<h3 id=\"conclusion\"><strong>Conclusion</strong></h3>\n\n\n<p>This was a review of skills that carry over from front-end web development to working with Flutter. We also discussed app development concepts that you have to learn as a web developer.</p>\n\n\n\n<p>Flutter is simpler for web developers because they both involve implementing UIs. If you start Flutter, you will find out that it gives you a good developer experience. Give Flutter a try! Use it to build mobile apps and of course, showcase what you build.</p>\n\n\n\n<p>Cheers!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/flutter-for-front-end-web-developers/\">Flutter For Front-End Web Developers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I started as a front-end web developer and then became a Flutter developer. I think there were some concepts that helped me adopt Flutter easier. There were also some new concepts that were different.\n\n\n\nIn this article, I want to share my experience and inspire anyone feeling paralyzed with choosing one ecosystem over the other by showing how concepts transfer over and any new concepts are learnable.\n\n\n\n\n\n\nConcepts That Transferred Over\n\n\nThis section shows places where front-end web development and Flutter resemble. It explains skills that you already have that are an advantage to you if you start Flutter.\n\n\n1. Implementing User Interfaces (UIs)\n\n\nTo implement a given UI in front-end web, you compose HTML elements and style them with CSS. To implement UIs in Flutter, you compose widgets and style them with properties.\n\n\n\nLike CSS, the Color class in Dart works with “rgba” and “hex”. Also like CSS, Flutter uses pixels for space and size units.\n\n\n\nIn Flutter, we have Dart classes and enums for almost all CSS properties and their values. For example:\n\n\n\nBorderRadiusBoxShadowFontWeightOpacityPadding…\n\n\n\nFlutter also has Column and Row widgets. These are the Flutter equivalent for display: flex in CSS. To configure justify-content and align-items styles, you use MainAxisAlignment and CrossAxisAlignment properties. To adjust the flex-grow style, wrap the affected child(ren) widget(s) of the Column/Row, in an Expanded or Flexible.\n\n\n\nFor the advanced UIs, Flutter has the CustomPaint class – it is to Flutter what the Canvas API is to web development. CustomPaint gives you a painter to draw any UI as you wish. You will usually use CustomPaint when you want something that is really complex. Also, CustomPaint is the go-to way when a combination of widgets doesn’t work.\n\n\n2. Developing For Multiple Screen Resolutions\n\n\nWebsites run on browsers and mobile apps run on devices. As such, while developing for either platform, you have to keep the platform in mind. Each platform implements the same features (camera, location, notifications, etc.) in different ways.\n\n\n\nAs a web developer, you think about your website’s responsiveness. You use media queries to handle what your website looks like in smaller and wider screens.\n\n\n\nComing over from mobile web development to Flutter, you have the MediaQuery helper class. The MediaQuery class gives you the current device orientation (landscape or portrait). It also gives you the current viewport size, the devicePixelRatio, among other device info. Together, these values give you insights about the mobile device’s configuration. You can use them to change what your mobile app looks like at various screen sizes.\n\n\n3. Working with Debuggers, Editors, and Command Line Tools\n\n\nDesktop browsers have developer tools. These tools include an inspector, a console, a network monitor, etc. These tools improve the web development process. Flutter too has its own DevTools. It has its widget inspector, debugger, network monitor, among other features.\n\n\n\nIDE support is also similar. Visual Studio Code is one of the most popular IDE for web development. There are many web-related extensions for VS Code. Flutter too supports VS Code. So while transitioning, you don’t need to change IDE. There are Dart and Flutter extensions for VS Code. Flutter also works well with Android Studio. Both Android Studio and VS Code support Flutter DevTools. These IDE integrations make Flutter tooling complete.\n\n\n\nMost front-end JavaScript frameworks come with their command-line interface (CLI). For example: Angular CLI, Create React App, Vue CLI, etc. Flutter also comes with an exclusive CLI. The Flutter CLI permits you to build, create, and develop Angular projects. It has commands for analyzing and testing Flutter projects.\n\n\nConcepts That Were New\n\n\nThis section talks about Flutter-specific concepts that are easier or non-existent in web development. It explains ideas you should keep in mind as you enter Flutter.\n\n\nHow To Handle Scrolling\n\n\nWhen developing for the web, default scrolling behavior is handled by web browsers. Yet, you are free to customize scrolling with CSS (using overflow).\n\n\n\nThis is not the case in Flutter. Widget groups don’t scroll by default. When you sense that widget groups might overflow, you have to proactively configure scrolling.\n\n\n\nIn Flutter, you configure scrolling by using peculiar widgets that permit scrolling. For example: ListView, SingleChildScrollView, CustomScrollView, etc. These scrollable widgets give you great control over scrolling. With CustomScrollView, you can configure expert and complex scroll mechanisms within the application.\n\n\n\nOn Flutter’s side, using ScrollViews is inevitable. Android and iOS have ScrollView and UIScrollView to handle scrolling. Flutter needs a way to unify the rendering and developer experience by using its ScrollViews, too.\n\n\n\nIt may help to stop thinking about the flow of document structure and instead consider the application as an open canvas for a device’s native painting mechanisms.\n\n\n2. Setting Up Your Development Environment\n\n\nTo create the simplest website, you can create a file with a .html extension and open it in a browser. Flutter is not that simple. To use Flutter, you need to have installed the Flutter SDK and have configured Flutter for a test device. So if you want to code Flutter for Android, you need to set up the Android SDK. You will also need to configure at least one Android device (an Android Emulator or a physical device).\n\n\n\nThis is the same case for Apple devices (iOS and macOS). After installing Flutter on a Mac, you still need to set up Xcode before going further. You will also need at least an iOS simulator or an iPhone to test Flutter on iOS. Flutter for desktop is also a considerable setup. On Windows, you need to set up the Windows Development SDK with Visual Studio (not VS Code). On Linux, you will install more packages.\n\n\n\nWithout extra setup, Flutter works on browsers. As a result, you could overlook the extra setup for target devices. In most cases, you would use Flutter for mobile app development. Hence, you would want to setup at least Android or iOS. Flutter comes with the flutter doctor command. This command reports the status of your development setup. That way, you know what to work on, in the setup, if need be.\n\n\n\nThis doesn’t mean that development in Flutter is slow. Flutter comes with a powerful engine. The flutter run command permits hot-reloading to the test device while coding. But then you will need to press R to actually hot-reload. This is not an issue. Flutter’s VS Code extension permits auto-hot-reload on file changes.\n\n\n3. Packaging and Deployment\n\n\nDeploying websites is cheaper and easier compared to deploying mobile applications. When you deploy websites, you access them through domain names. These domain names are usually renewed annually. However, they are optional.\n\n\n\nToday, many platforms offer free hosting.\n\n\n\nFor example: DigitalOcean gives you a free subdomain on .ondigitalocean.com.\n\n\n\nYou can use these domains if you are building a documentation website. You can also use them when you are not worried about branding.\n\n\n\nIn Flutter’s world with mobile applications, you usually in most cases deploy your app to two places.\n\n\n\nApp Store (for iOS devices)Google Play (for Android devices)\n\n\n\nYou have to register a developer account on each of these platforms. Registering a developer account requires a fee or subscription and identity verification.\n\n\n\nFor App Store, you need to enroll for the Apple Developer program. You need to maintain an annual subscription of $99. For Google Play, you need to make a one-time $25 payment for the account.\n\n\n\nThese stores review every app reviewed before it goes live.\n\n\n\nAlso bear in mind that users don’t easily consume app updates. Users must explicitly update installed applications. This is in contrast to the web where everyone just gets to see the latest deployed version of a website.\n\n\n\nManaging deployed applications is relatively more demanding than managing deployed websites. However, this shouldn’t scare you. After all, there are millions of apps deployed on either stores so you can add yours, too.\n\n\nAdditional Thoughts On Flutter\n\n\nFlutter is a cross-platform tool to build desktop, mobile, or web applications. Flutter apps are pixel-perfect. Flutter paints the same UI on each app irrespective of the target platform. This is because each Flutter app contains the Flutter engine. This engine renders the Flutter UI code. Flutter provides a canvas for each device and allows you to paint as you want. The engine communicates with the target platform to handle events and interactions.\n\n\n\nFlutter is efficient. It has high-performance levels. This is because it is built with Dart and it leverages Dart’s features.\n\n\n\nWith these many benefits, Flutter is a good choice for many applications. Cross-platform apps save money and time during production and maintenance. However, Flutter (and cross-platform solutions) might not be an optimum choice in some cases.\n\n\n\nDon’t use Flutter if you want users to use platform developer tools with your application. Platform developer tools here mean device-specific tools like Android developer options. It also includes browser developer tools.\n\n\n\nDon’t use Flutter for web if you expect browser extensions to interact with the website.\n\n\n\nAlso, don’t use Flutter for content-heavy websites.\n\n\nConclusion\n\n\nThis was a review of skills that carry over from front-end web development to working with Flutter. We also discussed app development concepts that you have to learn as a web developer.\n\n\n\nFlutter is simpler for web developers because they both involve implementing UIs. If you start Flutter, you will find out that it gives you a good developer experience. Give Flutter a try! Use it to build mobile apps and of course, showcase what you build.\n\n\n\nCheers!\n\nFlutter For Front-End Web Developers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372853",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-05T20:10:24.000Z",
      "date_modified": "2022-09-05T20:10:24.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373126",
      "url": "https://css-tricks.com/behind-the-csscenes-sept2022/",
      "title": "Behind the CSScenes, September 2022",
      "summary": "Those of you who have been reading CSS-Tricks for a while may remember that we used to publish a little thing we called CSS-Tricks Chronicles. Our friend Chris Coyier would write up a reflection from the past couple of …\n\nBehind the CSScenes, September 2022 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Those of you who have been reading CSS-Tricks for a while may remember that we used to publish a little thing we called <a href=\"https://css-tricks.com/tag/chronicle/\">CSS-Tricks Chronicles</a>. Our friend Chris Coyier would write up a reflection from the past couple of months or so, and it was a great way to get a pulse on what’s happening around CSS-Tricks, the site, and what the team is doing.</p>\n\n\n\n<p>We like that and want to keep it going. It’s a new era, though! So what we’re going to do is welcome you back to what we’re now calling <strong>Behind the CSScenes</strong>. You’re going to meet some new and familiar faces in these updates, starting with Haley Mills, who is kicking off the very first issue.</p>\n\n\n\n<span id=\"more-373126\"></span>\n\n\n<h3 id=\"hows-the-transition-going\">How&#8217;s the transition going?</h3>\n\n\n<p><strong>[Haley Mills:]</strong> Before we dive in, let me start by introducing myself! My name is Haley, and I’m the manager of Content Integration here at DigitalOcean. I’ve been at DigitalOcean for 5 years and previously worked on our editorial team, helping authors publish <a href=\"https://www.digitalocean.com/community/users/hmills\" rel=\"noopener\">all sorts of topics</a> through our <a href=\"https://www.digitalocean.com/community/pages/write-for-digitalocean\" rel=\"noopener\">Write For DOnations</a> program.&nbsp;</p>\n\n\n\n<p>Many folks here at DigitalOcean (including myself) are avid readers of CSS-Tricks, and we still have to pinch ourselves for how lucky we are to be entrusted with this community. We recognize that CSS-Tricks is a critical free resource for devs across the world, and my goal is to keep it that way. </p>\n\n\n\n<ul><li>Since the acquisition, we have published <strong>95</strong> pieces of new content and look forward to growing that number.</li><li>In the month of August, we performed maintenance on <strong>6</strong> existing pieces of content.</li></ul>\n\n\n\n<p>That said, change is to be expected when passing a torch.</p>\n\n\n\n<p>I think we all know that no one can replace Chris’ voice — it’s a big reason why CSS-Tricks is, well, CSS-Tricks. His ability to have you laughing while learning something new is a skill that few can compete with. I know many of you miss his writing because you told us so in a survey (which we’ll get to in a bit), but it also opens up a huge opportunity for us all to take the torch and continue doing what CSS-Tricks does best:</p>\n\n\n\n<p><strong>Find creative solutions to problems and share them with the world. Chris brought people together this way on CSS-Tricks — and you can give back, too.</strong></p>\n\n\n\n<p>Your blossoming idea could turn out to be what the <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox Guide</a> is for me and so many other people, so I humbly encourage you to reach out in our<a href=\"https://css-tricks.com/guest-writing-for-css-tricks/\"> Guest Writing Form</a> and talk to us about your topic ideas. We have two awesome editors, Geoff and Brad, to help you shape and bring your ideas to life to share with the CSS-Tricks community. In addition to paying you for your contribution, we will now also make a matching donation to a <a href=\"https://do.co/w4do-cta\" rel=\"noopener\">tech-focused charity</a> of your choice.</p>\n\n\n\n<p>Next up, we have Product Manager Karen Degi with some survey result highlights.</p>\n\n\n<h3 id=\"the-results-are-in\">The results are in…</h3>\n\n\n<p><strong>[Karen Degi:]</strong> In June, <a href=\"https://css-tricks.com/help-shape-the-future-of-css-tricks/\">we shared a survey</a> to collect feedback to help shape the future of CSS-Tricks. We received almost 900 responses, including some great written responses that helped us understand what CSS-Tricks means to the larger community.&nbsp;</p>\n\n\n\n<p>Many of you also volunteered to talk to us directly, which has us thinking about the best way to gather those thoughts. If you’re one of those folks, know that we haven’t forgotten about you and still want to hear from you. We just want to make sure we approach this in the most effective way!</p>\n\n\n\n<p>The survey confirmed some things we already suspected and brought new things to our attention. The top few things that grabbed our attention are:</p>\n\n\n\n<ul class=\"ticss-8d7e80c1\"><li><strong>Engaging, high-quality content is at the heart of CSS-Tricks.</strong> We’re working to make sure that we continue investing in in-depth guides on front-end topics, as well as providing short articles about quick tricks and tutorials with embedded demos.</li><li><strong>You love RSS!</strong> As we continue investing in CSS-Tricks and bringing new functionality, we’ll make sure we keep an eye on how our changes affect the RSS feed.</li><li><strong>You come to CSS-Tricks to learn, to be entertained, and to do your jobs better.</strong> You do not come to CSS-Tricks because you’re excited about being sold…well, anything, really. Although we think <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq&amp;utm_source=css-tricks&amp;utm_campaign=&amp;utm_content=behind_the_csscenes\" target=\"_blank\" rel=\"noreferrer noopener\">DigitalOcean is pretty great</a>, and we’ll probably continue to talk about ourselves where it makes sense, we understand that we need to do so in a way that is honest, trustworthy, and connected to your needs as a front-end enthusiast.</li></ul>\n\n\n\n<p>Next up is Logan Liffick, Senior Digital Experience Designer, with redesign updates.</p>\n\n\n<h3 id=\"a-redesign-is-in-the-works\">A redesign is in the works!</h3>\n\n\n<p><strong>[Logan Liffick:]</strong> If you’ve worked on the front end — or really anywhere on the web, you’re bound to know CSS-Tricks. It’s where I, and many others, started the journey. So, when I was asked to spearhead a redesign for the site, it was nothing short of an honor. Without a doubt, undertaking a brand update for something so familiar to so many is a challenge of incredible magnitude</p>\n\n\n\n<p>If I were to do justice to this project, I’d need to pay tribute to the original. That mentality became the underlying theme of my work, and any effort to rejuvenate took inspiration from existing patterns and styles from the site.</p>\n\n\n\n<div class=\"wp-block-jetpack-slideshow\" data-effect=\"slide\"><div class=\"wp-block-jetpack-slideshow_container swiper-container\"><ul class=\"wp-block-jetpack-slideshow_swiper-wrapper swiper-wrapper\"><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"627\" height=\"948\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-373136\" data-id=\"373136\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-08-31-at-3.10.20-PM-1.png?resize=627%2C948&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-08-31-at-3.10.20-PM-1.png?w=627&amp;ssl=1 627w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-08-31-at-3.10.20-PM-1.png?resize=198%2C300&amp;ssl=1 198w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"694\" height=\"1024\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-373137\" data-id=\"373137\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-2.58.26-PM.png?resize=694%2C1024&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-2.58.26-PM.png?resize=694%2C1024&amp;ssl=1 694w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-2.58.26-PM.png?resize=203%2C300&amp;ssl=1 203w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-2.58.26-PM.png?resize=768%2C1133&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-2.58.26-PM.png?w=782&amp;ssl=1 782w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"744\" height=\"1024\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-373138\" data-id=\"373138\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.00.22-PM.png?resize=744%2C1024&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.00.22-PM.png?resize=744%2C1024&amp;ssl=1 744w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.00.22-PM.png?resize=218%2C300&amp;ssl=1 218w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.00.22-PM.png?resize=768%2C1057&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.00.22-PM.png?w=781&amp;ssl=1 781w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"685\" height=\"1024\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-373139\" data-id=\"373139\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.06.23-PM.png?resize=685%2C1024&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.06.23-PM.png?resize=685%2C1024&amp;ssl=1 685w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.06.23-PM.png?resize=201%2C300&amp;ssl=1 201w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.06.23-PM.png?resize=768%2C1149&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-3.06.23-PM.png?w=781&amp;ssl=1 781w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"781\" height=\"541\" alt=\"Slideshow of Redesign Preview\" class=\"wp-block-jetpack-slideshow_image wp-image-373140\" data-id=\"373140\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-2.59.28-PM.png?resize=781%2C541&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-2.59.28-PM.png?w=781&amp;ssl=1 781w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-2.59.28-PM.png?resize=300%2C208&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-01-at-2.59.28-PM.png?resize=768%2C532&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></li></ul><a class=\"wp-block-jetpack-slideshow_button-prev swiper-button-prev swiper-button-white\" role=\"button\"></a><a class=\"wp-block-jetpack-slideshow_button-next swiper-button-next swiper-button-white\" role=\"button\"></a><a aria-label=\"Pause Slideshow\" class=\"wp-block-jetpack-slideshow_button-pause\" role=\"button\"></a><div class=\"wp-block-jetpack-slideshow_pagination swiper-pagination swiper-pagination-white\"></div></div></div>\n\n\n\n<p>Upon first glance, you’ll notice the fresh coat of paint. Past that, you’ll recognize the site reads more “editorial” than before. This was a purposeful decision to accentuate existing type stylings and, more importantly, to pay homage to the essence of CSS-Tricks as an informational resource.&nbsp;</p>\n\n\n\n<p>Preserving the element of “fun” was also top of mind. Sprinkled throughout the site are various snippets from the actual CSS &#8220;tricks&#8221; shared on this site — for example, there’s going to be a little Easter egg tucked inside a sticky footer using <a href=\"https://css-tricks.com/creating-sliding-effects-using-sticky-positioning/\">Preethi’s slide-out effect</a> that’s my personal favorite, a fantastic suggestion from Geoff himself. Gradients are now a core color-way in the system, and border-radii have been rounded out.&nbsp;</p>\n\n\n\n<p>We wanted to give ourselves permission and space to explore an open-ended and malleable system far into the future, which lines up nicely with the overall mission and goal of CSS-Tricks: to explore what’s possible with CSS. This is just the beginning, there’s so much more to see, do, and learn with CSS-Tricks living in our (digital) ocean.<br><br>Next is Geoff with author highlights!</p>\n\n\n<h3 id=\"new-authorsnbsp\">New authors! </h3>\n\n\n<p><strong>[Geoff:]</strong> We’ve added a few new faces to our growing <a href=\"https://css-tricks.com/authors/\">list of guest authors</a> who have contributed to CSS-Tricks:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/author/nicksypteras/\">Nick Sypteras</a></li><li><a href=\"https://css-tricks.com/author/johnsiciliano/\">John Siciliano&nbsp;</a></li><li><a href=\"https://css-tricks.com/author/sunkanmifafowora/\">Sunkanmi Fafowora</a></li><li><a href=\"https://css-tricks.com/author/marcelmoreau/\">Marcel Moreau</a></li><li><a href=\"https://css-tricks.com/author/nicholaszakas/\">Nicholas C. Zakas</a></li><li><a href=\"https://css-tricks.com/author/ayeesha/\">Aisha Bukar</a></li><li><a href=\"https://css-tricks.com/author/salehmubashar/\">Saleh Mubashar</a></li><li><a href=\"https://css-tricks.com/author/victoradedokun/\">Victor Adedokun</a></li><li><a href=\"https://css-tricks.com/author/holgersindbaek/\">Holger Sindbaek</a></li><li><a href=\"https://css-tricks.com/author/eluda/\">Eluda</a></li><li><a href=\"https://css-tricks.com/author/blessingeneanyebe/\">Blessing Ene Anyebe</a></li><li><a href=\"https://css-tricks.com/author/obumnwabude/\">Obumuneme Nwabude</a></li><li><a href=\"https://css-tricks.com/author/onuorahbonaventure/\">Onuorah Bonaventure Chukwudi</a></li><li><a href=\"https://css-tricks.com/author/danielschwarz/\">Daniel Schwarz</a></li><li><a href=\"https://css-tricks.com/author/selvampreethi/\">Preethi Selvam</a></li></ul>\n\n\n\n<p>You may have also seen our editor <a href=\"https://css-tricks.com/author/bkouchi/\">Bradley Kouchi</a>’s name pop up a couple of times, and you can expect to continue seeing him on a semi-regular basis.</p>\n\n\n\n<p>That’s 16 new authors! You can be one, too, by filling out our <a href=\"https://css-tricks.com/guest-writing-for-css-tricks/\">guest writing form</a>.</p>\n\n\n\n<p>On a related note, I’m pleased as punch that we still get regular contributions from a large band of familiar faces from before the DigitalOcean acquisition. Just look at all the fine folks who’ve continued to share their great ideas with us:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/author/afiftemani/\">Temani Afif</a></li><li><a href=\"https://css-tricks.com/author/marianabeldi/\">Mariana Beldi</a></li><li><a href=\"https://css-tricks.com/author/ganeshdahal/\">Ganesh Dahal</a></li><li><a href=\"https://css-tricks.com/author/adam-rackis/\">Adam Rackis</a></li><li><a href=\"https://css-tricks.com/author/preethi/\">Preehi Samathanam</a></li><li><a href=\"https://css-tricks.com/author/seyedi/\">Mojtaba Seyedi</a></li><li><a href=\"https://css-tricks.com/author/jheytompkins/\">Jhey Tompkins</a></li><li><a href=\"https://css-tricks.com/author/simevidas/\">Šime Vidas</a></li><li><a href=\"https://css-tricks.com/author/olliew/\">Ollie Williams</a></li></ul>\n\n\n\n<p>Big shake-ups like the one we’re going through today can be scary. Seeing these familiar names in article bylines has helped me a ton as far as continuity and consistency go. CSS-Tricks still seems very CSS-Tricks-y to me, and that’s a big deal.</p>\n\n\n<h3 id=\"until-next-time\">Until next time…</h3>\n\n\n<p>We hope you’ve enjoyed this little peek behind the CSScenes! We’ll do it again… and again and again. As you can tell, there’s a lot of activity happening around here, which means we’ll have lots to share in the next edition.</p>\n\n\n\n<p>Oh, and if you’re one of the many who’ve told us just how much you miss <a href=\"https://css-tricks.com/newsletters/\">the newsletter</a>, <strong>it’s still here!</strong> We’re sending it just once a month while we get back in the swing of things, and you may very well need to re-subscribe to get it (we had to do a lot of scrubbing after the keys to the site were handed over).</p>\n\n\n\n<p>Thanks for reading!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/behind-the-csscenes-sept2022/\">Behind the CSScenes, September 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Those of you who have been reading CSS-Tricks for a while may remember that we used to publish a little thing we called CSS-Tricks Chronicles. Our friend Chris Coyier would write up a reflection from the past couple of months or so, and it was a great way to get a pulse on what’s happening around CSS-Tricks, the site, and what the team is doing.\n\n\n\nWe like that and want to keep it going. It’s a new era, though! So what we’re going to do is welcome you back to what we’re now calling Behind the CSScenes. You’re going to meet some new and familiar faces in these updates, starting with Haley Mills, who is kicking off the very first issue.\n\n\n\n\n\n\nHow’s the transition going?\n\n\n[Haley Mills:] Before we dive in, let me start by introducing myself! My name is Haley, and I’m the manager of Content Integration here at DigitalOcean. I’ve been at DigitalOcean for 5 years and previously worked on our editorial team, helping authors publish all sorts of topics through our Write For DOnations program. \n\n\n\nMany folks here at DigitalOcean (including myself) are avid readers of CSS-Tricks, and we still have to pinch ourselves for how lucky we are to be entrusted with this community. We recognize that CSS-Tricks is a critical free resource for devs across the world, and my goal is to keep it that way. \n\n\n\nSince the acquisition, we have published 95 pieces of new content and look forward to growing that number.In the month of August, we performed maintenance on 6 existing pieces of content.\n\n\n\nThat said, change is to be expected when passing a torch.\n\n\n\nI think we all know that no one can replace Chris’ voice — it’s a big reason why CSS-Tricks is, well, CSS-Tricks. His ability to have you laughing while learning something new is a skill that few can compete with. I know many of you miss his writing because you told us so in a survey (which we’ll get to in a bit), but it also opens up a huge opportunity for us all to take the torch and continue doing what CSS-Tricks does best:\n\n\n\nFind creative solutions to problems and share them with the world. Chris brought people together this way on CSS-Tricks — and you can give back, too.\n\n\n\nYour blossoming idea could turn out to be what the Flexbox Guide is for me and so many other people, so I humbly encourage you to reach out in our Guest Writing Form and talk to us about your topic ideas. We have two awesome editors, Geoff and Brad, to help you shape and bring your ideas to life to share with the CSS-Tricks community. In addition to paying you for your contribution, we will now also make a matching donation to a tech-focused charity of your choice.\n\n\n\nNext up, we have Product Manager Karen Degi with some survey result highlights.\n\n\nThe results are in…\n\n\n[Karen Degi:] In June, we shared a survey to collect feedback to help shape the future of CSS-Tricks. We received almost 900 responses, including some great written responses that helped us understand what CSS-Tricks means to the larger community. \n\n\n\nMany of you also volunteered to talk to us directly, which has us thinking about the best way to gather those thoughts. If you’re one of those folks, know that we haven’t forgotten about you and still want to hear from you. We just want to make sure we approach this in the most effective way!\n\n\n\nThe survey confirmed some things we already suspected and brought new things to our attention. The top few things that grabbed our attention are:\n\n\n\nEngaging, high-quality content is at the heart of CSS-Tricks. We’re working to make sure that we continue investing in in-depth guides on front-end topics, as well as providing short articles about quick tricks and tutorials with embedded demos.You love RSS! As we continue investing in CSS-Tricks and bringing new functionality, we’ll make sure we keep an eye on how our changes affect the RSS feed.You come to CSS-Tricks to learn, to be entertained, and to do your jobs better. You do not come to CSS-Tricks because you’re excited about being sold…well, anything, really. Although we think DigitalOcean is pretty great, and we’ll probably continue to talk about ourselves where it makes sense, we understand that we need to do so in a way that is honest, trustworthy, and connected to your needs as a front-end enthusiast.\n\n\n\nNext up is Logan Liffick, Senior Digital Experience Designer, with redesign updates.\n\n\nA redesign is in the works!\n\n\n[Logan Liffick:] If you’ve worked on the front end — or really anywhere on the web, you’re bound to know CSS-Tricks. It’s where I, and many others, started the journey. So, when I was asked to spearhead a redesign for the site, it was nothing short of an honor. Without a doubt, undertaking a brand update for something so familiar to so many is a challenge of incredible magnitude\n\n\n\nIf I were to do justice to this project, I’d need to pay tribute to the original. That mentality became the underlying theme of my work, and any effort to rejuvenate took inspiration from existing patterns and styles from the site.\n\n\n\n\n\n\n\nUpon first glance, you’ll notice the fresh coat of paint. Past that, you’ll recognize the site reads more “editorial” than before. This was a purposeful decision to accentuate existing type stylings and, more importantly, to pay homage to the essence of CSS-Tricks as an informational resource. \n\n\n\nPreserving the element of “fun” was also top of mind. Sprinkled throughout the site are various snippets from the actual CSS “tricks” shared on this site — for example, there’s going to be a little Easter egg tucked inside a sticky footer using Preethi’s slide-out effect that’s my personal favorite, a fantastic suggestion from Geoff himself. Gradients are now a core color-way in the system, and border-radii have been rounded out. \n\n\n\nWe wanted to give ourselves permission and space to explore an open-ended and malleable system far into the future, which lines up nicely with the overall mission and goal of CSS-Tricks: to explore what’s possible with CSS. This is just the beginning, there’s so much more to see, do, and learn with CSS-Tricks living in our (digital) ocean.Next is Geoff with author highlights!\n\n\nNew authors! \n\n\n[Geoff:] We’ve added a few new faces to our growing list of guest authors who have contributed to CSS-Tricks:\n\n\n\nNick SypterasJohn Siciliano Sunkanmi FafoworaMarcel MoreauNicholas C. ZakasAisha BukarSaleh MubasharVictor AdedokunHolger SindbaekEludaBlessing Ene AnyebeObumuneme NwabudeOnuorah Bonaventure ChukwudiDaniel SchwarzPreethi Selvam\n\n\n\nYou may have also seen our editor Bradley Kouchi’s name pop up a couple of times, and you can expect to continue seeing him on a semi-regular basis.\n\n\n\nThat’s 16 new authors! You can be one, too, by filling out our guest writing form.\n\n\n\nOn a related note, I’m pleased as punch that we still get regular contributions from a large band of familiar faces from before the DigitalOcean acquisition. Just look at all the fine folks who’ve continued to share their great ideas with us:\n\n\n\nTemani AfifMariana BeldiGanesh DahalAdam RackisPreehi SamathanamMojtaba SeyediJhey TompkinsŠime VidasOllie Williams\n\n\n\nBig shake-ups like the one we’re going through today can be scary. Seeing these familiar names in article bylines has helped me a ton as far as continuity and consistency go. CSS-Tricks still seems very CSS-Tricks-y to me, and that’s a big deal.\n\n\nUntil next time…\n\n\nWe hope you’ve enjoyed this little peek behind the CSScenes! We’ll do it again… and again and again. As you can tell, there’s a lot of activity happening around here, which means we’ll have lots to share in the next edition.\n\n\n\nOh, and if you’re one of the many who’ve told us just how much you miss the newsletter, it’s still here! We’re sending it just once a month while we get back in the swing of things, and you may very well need to re-subscribe to get it (we had to do a lot of scrubbing after the keys to the site were handed over).\n\n\n\nThanks for reading!\n\nBehind the CSScenes, September 2022 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373126",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-01T20:06:56.000Z",
      "date_modified": "2022-09-01T20:06:56.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372855",
      "url": "https://css-tricks.com/comparing-jaws-nvda-and-voiceover/",
      "title": "A Brief Introduction to JAWS, NVDA, and VoiceOver",
      "summary": "A screen reader is an important accessibility tool for people with no or limited vision. People who are blind or those with low vision can use a screen reader to navigate the computer. Screen readers will read contents on the …\n\nA Brief Introduction to JAWS, NVDA, and VoiceOver originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>A <em>screen reader</em> is an important accessibility tool for people with no or limited vision. People who are blind or those with low vision can use a screen reader to navigate the computer. Screen readers will read contents on the screen and explain to the user what is on the page. Screen readers allow people to use the computer for daily tasks.</p>\n\n\n\n<p>There are many screen reader software available for people through their operating system or through open source projects.</p>\n\n\n\n<p>A <a href=\"https://webaim.org/projects/screenreadersurvey9/\" rel=\"noopener\">2021 research by WebAim</a> found that from 1568 responders, more than 53.7 percent of people surveyed used JAWS on Windows, more than 30.7 percent of people used NVDA on Windows and little over 6.5 percent of people used VoiceOver on macOS.</p>\n\n\n\n<p>JAWS and NVDA for Windows and VoiceOver for macOS are the most popular screen readers people use.</p>\n\n\n\n<span id=\"more-372855\"></span>\n\n\n\n<p>First, I should clarify that this article will be written from my point of view. To give background, I have been a front-end developer at a non-profit for people with learning differences for over three years. I, along with my colleagues, seek to make our projects more accessible every day. I am not visually impaired and do not use these tools on a regular basis. For work, I have a Mac machine and test accessibility using VoiceOver.</p>\n\n\n\n<p>Here is my planned testing methodology:</p>\n\n\n\n<ol><li>Navigate the page by heading, until “Accessibility APIs” section.<ul><li><strong>Reason for this step:</strong> A <a href=\"https://heydonworks.com/article/responses-to-the-screen-reader-strategy-survey/\" rel=\"noopener\">2016 survey by Heydon Pickering</a> found that most people who use screen readers navigate new pages by headings</li></ul></li><li>In the “Accessibility APIs” section, read the content and the unordered list inside.</li><li><code>TAB</code> to hear focusable items in the unordered list.</li><li>Jump to the Search field.</li><li><code>TAB</code> to hear a few items in the navigation section</li></ol>\n\n\n\n<p>To find similarities and differences between them, I decided to test a set of steps with each screen reader on a <a href=\"https://en.wikipedia.org/wiki/Screen_reader\" rel=\"noopener\">Wikipedia page about screen readers</a>. I will browse the web with Chrome for my tests. Testing all screen readers on the same page and browser will reduce the amount of variables and keep the tests consistent.</p>\n\n\n<h3 id=\"jaws\">JAWS</h3>\n\n\n<p><strong><a href=\"https://www.freedomscientific.com/products/software/jaws/\" rel=\"noopener\">JAWS</a></strong> is an acronym for <strong>Job Access With Speech</strong> and is the most widely used screen reader in the world. It is only available on Windows. Depending on the plan and features, JAWS can be purchased anywhere from $90 yearly license all the way to $1605 for perpetual license.</p>\n\n\n\n<p>JAWS has predefined keyboard commands to navigate the web. Full list of keyboard commands can be found on <a href=\"https://www.freedomscientific.com/training/jaws/hotkeys/\" rel=\"noopener\">their website</a>.</p>\n\n\n<h4 id=\"demonstration\">Demonstration</h4>\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-vimeo wp-block-embed-vimeo wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"New Recording - 8/22/2022, 10:13:33 PM\" src=\"https://player.vimeo.com/video/742100446?h=0fdd09e165&amp;dnt=1&amp;app_id=122963\" width=\"500\" height=\"266\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div><figcaption>JAWS Demo</figcaption></figure>\n\n\n\n<div class=\"wp-container-6 wp-block-group ticss-4e8da091 has-white-color has-black-background-color has-text-color has-background\"><div class=\"wp-block-group__inner-container\">\n<p>In the beginning of the demo, I am clicking on <code>H</code> key on my keyboard to go to the next heading. JAWS is moving down the page, reading me the headings along with their level.</p>\n\n\n\n<p class=\"ticss-f60bf34d\">Later in the video, I am clicking on number <code>2</code> and number <code>3</code> on my keyboard to have JAWS read Heading Levels 2s then later Heading Levels 3s. This is a great feature because we can move down the page and sections by heading level and get a better sense of the page layout.</p>\n\n\n\n<p class=\"ticss-41d8f3d7\">When I reach the “Accessible APIs” section, I press the <code>DOWN ARROW</code> key until the third item in the unordered list.</p>\n\n\n\n<p>Later in the demo, I am clicking on the <code>TAB</code> key for JAWS to read to me the next focusable item on the page, which is inside this list. I click <code>TAB</code> until I reach a focusable element in another section.</p>\n\n\n\n<p>Then I press <code>F</code> key to focus on the search field, which JAWS reads to me.</p>\n\n\n\n<p>Then I click on <code>TAB</code> and JAWS focuses on the navigation elements that are on the side of the page.</p>\n</div></div>\n\n\n<h4 id=\"pros-amp-cons\">Pros &amp; Cons</h4>\n\n\n<p>Pros:</p>\n\n\n\n<ul><li>JAWS is more customizable than other screen readers.</li><li>There are more options to navigate through the page.</li><li>JAWS is industry standard.</li><li>Widely used, which means there are lots of user to user support.</li></ul>\n\n\n\n<p>Cons:</p>\n\n\n\n<ul><li>JAWS is more complicated to use than NVDA or VoiceOver.</li><li>Some commands are not intuitive.</li><li>There are a lot more commands for the user to learn.</li><li>More learning curve for users.</li><li>JAWS is also not available on the Mac, which limits its users.</li><li>Costs anywhere between $90 &#8211; $1605 for the user.</li><li>JAWS has different key commands for desktop and laptop which may make it harder for users to transfer knowledge and may cause confusion.</li></ul>\n\n\n<h3 id=\"nvda\">NVDA</h3>\n\n\n<p><strong><a href=\"https://www.nvaccess.org/about-nvda/\" rel=\"noopener\">NVDA</a></strong>, or <strong>NonVisual Digital Access</strong>, is available on Windows only. Users need to download the software from NVDA&#8217;s website, <a href=\"https://www.nvaccess.org/download/\" rel=\"noopener\">NVAccess</a>. This software is free to download but does not come already installed on Windows machines. NVDA is the second most popular screen reader in the world according to WebAim’s 2021 survey.</p>\n\n\n\n<p>Like other screen readers, NVDA has defined keyboard commands to navigate the web. NVDA&#8217;s full keyboard commands can be found on <a href=\"https://www.nvaccess.org/files/nvda/documentation/userGuide.html?#BasicNVDACommands\" rel=\"noopener\">their website</a>.</p>\n\n\n<h4 id=\"demonstration\">Demonstration</h4>\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-vimeo wp-block-embed-vimeo wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"New Recording - 8/22/2022, 9:58:56 PM\" src=\"https://player.vimeo.com/video/742097456?h=c012cc5600&amp;dnt=1&amp;app_id=122963\" width=\"500\" height=\"266\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div><figcaption>NVDA Demo</figcaption></figure>\n\n\n\n<div class=\"wp-container-7 wp-block-group ticss-d5e73b2b has-white-color has-black-background-color has-text-color has-background\"><div class=\"wp-block-group__inner-container\">\n<p class=\"ticss-8bb66d92\">In the demo I am clicking on <code>H</code> key on the keyboard to go to the next heading. First, NVDA reads me Heading Level 1, which is “Screen reader”. Then NVDA goes to read Heading Level 2s and 3s.</p>\n\n\n\n<p>When I reach “References” I begin to click on <code>TAB</code> on my keyboard for NVDA to focus on next focusable items.</p>\n\n\n\n<p>After focusing on a few items on the list, I click <code>ENTER</code> and go to the New York Times page.</p>\n</div></div>\n\n\n<h4 id=\"pros-amp-cons\">Pros &amp; Cons</h4>\n\n\n<p>Pros:</p>\n\n\n\n<ul><li>Overall, I found NVDA was able to provide me with information on the screen.</li><li>The out-of-the-box keyboard commands were easy to use and easy to learn.</li><li>NVDA is open source, which means the community can update and fix.</li><li>NVDA is free, which makes it an affordable option to Windows users.</li></ul>\n\n\n\n<p>Cons:</p>\n\n\n\n<ul><li>NVDA is not available on the Mac, which limits its users.</li></ul>\n\n\n<h3 id=\"voiceover\">VoiceOver</h3>\n\n\n<p><a href=\"https://support.apple.com/guide/voiceover-guide/welcome/web\" rel=\"noopener\"><strong>VoiceOver</strong></a> is the screen reader used in Mac. VoiceOver is only available on Mac not available in Windows. VoiceOver is free and is already installed on the computer, which removes barriers because this is part of the computer setup and the user does not have to download or purchase any additional software.</p>\n\n\n\n<p>VoiceOver has defined keyboard commands to navigate the web. VoiceOver&#8217;s full keyboard commands can be found on <a href=\"https://help.apple.com/voiceover/command-charts/\" rel=\"noopener\">their website</a>.</p>\n\n\n<h4 id=\"demonstration\">Demonstration</h4>\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-vimeo wp-block-embed-vimeo\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"New Recording - 8/22/2022, 11:26:16 PM\" src=\"https://player.vimeo.com/video/742113568?h=88ef967b3a&amp;dnt=1&amp;app_id=122963\" width=\"500\" height=\"256\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div><figcaption>VoiceOver Demo</figcaption></figure>\n\n\n\n<div class=\"wp-container-8 wp-block-group ticss-f5417684 has-white-color has-black-background-color has-text-color has-background\"><div class=\"wp-block-group__inner-container\">\n<p>In the demo, I am on a Wikipedia page and I am clicking on the VoiceOver Command (which is <code>Control+Option</code>) along with <code>Command+H</code> to navigate through the headings. VoiceOver reads the headings in order, starting from Heading Level 1, “Screen Reader”, to Heading Level 2, “Contents”, to Heading Level 3, and so on.</p>\n\n\n\n<p>When I reach the “Accessibility APIs” section, I click on VoiceOver Command plus the <code>RIGHT ARROW</code>, to tell VoiceOver that I want it to read this section. Later I am clicking on the VoiceOver Command plus the <code>RIGHT ARROW</code> on my keyboard, to navigate the section.</p>\n\n\n\n<p>When I get on to the third item on the unordered list, I press <code>TAB</code> on my keyboard to focus on the next focusable element.</p>\n\n\n\n<p>I press <code>TAB</code> a few times, then I press VoiceOver Command plus <code>U</code>, to open the Form Control Menu. In the menu, I press <code>DOWN ARROW</code> until I hear the “Search Wikipedia” option. When I hear it, I click <code>ENTER</code> and the screen reader focuses on the form field. In the form field, I press <code>TAB</code> to navigate to the navigation section.</p>\n</div></div>\n\n\n<h4 id=\"pros-amp-cons\">Pros &amp; Cons</h4>\n\n\n<p>Pros:</p>\n\n\n\n<ul><li>VoiceOver is easy to use and learn.</li><li>VoiceOver&#8217;s commands are intuitive.</li><li>Free tool that comes installed in every macOS device.</li></ul>\n\n\n\n<p>Cons:</p>\n\n\n\n<ul><li>VoiceOver is also not available on Windows, which limits its users.</li><li>VoiceOver is not an app and can only be updated when Apple releases macOS update.</li></ul>\n\n\n<h3 id=\"key-takeaways\">Key Takeaways</h3>\n\n\n<p>A screen reader is an important accessibility tool for people with no or limited vision. Screen readers allow people to use the computer for daily tasks.</p>\n\n\n\n<p>There are many screen reader softwares available. In this article I compared JAWS, NVDA, and VoiceOver.</p>\n\n\n\n<p>Here is a comparison chart overview of the three screen readers:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td></td><td>JAWS</td><td>NVDA</td><td>VoiceOver</td></tr><tr><td>Operating System</td><td>Windows</td><td>Windows</td><td>macOS</td></tr><tr><td>Price</td><td>$90 &#8211; $1695</td><td>Free</td><td>Free</td></tr><tr><td># of users</td><td>50%</td><td>30%</td><td>6%</td></tr><tr><td>Ease of Use (subjective)</td><td>Hard</td><td>Easy</td><td>Easy</td></tr></tbody></table></figure>\n\n\n\n<p>I found that for basic screen reader testing, most screen readers follow a similar keystroke pattern and knowledge from one screen reader can be used for others.</p>\n\n\n\n<p>All screen readers have their pros and cons. Ultimately, it&#8217;s up to user preference and also the operating system they use to determine which screen reader software is best for them.</p>\n\n\n\n<p class=\"is-style-explanation\">Previously: &#8220;<a href=\"https://css-tricks.com/small-tweaks-can-make-huge-impact-websites-accessibility/\">Small Tweaks That Can Make a Huge Impact on Your Website&#8217;s Accessibility</a>&#8221; (2018), and &#8220;<a href=\"https://css-tricks.com/why-how-and-when-to-use-semantic-html-and-aria/\">Why, How, and When to Use Semantic HTML and ARIA</a>&#8221; (2019), &#8220;<a href=\"https://css-tricks.com/15-things-to-improve-your-website-accessibility/\">15 Things to Improve Your Website Accessibility</a>&#8221; (2020), &#8220;<a href=\"https://css-tricks.com/5-accessibility-quick-wins-you-can-implement-today/\">5 Accessibility Quick Wins You Can Implement Today</a>&#8221; (2022).</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/comparing-jaws-nvda-and-voiceover/\">A Brief Introduction to JAWS, NVDA, and VoiceOver</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "A screen reader is an important accessibility tool for people with no or limited vision. People who are blind or those with low vision can use a screen reader to navigate the computer. Screen readers will read contents on the screen and explain to the user what is on the page. Screen readers allow people to use the computer for daily tasks.\n\n\n\nThere are many screen reader software available for people through their operating system or through open source projects.\n\n\n\nA 2021 research by WebAim found that from 1568 responders, more than 53.7 percent of people surveyed used JAWS on Windows, more than 30.7 percent of people used NVDA on Windows and little over 6.5 percent of people used VoiceOver on macOS.\n\n\n\nJAWS and NVDA for Windows and VoiceOver for macOS are the most popular screen readers people use.\n\n\n\n\n\n\n\nFirst, I should clarify that this article will be written from my point of view. To give background, I have been a front-end developer at a non-profit for people with learning differences for over three years. I, along with my colleagues, seek to make our projects more accessible every day. I am not visually impaired and do not use these tools on a regular basis. For work, I have a Mac machine and test accessibility using VoiceOver.\n\n\n\nHere is my planned testing methodology:\n\n\n\nNavigate the page by heading, until “Accessibility APIs” section.Reason for this step: A 2016 survey by Heydon Pickering found that most people who use screen readers navigate new pages by headingsIn the “Accessibility APIs” section, read the content and the unordered list inside.TAB to hear focusable items in the unordered list.Jump to the Search field.TAB to hear a few items in the navigation section\n\n\n\nTo find similarities and differences between them, I decided to test a set of steps with each screen reader on a Wikipedia page about screen readers. I will browse the web with Chrome for my tests. Testing all screen readers on the same page and browser will reduce the amount of variables and keep the tests consistent.\n\n\nJAWS\n\n\nJAWS is an acronym for Job Access With Speech and is the most widely used screen reader in the world. It is only available on Windows. Depending on the plan and features, JAWS can be purchased anywhere from $90 yearly license all the way to $1605 for perpetual license.\n\n\n\nJAWS has predefined keyboard commands to navigate the web. Full list of keyboard commands can be found on their website.\n\n\nDemonstration\n\n\n\n\nJAWS Demo\n\n\n\n\nIn the beginning of the demo, I am clicking on H key on my keyboard to go to the next heading. JAWS is moving down the page, reading me the headings along with their level.\n\n\n\nLater in the video, I am clicking on number 2 and number 3 on my keyboard to have JAWS read Heading Levels 2s then later Heading Levels 3s. This is a great feature because we can move down the page and sections by heading level and get a better sense of the page layout.\n\n\n\nWhen I reach the “Accessible APIs” section, I press the DOWN ARROW key until the third item in the unordered list.\n\n\n\nLater in the demo, I am clicking on the TAB key for JAWS to read to me the next focusable item on the page, which is inside this list. I click TAB until I reach a focusable element in another section.\n\n\n\nThen I press F key to focus on the search field, which JAWS reads to me.\n\n\n\nThen I click on TAB and JAWS focuses on the navigation elements that are on the side of the page.\n\n\n\nPros & Cons\n\n\nPros:\n\n\n\nJAWS is more customizable than other screen readers.There are more options to navigate through the page.JAWS is industry standard.Widely used, which means there are lots of user to user support.\n\n\n\nCons:\n\n\n\nJAWS is more complicated to use than NVDA or VoiceOver.Some commands are not intuitive.There are a lot more commands for the user to learn.More learning curve for users.JAWS is also not available on the Mac, which limits its users.Costs anywhere between $90 – $1605 for the user.JAWS has different key commands for desktop and laptop which may make it harder for users to transfer knowledge and may cause confusion.\n\n\nNVDA\n\n\nNVDA, or NonVisual Digital Access, is available on Windows only. Users need to download the software from NVDA’s website, NVAccess. This software is free to download but does not come already installed on Windows machines. NVDA is the second most popular screen reader in the world according to WebAim’s 2021 survey.\n\n\n\nLike other screen readers, NVDA has defined keyboard commands to navigate the web. NVDA’s full keyboard commands can be found on their website.\n\n\nDemonstration\n\n\n\n\nNVDA Demo\n\n\n\n\nIn the demo I am clicking on H key on the keyboard to go to the next heading. First, NVDA reads me Heading Level 1, which is “Screen reader”. Then NVDA goes to read Heading Level 2s and 3s.\n\n\n\nWhen I reach “References” I begin to click on TAB on my keyboard for NVDA to focus on next focusable items.\n\n\n\nAfter focusing on a few items on the list, I click ENTER and go to the New York Times page.\n\n\n\nPros & Cons\n\n\nPros:\n\n\n\nOverall, I found NVDA was able to provide me with information on the screen.The out-of-the-box keyboard commands were easy to use and easy to learn.NVDA is open source, which means the community can update and fix.NVDA is free, which makes it an affordable option to Windows users.\n\n\n\nCons:\n\n\n\nNVDA is not available on the Mac, which limits its users.\n\n\nVoiceOver\n\n\nVoiceOver is the screen reader used in Mac. VoiceOver is only available on Mac not available in Windows. VoiceOver is free and is already installed on the computer, which removes barriers because this is part of the computer setup and the user does not have to download or purchase any additional software.\n\n\n\nVoiceOver has defined keyboard commands to navigate the web. VoiceOver’s full keyboard commands can be found on their website.\n\n\nDemonstration\n\n\n\n\nVoiceOver Demo\n\n\n\n\nIn the demo, I am on a Wikipedia page and I am clicking on the VoiceOver Command (which is Control+Option) along with Command+H to navigate through the headings. VoiceOver reads the headings in order, starting from Heading Level 1, “Screen Reader”, to Heading Level 2, “Contents”, to Heading Level 3, and so on.\n\n\n\nWhen I reach the “Accessibility APIs” section, I click on VoiceOver Command plus the RIGHT ARROW, to tell VoiceOver that I want it to read this section. Later I am clicking on the VoiceOver Command plus the RIGHT ARROW on my keyboard, to navigate the section.\n\n\n\nWhen I get on to the third item on the unordered list, I press TAB on my keyboard to focus on the next focusable element.\n\n\n\nI press TAB a few times, then I press VoiceOver Command plus U, to open the Form Control Menu. In the menu, I press DOWN ARROW until I hear the “Search Wikipedia” option. When I hear it, I click ENTER and the screen reader focuses on the form field. In the form field, I press TAB to navigate to the navigation section.\n\n\n\nPros & Cons\n\n\nPros:\n\n\n\nVoiceOver is easy to use and learn.VoiceOver’s commands are intuitive.Free tool that comes installed in every macOS device.\n\n\n\nCons:\n\n\n\nVoiceOver is also not available on Windows, which limits its users.VoiceOver is not an app and can only be updated when Apple releases macOS update.\n\n\nKey Takeaways\n\n\nA screen reader is an important accessibility tool for people with no or limited vision. Screen readers allow people to use the computer for daily tasks.\n\n\n\nThere are many screen reader softwares available. In this article I compared JAWS, NVDA, and VoiceOver.\n\n\n\nHere is a comparison chart overview of the three screen readers:\n\n\n\nJAWSNVDAVoiceOverOperating SystemWindowsWindowsmacOSPrice$90 – $1695FreeFree# of users50%30%6%Ease of Use (subjective)HardEasyEasy\n\n\n\nI found that for basic screen reader testing, most screen readers follow a similar keystroke pattern and knowledge from one screen reader can be used for others.\n\n\n\nAll screen readers have their pros and cons. Ultimately, it’s up to user preference and also the operating system they use to determine which screen reader software is best for them.\n\n\n\nPreviously: “Small Tweaks That Can Make a Huge Impact on Your Website’s Accessibility” (2018), and “Why, How, and When to Use Semantic HTML and ARIA” (2019), “15 Things to Improve Your Website Accessibility” (2020), “5 Accessibility Quick Wins You Can Implement Today” (2022).\n\nA Brief Introduction to JAWS, NVDA, and VoiceOver originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372855",
      "_extIcon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/jaws-nvda-voiceover.jpg?fit=1200%2C600&ssl=1",
      "date_published": "2022-09-01T17:47:16.000Z",
      "date_modified": "2022-09-01T17:47:16.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=373087",
      "url": "https://css-tricks.com/ishadeeds-container-queries-lab/",
      "title": "iShadeed’s Container Queries Lab",
      "summary": "Ahmad Shadeed got an early jump on container queries and has a growing collection of examples based on everyday patterns.\nAnd, if you missed it, his latest post on container queries does a wonderful job covering how they work since …\n\niShadeed’s Container Queries Lab originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Ahmad Shadeed got an early jump on container queries and has a <a href=\"https://lab.ishadeed.com/container-queries\" rel=\"noopener\">growing collection of examples</a> based on everyday patterns.</p>\n\n\n\n<span id=\"more-373087\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2126\" height=\"878\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-31-at-11.13.21-AM.png?resize=2126%2C878&#038;ssl=1\" alt=\"\" class=\"wp-image-373089\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-31-at-11.13.21-AM.png?w=2126&amp;ssl=1 2126w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-31-at-11.13.21-AM.png?resize=300%2C124&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-31-at-11.13.21-AM.png?resize=1024%2C423&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-31-at-11.13.21-AM.png?resize=768%2C317&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-31-at-11.13.21-AM.png?resize=1536%2C634&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-31-at-11.13.21-AM.png?resize=2048%2C846&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And, if you missed it, his <a href=\"https://ishadeed.com/article/container-queries-are-finally-here/\" rel=\"noopener\">latest post on container queries</a> does a wonderful job covering how they work since landing in Chrome 105 this month (we&#8217;ll see them in Safari 16 soon). Some choice highlights and takeaways:</p>\n\n\n\n<ul><li>Containers are defined with the <code>container-type</code> property. Previous demos and proposals had been using <code>contain</code> instead.</li><li>Container queries are very much like the media queries we&#8217;ve been writing all along to target the viewport size. So, rather than something like <code>@media (min-width: 600px) {}</code>, we have <code>@container (min-width: 600px) {}</code>. That should make converting many of those media queries to container queries fairly straightfoward, minus the work of figuring out the new breakpoint values.</li><li>We can name containers to help distinguish them in our code (e.g. <code>container-name: blockquote</code>).</li></ul>\n\n\n\n<p>Great job, Ahmad! And thanks for sharing!</p>\n<p><a href=\"https://lab.ishadeed.com/container-queries\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/ishadeeds-container-queries-lab/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/ishadeeds-container-queries-lab/\">iShadeed&#8217;s Container Queries Lab</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Ahmad Shadeed got an early jump on container queries and has a growing collection of examples based on everyday patterns.\n\n\n\n\n\n\n\n\n\n\n\nAnd, if you missed it, his latest post on container queries does a wonderful job covering how they work since landing in Chrome 105 this month (we’ll see them in Safari 16 soon). Some choice highlights and takeaways:\n\n\n\nContainers are defined with the container-type property. Previous demos and proposals had been using contain instead.Container queries are very much like the media queries we’ve been writing all along to target the viewport size. So, rather than something like @media (min-width: 600px) {}, we have @container (min-width: 600px) {}. That should make converting many of those media queries to container queries fairly straightfoward, minus the work of figuring out the new breakpoint values.We can name containers to help distinguish them in our code (e.g. container-name: blockquote).\n\n\n\nGreat job, Ahmad! And thanks for sharing!\nTo Shared Link — Permalink on CSS-Tricks\niShadeed’s Container Queries Lab originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/373087",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-09-01T14:29:27.000Z",
      "date_modified": "2022-09-01T14:29:27.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372839",
      "url": "https://css-tricks.com/interpolating-numeric-css-variables/",
      "title": "Interpolating Numeric CSS Variables",
      "summary": "We can make variables in CSS pretty easily:\n:root {\n  --scale: 1;\n}\nAnd we can declare them on any element:\n.thing {\n  transform: scale(var(--scale));\n}\nEven better for an example like this is applying the variable on a user …\n\nInterpolating Numeric CSS Variables originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>We can make variables in CSS pretty easily:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --scale: 1;\n}</code></pre>\n\n\n\n<p>And we can declare them on any element:</p>\n\n\n\n<span id=\"more-372839\"></span>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.thing {\n  transform: scale(var(--scale));\n}</code></pre>\n\n\n\n<p>Even better for an example like this is applying the variable on a user interaction, say <code>:hover</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --scale: 1;\n}\n\n.thing {\n  height: 100px;\n  transform: scale(var(--scale));\n  width: 100px;\n}\n\n.thing:hover {\n  --scale: 3;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKoYgKR\" src=\"//codepen.io/anon/embed/KKoYgKR?height=450&amp;theme-id=1&amp;slug-hash=KKoYgKR&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKoYgKR\" title=\"CodePen Embed KKoYgKR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But if we wanted to use that variable in an animation&#8230; nada.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --scale: 1;\n}\n\n@keyframes scale {\n  from { --scale: 0; }\n  to { --scale: 3; }\n}\n\n/* Nope! */\n.thing {\n  animation: scale .25s ease-in;\n  height: 100px;\n  width: 100px;\n}</code></pre>\n\n\n\n<p>That&#8217;s because the variable is recognized as a string and what we need is a number that can be interpolated between two numeric values. That&#8217;s where we can call on <code>@property</code> to not only register the variable as a custom property, but define its syntax as a number:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@property --scale {\n  syntax: \"&lt;number>\";\n  initial-value: 1;\n  inherits: true;\n}</code></pre>\n\n\n\n<p>Now we get the animation!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYdvRbV\" src=\"//codepen.io/anon/embed/LYdvRbV?height=450&amp;theme-id=1&amp;slug-hash=LYdvRbV&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYdvRbV\" title=\"CodePen Embed LYdvRbV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>You&#8217;re going to want to <a href=\"https://caniuse.com/mdn-css_at-rules_property\" rel=\"noopener\">check browser support</a> since <code>@property</code> has only landed in Chrome (starting in <a href=\"https://developer.chrome.com/blog/new-in-chrome-85/\" rel=\"noopener\">version 85</a>) as of this writing. And if you&#8217;re hoping to sniff it out with <code>@supports</code>, we&#8217;re currently out of luck because it doesn&#8217;t accept at-rules as values&#8230; yet. That will change once <a href=\"https://github.com/w3c/csswg-drafts/issues/2463#issuecomment-1016720310\" rel=\"noopener\"><code>at-rule()</code>becomes a real thing</a>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwXNazX\" src=\"//codepen.io/anon/embed/VwXNazX?height=850&amp;theme-id=1&amp;slug-hash=VwXNazX&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwXNazX\" title=\"CodePen Embed VwXNazX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/interpolating-numeric-css-variables/\">Interpolating Numeric CSS Variables</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "We can make variables in CSS pretty easily:\n\n\n\n:root {\n  --scale: 1;\n}\n\n\n\nAnd we can declare them on any element:\n\n\n\n\n\n\n\n.thing {\n  transform: scale(var(--scale));\n}\n\n\n\nEven better for an example like this is applying the variable on a user interaction, say :hover:\n\n\n\n:root {\n  --scale: 1;\n}\n\n.thing {\n  height: 100px;\n  transform: scale(var(--scale));\n  width: 100px;\n}\n\n.thing:hover {\n  --scale: 3;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBut if we wanted to use that variable in an animation… nada.\n\n\n\n:root {\n  --scale: 1;\n}\n\n@keyframes scale {\n  from { --scale: 0; }\n  to { --scale: 3; }\n}\n\n/* Nope! */\n.thing {\n  animation: scale .25s ease-in;\n  height: 100px;\n  width: 100px;\n}\n\n\n\nThat’s because the variable is recognized as a string and what we need is a number that can be interpolated between two numeric values. That’s where we can call on @property to not only register the variable as a custom property, but define its syntax as a number:\n\n\n\n@property --scale {\n  syntax: \"<number>\";\n  initial-value: 1;\n  inherits: true;\n}\n\n\n\nNow we get the animation!\n\n\n\nCodePen Embed Fallback\n\n\n\nYou’re going to want to check browser support since @property has only landed in Chrome (starting in version 85) as of this writing. And if you’re hoping to sniff it out with @supports, we’re currently out of luck because it doesn’t accept at-rules as values… yet. That will change once at-rule()becomes a real thing.\n\n\n\nCodePen Embed Fallback\n\nInterpolating Numeric CSS Variables originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372839",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-30T13:17:25.000Z",
      "date_modified": "2022-08-30T13:17:25.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372634",
      "url": "https://css-tricks.com/using-grid-named-areas-to-visualize-and-reference-your-layout/",
      "title": "Using Grid Named Areas to Visualize (and Reference) Your Layout",
      "summary": "Whenever we build simple or complex layouts using CSS Grid, we’re usually positioning items with line numbers. Grid layouts contain grid lines that are automatically indexed with positive and negative line numbers (that is unless we explicitly name them). …\n\nUsing Grid Named Areas to Visualize (and Reference) Your Layout originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Whenever we build simple or complex layouts using CSS Grid, we&#8217;re usually positioning items with line numbers. Grid layouts contain grid lines that are automatically indexed with positive and negative line numbers (that is unless we <a href=\"https://css-tricks.com/things-ive-learned-css-grid-layout/#aa-things-are-way-easier-if-you-name-your-grid-lines\">explicitly name them</a>). Positioning items with line numbers is a fine way to lay things out, though CSS Grid has numerous ways to accomplish the same with an undersized cognitive encumbrance. One of those ways is something I like to think of as the &#8220;ASCII&#8221; method.</p>\n\n\n\n<span id=\"more-372634\"></span>\n\n\n<h3 id=\"the-ascii-method-in-a-nutshell\">The ASCII method in a nutshell</h3>\n\n\n<p>The method boils down to using <code>grid-template-areas</code> to position grid items using custom-named areas at the grid container level rather than line numbers.</p>\n\n\n\n<p>When we declare an element as a grid container using <code>display: grid</code>, the grid container, by default, generates a single-column track and rows that sufficiently hold the grid items. The container&#8217;s child elements that participate in the grid layout are converted to grid items, irrespective of their <code>display</code> property.</p>\n\n\n\n<p>For instance, let&#8217;s create a grid by explicitly defining columns and rows using the <a href=\"https://css-tricks.com/almanac/properties/g/grid-template-columns/\"><code>grid-template-columns</code></a> and <a href=\"https://css-tricks.com/almanac/properties/g/grid-template-rows/\"><code>grid-template-rows</code></a> properties.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: repeat(3, 200px);\n}</code></pre>\n\n\n\n<p>This little snippet of CSS creates a 3×2 grid where the grid items take up equal space in the columns, and where the grid contains three rows with a track size of <code>200px</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"798\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=1600%2C798&#038;ssl=1\" alt=\"\" class=\"wp-image-372635\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=1024%2C511&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=768%2C383&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=1536%2C766&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We can define the entire layout with <a href=\"https://css-tricks.com/simple-named-grid-areas/\">named grid areas</a> using the <a href=\"https://css-tricks.com/almanac/properties/g/grid-template-areas/\"><code>grid-template-areas</code></a> property. According to <a href=\"https://www.w3.org/TR/css-grid-2/#grid-template-areas-property\" rel=\"noopener\">the spec</a>, the initial value of <code>grid-template-areas</code> is <code>none</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-template-areas = none | &lt;string>+</code></pre>\n\n\n\n<p><code>&lt;string&gt;+</code> is listing the group of strings enclosed with a quote. Each string is represented as a cell, and each quoted string is represented as a row. Like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-template-areas: \"head head\" \"nav main\" \"foot foot\";</code></pre>\n\n\n\n<p>The value of <code>grid-template-areas</code> describes the layout as having four grid areas. They are,</p>\n\n\n\n<ul><li><code>head</code></li><li><code>nav</code></li><li><code>main</code></li><li><code>foot</code></li></ul>\n\n\n\n<p><code>head</code> and <code>foot</code> span two column tracks and one row track. The remaining <code>nav</code> and <code>main</code> each span one column track and one row track. The value of <code>grid-template-areas</code> is a lot like arranging ASCII characters, and as <a href=\"https://css-tricks.com/little-tip-draw-your-grid-in-ascii-in-your-css-comments-for-quick-reference/\">Chris suggested</a> a while back, we can get a visualization of the overall structure of the layout from the CSS itself which is the most trouble-free way to understand it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1930\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/value-of-grid-template-areas-1-scaled.gif?resize=2560%2C1930&#038;ssl=1\" alt=\"\" class=\"wp-image-372882\" data-recalc-dims=\"1\"/><figcaption>(<a href=\"https://css-tricks.com/wp-content/uploads/2022/08/value-of-grid-template-areas-1.gif\">Full size GIF</a>)</figcaption></figure>\n\n\n\n<p>OK, so we created our layout with four named grid areas: <code>head</code>, <code>nav</code>, <code>main</code>, <code>foot</code>.</p>\n\n\n\n<p>Now, let&#8217;s start to position the grid items against named grid areas instead of line numbers. Specifically, let&#8217;s place a <code>header</code> element into the named grid area <code>head</code> and specify the named grid area <code>head</code> in the <code>header</code> element using the <code>grid-area</code> property.</p>\n\n\n\n<p>Named grid areas in a grid layout are called <strong>idents</strong>. So, what we just did was create a custom ident named <code>head</code> that we can use to place items into certain grid tracks.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">header { grid-area: head; }</code></pre>\n\n\n\n<p>We can other HTML elements using other custom idents:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">nav { grid-area: nav; }\nmain { grid-area: main; }\nfooter { grid-area: foot; }</code></pre>\n\n\n<h3 id=\"writing-named-area-values\">Writing named area values</h3>\n\n\n<p>According to <a href=\"https://www.w3.org/TR/css-grid-1/#valdef-grid-template-areas-string\" rel=\"noopener\">CSS Grid Layout Module Level 1</a>, all strings must be defined under the following tokens:</p>\n\n\n\n<ul><li><strong>Named cell token:</strong> This represents the named grid area in the grid. For instance, <code>head</code> is a named cell token.</li><li><strong>Null cell token:</strong> This represents the unnamed grid area in the grid container. For instance, an empty cell in the grid is a null cell token.</li><li><strong>Trash token:</strong> This is a syntax error, such as an invalid declaration. For instance, a disparate number of cells and rows compared to the number of grid items would make a declaration invalid.</li></ul>\n\n\n\n<p>In <code>grid-template-area</code>, every quoted string (the rows) must have the same number of cells and define the complete grid without ignoring any cell.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1598\" height=\"718\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=1598%2C718&#038;ssl=1\" alt=\"\" class=\"wp-image-372637\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?w=1598&amp;ssl=1 1598w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=300%2C135&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=1024%2C460&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=768%2C345&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=1536%2C690&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We can ignore a cell or leave it as an <strong>empty cell</strong> using the full-stop character (<code>.</code>)</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"6\"><code markup=\"tt\">.grid { \n  display: grid;\n  grid-template-areas:\n    \"head head\"\n    \"nav main\"\n    \"foot .\";\n}</code></pre>\n\n\n\n<p>If that feels visually awkward or imbalanced to you, we can use multiple full-stop characters without any whitespaces separating them:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"6\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-template-areas:\n    \"head head\"\n    \"nav main\"\n    \"foot ....\";\n}</code></pre>\n\n\n\n<p>A named cell token can span multiple grid cells, But those cells must form a rectangular layout. In other words, we&#8217;re unable to create &#8220;L&#8221; or &#8220;T&#8221;-shaped layouts, although the spec does <a href=\"https://www.w3.org/TR/css-grid-1/#valdef-grid-template-areas-string\" rel=\"noopener\">hint at support</a> for non-rectangular layouts with disconnected regions in the future.</p>\n\n\n<h3 id=\"ascii-is-better-than-linebased-placement\">ASCII is better than line-based placement</h3>\n\n\n<p>Line-based placement is where we use the <code>grid-column</code> and <code>grid-row</code> properties to position an element on the grid using grid line numbers that are automatically indexed by a number:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid-item {\n  grid-column: 1 / 3; /* start at grid column line 1 and span to line 3 */\n}</code></pre>\n\n\n\n<p>But grid item line numbers can change if our layout changes at a breakpoint. In those cases, it&#8217;s not like we can rely on the same line numbers we used at a specific breakpoint. This is where it takes extra cognitive encumbrance to understand the code.</p>\n\n\n\n<p>That&#8217;s why I think an ASCII-based approach works best. We can redefine the layout for each breakpoint using <code>grid-template-areas</code> within the grid container, which offers a convenient visual for how the layout will look directly in the CSS — it&#8217;s like self-documented code!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  grid-template-areas:\n    \"head head\"\n    \"nav main\"\n    \"foot ....\"; /* much easier way to see the grid! */\n}\n\n.grid-item {\n  grid-area: foot; /* much easier to place the item! */\n}</code></pre>\n\n\n\n<p>We can actually see a grid&#8217;s line numbers and grid areas in DevTools. In Firefox, for example, go to the Layout panel. Then, under the <strong>Grid</strong> tab, locate the <strong>&#8220;Grid display settings&#8221;</strong> and enable the <strong>&#8220;Display line number&#8221;</strong> and <strong>&#8220;Display area names&#8221;</strong> options.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1598\" height=\"564\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=1598%2C564&#038;ssl=1\" alt=\"Enabling grid settings.\" class=\"wp-image-372641\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?w=1598&amp;ssl=1 1598w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=300%2C106&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=1024%2C361&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=768%2C271&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=1536%2C542&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This ASCII approach using named areas requires a lot less effort to visualize and easily find the placement of elements.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1601\" height=\"728\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=1601%2C728&#038;ssl=1\" alt=\"Line-based placement versus ASCII Art placement.\" class=\"wp-image-372642\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?w=1601&amp;ssl=1 1601w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=300%2C136&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=1024%2C466&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=768%2C349&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=1536%2C698&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"lets-look-at-the-universal-use-case\">Let&#8217;s look at the &#8220;universal&#8221; use case</h3>\n\n\n<p>Whenever I see a tutorial on named grid areas, the common example is generally some layout pattern containing <code>header</code>, <code>main</code>, <code>sidebar</code>, and <code>footer</code> areas. I like to think of this as the &#8220;universal&#8221; use case since it casts such a wide net.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1331\" height=\"788\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?resize=1331%2C788&#038;ssl=1\" alt=\"The Holy Grail layout in rectangles.\" class=\"wp-image-372644\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?w=1331&amp;ssl=1 1331w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?resize=300%2C178&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?resize=1024%2C606&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?resize=768%2C455&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It&#8217;s a great example to illustrate how <code>grid-template-areas</code> works, but a real-life implementation usually involves media queries set to change the layout at certain viewport widths. Rather than having to re-declare <code>grid-area</code> on each grid item at each breakpoint to re-position everything, we can use <code>grid-template-areas</code> to &#8220;respond&#8221; to the breakpoint instead — and get a nice visual of the layout at each breakpoint in the process!</p>\n\n\n\n<p>Before defining the layout, let&#8217;s assign an ident to each element using the <code>grid-area</code> property as a base style.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">header {\n  grid-area: head;\n}\n\n.left-side {\n  grid-area: left;\n}\n\nmain {\n  grid-area: main;\n}\n\n.right-side {\n  grid-area: right;\n}\n\nfooter {\n  grid-area: foot;\n}</code></pre>\n\n\n\n<p>Now, let&#8217;s define the layout again as a base style. We&#8217;re going with a mobile-first approach so that things will stack by default:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid-container {\n  display: grid;\n  grid-template-areas:\n    \"head\"\n    \"left\"\n    \"main\"\n    \"right\"\n    \"foot\";\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"890\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=1600%2C890&#038;ssl=1\" alt=\"\" class=\"wp-image-372646\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=300%2C167&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=1024%2C570&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=768%2C427&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=1536%2C854&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Each grid item is <strong>auto-sized</strong> in this configuration — which seems a little bit weird — so we can set <code>min-height: 100vh</code> on the grid container to give us more room to work with:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"9\"><code markup=\"tt\">.grid-container {\n  display: grid;\n  grid-template-areas:\n    \"head\"\n    \"left\"\n    \"main\"\n    \"right\"\n    \"foot\";\n  min-height: 100vh;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"882\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=1600%2C882&#038;ssl=1\" alt=\"\" class=\"wp-image-372647\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=300%2C165&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=1024%2C564&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=768%2C423&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=1536%2C847&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now let&#8217;s say we want the <code>main</code> element to sit to the right of the stacked <code>left</code> and <code>right</code> sidebars when we get to a slightly wider viewport width. We re-declare <code>grid-template-areas</code> with an updated ASCII layout to get that:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (min-width: 800px) {\n  .parent {\n    grid-template-columns: 0.5fr 1fr;\n    grid-template-rows: 100px 1fr 1fr 100px;\n    grid-template-areas:\n      \"head head\"\n      \"left main\"\n      \"right main\"\n      \"foot foot\";\n  }\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">I tossed some column and row sizing in there purely for aesthetics.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"878\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=1600%2C878&#038;ssl=1\" alt=\"\" class=\"wp-image-372648\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=300%2C165&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=1024%2C562&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=768%2C421&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=1536%2C843&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As the browser gets even wider, we may want to change the layout again, so that <code>main</code> is sandwiched between the <code>left</code> and <code>right</code> sidebars. Let&#8217;s write the layout visually!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid-container {\n  grid-template-columns: 200px 1fr 200px; /* again, just for sizing */\n  grid-template-areas:\n    \"head head head\"\n    \"left main right\"\n    \"left main right\"\n    \"foot foot foot\";\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1331\" height=\"788\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?resize=1331%2C788&#038;ssl=1\" alt=\"\" class=\"wp-image-372649\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?w=1331&amp;ssl=1 1331w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?resize=300%2C178&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?resize=1024%2C606&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?resize=768%2C455&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGvmbZK\" src=\"//codepen.io/anon/embed/bGvmbZK?height=450&amp;theme-id=1&amp;slug-hash=bGvmbZK&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGvmbZK\" title=\"CodePen Embed bGvmbZK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"leveraging-implicit-line-names-for-flexibility\">Leveraging implicit line names for flexibility</h3>\n\n\n<p>According to the spec, <code>grid-template-areas</code> automatically generates names for the grid lines created by named grid areas. We call these implicitly-named grid lines because they are named for us for free without any additional work.</p>\n\n\n\n<p>Every named grid area gets four implicitly-named grid lines, two in the column direction and two in the row direction, where <code>-start</code> and <code>-end</code> are appended to the ident. For example, a grid area named <code>head</code> gets <code>head-start</code> and <code>head-end</code> lines in both directions for a total of four implicitly-named grid lines.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"826\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=1600%2C826&#038;ssl=1\" alt=\"Implicitly assigned line names.\" class=\"wp-image-372651\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=300%2C155&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=1024%2C529&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=768%2C396&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=1536%2C793&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We can use these lines to our advantage! For instance, if we want an element to overlay the <code>main</code>, <code>left</code>, and <code>right</code> areas of our grid. Earlier, we talked about how layouts have to be rectangular — no &#8220;T&#8221; and &#8220;L&#8221; shaped layouts allowed. Consequently, we&#8217;re unable to use the ASCII visual layout method to place the overlay. We can, however, use our implicit line names using the same <code>grid-area</code> property on the overlay that we use to position the other elements.</p>\n\n\n\n<p>Did you know that <code>grid-area</code> is a shorthand property, sort of the same way that <code>margin</code> and <code>padding</code> are shorthand properties? It takes multiple values the same way, but instead of following a &#8220;clockwise&#8221; direction like, <code>margin</code> — which goes in order of <code>margin-block-start</code>, <code>margin-inline-end</code>, <code>margin-block-end</code>, and <code>margin-inline-start</code> — <code>grid-area</code> goes like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-area: block-start / inline-start / block-end / inline-end;</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"826\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=1600%2C826&#038;ssl=1\" alt=\"Showing the block and inline flow directions in a left-to-right writing mode.\" class=\"wp-image-372652\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=300%2C155&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=1024%2C529&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=768%2C396&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=1536%2C793&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But we&#8217;re talking about rows and columns, not block and inline directions, right? Well, they correspond to one another. The row axis corresponds to the block direction, and the column axis corresponds to the inline direction:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end;</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"826\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=1600%2C826&#038;ssl=1\" alt=\"Block and inline axis.\" class=\"wp-image-372654\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=300%2C155&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=1024%2C529&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=768%2C396&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=1536%2C793&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Back to positioning that overlay element as a grid item in our layout. The <code>grid-area</code> property will be helpful to position the element using our implicitly-named grid lines:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.overlay {\n  grid-area: left-start / left-start / right-end / main-end;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOeBWWL\" src=\"//codepen.io/anon/embed/gOeBWWL?height=750&amp;theme-id=1&amp;slug-hash=gOeBWWL&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOeBWWL\" title=\"CodePen Embed gOeBWWL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"creating-a-minimal-grid-system\">Creating a minimal grid system</h3>\n\n\n<p>When we focus on layouts like the &#8220;universal&#8221; use case we just saw, it&#8217;s tempting to think of grid areas in terms of one area per element. But it doesn&#8217;t have to work like that. We can repeat idents to reserve more space for them in the layout. We saw that when we repeated the <code>head</code> and <code>foot</code> idents in the last example:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4,7\"><code markup=\"tt\">.grid-container {\n  grid-template-areas:\n    \"head head head\"\n    \"left main right\"\n    \"left main right\"\n    \"foot foot foot\";\n}</code></pre>\n\n\n\n<p>Notice that <code>main</code>, <code>left</code>, and <code>right</code> are also repeated but in the block direction.</p>\n\n\n\n<p>Let&#8217;s forget about full page layouts and use named grid areas on a component. Grid is just as good for component layouts as full pages!</p>\n\n\n\n<p>Here&#8217;s a pretty standard hero component that sports a row of images followed by different blocks of text:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1820\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=2560%2C1820&#038;ssl=1\" alt=\"A row of weightlifting photos above a heading, blurb, then a row of three links.\" class=\"wp-image-372656\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=300%2C213&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=1024%2C728&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=768%2C546&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=1536%2C1092&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=2048%2C1456&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The HTML is pretty simple:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"hero\">\n  &lt;div class=\"image\">\n    &lt;img src=\"...\" alt=\"\" />\n  &lt;/div>\n  &lt;div class=\"text\">\n    &lt;!-- ... -->\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>We could do this for a real fast stacked layout:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero {\n  grid-template-areas:\n    \"image\"\n    \"text\";\n}</code></pre>\n\n\n\n<p>But then we have to reach for some <code>padding</code>, <code>max-width</code> or whatever to get the text area narrower than the row of images. How about we expand our ASCII layout into a four-column grid instead by repeating our idents on both rows:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr); /* maintain equal sizing */\n  grid-template-areas:\n    \"image image image image\"\n    \"text  text  text  text\";\n}</code></pre>\n\n\n\n<p>Alright, now we can place our grid items into those named areas:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero .image {\n  grid-area: image;\n}\n\n.hero .text {\n  grid-area: text;\n}</code></pre>\n\n\n\n<p>So far, so good — both rows take up the entire width. We can use that as our base layout for small screens.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"958\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=1600%2C958&#038;ssl=1\" alt=\"Showing grid lines on the stacked mobile version of the page.\" class=\"wp-image-372658\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=300%2C180&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=1024%2C613&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=768%2C460&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=1536%2C920&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But maybe we want to introduce the narrower text when the viewport reaches a larger width. We can use what we know about the full-stop character to &#8220;skip&#8221; columns. Let&#8217;s have the <code>text</code> ident skip the first and last columns in this case.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (min-width: 800px) {\n  main {\n    grid-template-columns: repeat(6, 1fr); /* increase to six columns */\n    grid-template-areas:\n      \"image image image image image image\"\n      \"..... text  text  text  text  .....\";\n  }\n}</code></pre>\n\n\n\n<p>Now we have the spacing we want:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"970\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=1600%2C970&#038;ssl=1\" alt=\"Showing grid lines for a table-sized layout of the page.\" class=\"wp-image-372660\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=300%2C182&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=1024%2C621&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=768%2C466&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=1536%2C931&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If the layout needs additional tweaking at even larger breakpoints, we can add more columns and go from there:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero {\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-areas:\n    \"image image image image image image image image\"\n    \"..... text  text  text  text  text  text  .....\";\n}</code></pre>\n\n\n\n<p>Dev tool visualization:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"974\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=1600%2C974&#038;ssl=1\" alt=\"Showing grid lines for a large table sized layout of the page.\" class=\"wp-image-372662\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=300%2C183&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=1024%2C623&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=768%2C468&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=1536%2C935&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Remember when 12-column and 16-column layouts were the big things in CSS frameworks? We can quickly scale up to that and maintain a nice visual ASCII layout in the code:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-areas:\n    \"image image image image image image image image image image image image\"\n    \"..... text  text  text  text  text  text  text  text  text  text  .....\";\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNdqBbX\" src=\"//codepen.io/anon/embed/rNdqBbX?height=900&amp;theme-id=1&amp;slug-hash=rNdqBbX&amp;default-tab=result\" height=\"900\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNdqBbX\" title=\"CodePen Embed rNdqBbX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"lets-look-at-something-more-complex\">Let&#8217;s look at something more complex</h3>\n\n\n<p>We&#8217;ve looked at one fairly generic example and one relatively straightforward example. We can still get nice ASCII layout visualizations with more complex layouts.</p>\n\n\n\n<p>Let&#8217;s work up to this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1820\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=2560%2C1820&#038;ssl=1\" alt=\"Three images positioned around a fancy heading.\" class=\"wp-image-372664\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=300%2C213&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=1024%2C728&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=768%2C546&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=1536%2C1092&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=2048%2C1456&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I&#8217;ve split this up into two elements in the HTML, a <code>header</code> and a <code>main</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;header>\n  &lt;div class=\"logo\"> ... &lt;/div>\n  &lt;div class=\"menu\"> ... &lt;/div>\n&lt;/header>\n&lt;main>\n  &lt;div class=\"image\"> ... &lt;/div>\n  &lt;h2> ... &lt;/h2>\n  &lt;div class=\"image\"> ... &lt;/div>\n  &lt;div class=\"image\"> ... &lt;/div>\n&lt;/main></code></pre>\n\n\n\n<p>I think flexbox is more appropriate for the <code>header</code> since we can space its child elements out easily that way. So, no <code>grid</code> there:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">header {\n  display: flex;\n  justify-content: space-between;\n  /* etc. */\n}</code></pre>\n\n\n\n<p>But <code>grid</code> is well-suited for the <code>main</code> element&#8217;s layout. Let&#8217;s define the layout and assign the idents to the corresponding elements that we need to position the <code>.text</code> and three <code>.image</code> elements. We&#8217;ll start with this as our baseline for small screens:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-areas:\n    \"image1 image1 .....  image2\"\n    \"texts  texts  texts  texts\"\n    \".....  image3 image3 .....\";\n}</code></pre>\n\n\n\n<p>You can already see where we&#8217;re going with this, right? The layout is visualized for us, and we can drop the grid items into place with the custom idents:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.image:nth-child(1) {\n  grid-area: image1;\n}\n\n.image:nth-last-child(2) {\n  grid-area: image2;\n}\n\n.image:nth-last-child(1) {\n  grid-area: image3;\n}\n\nh2 {\n  grid-area: texts;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"958\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=1600%2C958&#038;ssl=1\" alt=\"Showing grid lines on a mobile layout of the page.\" class=\"wp-image-372666\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=300%2C180&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=1024%2C613&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=768%2C460&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=1536%2C920&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That&#8217;s our base layout, so let&#8217;s venture into a wider breakpoint:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (min-width: 800px) {\n  .grid {\n    grid-template-columns: repeat(8, 1fr);\n    grid-template-areas:\n      \". image1 image1 ...... ......  ...... image2 .\"\n      \". texts  texts  texts  texts   texts  image2 .\"\n      \". .....  image3 image3 image3  image3 ...... .\";\n  }\n}</code></pre>\n\n\n\n<p>I bet you know exactly how that will look because the layout is right there in the code!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"983\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=1600%2C983&#038;ssl=1\" alt=\"Showing grid lines for a table-sized layout of the page.\" class=\"wp-image-372668\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=300%2C184&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=1024%2C629&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=768%2C472&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=1536%2C944&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Same deal if we decide to scale up even further:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-areas:\n    \". image1 image1 .....  .....   .....  .....  .....  .....  .....  .....  .\"\n    \". texts  texts  texts  texts   texts  texts  texts  texts  texts  image2 .\"\n    \". .....  image3 image3 image3  image3 .....  .....  .....  .....  .....  .\";\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"960\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=1600%2C960&#038;ssl=1\" alt=\"Showing grid lines for a desktop-sized layout of the page.\" class=\"wp-image-372670\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=300%2C180&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=1024%2C614&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=768%2C461&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=1536%2C922&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Here&#8217;s the full demo:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOeBYNo\" src=\"//codepen.io/anon/embed/gOeBYNo?height=900&amp;theme-id=1&amp;slug-hash=gOeBYNo&amp;default-tab=result\" height=\"900\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOeBYNo\" title=\"CodePen Embed gOeBYNo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">I&#8217;m using the &#8220;negative <code>margin</code> hack&#8221; to get the first image to overlap the heading.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>I&#8217;m curious if anyone else is using <code>grid-template-areas</code> to create named areas for the benefit of having an ASCII visual of the grid layout. Having that as a reference in my CSS code has helped de-mystify some otherwise complex designs that may have been even more complex when dealing with line numbers.</p>\n\n\n\n<p>But if nothing else, defining grid layouts this way teaches us some interesting things about CSS Grid that we saw throughout this post:</p>\n\n\n\n<ul><li>The <code>grid-template-areas</code> property allows us to create custom idents — or &#8220;named areas&#8221; — and use them to position grid items using the <code>grid-area</code> property.</li><li>There are three types of &#8220;tokens&#8221; that <code>grid-template-areas</code> accepts as values, including named cell tokens, null cell tokens, and trash cell tokens.</li><li>Each row that is defined in <code>grid-template-areas</code> needs the same number of cells. Ignoring a single cell doesn&#8217;t create a layout; it is considered a trash token.</li><li>We can get a visual ASCII-like diagram of the grid layout in the <code>grid-template-areas</code> property value by using required whitespaces between named cell tokens while defining the grid layout.</li><li>Make sure there is no whitespace inside a null cell token (e.g. <code>.....</code>). Otherwise, a single whitespace between null cell tokens creates unnecessary empty cells, resulting in an invalid layout.</li><li>We can redefine the layout at various breakpoints by re-positioning the grid items using <code>grid-area</code>, then re-declaring the layout with <code>grid-template-areas</code> on the grid container to update the track listing, if needed. There&#8217;s no need to touch the grid items.</li><li>Custom named grid areas automatically get four implicitly assigned line names — <code>&lt;custom-ident&gt;-start</code> and <code>&lt;custom-ident&gt;-end</code> in both the column and row directions.</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-grid-named-areas-to-visualize-and-reference-your-layout/\">Using Grid Named Areas to Visualize (and Reference) Your Layout</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Whenever we build simple or complex layouts using CSS Grid, we’re usually positioning items with line numbers. Grid layouts contain grid lines that are automatically indexed with positive and negative line numbers (that is unless we explicitly name them). Positioning items with line numbers is a fine way to lay things out, though CSS Grid has numerous ways to accomplish the same with an undersized cognitive encumbrance. One of those ways is something I like to think of as the “ASCII” method.\n\n\n\n\n\n\nThe ASCII method in a nutshell\n\n\nThe method boils down to using grid-template-areas to position grid items using custom-named areas at the grid container level rather than line numbers.\n\n\n\nWhen we declare an element as a grid container using display: grid, the grid container, by default, generates a single-column track and rows that sufficiently hold the grid items. The container’s child elements that participate in the grid layout are converted to grid items, irrespective of their display property.\n\n\n\nFor instance, let’s create a grid by explicitly defining columns and rows using the grid-template-columns and grid-template-rows properties.\n\n\n\n.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: repeat(3, 200px);\n}\n\n\n\nThis little snippet of CSS creates a 3×2 grid where the grid items take up equal space in the columns, and where the grid contains three rows with a track size of 200px.\n\n\n\n\n\n\n\nWe can define the entire layout with named grid areas using the grid-template-areas property. According to the spec, the initial value of grid-template-areas is none.\n\n\n\ngrid-template-areas = none | <string>+\n\n\n\n<string>+ is listing the group of strings enclosed with a quote. Each string is represented as a cell, and each quoted string is represented as a row. Like this:\n\n\n\ngrid-template-areas: \"head head\" \"nav main\" \"foot foot\";\n\n\n\nThe value of grid-template-areas describes the layout as having four grid areas. They are,\n\n\n\nheadnavmainfoot\n\n\n\nhead and foot span two column tracks and one row track. The remaining nav and main each span one column track and one row track. The value of grid-template-areas is a lot like arranging ASCII characters, and as Chris suggested a while back, we can get a visualization of the overall structure of the layout from the CSS itself which is the most trouble-free way to understand it.\n\n\n\n(Full size GIF)\n\n\n\nOK, so we created our layout with four named grid areas: head, nav, main, foot.\n\n\n\nNow, let’s start to position the grid items against named grid areas instead of line numbers. Specifically, let’s place a header element into the named grid area head and specify the named grid area head in the header element using the grid-area property.\n\n\n\nNamed grid areas in a grid layout are called idents. So, what we just did was create a custom ident named head that we can use to place items into certain grid tracks.\n\n\n\nheader { grid-area: head; }\n\n\n\nWe can other HTML elements using other custom idents:\n\n\n\nnav { grid-area: nav; }\nmain { grid-area: main; }\nfooter { grid-area: foot; }\n\n\nWriting named area values\n\n\nAccording to CSS Grid Layout Module Level 1, all strings must be defined under the following tokens:\n\n\n\nNamed cell token: This represents the named grid area in the grid. For instance, head is a named cell token.Null cell token: This represents the unnamed grid area in the grid container. For instance, an empty cell in the grid is a null cell token.Trash token: This is a syntax error, such as an invalid declaration. For instance, a disparate number of cells and rows compared to the number of grid items would make a declaration invalid.\n\n\n\nIn grid-template-area, every quoted string (the rows) must have the same number of cells and define the complete grid without ignoring any cell.\n\n\n\n\n\n\n\nWe can ignore a cell or leave it as an empty cell using the full-stop character (.)\n\n\n\n.grid { \n  display: grid;\n  grid-template-areas:\n    \"head head\"\n    \"nav main\"\n    \"foot .\";\n}\n\n\n\nIf that feels visually awkward or imbalanced to you, we can use multiple full-stop characters without any whitespaces separating them:\n\n\n\n.grid {\n  display: grid;\n  grid-template-areas:\n    \"head head\"\n    \"nav main\"\n    \"foot ....\";\n}\n\n\n\nA named cell token can span multiple grid cells, But those cells must form a rectangular layout. In other words, we’re unable to create “L” or “T”-shaped layouts, although the spec does hint at support for non-rectangular layouts with disconnected regions in the future.\n\n\nASCII is better than line-based placement\n\n\nLine-based placement is where we use the grid-column and grid-row properties to position an element on the grid using grid line numbers that are automatically indexed by a number:\n\n\n\n.grid-item {\n  grid-column: 1 / 3; /* start at grid column line 1 and span to line 3 */\n}\n\n\n\nBut grid item line numbers can change if our layout changes at a breakpoint. In those cases, it’s not like we can rely on the same line numbers we used at a specific breakpoint. This is where it takes extra cognitive encumbrance to understand the code.\n\n\n\nThat’s why I think an ASCII-based approach works best. We can redefine the layout for each breakpoint using grid-template-areas within the grid container, which offers a convenient visual for how the layout will look directly in the CSS — it’s like self-documented code!\n\n\n\n.grid {\n  grid-template-areas:\n    \"head head\"\n    \"nav main\"\n    \"foot ....\"; /* much easier way to see the grid! */\n}\n\n.grid-item {\n  grid-area: foot; /* much easier to place the item! */\n}\n\n\n\nWe can actually see a grid’s line numbers and grid areas in DevTools. In Firefox, for example, go to the Layout panel. Then, under the Grid tab, locate the “Grid display settings” and enable the “Display line number” and “Display area names” options.\n\n\n\n\n\n\n\nThis ASCII approach using named areas requires a lot less effort to visualize and easily find the placement of elements.\n\n\n\n\n\n\nLet’s look at the “universal” use case\n\n\nWhenever I see a tutorial on named grid areas, the common example is generally some layout pattern containing header, main, sidebar, and footer areas. I like to think of this as the “universal” use case since it casts such a wide net.\n\n\n\n\n\n\n\nIt’s a great example to illustrate how grid-template-areas works, but a real-life implementation usually involves media queries set to change the layout at certain viewport widths. Rather than having to re-declare grid-area on each grid item at each breakpoint to re-position everything, we can use grid-template-areas to “respond” to the breakpoint instead — and get a nice visual of the layout at each breakpoint in the process!\n\n\n\nBefore defining the layout, let’s assign an ident to each element using the grid-area property as a base style.\n\n\n\nheader {\n  grid-area: head;\n}\n\n.left-side {\n  grid-area: left;\n}\n\nmain {\n  grid-area: main;\n}\n\n.right-side {\n  grid-area: right;\n}\n\nfooter {\n  grid-area: foot;\n}\n\n\n\nNow, let’s define the layout again as a base style. We’re going with a mobile-first approach so that things will stack by default:\n\n\n\n.grid-container {\n  display: grid;\n  grid-template-areas:\n    \"head\"\n    \"left\"\n    \"main\"\n    \"right\"\n    \"foot\";\n}\n\n\n\n\n\n\n\nEach grid item is auto-sized in this configuration — which seems a little bit weird — so we can set min-height: 100vh on the grid container to give us more room to work with:\n\n\n\n.grid-container {\n  display: grid;\n  grid-template-areas:\n    \"head\"\n    \"left\"\n    \"main\"\n    \"right\"\n    \"foot\";\n  min-height: 100vh;\n}\n\n\n\n\n\n\n\nNow let’s say we want the main element to sit to the right of the stacked left and right sidebars when we get to a slightly wider viewport width. We re-declare grid-template-areas with an updated ASCII layout to get that:\n\n\n\n@media (min-width: 800px) {\n  .parent {\n    grid-template-columns: 0.5fr 1fr;\n    grid-template-rows: 100px 1fr 1fr 100px;\n    grid-template-areas:\n      \"head head\"\n      \"left main\"\n      \"right main\"\n      \"foot foot\";\n  }\n}\n\n\n\nI tossed some column and row sizing in there purely for aesthetics.\n\n\n\n\n\n\n\nAs the browser gets even wider, we may want to change the layout again, so that main is sandwiched between the left and right sidebars. Let’s write the layout visually!\n\n\n\n.grid-container {\n  grid-template-columns: 200px 1fr 200px; /* again, just for sizing */\n  grid-template-areas:\n    \"head head head\"\n    \"left main right\"\n    \"left main right\"\n    \"foot foot foot\";\n}\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\nLeveraging implicit line names for flexibility\n\n\nAccording to the spec, grid-template-areas automatically generates names for the grid lines created by named grid areas. We call these implicitly-named grid lines because they are named for us for free without any additional work.\n\n\n\nEvery named grid area gets four implicitly-named grid lines, two in the column direction and two in the row direction, where -start and -end are appended to the ident. For example, a grid area named head gets head-start and head-end lines in both directions for a total of four implicitly-named grid lines.\n\n\n\n\n\n\n\nWe can use these lines to our advantage! For instance, if we want an element to overlay the main, left, and right areas of our grid. Earlier, we talked about how layouts have to be rectangular — no “T” and “L” shaped layouts allowed. Consequently, we’re unable to use the ASCII visual layout method to place the overlay. We can, however, use our implicit line names using the same grid-area property on the overlay that we use to position the other elements.\n\n\n\nDid you know that grid-area is a shorthand property, sort of the same way that margin and padding are shorthand properties? It takes multiple values the same way, but instead of following a “clockwise” direction like, margin — which goes in order of margin-block-start, margin-inline-end, margin-block-end, and margin-inline-start — grid-area goes like this:\n\n\n\ngrid-area: block-start / inline-start / block-end / inline-end;\n\n\n\n\n\n\n\nBut we’re talking about rows and columns, not block and inline directions, right? Well, they correspond to one another. The row axis corresponds to the block direction, and the column axis corresponds to the inline direction:\n\n\n\ngrid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end;\n\n\n\n\n\n\n\nBack to positioning that overlay element as a grid item in our layout. The grid-area property will be helpful to position the element using our implicitly-named grid lines:\n\n\n\n.overlay {\n  grid-area: left-start / left-start / right-end / main-end;\n}\n\n\n\nCodePen Embed Fallback\n\n\nCreating a minimal grid system\n\n\nWhen we focus on layouts like the “universal” use case we just saw, it’s tempting to think of grid areas in terms of one area per element. But it doesn’t have to work like that. We can repeat idents to reserve more space for them in the layout. We saw that when we repeated the head and foot idents in the last example:\n\n\n\n.grid-container {\n  grid-template-areas:\n    \"head head head\"\n    \"left main right\"\n    \"left main right\"\n    \"foot foot foot\";\n}\n\n\n\nNotice that main, left, and right are also repeated but in the block direction.\n\n\n\nLet’s forget about full page layouts and use named grid areas on a component. Grid is just as good for component layouts as full pages!\n\n\n\nHere’s a pretty standard hero component that sports a row of images followed by different blocks of text:\n\n\n\n\n\n\n\nThe HTML is pretty simple:\n\n\n\n<div class=\"hero\">\n  <div class=\"image\">\n    <img src=\"...\" alt=\"\" />\n  </div>\n  <div class=\"text\">\n    <!-- ... -->\n  </div>\n</div>\n\n\n\nWe could do this for a real fast stacked layout:\n\n\n\n.hero {\n  grid-template-areas:\n    \"image\"\n    \"text\";\n}\n\n\n\nBut then we have to reach for some padding, max-width or whatever to get the text area narrower than the row of images. How about we expand our ASCII layout into a four-column grid instead by repeating our idents on both rows:\n\n\n\n.hero {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr); /* maintain equal sizing */\n  grid-template-areas:\n    \"image image image image\"\n    \"text  text  text  text\";\n}\n\n\n\nAlright, now we can place our grid items into those named areas:\n\n\n\n.hero .image {\n  grid-area: image;\n}\n\n.hero .text {\n  grid-area: text;\n}\n\n\n\nSo far, so good — both rows take up the entire width. We can use that as our base layout for small screens.\n\n\n\n\n\n\n\nBut maybe we want to introduce the narrower text when the viewport reaches a larger width. We can use what we know about the full-stop character to “skip” columns. Let’s have the text ident skip the first and last columns in this case.\n\n\n\n@media (min-width: 800px) {\n  main {\n    grid-template-columns: repeat(6, 1fr); /* increase to six columns */\n    grid-template-areas:\n      \"image image image image image image\"\n      \"..... text  text  text  text  .....\";\n  }\n}\n\n\n\nNow we have the spacing we want:\n\n\n\n\n\n\n\nIf the layout needs additional tweaking at even larger breakpoints, we can add more columns and go from there:\n\n\n\n.hero {\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-areas:\n    \"image image image image image image image image\"\n    \"..... text  text  text  text  text  text  .....\";\n}\n\n\n\nDev tool visualization:\n\n\n\n\n\n\n\nRemember when 12-column and 16-column layouts were the big things in CSS frameworks? We can quickly scale up to that and maintain a nice visual ASCII layout in the code:\n\n\n\nmain {\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-areas:\n    \"image image image image image image image image image image image image\"\n    \"..... text  text  text  text  text  text  text  text  text  text  .....\";\n}\n\n\n\nCodePen Embed Fallback\n\n\nLet’s look at something more complex\n\n\nWe’ve looked at one fairly generic example and one relatively straightforward example. We can still get nice ASCII layout visualizations with more complex layouts.\n\n\n\nLet’s work up to this:\n\n\n\n\n\n\n\nI’ve split this up into two elements in the HTML, a header and a main:\n\n\n\n<header>\n  <div class=\"logo\"> ... </div>\n  <div class=\"menu\"> ... </div>\n</header>\n<main>\n  <div class=\"image\"> ... </div>\n  <h2> ... </h2>\n  <div class=\"image\"> ... </div>\n  <div class=\"image\"> ... </div>\n</main>\n\n\n\nI think flexbox is more appropriate for the header since we can space its child elements out easily that way. So, no grid there:\n\n\n\nheader {\n  display: flex;\n  justify-content: space-between;\n  /* etc. */\n}\n\n\n\nBut grid is well-suited for the main element’s layout. Let’s define the layout and assign the idents to the corresponding elements that we need to position the .text and three .image elements. We’ll start with this as our baseline for small screens:\n\n\n\n.grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-areas:\n    \"image1 image1 .....  image2\"\n    \"texts  texts  texts  texts\"\n    \".....  image3 image3 .....\";\n}\n\n\n\nYou can already see where we’re going with this, right? The layout is visualized for us, and we can drop the grid items into place with the custom idents:\n\n\n\n.image:nth-child(1) {\n  grid-area: image1;\n}\n\n.image:nth-last-child(2) {\n  grid-area: image2;\n}\n\n.image:nth-last-child(1) {\n  grid-area: image3;\n}\n\nh2 {\n  grid-area: texts;\n}\n\n\n\n\n\n\n\nThat’s our base layout, so let’s venture into a wider breakpoint:\n\n\n\n@media (min-width: 800px) {\n  .grid {\n    grid-template-columns: repeat(8, 1fr);\n    grid-template-areas:\n      \". image1 image1 ...... ......  ...... image2 .\"\n      \". texts  texts  texts  texts   texts  image2 .\"\n      \". .....  image3 image3 image3  image3 ...... .\";\n  }\n}\n\n\n\nI bet you know exactly how that will look because the layout is right there in the code!\n\n\n\n\n\n\n\nSame deal if we decide to scale up even further:\n\n\n\n.grid {\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-areas:\n    \". image1 image1 .....  .....   .....  .....  .....  .....  .....  .....  .\"\n    \". texts  texts  texts  texts   texts  texts  texts  texts  texts  image2 .\"\n    \". .....  image3 image3 image3  image3 .....  .....  .....  .....  .....  .\";\n}\n\n\n\n\n\n\n\nHere’s the full demo:\n\n\n\nCodePen Embed Fallback\n\n\n\nI’m using the “negative margin hack” to get the first image to overlap the heading.\n\n\nWrapping up\n\n\nI’m curious if anyone else is using grid-template-areas to create named areas for the benefit of having an ASCII visual of the grid layout. Having that as a reference in my CSS code has helped de-mystify some otherwise complex designs that may have been even more complex when dealing with line numbers.\n\n\n\nBut if nothing else, defining grid layouts this way teaches us some interesting things about CSS Grid that we saw throughout this post:\n\n\n\nThe grid-template-areas property allows us to create custom idents — or “named areas” — and use them to position grid items using the grid-area property.There are three types of “tokens” that grid-template-areas accepts as values, including named cell tokens, null cell tokens, and trash cell tokens.Each row that is defined in grid-template-areas needs the same number of cells. Ignoring a single cell doesn’t create a layout; it is considered a trash token.We can get a visual ASCII-like diagram of the grid layout in the grid-template-areas property value by using required whitespaces between named cell tokens while defining the grid layout.Make sure there is no whitespace inside a null cell token (e.g. .....). Otherwise, a single whitespace between null cell tokens creates unnecessary empty cells, resulting in an invalid layout.We can redefine the layout at various breakpoints by re-positioning the grid items using grid-area, then re-declaring the layout with grid-template-areas on the grid container to update the track listing, if needed. There’s no need to touch the grid items.Custom named grid areas automatically get four implicitly assigned line names — <custom-ident>-start and <custom-ident>-end in both the column and row directions.\n\nUsing Grid Named Areas to Visualize (and Reference) Your Layout originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372634",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-26T13:44:49.000Z",
      "date_modified": "2022-08-26T13:44:49.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372616",
      "url": "https://css-tricks.com/not-sure-how-to-wordpress-anymore/",
      "title": "Not Sure How to WordPress Anymore?",
      "summary": "Neither do I! And that’s probably because there’s a lot happening in WordPress-land. The evolution towards full-site editing (FSE) introduces frequent changes to the way we build themes and plugins, and at such break-neck speed that the documentation itself is …\n\nNot Sure How to WordPress Anymore? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Neither do I! And that&#8217;s probably because there&#8217;s a lot happening in WordPress-land. The evolution towards full-site editing (FSE) introduces frequent changes to the way we build themes and plugins, and at such break-neck speed that the documentation itself is either non-existent or nearly stale upon being published. Heck, the term &#8220;full-site editing&#8221; <a href=\"https://wptavern.com/wordpress-contributors-consider-renaming-full-site-editing\" rel=\"noopener\">might even change</a>.</p>\n\n\n\n<span id=\"more-372616\"></span>\n\n\n\n<p>Tom McFarlin was musing about this in his post titled <a href=\"https://tommcfarlin.com/writing-tutorials-in-these-gutenberg-times/\" rel=\"noopener\">&#8220;Writing Tutorials in These Gutenberg Times&#8221;</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I know Gutenberg has been in development for five years and I know that it’s matured a lot over the course of that time. But [t]he number of tutorials explaining how to do something that’s already outdated was absolutely incredible.</p></blockquote>\n\n\n\n<p>The truth is that I wouldn&#8217;t know where to start if I was asked to make a new WordPress site. As I see, there are a number of ways to go in this evolving era of WordPress:</p>\n\n\n\n<ul><li>Make a virtually empty theme that leverages the Site Editor for templating and block patterns for layouts.</li><li>Make a child theme based on the existing Twenty Twenty-Two theme (because it supports FSE out of the box and is minimal enough to customize without much fuss).</li><li>Make a classic theme.</li><li>Ditch theming altogether and make a headless front-end that consumes the WordPress REST API.</li></ul>\n\n\n\n<p>I mean, we have so many tools for extending WordPress as a CMS that the front end of a WordPress site may vary from site to site. We can quite literally build an entire custom WordPress site with nothing but some tweaks to the <code>theme.json</code> file and fiddling around with layouts in the Block Editor.</p>\n\n\n\n<p>It&#8217;s amazing and dizzying all at once.</p>\n\n\n\n<p>It can also be frustrating, and we saw some of the frustration boil over when Matt Mullenweg <a href=\"https://make.wordpress.org/meta/2022/08/01/developing-the-redesigned-home-and-download-pages/#comment-9362\" rel=\"noopener\">commented on the recent design updates</a> to the WordPress.org homepage and the amount of time took to complete:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[&#8230;] it’s such a basic layout, it’s hard to imagine it taking a single person more than a day on Squarespace, Wix, Webflow, or one of the WP page builders.</p></blockquote>\n\n\n\n<p>(And, yes, someone proved that a nearly identical copy of the design could be <a href=\"https://wptavern.com/jamie-marsland-recreates-wordpress-org-homepage-in-20-minutes-using-the-block-editor\" rel=\"noopener\">created in 20 minutes</a>.)</p>\n\n\n\n<p>I think Matt&#8217;s comments have more to do with the process and solving the right problems than they are criticizing the approach that was taken. But reading the comments on that post is a nice microcosm of what I believe is an existential dilemma that many WordPress developers — including myself — are feeling after five years of living between &#8220;classic&#8221; and FSE themes.</p>\n\n\n\n<p>I&#8217;ll be honest: I feel super out of touch with FSE development. So out of touch that I&#8217;ve wondered whether I&#8217;ve fallen too far behind and whether I&#8217;ll be able to catch up. I know there&#8217;s a huge effort to bolster learning (<a href=\"https://learn.wordpress.org\" rel=\"noopener\">Learn WordPress</a> is a great example of that), but it feels like there&#8217;s still something missing — or some sorta disconnect — that&#8217;s preventing the community from being on the same page as far as where we are and where we&#8217;re heading.</p>\n\n\n\n<p>Could it be a lack of communication? Nah, there&#8217;s lots of that, not to mention lots of opportunities to attend meetings and view meeting notes. Could it be a lack of stable documentation? That&#8217;s legit, at least when I&#8217;ve tried seeking information on block development.</p>\n\n\n\n<p>Perhaps the biggest shortcoming is the dearth of blog posts that share tips, tricks, and best practices. The WordPress community has always been a vast army of folks who generously share their talents and wisdom. But I think Tom summed it up best when he tweeted:</p>\n\n\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">my sympathy to anyone who duckduckgo&#8217;s/googles a tutorial for how to create a gutenberg block and cannot find a single consistent tutorial.<br><br>what a mess.</p>— Tom McFarlin (@tommcfarlin) <a href=\"https://twitter.com/tommcfarlin/status/1559908867169030145?ref_src=twsrc%5Etfw\" rel=\"noopener\">August 17, 2022</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<p>I, for one, would love to be writing about WordPress as much as I have in the &#8220;classic&#8221; era. But again, there&#8217;s that elusive starting point that prevents me from feeling confident about anything I&#8217;d say.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/not-sure-how-to-wordpress-anymore/\">Not Sure How to WordPress Anymore?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Neither do I! And that’s probably because there’s a lot happening in WordPress-land. The evolution towards full-site editing (FSE) introduces frequent changes to the way we build themes and plugins, and at such break-neck speed that the documentation itself is either non-existent or nearly stale upon being published. Heck, the term “full-site editing” might even change.\n\n\n\n\n\n\n\nTom McFarlin was musing about this in his post titled “Writing Tutorials in These Gutenberg Times”:\n\n\n\nI know Gutenberg has been in development for five years and I know that it’s matured a lot over the course of that time. But [t]he number of tutorials explaining how to do something that’s already outdated was absolutely incredible.\n\n\n\nThe truth is that I wouldn’t know where to start if I was asked to make a new WordPress site. As I see, there are a number of ways to go in this evolving era of WordPress:\n\n\n\nMake a virtually empty theme that leverages the Site Editor for templating and block patterns for layouts.Make a child theme based on the existing Twenty Twenty-Two theme (because it supports FSE out of the box and is minimal enough to customize without much fuss).Make a classic theme.Ditch theming altogether and make a headless front-end that consumes the WordPress REST API.\n\n\n\nI mean, we have so many tools for extending WordPress as a CMS that the front end of a WordPress site may vary from site to site. We can quite literally build an entire custom WordPress site with nothing but some tweaks to the theme.json file and fiddling around with layouts in the Block Editor.\n\n\n\nIt’s amazing and dizzying all at once.\n\n\n\nIt can also be frustrating, and we saw some of the frustration boil over when Matt Mullenweg commented on the recent design updates to the WordPress.org homepage and the amount of time took to complete:\n\n\n\n[…] it’s such a basic layout, it’s hard to imagine it taking a single person more than a day on Squarespace, Wix, Webflow, or one of the WP page builders.\n\n\n\n(And, yes, someone proved that a nearly identical copy of the design could be created in 20 minutes.)\n\n\n\nI think Matt’s comments have more to do with the process and solving the right problems than they are criticizing the approach that was taken. But reading the comments on that post is a nice microcosm of what I believe is an existential dilemma that many WordPress developers — including myself — are feeling after five years of living between “classic” and FSE themes.\n\n\n\nI’ll be honest: I feel super out of touch with FSE development. So out of touch that I’ve wondered whether I’ve fallen too far behind and whether I’ll be able to catch up. I know there’s a huge effort to bolster learning (Learn WordPress is a great example of that), but it feels like there’s still something missing — or some sorta disconnect — that’s preventing the community from being on the same page as far as where we are and where we’re heading.\n\n\n\nCould it be a lack of communication? Nah, there’s lots of that, not to mention lots of opportunities to attend meetings and view meeting notes. Could it be a lack of stable documentation? That’s legit, at least when I’ve tried seeking information on block development.\n\n\n\nPerhaps the biggest shortcoming is the dearth of blog posts that share tips, tricks, and best practices. The WordPress community has always been a vast army of folks who generously share their talents and wisdom. But I think Tom summed it up best when he tweeted:\n\n\n\nmy sympathy to anyone who duckduckgo’s/googles a tutorial for how to create a gutenberg block and cannot find a single consistent tutorial.what a mess.— Tom McFarlin (@tommcfarlin) August 17, 2022 \n\n\n\nI, for one, would love to be writing about WordPress as much as I have in the “classic” era. But again, there’s that elusive starting point that prevents me from feeling confident about anything I’d say.\n\nNot Sure How to WordPress Anymore? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372616",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-25T14:34:06.000Z",
      "date_modified": "2022-08-25T14:34:06.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372576",
      "url": "https://css-tricks.com/using-css-cascade-layers-to-manage-custom-styles-in-a-tailwind-project/",
      "title": "Using CSS Cascade Layers to Manage Custom Styles in a Tailwind Project",
      "summary": "If a utility class only does one thing, chances are you don’t want it to be overridden by any styles coming from elsewhere. One approach is to use !important to be 100% certain the style will be applied, regardless of …\n\nUsing CSS Cascade Layers to Manage Custom Styles in a Tailwind Project originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>If a utility class only does one thing, chances are you don’t want it to be overridden by any styles coming from elsewhere. One approach is to use <code>!important</code> to be 100% certain the style will be applied, regardless of specificity conflicts.</p>\n\n\n\n<p>The Tailwind config file has an <code>!important</code> option that will automatically add <code>!important</code> to every utility class. There’s nothing wrong with using <code>!important</code> this way, but nowadays there are better ways to handle specificity. Using <a href=\"https://css-tricks.com/css-cascade-layers/\">CSS Cascade Layers</a> we can avoid the heavy-handed approach of using <code>!important</code>.</p>\n\n\n\n<span id=\"more-372576\"></span>\n\n\n\n<p>Cascade layers allow us to group styles into “layers”. The precedence of a layer always beats the specificity of a selector. Specificity only matters inside each layer. Establishing a sensible layer order helps avoid styling conflicts and specificity wars. That’s what makes CSS Cascade Layers a great tool for <a href=\"https://css-tricks.com/css-cascade-layers/#aa-using-third-party-tools-and-frameworks\">managing custom styles alongside styles from third-party frameworks</a>, like Tailwind.</p>\n\n\n\n<p>A Tailwind source <code>.css</code> file usually starts something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@tailwind variants;</code></pre>\n\n\n\n<p>Let’s take a look at the <a href=\"https://tailwindcss.com/docs/functions-and-directives\" rel=\"noopener\">official Tailwind docs</a> about directives:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Directives are custom Tailwind-specific at-rules you can use in your CSS that offer special functionality for Tailwind CSS projects. Use the <code>@tailwind</code> directive to insert Tailwind’s <code>base</code>, <code>components</code>, <code>utilities</code> and <code>variants</code> styles into your CSS.</p></blockquote>\n\n\n\n<p>In the output CSS file that gets built, Tailwind’s CSS reset — known as <a href=\"https://tailwindcss.com/docs/preflight\" rel=\"noopener\">Preflight</a> — is included first as part of the base styles. The rest of <code>base</code> consists of CSS variables needed for Tailwind to work. <code>components</code> is a place for you to add your own custom classes. Any utility classes you’ve used in your markup will appear next. Variants are styles for things like hover and focus states and responsive styles, which will appear last in the generated CSS file.</p>\n\n\n<h3 id=\"the-tailwind-layer-directive\">The Tailwind <code>@layer</code> directive</h3>\n\n\n<p>Confusingly, Tailwind has its own <code>@layer</code> syntax. This article is about the CSS standard, but let’s take a quick look at the Tailwind version (which gets compiled away and doesn’t end up in the output CSS). The Tailwind <code>@layer</code> directive is a way to inject your own extra styles into a specified part of the output CSS file.</p>\n\n\n\n<p>For example, to append your own styles to the <code>base</code> styles, you would do the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer base {\n  h1 {\n    font-size: 30px;\n  }\n}</code></pre>\n\n\n\n<p>The <code>components</code> layer is empty by default — it’s just a place to put your own classes. If you were doing things the Tailwind way, you’d probably use <a href=\"https://tailwindcss.com/docs/reusing-styles#extracting-classes-with-apply\" rel=\"noopener\"><code>@apply</code></a> (although the creator of Tailwind recently <a href=\"https://twitter.com/adamwathan/status/1559250403547652097\" rel=\"noopener\">advised against it</a>), but you can also write classes the regular way:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer components {\n  .btn-blue {\n    background-color: blue;\n    color: white;\n  }\n}</code></pre>\n\n\n\n<p>The CSS standard is much more powerful. Let’s get back to that…</p>\n\n\n<h3 id=\"using-the-css-standard-layer\">Using the CSS standard <code>@layer</code></h3>\n\n\n<p>Here’s how we can rewrite this to use the CSS standard <code>@layer</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer tailwind-base, my-custom-styles, tailwind-utilities;\n\n@layer tailwind-base {\n  @tailwind base;\n}\n\n@layer tailwind-utilities {\n  @tailwind utilities;\n  @tailwind variants;\n} </code></pre>\n\n\n\n<p>Unlike the Tailwind directive, these don’t get compiled away. They’re understood by the browser. In fact, DevTools in Edge, Chrome, Safari, and Firefox will even show you any layers you’ve defined.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1142\" height=\"1092\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?resize=1142%2C1092&#038;ssl=1\" alt=\"CSS Cascade Layers with Tailwind CSS layers in DevTools.\" class=\"wp-image-372579\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?w=1142&amp;ssl=1 1142w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?resize=300%2C287&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?resize=1024%2C979&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?resize=768%2C734&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>You can have as many layers as you want — and name them whatever you want — but in this example, all my custom styles are in a single layer (<code>my-custom-styles</code>). The first line establishes the layer order:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer tailwind-base, my-custom-styles, tailwind-utilities;</code></pre>\n\n\n\n<p>This needs to be provided upfront. Be sure to include this line before any other code that uses <code>@layer</code>. The first layer in the list will be the <em>least</em> powerful, and the last layer in the list will be the <em>most</em> powerful. That means <code>tailwind-base</code> is the <em>least powerful</em> layer and any code in it will be overridden by all the subsequent layers. That also means <code>tailwind-utilities</code> will always trump any other styles — <em>regardless of source order or specificity</em>. (Utilities and variants <em>could</em> go in separate layers, but the maintainers of Tailwind will ensure variants always trump utilities, so long as you include the variants below the utilities directive.)</p>\n\n\n\n<p>Anything that isn’t in a layer will override anything that is in a layer (with the one exception being styles that use <code>!important</code>). So, you could also opt to leave <code>utilities</code> and <code>variants</code> outside of any layer:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer tailwind-base, tailwind-components, my-custom-styles;\n\n@layer tailwind-base {\n  @tailwind base;\n}\n\n@layer tailwind-components {\n  @tailwind components;\n}\n\n@tailwind utilities;\n@tailwind variants;</code></pre>\n\n\n\n<p>What did this actually buy us?&nbsp;There are plenty of times when advanced CSS selectors come in pretty handy. Let’s create a version of&nbsp;<code>:focus-within</code>&nbsp;that only responds to keyboard focus rather than mouse clicks using the&nbsp;<code>:has</code>&nbsp;selector (<a href=\"https://caniuse.com/css-has\" target=\"_blank\" rel=\"noreferrer noopener\">which&nbsp;lands in Chrome 105</a>). This will style a parent element when any of its children receive focus. Tailwind 3.1 introduced&nbsp;<a href=\"https://tailwindcss.com/blog/tailwindcss-v3-1#arbitrary-values-but-for-variants\" target=\"_blank\" rel=\"noreferrer noopener\">custom variants</a>&nbsp;— e.g.&nbsp;<code>&lt;div class=\"[&amp;:has(:focus-visible)]:outline-red-600\"&gt;</code> — but sometimes it’s easier to just write CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer tailwind-base, my-custom-styles;\n@layer tailwind-base {\n  @tailwind base;\n}\n\n@tailwind utilities;\n\n@layer my-custom-styles {\n  .radio-container {\n    padding: 4px 24px;\n    border: solid 2px rgb(230, 230, 230);\n  }\n  .radio-container:has(:focus-visible) {\n    outline: solid 2px blue;\n  }\n}</code></pre>\n\n\n\n<p>Let’s say in just one instance we want to override the <code>outline-color</code> from <code>blue</code> to something else. Let’s say the element we’re working with has both the Tailwind class <code>.outline-red-600</code> and our own <code>.radio-container:has(:focus-visible)</code> class:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"outline-red-600 radio-container\"> ... &lt;/div></code></pre>\n\n\n\n<p>Which <code>outline-color</code> will win?</p>\n\n\n\n<p>Ordinarily, the higher specificity of <code>.radio-container:has(:focus-visible)</code> would mean the Tailwind class has no effect — even if it’s lower in the source order. But, unlike the Tailwind <code>@layer</code> directive that relies on source order, the CSS standard <code>@layer</code> overrules specificity.</p>\n\n\n\n<iframe loading=\"lazy\" src=\"https://play.tailwindcss.com/IzAf5vZdl8?file=css\" width=\"100%\" height=\"450\"></iframe>\n\n\n\n<p>As a result, we can use complex selectors in our own custom styles but still override them with Tailwind’s utility classes when we need to — without having to resort to heavy-handed <code>!important</code> usage to get what we want.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-css-cascade-layers-to-manage-custom-styles-in-a-tailwind-project/\">Using CSS Cascade Layers to Manage Custom Styles in a Tailwind Project</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "If a utility class only does one thing, chances are you don’t want it to be overridden by any styles coming from elsewhere. One approach is to use !important to be 100% certain the style will be applied, regardless of specificity conflicts.\n\n\n\nThe Tailwind config file has an !important option that will automatically add !important to every utility class. There’s nothing wrong with using !important this way, but nowadays there are better ways to handle specificity. Using CSS Cascade Layers we can avoid the heavy-handed approach of using !important.\n\n\n\n\n\n\n\nCascade layers allow us to group styles into “layers”. The precedence of a layer always beats the specificity of a selector. Specificity only matters inside each layer. Establishing a sensible layer order helps avoid styling conflicts and specificity wars. That’s what makes CSS Cascade Layers a great tool for managing custom styles alongside styles from third-party frameworks, like Tailwind.\n\n\n\nA Tailwind source .css file usually starts something like this:\n\n\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@tailwind variants;\n\n\n\nLet’s take a look at the official Tailwind docs about directives:\n\n\n\nDirectives are custom Tailwind-specific at-rules you can use in your CSS that offer special functionality for Tailwind CSS projects. Use the @tailwind directive to insert Tailwind’s base, components, utilities and variants styles into your CSS.\n\n\n\nIn the output CSS file that gets built, Tailwind’s CSS reset — known as Preflight — is included first as part of the base styles. The rest of base consists of CSS variables needed for Tailwind to work. components is a place for you to add your own custom classes. Any utility classes you’ve used in your markup will appear next. Variants are styles for things like hover and focus states and responsive styles, which will appear last in the generated CSS file.\n\n\nThe Tailwind @layer directive\n\n\nConfusingly, Tailwind has its own @layer syntax. This article is about the CSS standard, but let’s take a quick look at the Tailwind version (which gets compiled away and doesn’t end up in the output CSS). The Tailwind @layer directive is a way to inject your own extra styles into a specified part of the output CSS file.\n\n\n\nFor example, to append your own styles to the base styles, you would do the following:\n\n\n\n@layer base {\n  h1 {\n    font-size: 30px;\n  }\n}\n\n\n\nThe components layer is empty by default — it’s just a place to put your own classes. If you were doing things the Tailwind way, you’d probably use @apply (although the creator of Tailwind recently advised against it), but you can also write classes the regular way:\n\n\n\n@layer components {\n  .btn-blue {\n    background-color: blue;\n    color: white;\n  }\n}\n\n\n\nThe CSS standard is much more powerful. Let’s get back to that…\n\n\nUsing the CSS standard @layer\n\n\nHere’s how we can rewrite this to use the CSS standard @layer:\n\n\n\n@layer tailwind-base, my-custom-styles, tailwind-utilities;\n\n@layer tailwind-base {\n  @tailwind base;\n}\n\n@layer tailwind-utilities {\n  @tailwind utilities;\n  @tailwind variants;\n} \n\n\n\nUnlike the Tailwind directive, these don’t get compiled away. They’re understood by the browser. In fact, DevTools in Edge, Chrome, Safari, and Firefox will even show you any layers you’ve defined.\n\n\n\n\n\n\n\nYou can have as many layers as you want — and name them whatever you want — but in this example, all my custom styles are in a single layer (my-custom-styles). The first line establishes the layer order:\n\n\n\n@layer tailwind-base, my-custom-styles, tailwind-utilities;\n\n\n\nThis needs to be provided upfront. Be sure to include this line before any other code that uses @layer. The first layer in the list will be the least powerful, and the last layer in the list will be the most powerful. That means tailwind-base is the least powerful layer and any code in it will be overridden by all the subsequent layers. That also means tailwind-utilities will always trump any other styles — regardless of source order or specificity. (Utilities and variants could go in separate layers, but the maintainers of Tailwind will ensure variants always trump utilities, so long as you include the variants below the utilities directive.)\n\n\n\nAnything that isn’t in a layer will override anything that is in a layer (with the one exception being styles that use !important). So, you could also opt to leave utilities and variants outside of any layer:\n\n\n\n@layer tailwind-base, tailwind-components, my-custom-styles;\n\n@layer tailwind-base {\n  @tailwind base;\n}\n\n@layer tailwind-components {\n  @tailwind components;\n}\n\n@tailwind utilities;\n@tailwind variants;\n\n\n\nWhat did this actually buy us? There are plenty of times when advanced CSS selectors come in pretty handy. Let’s create a version of :focus-within that only responds to keyboard focus rather than mouse clicks using the :has selector (which lands in Chrome 105). This will style a parent element when any of its children receive focus. Tailwind 3.1 introduced custom variants — e.g. <div class=\"[&:has(:focus-visible)]:outline-red-600\"> — but sometimes it’s easier to just write CSS:\n\n\n\n@layer tailwind-base, my-custom-styles;\n@layer tailwind-base {\n  @tailwind base;\n}\n\n@tailwind utilities;\n\n@layer my-custom-styles {\n  .radio-container {\n    padding: 4px 24px;\n    border: solid 2px rgb(230, 230, 230);\n  }\n  .radio-container:has(:focus-visible) {\n    outline: solid 2px blue;\n  }\n}\n\n\n\nLet’s say in just one instance we want to override the outline-color from blue to something else. Let’s say the element we’re working with has both the Tailwind class .outline-red-600 and our own .radio-container:has(:focus-visible) class:\n\n\n\n<div class=\"outline-red-600 radio-container\"> ... </div>\n\n\n\nWhich outline-color will win?\n\n\n\nOrdinarily, the higher specificity of .radio-container:has(:focus-visible) would mean the Tailwind class has no effect — even if it’s lower in the source order. But, unlike the Tailwind @layer directive that relies on source order, the CSS standard @layer overrules specificity.\n\n\n\n\n\n\n\nAs a result, we can use complex selectors in our own custom styles but still override them with Tailwind’s utility classes when we need to — without having to resort to heavy-handed !important usage to get what we want.\n\nUsing CSS Cascade Layers to Manage Custom Styles in a Tailwind Project originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372576",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-24T13:11:47.000Z",
      "date_modified": "2022-08-24T13:11:47.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372485",
      "url": "https://css-tricks.com/removing-jquery-from-gov-uk/",
      "title": "Removing jQuery from GOV.UK",
      "summary": "The GOV.UK team recently published “How and why we removed jQuery from GOV.UK“. This was an insightful look at how an organization can assess its tooling and whether something is still the best tool for the job. This …\n\nRemoving jQuery from GOV.UK originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>The GOV.UK team recently published &#8220;<a href=\"https://insidegovuk.blog.gov.uk/2022/08/11/how-and-why-we-removed-jquery-from-gov-uk/\" rel=\"noopener\">How and why we removed jQuery from GOV.UK</a>&#8220;. This was an insightful look at how an organization can assess its tooling and whether something is still the best tool for the job. This is not a nudge to strip libraries out of your current project right now! Many of us may still be supporting legacy projects and browser requirements that prevent this from being a viable option.</p>\n\n\n\n<span id=\"more-372485\"></span>\n\n\n\n<p>Some of the criticism appears to be that the library size argument is negligible on modern network speeds and caching.</p>\n\n\n\n<p class=\"is-style-explanation\">GOV.UK posted an update to address this criticism with metrics &#8211; &#8220;<a href=\"https://insidegovuk.blog.gov.uk/2022/08/15/the-impact-of-removing-jquery-on-our-web-performance/\" rel=\"noopener\">The impact of removing jQuery on our web performance</a>&#8220;.</p>\n\n\n\n<p>This article also makes the case for improving maintenance. Instead of upgrading disparate outdated versions of code and having to address security updates in a piecemeal approach, removing the dependency reduces this footprint. This is the dream of having the luxury for <a href=\"https://css-tricks.com/defining-and-dealing-with-technical-debt/\">addressing technical debt</a>.</p>\n\n\n\n<p class=\"is-style-explanation\">Previously, <a href=\"https://css-tricks.com/removing-jquery-from-github-com-frontend/\">GitHub also documented how they incrementally decoupled jQuery from their front-end code</a>. Improving maintenance and developer experience played a role into their decision.</p>\n\n\n\n<p>What caught my eye in particular was the link to the <a href=\"https://docs.publishing.service.gov.uk/manual/how-to-remove-jquery-from-javascript.html\" rel=\"noopener\">documentation on how to remove jQuery</a>. Understanding how to decouple and perform migration steps are maintenance tasks that will continue to come up for websites and it&#8217;s reassuring to have a guide from someone that had to do the same.</p>\n\n\n\n<p>Further musing on this subject turned up the old chestnuts &#8220;<a href=\"https://css-tricks.com/might-need-jquery/\">You Might Not Need jQuery</a>&#8221; (2014), &#8220;<a href=\"https://css-tricks.com/now-ever-might-not-need-jquery/\">(Now More Than Ever) You Might Not Need jQuery</a>&#8221; (2017), &#8220;<a href=\"https://css-tricks.com/jquery-still-relevant/\">Is jQuery still relevant? (1)</a>&#8221; (2016),  and &#8220;<a href=\"https://css-tricks.com/jquery-still-relevant-2/\">Is jQuery still relevant? (2)</a>&#8221; (2017).</p>\n<p><a href=\"https://insidegovuk.blog.gov.uk/2022/08/11/how-and-why-we-removed-jquery-from-gov-uk/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/removing-jquery-from-gov-uk/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/removing-jquery-from-gov-uk/\">Removing jQuery from GOV.UK</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "The GOV.UK team recently published “How and why we removed jQuery from GOV.UK“. This was an insightful look at how an organization can assess its tooling and whether something is still the best tool for the job. This is not a nudge to strip libraries out of your current project right now! Many of us may still be supporting legacy projects and browser requirements that prevent this from being a viable option.\n\n\n\n\n\n\n\nSome of the criticism appears to be that the library size argument is negligible on modern network speeds and caching.\n\n\n\nGOV.UK posted an update to address this criticism with metrics – “The impact of removing jQuery on our web performance“.\n\n\n\nThis article also makes the case for improving maintenance. Instead of upgrading disparate outdated versions of code and having to address security updates in a piecemeal approach, removing the dependency reduces this footprint. This is the dream of having the luxury for addressing technical debt.\n\n\n\nPreviously, GitHub also documented how they incrementally decoupled jQuery from their front-end code. Improving maintenance and developer experience played a role into their decision.\n\n\n\nWhat caught my eye in particular was the link to the documentation on how to remove jQuery. Understanding how to decouple and perform migration steps are maintenance tasks that will continue to come up for websites and it’s reassuring to have a guide from someone that had to do the same.\n\n\n\nFurther musing on this subject turned up the old chestnuts “You Might Not Need jQuery” (2014), “(Now More Than Ever) You Might Not Need jQuery” (2017), “Is jQuery still relevant? (1)” (2016),  and “Is jQuery still relevant? (2)” (2017).\nTo Shared Link — Permalink on CSS-Tricks\nRemoving jQuery from GOV.UK originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372485",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-23T13:04:31.000Z",
      "date_modified": "2022-08-23T13:04:31.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372396",
      "url": "https://css-tricks.com/css-grid-and-custom-shapes-part-2/",
      "title": "CSS Grid and Custom Shapes, Part 2",
      "summary": "Alright, so the last time we checked in, we were using CSS Grid and combining them with CSS clip-path and mask techniques to create grids with fancy shapes.\nHere’s just one of the fantastic grids we made together:\nCodePen…\n\nCSS Grid and Custom Shapes, Part 2 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Alright, so the <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1\">last time we checked in</a>, we were using CSS Grid and combining them with CSS <code>clip-path</code> and <code>mask</code> techniques to create grids with fancy shapes.</p>\n\n\n\n<p>Here&#8217;s just one of the fantastic grids we made together:</p>\n\n\n\n<span id=\"more-372396\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJvWKPm\" src=\"//codepen.io/anon/embed/OJvWKPm?height=550&amp;theme-id=1&amp;slug-hash=OJvWKPm&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJvWKPm\" title=\"CodePen Embed OJvWKPm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Ready for the second round? We are still working with CSS Grid, <code>clip-path</code>, and <code>mask</code>, but by the end of this article, we&#8217;ll end up with different ways to arrange images on the grid, including some rad hover effects that make for an authentic, interactive experience to view pictures.</p>\n\n\n\n<p>And guess what? We&#8217;re using the <strong>same markup that we used last time</strong>. Here&#8217;s that again:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"gallery\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;!-- as many times as we want -->\n&lt;/div></code></pre>\n\n\n\n<p>Like the previous article, we only need a container with images inside. Nothing more!</p>\n\n\n<h3 id=\"nested-image-grid\">Nested Image Grid</h3>\n\n\n<p>Last time, our grids were, well, typical image grids. Other than the neat shapes we masked them with, they were pretty standard symmetrical grids as far as how we positioned the images inside.</p>\n\n\n\n<p>Let&#8217;s try nesting an image in the center of the grid:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWVbgOo\" src=\"//codepen.io/anon/embed/MWVbgOo?height=550&amp;theme-id=1&amp;slug-hash=MWVbgOo&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWVbgOo\" title=\"CodePen Embed MWVbgOo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We start by setting a 2✕2 grid for four images:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 10px; /* controls the gap between images */\n\n  display: grid;\n  gap: var(--g);\n  grid-template-columns: repeat(2, auto);\n}\n.gallery > img {\n  width: var(--s);\n  aspect-ratio: 1;\n  object-fit: cover;\n}</code></pre>\n\n\n\n<p>Nothing complex yet. The next step is to cut the corner of our images to create the space for the nested image. I already have a detailed article on <a href=\"https://css-tricks.com/cut-corners-using-css-mask-and-clip-path-properties/\">how to cut corners using <code>clip-path</code> and <code>mask</code></a>. You can also use my <a href=\"https://css-generators.com/custom-corners/\" rel=\"noopener\">online generator</a> to get the CSS for masking corners.</p>\n\n\n\n<p>What we need here is to cut out the corners at an angle equal to <code>90deg</code>. We can use the same <a href=\"https://css-tricks.com/cut-corners-using-css-mask-and-clip-path-properties/#aa-angled-cut-out\">conic-gradient technique</a> from that article to do that:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img {\n   mask: conic-gradient(from var(--_a), #0000 90deg, #000 0);\n}\n.gallery > img:nth-child(1) { --_a: 90deg; }\n.gallery > img:nth-child(2) { --_a: 180deg; }\n.gallery > img:nth-child(3) { --_a: 0deg; }\n.gallery > img:nth-child(4) { --_a:-90deg; }</code></pre>\n\n\n\n<p>We could use the <code>clip-path</code> method for cutting corners from that same article, but masking with gradients is more suitable here because we have the same configuration for all the images — all we need is a rotation (defined with the variable <code>--_a</code>) get the effect, so we&#8217;re masking from the inside instead of the outside edges.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"436\" height=\"431\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659346143713_image.png?resize=436%2C431&#038;ssl=1\" alt=\"Two by two grid of images with a white square stacked on top in the center.\" class=\"wp-image-372397\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659346143713_image.png?w=436&amp;ssl=1 436w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659346143713_image.png?resize=300%2C297&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now we can place the nested image inside the masked space. First, let&#8217;s make sure we have a fifth image element in the HTML:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"6\"><code markup=\"tt\">&lt;div class=\"gallery\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n&lt;/div></code></pre>\n\n\n\n<p>We are going to rely on the good ol&#8217; absolute positioning to place it in there:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:nth-child(5) {\n  position: absolute;\n  inset: calc(50% - .5*var(--s));\n  clip-path: inset(calc(var(--g) / 4));\n}</code></pre>\n\n\n\n<p>The <a href=\"https://css-tricks.com/almanac/properties/i/inset/\"><code>inset</code></a> property allows us to place the image at the center using a single declaration. We know the size of the image (defined with the variable <code>--s</code>), and we know that the container&#8217;s size equals 100%. We do some math, and the distance from each edge should be equal to <code>(100% - var(--s))/2</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"646\" height=\"478\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659347070519_image.png?resize=646%2C478&#038;ssl=1\" alt=\"Diagram of the widths needed to complete the design.\" class=\"wp-image-372398\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659347070519_image.png?w=646&amp;ssl=1 646w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659347070519_image.png?resize=300%2C222&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>You might be wondering why we&#8217;re using <code>clip-path</code> at all here. We&#8217;re using it with the nested image to have a consistent gap. If we were to remove it, you would notice that we don&#8217;t have the same gap between all the images. This way, we&#8217;re cutting a little bit from the fifth image to get the proper spacing around it.</p>\n\n\n\n<p>The complete code again:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 10px;  /* controls the gap between images */\n  \n  display: grid;\n  gap: var(--g);\n  grid-template-columns: repeat(2, auto);\n  position: relative;\n}\n\n.gallery > img {\n  width: var(--s);\n  aspect-ratio: 1;\n  object-fit: cover;\n  mask: conic-gradient(from var(--_a), #0000 90deg, #000 0);\n}\n\n.gallery > img:nth-child(1) {--_a: 90deg}\n.gallery > img:nth-child(2) {--_a:180deg}\n.gallery > img:nth-child(3) {--_a:  0deg}\n.gallery > img:nth-child(4) {--_a:-90deg}\n.gallery > img:nth-child(5) {\n  position: absolute;\n  inset: calc(50% - .5*var(--s));\n  clip-path: inset(calc(var(--g) / 4));\n}</code></pre>\n\n\n\n<p>Now, many of you might also be wondering: why all the complex stuff when we can place the last image on the top and add a border to it? That would hide the images underneath the nested image without a mask, right?</p>\n\n\n\n<p>That&#8217;s true, and we will get the following:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poLpQax/5196aeab31a41be5483bf8aacc2e2cc5\" src=\"//codepen.io/anon/embed/preview/poLpQax/5196aeab31a41be5483bf8aacc2e2cc5?height=550&amp;theme-id=1&amp;slug-hash=poLpQax/5196aeab31a41be5483bf8aacc2e2cc5&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poLpQax/5196aeab31a41be5483bf8aacc2e2cc5\" title=\"CodePen Embed poLpQax/5196aeab31a41be5483bf8aacc2e2cc5\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>No <code>mask</code>, no <code>clip-path</code>. Yes, the code is easy to understand, but there is a little drawback: the border color needs to be the same as the main background to make the illusion perfect. This little drawback is enough for me to make the code more complex in exchange for real transparency independent of the background. I am not saying a border approach is bad or wrong. I would recommend it in most cases where the background is known. But we are here to explore new stuff and, most important, build components that don&#8217;t depend on their environment.</p>\n\n\n\n<p>Let&#8217;s try another shape this time:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700\" src=\"//codepen.io/anon/embed/preview/mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700?height=550&amp;theme-id=1&amp;slug-hash=mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700\" title=\"CodePen Embed mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This time, we made the nested image a circle instead of a square. That&#8217;s an easy task with <a href=\"https://css-tricks.com/almanac/properties/b/border-radius/\"><code>border-radius</code></a> But we need to use a <a href=\"https://css-tricks.com/cut-corners-using-css-mask-and-clip-path-properties/#aa-circular-cut-out\">circular cut-out</a> for the other images. This time, though, we will rely on a <code>radial-gradient()</code> instead of a <code>conic-gradient()</code> to get that nice rounded look.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img {\n  mask: \n    radial-gradient(farthest-side at var(--_a),\n      #0000 calc(50% + var(--g)/2), #000 calc(51% + var(--g)/2));\n}\n.gallery > img:nth-child(1) { --_a: calc(100% + var(--g)/2) calc(100% + var(--g)/2); }\n.gallery > img:nth-child(2) { --_a: calc(0%   - var(--g)/2) calc(100% + var(--g)/2); }\n.gallery > img:nth-child(3) { --_a: calc(100% + var(--g)/2) calc(0%   - var(--g)/2); }\n.gallery > img:nth-child(4) { --_a: calc(0%   - var(--g)/2) calc(0%   - var(--g)/2); }</code></pre>\n\n\n\n<p>All the images use the same configuration as the previous example, but we update the center point each time.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"533\" height=\"538\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659350991210_image.png?resize=533%2C538&#038;ssl=1\" alt=\"Diagram showing the center values for each quadrant of the grid.\" class=\"wp-image-372399\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659350991210_image.png?w=533&amp;ssl=1 533w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659350991210_image.png?resize=297%2C300&amp;ssl=1 297w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659350991210_image.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The above figure illustrates the center point for each circle. Still, in the actual code, you will notice that I am also accounting for the gap to ensure all the points are at the same position (the center of the grid) to get a continuous circle if we combine them.</p>\n\n\n\n<p>Now that we have our layout let&#8217;s talk about the hover effect. In case you didn&#8217;t notice, a cool hover effect increases the size of the nested image and adjusts everything else accordingly. Increasing the size is a relatively easy task, but updating the gradient is more complicated since, by default, gradients cannot be animated. To overcome this, I will use a <code>font-size</code> hack to be able to animate the radial gradient.</p>\n\n\n\n<p>If you check the code of the gradient, you can see that I am adding <code>1em</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask: \n    radial-gradient(farthest-side at var(--_a),\n      #0000 calc(50% + var(--g)/2 + 1em), #000 calc(51% + var(--g)/2 + 1em));</code></pre>\n\n\n\n<p>It&#8217;s known that <code>em</code> units are relative to the parent element&#8217;s <code>font-size</code>, so changing the <code>font-size</code> of the <code>.gallery</code> will also change the computed <code>em</code> value — this is the trick we are using. We are animating the <code>font-size</code> from a value of <code>0</code> to a given value and, as a result, the gradient is animated, making the cut-out part larger, following the size of the nested image that is getting bigger.</p>\n\n\n\n<p>Here is the code that highlights the parts involved in the hover effect:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 10px; /* controls the gaps between images */\n\n  font-size: 0; /* initially we have 1em = 0 */\n  transition: .5s;\n}\n/* we increase the cut-out by 1em */\n.gallery > img {\n  mask: \n    radial-gradient(farthest-side at var(--_a),\n      #0000 calc(50% + var(--g)/2 + 1em), #000 calc(51% + var(--g)/2 + 1em));\n}\n/* we increase the size by 2em */\n.gallery > img:nth-child(5) {\n  width: calc(var(--s) + 2em);\n}\n/* on hover 1em = S/5 */\n.gallery:hover {\n  font-size: calc(var(--s) / 5);\n}</code></pre>\n\n\n\n<p>The <code>font-size</code> trick is helpful if we want to animate gradients or other properties that cannot be animated. Custom properties defined with @property can solve such a problem, but <a href=\"https://caniuse.com/mdn-css_at-rules_property\" rel=\"noopener\">support for it</a> is still lacking at the time of writing.</p>\n\n\n\n<p class=\"is-style-explanation\">I discovered the <code>font-size</code> trick from <a href=\"https://twitter.com/SelenIT2\" rel=\"noopener\">@SelenIT2</a> while trying to solve <a href=\"https://twitter.com/ChallengesCss/status/1539997366606073856\" rel=\"noopener\">a challenge on Twitter</a>.</p>\n\n\n\n<p>Another shape? Let&#8217;s go!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJvpddG\" src=\"//codepen.io/anon/embed/preview/OJvpddG?height=550&amp;theme-id=1&amp;slug-hash=OJvpddG&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJvpddG\" title=\"CodePen Embed OJvpddG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This time we clipped the nested image into the shape of a rhombus. I&#8217;ll let you dissect the code as an exercise to figure out how we got here. You will notice that the structure is the same as in our examples. The only differences are how we&#8217;re using the gradient to create the shape. Dig in and learn!</p>\n\n\n<h3 id=\"circular-image-grid\">Circular Image Grid</h3>\n\n\n<p>We can combine what we&#8217;ve learned here and in previous articles to make an even more exciting image grid. This time, let&#8217;s make all the images in our grid circular and, on hover, expand an image to reveal the entire thing as it covers the rest of the photos.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxWXbXz\" src=\"//codepen.io/anon/embed/preview/xxWXbXz?height=550&amp;theme-id=1&amp;slug-hash=xxWXbXz&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxWXbXz\" title=\"CodePen Embed xxWXbXz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The HTML and CSS structure of the grid is nothing new from before, so let&#8217;s skip that part and focus instead on the circular shape and hover effect we want.</p>\n\n\n\n<p>We are going to use <code>clip-path</code> and its <code>circle()</code> function to — you guessed it! — cut a circle out of the images.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"687\" height=\"339\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659432990294_image.png?resize=687%2C339&#038;ssl=1\" alt=\"Showing the two states of an image, the natural state on the left, and the hovered state on the right, including the clip-path values to create them.\" class=\"wp-image-372401\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659432990294_image.png?w=687&amp;ssl=1 687w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659432990294_image.png?resize=300%2C148&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That figure illustrates the <code>clip-path</code> used for the first image. The left side shows the image&#8217;s initial state, while the right shows the hovered state. You can use <a href=\"https://bennettfeely.com/clippy/\" rel=\"noopener\">this online tool</a> to play and visualize the <code>clip-path</code> values.</p>\n\n\n\n<p>For the other images, we can update the center of the circle (<code>70% 70%</code>) to get the following code:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:hover {\n  --_c: 50%; /* same as \"50% at 50% 50%\" */\n}\n.gallery > img:nth-child(1) {\n  clip-path: circle(var(--_c, 55% at 70% 70%));\n}\n.gallery > img:nth-child(2) {\n  clip-path: circle(var(--_c, 55% at 30% 70%));\n}\n.gallery > img:nth-child(3) {\n  clip-path: circle(var(--_c, 55% at 70% 30%));\n}\n.gallery > img:nth-child(4) {\n  clip-path: circle(var(--_c, 55% at 30% 30%));\n}</code></pre>\n\n\n\n<p>Note how we are defining the <code>clip-path</code> values as a fallback inside <code>var()</code>. This way allows us to more easily update the value on hover by setting the value of the <code>--_c</code> variable. When using <code>circle()</code>, the default position of the center point is <code>50% 50%</code>, so we get to omit that for more concise code. That&#8217;s why you see that we are only setting <code>50%</code> instead of <code>50% at 50% 50%</code>.</p>\n\n\n\n<p>Then we increase the size of our image on hover to the overall size of the grid so we can cover the other images. We also ensure the <code>z-index</code> has a higher value on the hovered image, so it is the top one in our <a href=\"https://css-tricks.com/its-always-the-stacking-context/\">stacking context</a>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 8px;   /* controls the gap between images */\n\n  display: grid;\n  grid: auto-flow var(--s) / repeat(2, var(--s));\n  gap: var(--g);\n}\n\n.gallery > img {\n  width: 100%; \n  aspect-ratio: 1;\n  cursor: pointer;\n  z-index: 0;\n  transition: .25s, z-index 0s .25s;\n}\n.gallery > img:hover {\n  --_c: 50%; /* change the center point on hover */\n  width: calc(200% + var(--g));\n  z-index: 1;\n  transition: .4s, z-index 0s;\n}\n\n.gallery > img:nth-child(1){\n  clip-path: circle(var(--_c, 55% at 70% 70%));\n  place-self: start;\n}\n.gallery > img:nth-child(2){\n  clip-path: circle(var(--_c, 55% at 30% 70%));\n  place-self: start end;\n}\n.gallery > img:nth-child(3){\n  clip-path: circle(var(--_c, 55% at 70% 30%));\n  place-self: end start;\n}\n.gallery > img:nth-child(4){\n  clip-path: circle(var(--_c, 55% at 30% 30%));\n  place-self: end;\n}</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What’s going on with the <code>place-self</code> property? Why do we need it and why does each image have a specific value?</p></blockquote>\n\n\n\n<p>Do you remember the issue we had in the previous article when <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1#aa-css-grid-of-puzzle-pieces\">creating the grid of puzzle pieces</a>? We increased the size of the images to create an overflow, but the overflow of some images was incorrect. We fixed them using the <a href=\"https://css-tricks.com/almanac/properties/p/place-self/\"><code>place-self</code></a> property.</p>\n\n\n\n<p>Same issue here. We are increasing the size of the images so each one overflows its grid cells. But if we do nothing, all of them will overflow on the right and bottom sides of the grid. What we need is:</p>\n\n\n\n<ol><li>the first image to overflow the bottom-right edge (the default behavior),</li><li>the second image to overflow the bottom-left edge,</li><li>the third image to overflow the top-right edge, and</li><li>the fourth image to overflow the top-left edge.</li></ol>\n\n\n\n<p>To get that, we need to place each image correctly using the <code>place-self</code> property.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"420\" height=\"418\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659434107931_image.png?resize=420%2C418&#038;ssl=1\" alt=\"Diagram showing the place-self property values for each quadrant of the grid.\" class=\"wp-image-372403\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659434107931_image.png?w=420&amp;ssl=1 420w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659434107931_image.png?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659434107931_image.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In case you are not familiar with <code>place-self</code>, it&#8217;s the shorthand for <code>justify-self</code> and <code>align-self</code> to place the element horizontally and vertically. When it takes one value, both alignments use that same value.</p>\n\n\n<h3 id=\"expanding-image-panels\">Expanding Image Panels</h3>\n\n\n<p><a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout/\">In a previous article</a>, I created a cool zoom effect that applies to a grid of images where we can control everything: number of rows, number of columns, sizes, scale factor, etc.</p>\n\n\n\n<p>A particular case was the classic expanding panels, where we only have one row and a full-width container.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNzxeOO\" src=\"//codepen.io/anon/embed/preview/WNzxeOO?height=550&amp;theme-id=1&amp;slug-hash=WNzxeOO&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNzxeOO\" title=\"CodePen Embed WNzxeOO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We will take this example and combine it with shapes!</p>\n\n\n\n<p class=\"is-style-explanation\">Before we continue, I highly recommend reading my <a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout/\">other article</a> to understand how the tricks we&#8217;re about to cover work. Check that out, and we&#8217;ll continue here to focus on creating the panel shapes.</p>\n\n\n\n<p>First, let&#8217;s start by simplifying the code and removing some variables</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWVQOoB/53d2002802315ef9ee82a57696baef7e\" src=\"//codepen.io/anon/embed/preview/MWVQOoB/53d2002802315ef9ee82a57696baef7e?height=550&amp;theme-id=1&amp;slug-hash=MWVQOoB/53d2002802315ef9ee82a57696baef7e&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWVQOoB/53d2002802315ef9ee82a57696baef7e\" title=\"CodePen Embed MWVQOoB/53d2002802315ef9ee82a57696baef7e\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We only need one row and the number of columns should adjust based on the number of images. That means we no longer need variables for the number of rows (<code>--n</code>) and columns (<code>--m</code> ) but we need to use <code>grid-auto-flow: column</code>, allowing the grid to auto-generate columns as we add new images. We will consider a fixed height for our container; by default, it will be full-width.</p>\n\n\n\n<p>Let&#8217;s clip the images into a slanted shape:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"310\" height=\"313\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449689269_image.png?resize=310%2C313&#038;ssl=1\" alt=\"A headshot of a calm red wolf looking downward with vertices overlayed showing the clip-path property points.\" class=\"wp-image-372405\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449689269_image.png?w=310&amp;ssl=1 310w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449689269_image.png?resize=297%2C300&amp;ssl=1 297w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449689269_image.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><code>clip-path: polygon(S 0%, 100% 0%, (100% - S) 100%, 0% 100%);</code></figcaption></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de\" src=\"//codepen.io/anon/embed/preview/XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de?height=550&amp;theme-id=1&amp;slug-hash=XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de\" title=\"CodePen Embed XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Once again, each image is contained in its grid cell, so there&#8217;s more space between the images than we&#8217;d like:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1177\" height=\"410\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?resize=1177%2C410&#038;ssl=1\" alt=\"A six-panel grid of slanted images of various wild animals showing the grid lines and gaps.\" class=\"wp-image-372407\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?w=1177&amp;ssl=1 1177w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?resize=300%2C105&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?resize=1024%2C357&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?resize=768%2C268&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We need to increase the width of the images to create an overlap. We replace <code>min-width:</code> <code>100%</code> with <code>min-width: calc(100% + var(--s))</code>, where <code>--s</code> is a new variable that controls the shape.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30\" src=\"//codepen.io/anon/embed/preview/vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30?height=550&amp;theme-id=1&amp;slug-hash=vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30\" title=\"CodePen Embed vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now we need to fix the first and last images, so they sort of bleed off the page without gaps. In other words, we can remove the slant from the left side of the first image and the slant from the right side of the last image. We need a new <code>clip-path</code> specifically for those two images.</p>\n\n\n\n<p>We also need to rectify the overflow. By default, all the images will overflow on both sides, but for the first one, we need an overflow on the right side while we need a left overflow for the last image.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:first-child {\n  min-width: calc(100% + var(--s)/2);\n  place-self: start;\n  clip-path: polygon(0 0,100% 0,calc(100% - var(--s)) 100%,0 100%);\n}\n.gallery > img:last-child {\n  min-width: calc(100% + var(--s)/2);\n  place-self: end;\n  clip-path: polygon(var(--s) 0,100% 0,100% 100%,0 100%);\n}</code></pre>\n\n\n\n<p>The final result is a nice expanding panel of slanted images!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxMmVr\" src=\"//codepen.io/anon/embed/preview/mdxMmVr?height=550&amp;theme-id=1&amp;slug-hash=mdxMmVr&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxMmVr\" title=\"CodePen Embed mdxMmVr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We can add as many images as you want, and the grid will adjust automatically. Plus, we only need to control one value to control the shape!</p>\n\n\n\n<p>We could have made this same layout with flexbox since we are dealing with a single row of elements. Here is <a href=\"https://codepen.io/t_afif/pen/WNzEjjz\" rel=\"noopener\">my implementation</a>.</p>\n\n\n\n<p>Sure, slanted images are cool, but what about a zig-zag pattern? I already teased this one at <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1#aa-wrapping-up\">the end of the last article</a>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvmrbje/4c5661d94923554d54b49cbe96a13545\" src=\"//codepen.io/anon/embed/preview/wvmrbje/4c5661d94923554d54b49cbe96a13545?height=550&amp;theme-id=1&amp;slug-hash=wvmrbje/4c5661d94923554d54b49cbe96a13545&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvmrbje/4c5661d94923554d54b49cbe96a13545\" title=\"CodePen Embed wvmrbje/4c5661d94923554d54b49cbe96a13545\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>All I&#8217;m doing here is replacing <code>clip-path</code> with <code>mask</code>… and guess what? I already have a detailed article on <a href=\"https://css-tricks.com/css-borders-using-masks/\">creating that zig-zag shape</a> — not to mention <a href=\"https://css-tricks.com/css-borders-using-masks/\"></a>an online <a href=\"https://css-generators.com/custom-borders/\" rel=\"noopener\">generator to get the code</a>. See how all everything comes together?</p>\n\n\n\n<p>The trickiest part here is to make sure the zig-zags are perfectly aligned, and for this, we need to add an offset for every <code>:nth-child(odd)</code> image element.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img {\n  mask: \n    conic-gradient(from -135deg at right, #0000, #000 1deg 89deg, #0000 90deg) \n      100% calc(50% + var(--_p, 0%))/51% calc(2*var(--s)) repeat-y,\n    conic-gradient(from   45deg at left,  #0000, #000 1deg 89deg, #0000 90deg) \n      0%   calc(50% + var(--_p, 0%))/51% calc(2*var(--s)) repeat-y;\n}\n/* we add an offset to the odd elements */\n.gallery > img:nth-child(odd) {\n  --_p: var(--s);\n}\n.gallery > img:first-child {\n  mask: \n    conic-gradient(from -135deg at right, #0000, #000 1deg 89deg, #0000 90deg) \n      0 calc(50% + var(--_p, 0%))/100% calc(2*var(--s));\n}\n.gallery > img:last-child {\n  mask: \n    conic-gradient(from 45deg at left, #0000, #000 1deg 89deg, #0000 90deg) \n      0 calc(50% + var(--_p, 0%)) /100% calc(2*var(--s));\n}</code></pre>\n\n\n\n<p>Note the use of the <code>--_p</code> variable, which will fall back to <code>0%</code> but will be equal to <code>--_s</code> for the odd images.</p>\n\n\n\n<p>Here is a demo that illustrates the issue. Hover to see how the offset — defined by <code>--_p</code> — is fixing the alignment.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d\" src=\"//codepen.io/anon/embed/preview/YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d?height=550&amp;theme-id=1&amp;slug-hash=YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d\" title=\"CodePen Embed YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Also, notice how we use a different mask for the first and last image as we did in the previous example. We only need a zig-zag on the right side of the first image and the left side of the last image.</p>\n\n\n\n<p>And why not rounded sides? Let&#8217;s do it!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac\" src=\"//codepen.io/anon/embed/preview/PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac?height=550&amp;theme-id=1&amp;slug-hash=PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac\" title=\"CodePen Embed PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I know that the code may look scary and tough to understand, but all that&#8217;s going on is a combination of different tricks we&#8217;ve covered in this and other articles I&#8217;ve already shared. In this case, I use the same code structure as the zig-zag and the slanted shapes. Compare it with those examples, and you will find no difference! Those are the same tricks in <a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout/\">my previous article about the zoom effect</a>. Then, I am using my <a href=\"https://css-tricks.com/css-borders-using-masks/\">other writing</a> and <a href=\"https://css-generators.com/custom-borders/\" rel=\"noopener\">my online generator</a> to get the code for the mask that creates those rounded shapes.</p>\n\n\n\n<p>If you recall what we did for the zig-zag, we had used the same mask for all the images but then had to add an offset to the odd images to create a perfect overlap. In this case, we need a different mask for the odd-numbered images.</p>\n\n\n\n<p>The first mask:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask: \n  linear-gradient(-90deg,#0000 calc(2*var(--s)),#000 0) var(--s),\n  radial-gradient(var(--s),#000 98%,#0000) 50% / calc(2*var(--s)) calc(1.8*var(--s)) space repeat;</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659477832525_image.png\" alt=\"\"/></figure>\n\n\n\n<p>The second one:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  radial-gradient(calc(var(--s) + var(--g)) at calc(var(--s) + var(--g)) 50%,#0000 98% ,#000) \n  calc(50% - var(--s) - var(--g)) / 100% calc(1.8*var(--s))</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659477972929_image.png\" alt=\"\"/></figure>\n\n\n\n<p>The only effort I did here is update the second mask to include the gap variable (<code>--g</code>) to create that space between the images.</p>\n\n\n\n<p>The final touch is to fix the first and last image. Like all the previous examples, the first image needs a straight left edge while the last one needs a straight right edge.</p>\n\n\n\n<p>For the first image, we always know the mask it needs to have, which is the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:first-child {\n  mask: \n    radial-gradient(calc(var(--s) + var(--g)) at right, #0000 98%, #000) 50% / 100% calc(1.8 * var(--s));\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"225\" height=\"364\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041272028_image.png?resize=225%2C364&#038;ssl=1\" alt=\"A brown bear headshot with a wavy pattern for the right border.\" class=\"wp-image-372410\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041272028_image.png?w=225&amp;ssl=1 225w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041272028_image.png?resize=185%2C300&amp;ssl=1 185w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>For the last image, it depends on the number of elements, so it matters if that element is <code>:nth-child(odd)</code> or <code>:nth-child(even)</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"887\" height=\"368\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041502555_image.png?resize=887%2C368&#038;ssl=1\" alt=\"The complete grid of wild animal photos with all of the correct borders and gaps between images.\" class=\"wp-image-372411\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041502555_image.png?w=887&amp;ssl=1 887w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041502555_image.png?resize=300%2C124&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041502555_image.png?resize=768%2C319&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:last-child:nth-child(even) {\n  mask: \n    linear-gradient(to right,#0000 var(--s),#000 0),\n    radial-gradient(var(--s),#000 98%,#0000) left / calc(2*var(--s)) calc(1.8*var(--s)) repeat-y\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"782\" height=\"366\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041680278_image.png?resize=782%2C366&#038;ssl=1\" alt=\"A single-row grid of three wild animal photos with wavy borders where the last image is an odd-numbered element.\" class=\"wp-image-372412\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041680278_image.png?w=782&amp;ssl=1 782w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041680278_image.png?resize=300%2C140&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041680278_image.png?resize=768%2C359&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:last-child:nth-child(odd) {\n  mask: \n    radial-gradient(calc(var(--s) + var(--g)) at left,#0000 98%,#000) 50% / 100% calc(1.8*var(--s))\n}</code></pre>\n\n\n\n<p>That&#8217;s all! Three different layouts but the same CSS tricks each time:</p>\n\n\n\n<ul><li>the code structure to create the zoom effect</li><li>a mask or clip-path to create the shapes</li><li>a separate configuration for the odd elements in some cases to make sure we have a perfect overlap</li><li>a specific configuration for the first and last image to keep the shape on only one side.</li></ul>\n\n\n\n<p>And here is a big demo with all of them together. All you need is to add a class to activate the layout you want to see.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed\" src=\"//codepen.io/anon/embed/preview/oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed?height=700&amp;theme-id=1&amp;slug-hash=oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed\" title=\"CodePen Embed oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And here is the one with the Flexbox implementation</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWmVjoy/0eb497048c318128429327316dbf0687\" src=\"//codepen.io/anon/embed/preview/QWmVjoy/0eb497048c318128429327316dbf0687?height=700&amp;theme-id=1&amp;slug-hash=QWmVjoy/0eb497048c318128429327316dbf0687&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWmVjoy/0eb497048c318128429327316dbf0687\" title=\"CodePen Embed QWmVjoy/0eb497048c318128429327316dbf0687\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>Oof, we are done! I know there are many CSS tricks and examples between this article and the last one, not to mention all of the other tricks I&#8217;ve referenced here from other articles I&#8217;ve written. It took me time to put everything together, and you don&#8217;t have to understand everything at once. One reading will give you a good overview of all the layouts, but you may need to read the article more than once and focus on each example to grasp all the tricks.</p>\n\n\n\n<p>Did you notice that we didn&#8217;t touch the HTML at all other than perhaps the number of images in the markup? All the layouts we made share the same HTML code, which is nothing but a list of images.</p>\n\n\n\n<p>Before I end, I will leave you with one last example. It&#8217;s a &#8220;versus&#8221; between two anime characters with a cool hover effect.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BarmdPB\" src=\"//codepen.io/anon/embed/preview/BarmdPB?height=600&amp;theme-id=1&amp;slug-hash=BarmdPB&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BarmdPB\" title=\"CodePen Embed BarmdPB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>What about you? Can you create something based on what you have learned? It doesn&#8217;t need to be complex — imagine something cool or funny like I did with that anime matchup. It can be a good exercise for you, and we may end with an excellent collection in the comment section.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-2/\">CSS Grid and Custom Shapes, Part 2</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Alright, so the last time we checked in, we were using CSS Grid and combining them with CSS clip-path and mask techniques to create grids with fancy shapes.\n\n\n\nHere’s just one of the fantastic grids we made together:\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\n\nReady for the second round? We are still working with CSS Grid, clip-path, and mask, but by the end of this article, we’ll end up with different ways to arrange images on the grid, including some rad hover effects that make for an authentic, interactive experience to view pictures.\n\n\n\nAnd guess what? We’re using the same markup that we used last time. Here’s that again:\n\n\n\n<div class=\"gallery\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n  <!-- as many times as we want -->\n</div>\n\n\n\nLike the previous article, we only need a container with images inside. Nothing more!\n\n\nNested Image Grid\n\n\nLast time, our grids were, well, typical image grids. Other than the neat shapes we masked them with, they were pretty standard symmetrical grids as far as how we positioned the images inside.\n\n\n\nLet’s try nesting an image in the center of the grid:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe start by setting a 2✕2 grid for four images:\n\n\n\n.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 10px; /* controls the gap between images */\n\n  display: grid;\n  gap: var(--g);\n  grid-template-columns: repeat(2, auto);\n}\n.gallery > img {\n  width: var(--s);\n  aspect-ratio: 1;\n  object-fit: cover;\n}\n\n\n\nNothing complex yet. The next step is to cut the corner of our images to create the space for the nested image. I already have a detailed article on how to cut corners using clip-path and mask. You can also use my online generator to get the CSS for masking corners.\n\n\n\nWhat we need here is to cut out the corners at an angle equal to 90deg. We can use the same conic-gradient technique from that article to do that:\n\n\n\n.gallery > img {\n   mask: conic-gradient(from var(--_a), #0000 90deg, #000 0);\n}\n.gallery > img:nth-child(1) { --_a: 90deg; }\n.gallery > img:nth-child(2) { --_a: 180deg; }\n.gallery > img:nth-child(3) { --_a: 0deg; }\n.gallery > img:nth-child(4) { --_a:-90deg; }\n\n\n\nWe could use the clip-path method for cutting corners from that same article, but masking with gradients is more suitable here because we have the same configuration for all the images — all we need is a rotation (defined with the variable --_a) get the effect, so we’re masking from the inside instead of the outside edges.\n\n\n\n\n\n\n\nNow we can place the nested image inside the masked space. First, let’s make sure we have a fifth image element in the HTML:\n\n\n\n<div class=\"gallery\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n</div>\n\n\n\nWe are going to rely on the good ol’ absolute positioning to place it in there:\n\n\n\n.gallery > img:nth-child(5) {\n  position: absolute;\n  inset: calc(50% - .5*var(--s));\n  clip-path: inset(calc(var(--g) / 4));\n}\n\n\n\nThe inset property allows us to place the image at the center using a single declaration. We know the size of the image (defined with the variable --s), and we know that the container’s size equals 100%. We do some math, and the distance from each edge should be equal to (100% - var(--s))/2.\n\n\n\n\n\n\n\nYou might be wondering why we’re using clip-path at all here. We’re using it with the nested image to have a consistent gap. If we were to remove it, you would notice that we don’t have the same gap between all the images. This way, we’re cutting a little bit from the fifth image to get the proper spacing around it.\n\n\n\nThe complete code again:\n\n\n\n.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 10px;  /* controls the gap between images */\n  \n  display: grid;\n  gap: var(--g);\n  grid-template-columns: repeat(2, auto);\n  position: relative;\n}\n\n.gallery > img {\n  width: var(--s);\n  aspect-ratio: 1;\n  object-fit: cover;\n  mask: conic-gradient(from var(--_a), #0000 90deg, #000 0);\n}\n\n.gallery > img:nth-child(1) {--_a: 90deg}\n.gallery > img:nth-child(2) {--_a:180deg}\n.gallery > img:nth-child(3) {--_a:  0deg}\n.gallery > img:nth-child(4) {--_a:-90deg}\n.gallery > img:nth-child(5) {\n  position: absolute;\n  inset: calc(50% - .5*var(--s));\n  clip-path: inset(calc(var(--g) / 4));\n}\n\n\n\nNow, many of you might also be wondering: why all the complex stuff when we can place the last image on the top and add a border to it? That would hide the images underneath the nested image without a mask, right?\n\n\n\nThat’s true, and we will get the following:\n\n\n\nCodePen Embed Fallback\n\n\n\nNo mask, no clip-path. Yes, the code is easy to understand, but there is a little drawback: the border color needs to be the same as the main background to make the illusion perfect. This little drawback is enough for me to make the code more complex in exchange for real transparency independent of the background. I am not saying a border approach is bad or wrong. I would recommend it in most cases where the background is known. But we are here to explore new stuff and, most important, build components that don’t depend on their environment.\n\n\n\nLet’s try another shape this time:\n\n\n\nCodePen Embed Fallback\n\n\n\nThis time, we made the nested image a circle instead of a square. That’s an easy task with border-radius But we need to use a circular cut-out for the other images. This time, though, we will rely on a radial-gradient() instead of a conic-gradient() to get that nice rounded look.\n\n\n\n.gallery > img {\n  mask: \n    radial-gradient(farthest-side at var(--_a),\n      #0000 calc(50% + var(--g)/2), #000 calc(51% + var(--g)/2));\n}\n.gallery > img:nth-child(1) { --_a: calc(100% + var(--g)/2) calc(100% + var(--g)/2); }\n.gallery > img:nth-child(2) { --_a: calc(0%   - var(--g)/2) calc(100% + var(--g)/2); }\n.gallery > img:nth-child(3) { --_a: calc(100% + var(--g)/2) calc(0%   - var(--g)/2); }\n.gallery > img:nth-child(4) { --_a: calc(0%   - var(--g)/2) calc(0%   - var(--g)/2); }\n\n\n\nAll the images use the same configuration as the previous example, but we update the center point each time.\n\n\n\n\n\n\n\nThe above figure illustrates the center point for each circle. Still, in the actual code, you will notice that I am also accounting for the gap to ensure all the points are at the same position (the center of the grid) to get a continuous circle if we combine them.\n\n\n\nNow that we have our layout let’s talk about the hover effect. In case you didn’t notice, a cool hover effect increases the size of the nested image and adjusts everything else accordingly. Increasing the size is a relatively easy task, but updating the gradient is more complicated since, by default, gradients cannot be animated. To overcome this, I will use a font-size hack to be able to animate the radial gradient.\n\n\n\nIf you check the code of the gradient, you can see that I am adding 1em:\n\n\n\nmask: \n    radial-gradient(farthest-side at var(--_a),\n      #0000 calc(50% + var(--g)/2 + 1em), #000 calc(51% + var(--g)/2 + 1em));\n\n\n\nIt’s known that em units are relative to the parent element’s font-size, so changing the font-size of the .gallery will also change the computed em value — this is the trick we are using. We are animating the font-size from a value of 0 to a given value and, as a result, the gradient is animated, making the cut-out part larger, following the size of the nested image that is getting bigger.\n\n\n\nHere is the code that highlights the parts involved in the hover effect:\n\n\n\n.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 10px; /* controls the gaps between images */\n\n  font-size: 0; /* initially we have 1em = 0 */\n  transition: .5s;\n}\n/* we increase the cut-out by 1em */\n.gallery > img {\n  mask: \n    radial-gradient(farthest-side at var(--_a),\n      #0000 calc(50% + var(--g)/2 + 1em), #000 calc(51% + var(--g)/2 + 1em));\n}\n/* we increase the size by 2em */\n.gallery > img:nth-child(5) {\n  width: calc(var(--s) + 2em);\n}\n/* on hover 1em = S/5 */\n.gallery:hover {\n  font-size: calc(var(--s) / 5);\n}\n\n\n\nThe font-size trick is helpful if we want to animate gradients or other properties that cannot be animated. Custom properties defined with @property can solve such a problem, but support for it is still lacking at the time of writing.\n\n\n\nI discovered the font-size trick from @SelenIT2 while trying to solve a challenge on Twitter.\n\n\n\nAnother shape? Let’s go!\n\n\n\nCodePen Embed Fallback\n\n\n\nThis time we clipped the nested image into the shape of a rhombus. I’ll let you dissect the code as an exercise to figure out how we got here. You will notice that the structure is the same as in our examples. The only differences are how we’re using the gradient to create the shape. Dig in and learn!\n\n\nCircular Image Grid\n\n\nWe can combine what we’ve learned here and in previous articles to make an even more exciting image grid. This time, let’s make all the images in our grid circular and, on hover, expand an image to reveal the entire thing as it covers the rest of the photos.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe HTML and CSS structure of the grid is nothing new from before, so let’s skip that part and focus instead on the circular shape and hover effect we want.\n\n\n\nWe are going to use clip-path and its circle() function to — you guessed it! — cut a circle out of the images.\n\n\n\n\n\n\n\nThat figure illustrates the clip-path used for the first image. The left side shows the image’s initial state, while the right shows the hovered state. You can use this online tool to play and visualize the clip-path values.\n\n\n\nFor the other images, we can update the center of the circle (70% 70%) to get the following code:\n\n\n\n.gallery > img:hover {\n  --_c: 50%; /* same as \"50% at 50% 50%\" */\n}\n.gallery > img:nth-child(1) {\n  clip-path: circle(var(--_c, 55% at 70% 70%));\n}\n.gallery > img:nth-child(2) {\n  clip-path: circle(var(--_c, 55% at 30% 70%));\n}\n.gallery > img:nth-child(3) {\n  clip-path: circle(var(--_c, 55% at 70% 30%));\n}\n.gallery > img:nth-child(4) {\n  clip-path: circle(var(--_c, 55% at 30% 30%));\n}\n\n\n\nNote how we are defining the clip-path values as a fallback inside var(). This way allows us to more easily update the value on hover by setting the value of the --_c variable. When using circle(), the default position of the center point is 50% 50%, so we get to omit that for more concise code. That’s why you see that we are only setting 50% instead of 50% at 50% 50%.\n\n\n\nThen we increase the size of our image on hover to the overall size of the grid so we can cover the other images. We also ensure the z-index has a higher value on the hovered image, so it is the top one in our stacking context.\n\n\n\n.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 8px;   /* controls the gap between images */\n\n  display: grid;\n  grid: auto-flow var(--s) / repeat(2, var(--s));\n  gap: var(--g);\n}\n\n.gallery > img {\n  width: 100%; \n  aspect-ratio: 1;\n  cursor: pointer;\n  z-index: 0;\n  transition: .25s, z-index 0s .25s;\n}\n.gallery > img:hover {\n  --_c: 50%; /* change the center point on hover */\n  width: calc(200% + var(--g));\n  z-index: 1;\n  transition: .4s, z-index 0s;\n}\n\n.gallery > img:nth-child(1){\n  clip-path: circle(var(--_c, 55% at 70% 70%));\n  place-self: start;\n}\n.gallery > img:nth-child(2){\n  clip-path: circle(var(--_c, 55% at 30% 70%));\n  place-self: start end;\n}\n.gallery > img:nth-child(3){\n  clip-path: circle(var(--_c, 55% at 70% 30%));\n  place-self: end start;\n}\n.gallery > img:nth-child(4){\n  clip-path: circle(var(--_c, 55% at 30% 30%));\n  place-self: end;\n}\n\n\n\nWhat’s going on with the place-self property? Why do we need it and why does each image have a specific value?\n\n\n\nDo you remember the issue we had in the previous article when creating the grid of puzzle pieces? We increased the size of the images to create an overflow, but the overflow of some images was incorrect. We fixed them using the place-self property.\n\n\n\nSame issue here. We are increasing the size of the images so each one overflows its grid cells. But if we do nothing, all of them will overflow on the right and bottom sides of the grid. What we need is:\n\n\n\nthe first image to overflow the bottom-right edge (the default behavior),the second image to overflow the bottom-left edge,the third image to overflow the top-right edge, andthe fourth image to overflow the top-left edge.\n\n\n\nTo get that, we need to place each image correctly using the place-self property.\n\n\n\n\n\n\n\nIn case you are not familiar with place-self, it’s the shorthand for justify-self and align-self to place the element horizontally and vertically. When it takes one value, both alignments use that same value.\n\n\nExpanding Image Panels\n\n\nIn a previous article, I created a cool zoom effect that applies to a grid of images where we can control everything: number of rows, number of columns, sizes, scale factor, etc.\n\n\n\nA particular case was the classic expanding panels, where we only have one row and a full-width container.\n\n\n\nCodePen Embed Fallback\n\n\n\nWe will take this example and combine it with shapes!\n\n\n\nBefore we continue, I highly recommend reading my other article to understand how the tricks we’re about to cover work. Check that out, and we’ll continue here to focus on creating the panel shapes.\n\n\n\nFirst, let’s start by simplifying the code and removing some variables\n\n\n\nCodePen Embed Fallback\n\n\n\nWe only need one row and the number of columns should adjust based on the number of images. That means we no longer need variables for the number of rows (--n) and columns (--m ) but we need to use grid-auto-flow: column, allowing the grid to auto-generate columns as we add new images. We will consider a fixed height for our container; by default, it will be full-width.\n\n\n\nLet’s clip the images into a slanted shape:\n\n\n\nclip-path: polygon(S 0%, 100% 0%, (100% - S) 100%, 0% 100%);\n\n\n\nCodePen Embed Fallback\n\n\n\nOnce again, each image is contained in its grid cell, so there’s more space between the images than we’d like:\n\n\n\n\n\n\n\nWe need to increase the width of the images to create an overlap. We replace min-width: 100% with min-width: calc(100% + var(--s)), where --s is a new variable that controls the shape.\n\n\n\nCodePen Embed Fallback\n\n\n\nNow we need to fix the first and last images, so they sort of bleed off the page without gaps. In other words, we can remove the slant from the left side of the first image and the slant from the right side of the last image. We need a new clip-path specifically for those two images.\n\n\n\nWe also need to rectify the overflow. By default, all the images will overflow on both sides, but for the first one, we need an overflow on the right side while we need a left overflow for the last image.\n\n\n\n.gallery > img:first-child {\n  min-width: calc(100% + var(--s)/2);\n  place-self: start;\n  clip-path: polygon(0 0,100% 0,calc(100% - var(--s)) 100%,0 100%);\n}\n.gallery > img:last-child {\n  min-width: calc(100% + var(--s)/2);\n  place-self: end;\n  clip-path: polygon(var(--s) 0,100% 0,100% 100%,0 100%);\n}\n\n\n\nThe final result is a nice expanding panel of slanted images!\n\n\n\nCodePen Embed Fallback\n\n\n\nWe can add as many images as you want, and the grid will adjust automatically. Plus, we only need to control one value to control the shape!\n\n\n\nWe could have made this same layout with flexbox since we are dealing with a single row of elements. Here is my implementation.\n\n\n\nSure, slanted images are cool, but what about a zig-zag pattern? I already teased this one at the end of the last article.\n\n\n\nCodePen Embed Fallback\n\n\n\nAll I’m doing here is replacing clip-path with mask… and guess what? I already have a detailed article on creating that zig-zag shape — not to mention an online generator to get the code. See how all everything comes together?\n\n\n\nThe trickiest part here is to make sure the zig-zags are perfectly aligned, and for this, we need to add an offset for every :nth-child(odd) image element.\n\n\n\n.gallery > img {\n  mask: \n    conic-gradient(from -135deg at right, #0000, #000 1deg 89deg, #0000 90deg) \n      100% calc(50% + var(--_p, 0%))/51% calc(2*var(--s)) repeat-y,\n    conic-gradient(from   45deg at left,  #0000, #000 1deg 89deg, #0000 90deg) \n      0%   calc(50% + var(--_p, 0%))/51% calc(2*var(--s)) repeat-y;\n}\n/* we add an offset to the odd elements */\n.gallery > img:nth-child(odd) {\n  --_p: var(--s);\n}\n.gallery > img:first-child {\n  mask: \n    conic-gradient(from -135deg at right, #0000, #000 1deg 89deg, #0000 90deg) \n      0 calc(50% + var(--_p, 0%))/100% calc(2*var(--s));\n}\n.gallery > img:last-child {\n  mask: \n    conic-gradient(from 45deg at left, #0000, #000 1deg 89deg, #0000 90deg) \n      0 calc(50% + var(--_p, 0%)) /100% calc(2*var(--s));\n}\n\n\n\nNote the use of the --_p variable, which will fall back to 0% but will be equal to --_s for the odd images.\n\n\n\nHere is a demo that illustrates the issue. Hover to see how the offset — defined by --_p — is fixing the alignment.\n\n\n\nCodePen Embed Fallback\n\n\n\nAlso, notice how we use a different mask for the first and last image as we did in the previous example. We only need a zig-zag on the right side of the first image and the left side of the last image.\n\n\n\nAnd why not rounded sides? Let’s do it!\n\n\n\nCodePen Embed Fallback\n\n\n\nI know that the code may look scary and tough to understand, but all that’s going on is a combination of different tricks we’ve covered in this and other articles I’ve already shared. In this case, I use the same code structure as the zig-zag and the slanted shapes. Compare it with those examples, and you will find no difference! Those are the same tricks in my previous article about the zoom effect. Then, I am using my other writing and my online generator to get the code for the mask that creates those rounded shapes.\n\n\n\nIf you recall what we did for the zig-zag, we had used the same mask for all the images but then had to add an offset to the odd images to create a perfect overlap. In this case, we need a different mask for the odd-numbered images.\n\n\n\nThe first mask:\n\n\n\nmask: \n  linear-gradient(-90deg,#0000 calc(2*var(--s)),#000 0) var(--s),\n  radial-gradient(var(--s),#000 98%,#0000) 50% / calc(2*var(--s)) calc(1.8*var(--s)) space repeat;\n\n\n\n\n\n\n\nThe second one:\n\n\n\nmask:\n  radial-gradient(calc(var(--s) + var(--g)) at calc(var(--s) + var(--g)) 50%,#0000 98% ,#000) \n  calc(50% - var(--s) - var(--g)) / 100% calc(1.8*var(--s))\n\n\n\n\n\n\n\nThe only effort I did here is update the second mask to include the gap variable (--g) to create that space between the images.\n\n\n\nThe final touch is to fix the first and last image. Like all the previous examples, the first image needs a straight left edge while the last one needs a straight right edge.\n\n\n\nFor the first image, we always know the mask it needs to have, which is the following:\n\n\n\n.gallery > img:first-child {\n  mask: \n    radial-gradient(calc(var(--s) + var(--g)) at right, #0000 98%, #000) 50% / 100% calc(1.8 * var(--s));\n}\n\n\n\n\n\n\n\nFor the last image, it depends on the number of elements, so it matters if that element is :nth-child(odd) or :nth-child(even).\n\n\n\n\n\n\n\n.gallery > img:last-child:nth-child(even) {\n  mask: \n    linear-gradient(to right,#0000 var(--s),#000 0),\n    radial-gradient(var(--s),#000 98%,#0000) left / calc(2*var(--s)) calc(1.8*var(--s)) repeat-y\n}\n\n\n\n\n\n\n\n.gallery > img:last-child:nth-child(odd) {\n  mask: \n    radial-gradient(calc(var(--s) + var(--g)) at left,#0000 98%,#000) 50% / 100% calc(1.8*var(--s))\n}\n\n\n\nThat’s all! Three different layouts but the same CSS tricks each time:\n\n\n\nthe code structure to create the zoom effecta mask or clip-path to create the shapesa separate configuration for the odd elements in some cases to make sure we have a perfect overlapa specific configuration for the first and last image to keep the shape on only one side.\n\n\n\nAnd here is a big demo with all of them together. All you need is to add a class to activate the layout you want to see.\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd here is the one with the Flexbox implementation\n\n\n\nCodePen Embed Fallback\n\n\nWrapping up\n\n\nOof, we are done! I know there are many CSS tricks and examples between this article and the last one, not to mention all of the other tricks I’ve referenced here from other articles I’ve written. It took me time to put everything together, and you don’t have to understand everything at once. One reading will give you a good overview of all the layouts, but you may need to read the article more than once and focus on each example to grasp all the tricks.\n\n\n\nDid you notice that we didn’t touch the HTML at all other than perhaps the number of images in the markup? All the layouts we made share the same HTML code, which is nothing but a list of images.\n\n\n\nBefore I end, I will leave you with one last example. It’s a “versus” between two anime characters with a cool hover effect.\n\n\n\nCodePen Embed Fallback\n\n\n\nWhat about you? Can you create something based on what you have learned? It doesn’t need to be complex — imagine something cool or funny like I did with that anime matchup. It can be a good exercise for you, and we may end with an excellent collection in the comment section.\n\nCSS Grid and Custom Shapes, Part 2 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372396",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-22T14:08:39.000Z",
      "date_modified": "2022-08-22T14:08:39.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=372539",
      "url": "https://css-tricks.com/when-do-you-use-css-columns/",
      "title": "When Do You Use CSS Columns?",
      "summary": "That ain’t rhetorical: I’m really interested in finding great use cases for CSS multi-column layouts.\nThe answer seems straightforward. Use columns when you want to split any content into columns, right? Here is generally the sort of example you’ll find …\n\nWhen Do You Use CSS Columns? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>That ain&#8217;t rhetorical: I&#8217;m really interested in finding great use cases for CSS multi-column layouts.</p>\n\n\n\n<p>The answer seems straightforward. Use columns when you want to split any content into columns, right? Here is generally the sort of example you&#8217;ll find in articles that show how CSS mutli-column layouts work, including our very own <a href=\"https://css-tricks.com/almanac/properties/c/columns/\">Almanac</a>:</p>\n\n\n\n<span id=\"more-372539\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLKQNYP\" src=\"//codepen.io/anon/embed/yLKQNYP?height=450&amp;theme-id=1&amp;slug-hash=yLKQNYP&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLKQNYP\" title=\"CodePen Embed yLKQNYP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Right on. But is this an actual use case? <em>Mmmmmaybe.</em> If the text is relatively brief, then perhaps it&#8217;s a nice touch. That&#8217;s how I sold it to myself when redesigning my website a <a href=\"https://geoffgraham.me/website-redesign-the-homepage/\" rel=\"noopener\">few years ago</a>. It&#8217;s not that way today, but this is what it looked like then:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1440\" height=\"1662\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=1440%2C1662&#038;ssl=1\" alt=\"\" class=\"wp-image-372542\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?w=1440&amp;ssl=1 1440w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=260%2C300&amp;ssl=1 260w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=887%2C1024&amp;ssl=1 887w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=768%2C886&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=1331%2C1536&amp;ssl=1 1331w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But an entire long-form article split into columns? I love it in newspapers but am hesitant to scroll down a webpage to read one column, only to scroll back up to do it again.</p>\n\n\n\n<p>I suppose we can use it to place two elements side-by-side, but flexbox is way more suited for that. Plus, a limitation prevents us from selecting the columns to size them individually. The columns have to be the same width.</p>\n\n\n\n<p>One thing columns have going for them is that they are the only CSS layout method that <em>fragments</em> content. (That is, unless we&#8217;re counting <a href=\"https://drafts.csswg.org/css-regions/\" rel=\"noopener\">CSS Regions</a>&#8230; what happened to those, anyway?!) So, if you wanna split a paragraph up into columns, it&#8217;s already possible without additional wrappers.</p>\n\n\n\n<p>When else might you need to split a continuous block of content into columns? I remember needing to do that when I had a big ol&#8217; unordered list of items. I like the way lists can make content easy to scan, but long lists can make one side of the page look super heavy. Let&#8217;s say, for example, that we were listing out all the post tags for CSS-Tricks in alphabetical groups. A multi-column layout works beautifully for that:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMQNKQ\" src=\"//codepen.io/anon/embed/eYMQNKQ?height=450&amp;theme-id=1&amp;slug-hash=eYMQNKQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMQNKQ\" title=\"CodePen Embed eYMQNKQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Go ahead and try resizing the viewport width. Three columns are defined but the number will change based on the amount of available space. Gotta love all that responsive goodness without the media query work!</p>\n\n\n\n<p>I was working on a demo for the <code>:left</code> pseudo-class and reached for <code>columns</code> because it’s a great way to fragment things for printing demos. So, I guess there’s another use case. And while making a demo, I realized that a multi-column layout could be used to create a masonry grid of items, like an image gallery:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBoQOWd\" src=\"//codepen.io/anon/embed/qBoQOWd?height=450&amp;theme-id=1&amp;slug-hash=qBoQOWd&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBoQOWd\" title=\"CodePen Embed qBoQOWd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But what else? Are we limited to short paragraphs, long lists, and free-flowing grids?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/when-do-you-use-css-columns/\">When Do You Use CSS Columns?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "That ain’t rhetorical: I’m really interested in finding great use cases for CSS multi-column layouts.\n\n\n\nThe answer seems straightforward. Use columns when you want to split any content into columns, right? Here is generally the sort of example you’ll find in articles that show how CSS mutli-column layouts work, including our very own Almanac:\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\n\nRight on. But is this an actual use case? Mmmmmaybe. If the text is relatively brief, then perhaps it’s a nice touch. That’s how I sold it to myself when redesigning my website a few years ago. It’s not that way today, but this is what it looked like then:\n\n\n\n\n\n\n\nBut an entire long-form article split into columns? I love it in newspapers but am hesitant to scroll down a webpage to read one column, only to scroll back up to do it again.\n\n\n\nI suppose we can use it to place two elements side-by-side, but flexbox is way more suited for that. Plus, a limitation prevents us from selecting the columns to size them individually. The columns have to be the same width.\n\n\n\nOne thing columns have going for them is that they are the only CSS layout method that fragments content. (That is, unless we’re counting CSS Regions… what happened to those, anyway?!) So, if you wanna split a paragraph up into columns, it’s already possible without additional wrappers.\n\n\n\nWhen else might you need to split a continuous block of content into columns? I remember needing to do that when I had a big ol’ unordered list of items. I like the way lists can make content easy to scan, but long lists can make one side of the page look super heavy. Let’s say, for example, that we were listing out all the post tags for CSS-Tricks in alphabetical groups. A multi-column layout works beautifully for that:\n\n\n\nCodePen Embed Fallback\n\n\n\nGo ahead and try resizing the viewport width. Three columns are defined but the number will change based on the amount of available space. Gotta love all that responsive goodness without the media query work!\n\n\n\nI was working on a demo for the :left pseudo-class and reached for columns because it’s a great way to fragment things for printing demos. So, I guess there’s another use case. And while making a demo, I realized that a multi-column layout could be used to create a masonry grid of items, like an image gallery:\n\n\n\nCodePen Embed Fallback\n\n\n\nBut what else? Are we limited to short paragraphs, long lists, and free-flowing grids?\n\nWhen Do You Use CSS Columns? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/372539",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-18T13:24:48.000Z",
      "date_modified": "2022-08-18T13:24:48.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367045",
      "url": "https://css-tricks.com/why-and-how-i-write-code-with-pencil-and-paper/",
      "title": "Why (and How) I Write Code With Pencil and Paper",
      "summary": "If the thought of handwriting code seems silly, it might surprise you to know that it’s inevitable. If you’re unsure, think about the last job interview you did, and remember how there was no computer around in the interview room …\n\nWhy (and How) I Write Code With Pencil and Paper originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>If the thought of handwriting code seems silly, it might surprise you to know that it&#8217;s inevitable. If you&#8217;re unsure, think about the last job interview you did, and remember how there was no computer around in the interview room — just your interviewers, a blank sheet of paper, and a blue ball-point pen.</p>\n\n\n\n<p>For the students among you, it&#8217;s even a bigger deal as your grades hang in by the lines of code you had strategically squeezed into the available space in your answer sheet.</p>\n\n\n\n<p>And not just that, experienced programmers can point you to the bundle of A4 sheets they had removed from the office copy machine to scribble down a particularly complex algorithm they had been working on.</p>\n\n\n\n<p>So whether you&#8217;re an exam student, potential job interviewee, or someone wanting to resolve their programming dead ends, I hope this article helps you out when you put your pen to the paper to code.</p>\n\n\n\n<span id=\"more-367045\"></span>\n\n\n\n<p>Although I will focus on the analog aspect of writing code, you can apply these steps to coding in any form or language. So consider this to be also like a generic coding guideline that works specifically for me but can also be very useful to you in your work.</p>\n\n\n<h3 id=\"why-write-it-down\">Why write it down?</h3>\n\n\n<p>Before we start, it&#8217;s essential to understand that no one expects you to jot down production-ready code in a notebook. It&#8217;s not like you can drop that into a code editor and compile it without an error. If producing perfect code was the goal, you would be seated in front of a computer in the interview rooms and exam halls.</p>\n\n\n\n<p>The purpose of handwriting code is to work through logic in advance. There&#8217;s s desire to &#8220;get in the browser&#8221; as soon as possible in design, but there is conventional wisdom in sketching designs by hand. A low-fidelity medium encourages quick experimentation and inexpensive mistakes.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"2560\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=2560%2C2560&#038;ssl=1\" alt=\"White lined paper with cursive handwritten notes on using :nth-child.\" class=\"wp-image-372422\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=1024%2C1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=768%2C768&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=1536%2C1536&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=2048%2C2048&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The toil of trying to figure out how to affect surrounding items with one click (from my <a href=\"https://css-tricks.com/conditionally-styling-selected-elements-in-a-grid-container/\">last article</a>)</figcaption></figure>\n\n\n\n<p>The same can be true of code, mainly when working out syntax and semantics. That said, getting the correct syntax and semantics is <em>always</em> a plus point, though not the sole focus of the whole handwriting exercise.</p>\n\n\n\n<p>Let&#8217;s see where we can start when it comes to handwriting code.</p>\n\n\n<h3 id=\"know-your-question\">Know your question</h3>\n\n\n<p>During my final year in college, I couldn&#8217;t do an internship or even attend campus interviews because of health reasons. As a result, my very first job interview was quite literal with high stakes.</p>\n\n\n\n<p>When I look back now, the interview was pretty easy. But having never attended one before, I was anxious beyond reason. The first thing the interviewers asked about programming was if I could output an inverted triangle made of asterisks. As I said, it was easy — nothing a <code>for</code> loop can&#8217;t handle, right? But like I said, my anxiety was through the roof as well.</p>\n\n\n\n<p>I took a deep breath, pressed my palm against the blank sheet of paper they had laid out for me, slid it as slow as possible towards me on the table (buying time, of course), clicked the pen, and then I did something right.</p>\n\n\n\n<p>I first drew an inverted triangle made of asterisks. That&#8217;s how I found my feet on the ground to start answering their question.</p>\n\n\n\n<p>I&#8217;ve seen otherwise brilliant developers get something wrong simply because they never fully grasp what it is they are solving.</p>\n\n\n\n<p>The questions we work with are not like the questions physicists or mathematicians solve. They get a set of parameters and find the missing ones; our questions are also our results. We are already told what our results are —  we have to figure out how to reach them. That&#8217;s why it&#8217;s imperative to know the question well because you&#8217;ll see the result.</p>\n\n\n\n<p>Writing down or drawing out what you want to output is one of the best ways to start your coding. I understand that in our fast-paced industry, the expectation is that we have to jump right into the programming by running a &#8220;hello world&#8221; demo. And that&#8217;s great to familiarize yourself with an unfamiliar syntax and shake off your anxiousness about trying something new.</p>\n\n\n\n<p>But when someone asks you a question and gives you a result to work up to, wouldn&#8217;t it just be better to put that down first? That question/result is not only your starting point but also your point of reference. At any step in your coding, you can look at it to ensure you&#8217;re working towards it and that you&#8217;re on the right track.</p>\n\n\n\n<p>So whether in your answer sheets or in that blank A4 paper you&#8217;re about to write in, start by taking a second and writing down what it is you&#8217;re trying to output. You can put it in the margins or a corner if you don&#8217;t want it to be a part of your answer. Just make sure it&#8217;s somewhere where you can keep referencing it.</p>\n\n\n<h3 id=\"outline-your-code\">Outline your code</h3>\n\n\n<p>This step is like a double-edged sword. It can get you a roadmap to your program or waste your time. My job is to make sure it&#8217;s the former.</p>\n\n\n\n<p>So, first and foremost, I like to say: <strong>outlining code is unnecessary if the scope of your problem or question is small.</strong> Again, this practice is neither prescriptive nor universal to all projects or situations. Imagine I&#8217;m your interviewer, and I ask you to write how to center an element in a web page using CSS in as many ways as possible. You won&#8217;t exactly be needing an outline for this. The code snippets are relatively small for each method.</p>\n\n\n\n<p>But now, let&#8217;s say I assign you to write a web application that captures user signatures via a touchscreen interface and then saves the signature on the server. Not so straightforward, right? You&#8217;ve more than one thing to figure out. Perhaps, a little outline can help.</p>\n\n\n\n<ol><li>UI for capturing signature — HTML Canvas? WebGL?</li><li>Disable pointer events on the rest of the web page when the user is signing</li><li>Convert and save the captured image to a PNG file — JS</li><li>Then convert it to blob (maybe) and save it to the visitor&#8217;s log data table.</li></ol>\n\n\n\n<p>I&#8217;ve written a rough sequence of actions I think I might have to code. It could&#8217;ve been shorter or longer, depending on what I wanted from it.</p>\n\n\n\n<p>I highly recommend outlining code for client projects. Write the outline along with your user requirements or on the back of wireframes you&#8217;ve printed out.</p>\n\n\n\n<p>Your quick snapshot of bullet points gives you a map, a to-do list, and a checklist to verify against when you reach the end of the project — pretty much your whole project&#8217;s summary in a low-fidelity list. It can also become a template to start your next similar project.</p>\n\n\n\n<p>But like I said before, this step is like a double-edged sword. You&#8217;ll have to keep this short for examinees and interviewees when there are time constraints.</p>\n\n\n\n<p>If you don&#8217;t know where to start, write down just three essential functions you&#8217;ll have to code in your application, and if you have got the time, make it five.</p>\n\n\n\n<p>But that&#8217;s about it. Spend as little time as possible on this, and don&#8217;t sweat over the details. The outline is not going to score you extra points. It&#8217;s there only to help you make sure you have everything covered. It captures your initial gut reaction and keeps you honest throughout the project&#8217;s life.</p>\n\n\n<h3 id=\"longhand-vs-shorthand\">Longhand vs. shorthand</h3>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"2560\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=2560%2C2560&#038;ssl=1\" alt=\"White lined paper with cursive handwritten notes in black ink.\" class=\"wp-image-372425\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=1024%2C1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=768%2C768&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=1536%2C1536&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=2048%2C2048&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>A quick reference to disable text selection</figcaption></figure>\n\n\n\n<p>Time to start coding. So, what do you write? &#8220;Bdrs&#8221; or &#8220;<code>border-radius</code>&#8220;; &#8220;<code>div -&gt; p</code>&#8221; or &#8220;<code>&lt;div&gt;&lt;p&gt;&lt;/div&gt;&lt;/p&gt;</code>&#8220;; &#8220;<code>pl()</code>&#8221; or &#8220;<code>println()</code>&#8220;; &#8220;<code>q()</code>&#8221; or &#8220;<code>querySelector()</code>&#8220;?</p>\n\n\n\n<p>If someone else is grading your code, then there&#8217;s no choice. Leave out abbreviations, pseudo-codes, Emmet shortcuts, and any other form of shorthand writing. Otherwise, there&#8217;s no reason to assume that anyone reading this knows what your abbreviations mean.</p>\n\n\n\n<p>It&#8217;s really up to you.</p>\n\n\n\n<p>If you&#8217;ve gotten out of touch with writing by hand — and many of us have — it&#8217;s better not to go overboard with the longhand notations, as they get tedious. At the same time, there&#8217;s no such thing as being too frugal with your writing. Not if you want to be able to look back on it one day and understand what you&#8217;d written down.</p>\n\n\n\n<p>I have an open file in my note-taking app and a lined notepad on my desk where I write down code snippets I want to save for later reference. They are unorganized, just a long stream of snippets. That&#8217;s why when I browse through older notes, I wouldn&#8217;t know what I meant to write if I had not written them down clearly.</p>\n\n\n\n<p>I forget syntaxes all the time. For instance, I&#8217;ve been using the arrow notation for JavaScript functions since it was introduced (because it&#8217;s shorter), and I&#8217;m pretty sure if someone suddenly asks me to define a function using the <code>function</code> keyword, I might even misplace the parentheses or the function name, inciting a syntax error.</p>\n\n\n\n<p>It&#8217;s not unusual for us to forget syntaxes we haven&#8217;t used in a while. That&#8217;s why it&#8217;s better to write your notes clearly when you know you need them for future reference.</p>\n\n\n<h3 id=\"the-nonsequential-flow-of-code\">The non-sequential flow of code</h3>\n\n\n<p>Unlike the last step, which doesn&#8217;t apply to those of you interviewees and test-takers, this one is catered especially to you.</p>\n\n\n\n<p>Most programming languages are interpreted, compiled, and executed so that sometimes pre-written code in the source is executed later when called. We do it in JavaScript, for example, with function calling — functions can be defined initially, then executed later. Examinees and interviewees can use this to start working on the critical point of your answer first.</p>\n\n\n\n<p>As I&#8217;ve said from the very beginning, the purpose of handwriting code is to work through or test the logic of whatever it is you program. It&#8217;s best when you focus on resolving that first.</p>\n\n\n\n<p>Let&#8217;s take a classic textbook example — a program to find the nth <a href=\"https://en.wikipedia.org/wiki/Fibonacci_number\" rel=\"noopener\">Fibonacci number</a>. If I were to write a simple outline for it, it would be something like this:</p>\n\n\n\n<ol><li>Get the input.</li><li>Calculate the Fibonacci number.</li><li>Summarise the output.</li><li>Print the output.</li></ol>\n\n\n\n<p>All the steps in that outline are essential; however, 1, 3, and 4 are more obligatory. They are necessary but not important enough to focus on right away.</p>\n\n\n\n<p>It&#8217;s better to start writing down the code to calculate the Fibonacci number rather than to fetch the input. Wrap it in a function, then go ahead and write the code sequentially and write down a line to call that function where appropriate.</p>\n\n\n\n<p>Spend your time writing code that focuses on the heart of the problem.</p>\n\n\n\n<p>Real professionals can skip ahead. Let&#8217;s say I have a client project, and I have to work with some triangle geometry — got two sides, opposite angle, and gotta find the third side&#8217;s length. And I&#8217;ve decided to scribble on paper to get started rather than opening my <abbr title=\"integrated development environment\">IDE</abbr>.</p>\n\n\n\n<p>First, I would draw the triangle, of course (that&#8217;s something I&#8217;m very experienced with, as you can tell). I would write down some sample lengths and angles. Then I&#8217;d write the formula (compliments of online searching, for sure), and then I&#8217;d jump right to the code for the function.</p>\n\n\n\n<p>There&#8217;s no point in me writing down the obligatory steps even though I&#8217;ll need them in production-ready code. But it would be different if I had to write that on an answer sheet in an exam. I can&#8217;t skip the other steps; however, I can still start with the code for the formula.</p>\n\n\n<h3 id=\"pseudocode\">Pseudo-code</h3>\n\n\n<p>Chris has already written a <a href=\"https://css-tricks.com/pseudo-code/\">handy article on pseudo-code</a> that I highly recommend you give a solid read.</p>\n\n\n\n<p>For all those professionals who feel like the whole handwriting code thing doesn&#8217;t seem like your cup of tea but still might be curious if it can help you, then <strong>pseudo-code</strong> might be the balance you&#8217;re looking for.</p>\n\n\n\n<p>It&#8217;s similar to outlining the code, as I mentioned in one of the previous steps. However, it&#8217;s briefer and feels more like shorthand coding. It&#8217;s sometimes also referred to as &#8220;skeleton code.&#8221;</p>\n\n\n\n<p>Here&#8217;s some quick pseudo-code for a CSS grid layout:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Grid\n5 60px rows\n6 100px columns</code></pre>\n\n\n\n<p>There isn&#8217;t much to write! So, even though putting a pencil to paper is excellent for this sort of thing, it&#8217;s just as effective, fast, and inexpensive to jot some pseudo code into whatever program you&#8217;re using.</p>\n\n\n<h3 id=\"space-and-comments\">Space and comments</h3>\n\n\n<p>I believe code is 90% keywords and 10% tabs. Withoutspacesthereadabilityofwordsdecreases. Indentations are necessary for handwritten code as well. However, please don&#8217;t use it for every level because the width of the paper will limit you. Use spaces judiciously, but use them.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"2560\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=2560%2C2560&#038;ssl=1\" alt=\"Yellow unlined paper with code handwritten in cursive in black ink.\" class=\"wp-image-372426\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=1024%2C1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=768%2C768&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=1536%2C1536&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=2048%2C2048&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Prized OG snippet, written with extra TLC</figcaption></figure>\n\n\n\n<p>If you&#8217;re writing code for your use, I also believe that if you&#8217;ve followed everything I&#8217;ve mentioned so far and have already written down your output and an outline on the page, you may not even need to include comments. Comments tell you quickly what its following set of code does. If you have already written and read an outline for the code, then comments are redundant notes.</p>\n\n\n\n<p>However, if your judgment says to put down one, then do it. Add it to the right side of the code (since you won&#8217;t be able to insert it between already written lines the way you could in, say, VS Code). Use forward slashes, brackets, or arrows to denote that they are comments.</p>\n\n\n\n<p>For examinees who are unconfident with a certain syntax, write down comments. This way, at least, you&#8217;re letting the person grading your paper know your intention with that incorrectly formatted code. And use only the correct delimiters to denote comments — for example, that would be the forward slashes for JavaScript.</p>\n\n\n<h3 id=\"analog-vs-digital\">Analog vs. digital</h3>\n\n\n<p>As I mentioned earlier, everything I&#8217;m providing here can is generic coding advice. If you don&#8217;t want to try this with physical paper, any note-taking application also works.</p>\n\n\n\n<p>But if you&#8217;re going to try the digital route, my recommendation is to try using something other than a straight note-taking app. Work with more visual digital tools — flow diagrams, mind maps, wireframes, etc. They can help you visualize your result, the outlines, and the code itself.</p>\n\n\n\n<p>I am not much of a digital citizen (except for working on the web and recently converting to reading e-books), so I stick to physical notebooks.</p>\n\n\n<h3 id=\"my-favorite-tools-for-handwriting-code\">My favorite tools for handwriting code</h3>\n\n\n<p>Any pencil and paper will do! But there are lots of options out there, and these are a few choice tools I use:</p>\n\n\n\n<ul><li><a href=\"https://www.amazon.com/Staedtler-Pigment-Liner-0-3mm-308-0-3/dp/B00AHW572W\" rel=\"noopener\">Staedtler Pigment Liner 0.3mm</a> (Black)</li><li><a href=\"https://www.amazon.com/Mitsubishi-Pencil-ballpoint-stream-SXN220007-24/dp/B00O4P5CI2/ref=sr_1_5?crid=SN007BBRD9TB&amp;keywords=Mitsubishi+JETSTREAM+101+0.7&amp;qid=1658334470&amp;s=office-products&amp;sprefix=mitsubishi+jetstream+101+0.7%2Coffice-products%2C99&amp;sr=1-5\" rel=\"noopener\">Mitsubishi JETSTREAM 101 0.7mm</a> (Black)</li><li><a href=\"https://www.amazon.com/MUJI-Blank-Notebook-Unruled-30sheets/dp/B00IQQE5EM/ref=sr_1_5?crid=3EQV4ID50LZ56&amp;keywords=MUJI+Notebook+A5&amp;qid=1658334618&amp;s=office-products&amp;sprefix=muji+notebook+a5%2Coffice-products%2C101&amp;sr=1-5\" rel=\"noopener\">MUJI Notebook A5 6mm Rule 30 sheets</a> (Lightweight and easy to carry)</li><li><a href=\"https://www.amazon.com/MUJI-Twin-Tip-Highlighter-3-colors-Pack/dp/B0736YVQBC/ref=sr_1_2?crid=3A01WD7YWRCWY&amp;keywords=MUJI+Twin-Tip+Highlighter&amp;qid=1658334679&amp;s=office-products&amp;sprefix=muji+twin-tip+highlighter%2Coffice-products%2C88&amp;sr=1-2\" rel=\"noopener\">MUJI Twin-Tip Highlighter Pen</a> (Yellow)</li></ul>\n\n\n<h3 id=\"there-is-no-write-way-to-code\">There is no &#8220;write&#8221; way to code</h3>\n\n\n<p>I hope, if nothing else, my little way of handwriting code with pencil and paper makes you evaluate the way you already plan and write code. I like knowing how other developers approach their work, and this is my way of giving you a peek into the way I do things.</p>\n\n\n\n<p>Again, nothing here is scientific or an exact art. But if you want to give handwritten code planning a try, here&#8217;s everything we&#8217;ve covered in a nice ordered list:</p>\n\n\n\n<ol><li>Start by writing down (with sample data, if needed) the output of your code.</li><li>Write an outline for the code. Please keep it to three steps for small projects or ones that are less complex.</li><li>Use longhand notations. Developers writing for themselves can use shorthand notations as long as the writing is legible and makes sense to you when you refer to it later.</li><li>When under a time constraint, consider writing the code that tackles the heart of the problem first. Later, write down a call to that code at the right place in your sequential code.</li><li>If you feel confident, try writing pseudo code addressing the main idea.</li><li>Use proper indentations and spaces — and be mindful of the paper&#8217;s width.</li></ol>\n\n\n\n<p>That&#8217;s it! When you&#8217;re ready to try writing code by hand, I hope this article makes it easy for you to start. And if you&#8217;re sitting down for an exam or an interview, I hope this helps you focus on getting the questions right.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/why-and-how-i-write-code-with-pencil-and-paper/\">Why (and How) I Write Code With Pencil and Paper</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "If the thought of handwriting code seems silly, it might surprise you to know that it’s inevitable. If you’re unsure, think about the last job interview you did, and remember how there was no computer around in the interview room — just your interviewers, a blank sheet of paper, and a blue ball-point pen.\n\n\n\nFor the students among you, it’s even a bigger deal as your grades hang in by the lines of code you had strategically squeezed into the available space in your answer sheet.\n\n\n\nAnd not just that, experienced programmers can point you to the bundle of A4 sheets they had removed from the office copy machine to scribble down a particularly complex algorithm they had been working on.\n\n\n\nSo whether you’re an exam student, potential job interviewee, or someone wanting to resolve their programming dead ends, I hope this article helps you out when you put your pen to the paper to code.\n\n\n\n\n\n\n\nAlthough I will focus on the analog aspect of writing code, you can apply these steps to coding in any form or language. So consider this to be also like a generic coding guideline that works specifically for me but can also be very useful to you in your work.\n\n\nWhy write it down?\n\n\nBefore we start, it’s essential to understand that no one expects you to jot down production-ready code in a notebook. It’s not like you can drop that into a code editor and compile it without an error. If producing perfect code was the goal, you would be seated in front of a computer in the interview rooms and exam halls.\n\n\n\nThe purpose of handwriting code is to work through logic in advance. There’s s desire to “get in the browser” as soon as possible in design, but there is conventional wisdom in sketching designs by hand. A low-fidelity medium encourages quick experimentation and inexpensive mistakes.\n\n\n\nThe toil of trying to figure out how to affect surrounding items with one click (from my last article)\n\n\n\nThe same can be true of code, mainly when working out syntax and semantics. That said, getting the correct syntax and semantics is always a plus point, though not the sole focus of the whole handwriting exercise.\n\n\n\nLet’s see where we can start when it comes to handwriting code.\n\n\nKnow your question\n\n\nDuring my final year in college, I couldn’t do an internship or even attend campus interviews because of health reasons. As a result, my very first job interview was quite literal with high stakes.\n\n\n\nWhen I look back now, the interview was pretty easy. But having never attended one before, I was anxious beyond reason. The first thing the interviewers asked about programming was if I could output an inverted triangle made of asterisks. As I said, it was easy — nothing a for loop can’t handle, right? But like I said, my anxiety was through the roof as well.\n\n\n\nI took a deep breath, pressed my palm against the blank sheet of paper they had laid out for me, slid it as slow as possible towards me on the table (buying time, of course), clicked the pen, and then I did something right.\n\n\n\nI first drew an inverted triangle made of asterisks. That’s how I found my feet on the ground to start answering their question.\n\n\n\nI’ve seen otherwise brilliant developers get something wrong simply because they never fully grasp what it is they are solving.\n\n\n\nThe questions we work with are not like the questions physicists or mathematicians solve. They get a set of parameters and find the missing ones; our questions are also our results. We are already told what our results are —  we have to figure out how to reach them. That’s why it’s imperative to know the question well because you’ll see the result.\n\n\n\nWriting down or drawing out what you want to output is one of the best ways to start your coding. I understand that in our fast-paced industry, the expectation is that we have to jump right into the programming by running a “hello world” demo. And that’s great to familiarize yourself with an unfamiliar syntax and shake off your anxiousness about trying something new.\n\n\n\nBut when someone asks you a question and gives you a result to work up to, wouldn’t it just be better to put that down first? That question/result is not only your starting point but also your point of reference. At any step in your coding, you can look at it to ensure you’re working towards it and that you’re on the right track.\n\n\n\nSo whether in your answer sheets or in that blank A4 paper you’re about to write in, start by taking a second and writing down what it is you’re trying to output. You can put it in the margins or a corner if you don’t want it to be a part of your answer. Just make sure it’s somewhere where you can keep referencing it.\n\n\nOutline your code\n\n\nThis step is like a double-edged sword. It can get you a roadmap to your program or waste your time. My job is to make sure it’s the former.\n\n\n\nSo, first and foremost, I like to say: outlining code is unnecessary if the scope of your problem or question is small. Again, this practice is neither prescriptive nor universal to all projects or situations. Imagine I’m your interviewer, and I ask you to write how to center an element in a web page using CSS in as many ways as possible. You won’t exactly be needing an outline for this. The code snippets are relatively small for each method.\n\n\n\nBut now, let’s say I assign you to write a web application that captures user signatures via a touchscreen interface and then saves the signature on the server. Not so straightforward, right? You’ve more than one thing to figure out. Perhaps, a little outline can help.\n\n\n\nUI for capturing signature — HTML Canvas? WebGL?Disable pointer events on the rest of the web page when the user is signingConvert and save the captured image to a PNG file — JSThen convert it to blob (maybe) and save it to the visitor’s log data table.\n\n\n\nI’ve written a rough sequence of actions I think I might have to code. It could’ve been shorter or longer, depending on what I wanted from it.\n\n\n\nI highly recommend outlining code for client projects. Write the outline along with your user requirements or on the back of wireframes you’ve printed out.\n\n\n\nYour quick snapshot of bullet points gives you a map, a to-do list, and a checklist to verify against when you reach the end of the project — pretty much your whole project’s summary in a low-fidelity list. It can also become a template to start your next similar project.\n\n\n\nBut like I said before, this step is like a double-edged sword. You’ll have to keep this short for examinees and interviewees when there are time constraints.\n\n\n\nIf you don’t know where to start, write down just three essential functions you’ll have to code in your application, and if you have got the time, make it five.\n\n\n\nBut that’s about it. Spend as little time as possible on this, and don’t sweat over the details. The outline is not going to score you extra points. It’s there only to help you make sure you have everything covered. It captures your initial gut reaction and keeps you honest throughout the project’s life.\n\n\nLonghand vs. shorthand\n\n\nA quick reference to disable text selection\n\n\n\nTime to start coding. So, what do you write? “Bdrs” or “border-radius“; “div -> p” or “<div><p></div></p>“; “pl()” or “println()“; “q()” or “querySelector()“?\n\n\n\nIf someone else is grading your code, then there’s no choice. Leave out abbreviations, pseudo-codes, Emmet shortcuts, and any other form of shorthand writing. Otherwise, there’s no reason to assume that anyone reading this knows what your abbreviations mean.\n\n\n\nIt’s really up to you.\n\n\n\nIf you’ve gotten out of touch with writing by hand — and many of us have — it’s better not to go overboard with the longhand notations, as they get tedious. At the same time, there’s no such thing as being too frugal with your writing. Not if you want to be able to look back on it one day and understand what you’d written down.\n\n\n\nI have an open file in my note-taking app and a lined notepad on my desk where I write down code snippets I want to save for later reference. They are unorganized, just a long stream of snippets. That’s why when I browse through older notes, I wouldn’t know what I meant to write if I had not written them down clearly.\n\n\n\nI forget syntaxes all the time. For instance, I’ve been using the arrow notation for JavaScript functions since it was introduced (because it’s shorter), and I’m pretty sure if someone suddenly asks me to define a function using the function keyword, I might even misplace the parentheses or the function name, inciting a syntax error.\n\n\n\nIt’s not unusual for us to forget syntaxes we haven’t used in a while. That’s why it’s better to write your notes clearly when you know you need them for future reference.\n\n\nThe non-sequential flow of code\n\n\nUnlike the last step, which doesn’t apply to those of you interviewees and test-takers, this one is catered especially to you.\n\n\n\nMost programming languages are interpreted, compiled, and executed so that sometimes pre-written code in the source is executed later when called. We do it in JavaScript, for example, with function calling — functions can be defined initially, then executed later. Examinees and interviewees can use this to start working on the critical point of your answer first.\n\n\n\nAs I’ve said from the very beginning, the purpose of handwriting code is to work through or test the logic of whatever it is you program. It’s best when you focus on resolving that first.\n\n\n\nLet’s take a classic textbook example — a program to find the nth Fibonacci number. If I were to write a simple outline for it, it would be something like this:\n\n\n\nGet the input.Calculate the Fibonacci number.Summarise the output.Print the output.\n\n\n\nAll the steps in that outline are essential; however, 1, 3, and 4 are more obligatory. They are necessary but not important enough to focus on right away.\n\n\n\nIt’s better to start writing down the code to calculate the Fibonacci number rather than to fetch the input. Wrap it in a function, then go ahead and write the code sequentially and write down a line to call that function where appropriate.\n\n\n\nSpend your time writing code that focuses on the heart of the problem.\n\n\n\nReal professionals can skip ahead. Let’s say I have a client project, and I have to work with some triangle geometry — got two sides, opposite angle, and gotta find the third side’s length. And I’ve decided to scribble on paper to get started rather than opening my IDE.\n\n\n\nFirst, I would draw the triangle, of course (that’s something I’m very experienced with, as you can tell). I would write down some sample lengths and angles. Then I’d write the formula (compliments of online searching, for sure), and then I’d jump right to the code for the function.\n\n\n\nThere’s no point in me writing down the obligatory steps even though I’ll need them in production-ready code. But it would be different if I had to write that on an answer sheet in an exam. I can’t skip the other steps; however, I can still start with the code for the formula.\n\n\nPseudo-code\n\n\nChris has already written a handy article on pseudo-code that I highly recommend you give a solid read.\n\n\n\nFor all those professionals who feel like the whole handwriting code thing doesn’t seem like your cup of tea but still might be curious if it can help you, then pseudo-code might be the balance you’re looking for.\n\n\n\nIt’s similar to outlining the code, as I mentioned in one of the previous steps. However, it’s briefer and feels more like shorthand coding. It’s sometimes also referred to as “skeleton code.”\n\n\n\nHere’s some quick pseudo-code for a CSS grid layout:\n\n\n\nGrid\n5 60px rows\n6 100px columns\n\n\n\nThere isn’t much to write! So, even though putting a pencil to paper is excellent for this sort of thing, it’s just as effective, fast, and inexpensive to jot some pseudo code into whatever program you’re using.\n\n\nSpace and comments\n\n\nI believe code is 90% keywords and 10% tabs. Withoutspacesthereadabilityofwordsdecreases. Indentations are necessary for handwritten code as well. However, please don’t use it for every level because the width of the paper will limit you. Use spaces judiciously, but use them.\n\n\n\nPrized OG snippet, written with extra TLC\n\n\n\nIf you’re writing code for your use, I also believe that if you’ve followed everything I’ve mentioned so far and have already written down your output and an outline on the page, you may not even need to include comments. Comments tell you quickly what its following set of code does. If you have already written and read an outline for the code, then comments are redundant notes.\n\n\n\nHowever, if your judgment says to put down one, then do it. Add it to the right side of the code (since you won’t be able to insert it between already written lines the way you could in, say, VS Code). Use forward slashes, brackets, or arrows to denote that they are comments.\n\n\n\nFor examinees who are unconfident with a certain syntax, write down comments. This way, at least, you’re letting the person grading your paper know your intention with that incorrectly formatted code. And use only the correct delimiters to denote comments — for example, that would be the forward slashes for JavaScript.\n\n\nAnalog vs. digital\n\n\nAs I mentioned earlier, everything I’m providing here can is generic coding advice. If you don’t want to try this with physical paper, any note-taking application also works.\n\n\n\nBut if you’re going to try the digital route, my recommendation is to try using something other than a straight note-taking app. Work with more visual digital tools — flow diagrams, mind maps, wireframes, etc. They can help you visualize your result, the outlines, and the code itself.\n\n\n\nI am not much of a digital citizen (except for working on the web and recently converting to reading e-books), so I stick to physical notebooks.\n\n\nMy favorite tools for handwriting code\n\n\nAny pencil and paper will do! But there are lots of options out there, and these are a few choice tools I use:\n\n\n\nStaedtler Pigment Liner 0.3mm (Black)Mitsubishi JETSTREAM 101 0.7mm (Black)MUJI Notebook A5 6mm Rule 30 sheets (Lightweight and easy to carry)MUJI Twin-Tip Highlighter Pen (Yellow)\n\n\nThere is no “write” way to code\n\n\nI hope, if nothing else, my little way of handwriting code with pencil and paper makes you evaluate the way you already plan and write code. I like knowing how other developers approach their work, and this is my way of giving you a peek into the way I do things.\n\n\n\nAgain, nothing here is scientific or an exact art. But if you want to give handwritten code planning a try, here’s everything we’ve covered in a nice ordered list:\n\n\n\nStart by writing down (with sample data, if needed) the output of your code.Write an outline for the code. Please keep it to three steps for small projects or ones that are less complex.Use longhand notations. Developers writing for themselves can use shorthand notations as long as the writing is legible and makes sense to you when you refer to it later.When under a time constraint, consider writing the code that tackles the heart of the problem first. Later, write down a call to that code at the right place in your sequential code.If you feel confident, try writing pseudo code addressing the main idea.Use proper indentations and spaces — and be mindful of the paper’s width.\n\n\n\nThat’s it! When you’re ready to try writing code by hand, I hope this article makes it easy for you to start. And if you’re sitting down for an exam or an interview, I hope this helps you focus on getting the questions right.\n\nWhy (and How) I Write Code With Pencil and Paper originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367045",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-17T13:21:17.000Z",
      "date_modified": "2022-08-17T13:21:17.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367324",
      "url": "https://css-tricks.com/css-grid-and-custom-shapes-part-1/",
      "title": "CSS Grid and Custom Shapes, Part 1",
      "summary": "In a previous article, I looked at CSS Grid’s ability to create complex layouts using its auto-placement powers. I took that one step further in another article that added a zooming hover effect to images in a grid layout…\n\nCSS Grid and Custom Shapes, Part 1 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>In a previous article, I looked at CSS Grid&#8217;s ability to <a href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/\">create complex layouts using its auto-placement powers</a>. I took that one step further in another article that <a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout\">added a zooming hover effect to images in a grid layout</a>. This time, I want to dive into another type of grid, one that works with shapes.</p>\n\n\n\n<span id=\"more-367324\"></span>\n\n\n\n<p>Like, what if the images aren’t perfectly square but instead are shaped like hexagons or rhombuses? Spoiler alert: we can do it. In fact, we’re going to combine CSS Grid techniques we’ve looked at and drop in some CSS <code>clip-path</code> and <code>mask</code> magic to create fancy grids of images for just about any shape you can imagine!</p>\n\n\n<h3 id=\"lets-start-with-some-markup\">Let’s start with some markup</h3>\n\n\n<p>Most of the layouts we are going to look at may look easy to achieve at first glance, but the challenging part is to achieve them with <strong>the same HTML markup</strong>. We can use a lot of wrappers, <code>div</code>s, and whatnot, but the goal of this post is to use the same and smallest amount of HTML code and still get all the different grids we want. After all, what’s CSS but a way to separate styling and markup? Our styling should not depend on the markup, and vice versa.</p>\n\n\n\n<p>This said, let’s start with this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"gallery\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;!-- as many times as we want -->\n&lt;/div></code></pre>\n\n\n\n<p>A container with images is all that we need here. Nothing more!</p>\n\n\n<h3 id=\"css-grid-of-hexagons\">CSS Grid of Hexagons</h3>\n\n\n<p>This is also sometimes referred to as a “honeycomb” grid.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWEWoYW\" src=\"//codepen.io/anon/embed/XWEWoYW?height=550&amp;theme-id=1&amp;slug-hash=XWEWoYW&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWEWoYW\" title=\"CodePen Embed XWEWoYW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>There are already plenty of other blog posts out there that show how to make this. Heck, I <a href=\"https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/\">wrote one</a> here on CSS-Tricks! That article is still good and goes way deep on making a responsive layout. But for this specific case, we are going to rely on a much simpler CSS approach.</p>\n\n\n\n<p>First, let’s use <code><a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\">clip-path</a></code> on the images to create the hexagon shape and we place all of them in the same grid area so they overlap.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* controls the size */\n  display: grid;\n}\n\n.gallery > img {\n  grid-area: 1/1;\n  width: var(--s);\n  aspect-ratio: 1.15;\n  object-fit: cover;\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%);\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"311\" height=\"277\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1659128373052_image.png?resize=311%2C277&#038;ssl=1\" alt=\"\" class=\"wp-image-367327\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1659128373052_image.png?w=311&amp;ssl=1 311w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1659128373052_image.png?resize=300%2C267&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><code>clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%)</code></figcaption></figure>\n\n\n\n<p>Nothing fancy yet. All the images are hexagons and above each other. So it looks like all we have is a single hexagon-shaped image element, but there are really seven.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxMqmK/d9c9d84f1e83aea575610acfddd85105\" src=\"//codepen.io/anon/embed/preview/mdxMqmK/d9c9d84f1e83aea575610acfddd85105?height=450&amp;theme-id=1&amp;slug-hash=mdxMqmK/d9c9d84f1e83aea575610acfddd85105&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxMqmK/d9c9d84f1e83aea575610acfddd85105\" title=\"CodePen Embed mdxMqmK/d9c9d84f1e83aea575610acfddd85105\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The next step is to apply a translation to the images to correctly place them on the grid.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"472\" height=\"448\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658759154146_image.png?resize=472%2C448&#038;ssl=1\" alt=\"\" class=\"wp-image-367328\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658759154146_image.png?w=472&amp;ssl=1 472w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658759154146_image.png?resize=300%2C285&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Notice that we still want one of the images to remain in the center. The rest are placed around it using CSS <code>translate</code> and good ol’ fashioned geometry. Here’s are the mock formulas I came up with for each image in the grid:</p>\n\n\n\n<pre rel=\"Formula\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">translate((height + gap)*sin(0deg), (height + gap)*cos(0))\ntranslate((height + gap)*sin(60deg), (height + gap)*cos(60deg))\ntranslate((height + gap)*sin(120deg), (height + gap)*cos(120deg))\ntranslate((height + gap)*sin(180deg), (height + gap)*cos(180deg))\ntranslate((height + gap)*sin(240deg), (height + gap)*cos(240deg))\ntranslate((height + gap)*sin(300deg), (height + gap)*cos(300deg))</code></pre>\n\n\n\n<p>A few calculations and optimization later (let’s skip that boring part, right?) we get the following CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* control the size */\n  --g: 10px;  /* control the gap */\n  display: grid;\n}\n.gallery > img {\n  grid-area: 1/1;\n  width: var(--s);\n  aspect-ratio: 1.15;\n  object-fit: cover;\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50% ,75% 100%, 25% 100%, 0 50%);\n  transform: translate(var(--_x,0), var(--_y,0));\n}\n.gallery > img:nth-child(1) { --_y: calc(-100% - var(--g)); }\n.gallery > img:nth-child(7) { --_y: calc( 100% + var(--g)); }\n.gallery > img:nth-child(3),\n.gallery > img:nth-child(5) { --_x: calc(-75% - .87*var(--g)); }\n.gallery > img:nth-child(4),\n.gallery > img:nth-child(6) { --_x: calc( 75% + .87*var(--g)); }\n.gallery > img:nth-child(3),\n.gallery > img:nth-child(4) { --_y: calc(-50% - .5*var(--g)); }\n.gallery > img:nth-child(5), \n.gallery > img:nth-child(6) { --_y: calc( 50% + .5*var(--g)); }</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Maybe that&#8217;ll be easier when we get <a href=\"https://chromestatus.com/feature/5165381072191488\" rel=\"noopener\">real trigonometry functions in CSS</a>!</p>\n\n\n\n<p>Each image is translated by the <code>--_x</code> and <code>--_y</code> variables that are based on those formulas. Only the second image (<code>nth-child(2)</code>) is undefined in any selector because it’s the one in the center. It can be any image if you decide to use a different order. Here’s the order I’m using:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"484\" height=\"490\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658778323505_image.png?resize=484%2C490&#038;ssl=1\" alt=\"\" class=\"wp-image-367329\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658778323505_image.png?w=484&amp;ssl=1 484w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658778323505_image.png?resize=296%2C300&amp;ssl=1 296w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With only a few lines of code, we get a cool grid of images. To this, I added a little hover effect to the images to make things fancier.</p>\n\n\n\n<p>Guess what? We can get another hexagon grid by simply updating a few values.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxWLJOR/a7d6f76d210b629398f5fc900cd68719\" src=\"//codepen.io/anon/embed/xxWLJOR/a7d6f76d210b629398f5fc900cd68719?height=550&amp;theme-id=1&amp;slug-hash=xxWLJOR/a7d6f76d210b629398f5fc900cd68719&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxWLJOR/a7d6f76d210b629398f5fc900cd68719\" title=\"CodePen Embed xxWLJOR/a7d6f76d210b629398f5fc900cd68719\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you check the code and compare it with the previous one you will notice that I have simply swapped the values inside <code>clip-path</code> and I switched between <code>--x</code> and <code>--y</code>. That’s all!</p>\n\n\n<h3 id=\"css-grid-of-rhombuses\">CSS Grid of Rhombuses</h3>\n\n\n<p>Rhombus is such a fancy word for a square that’s rotated 45 degrees.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKowpYz\" src=\"//codepen.io/anon/embed/KKowpYz?height=600&amp;theme-id=1&amp;slug-hash=KKowpYz&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKowpYz\" title=\"CodePen Embed KKowpYz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Same HTML, remember? We first start by defining a 2×2 grid of images in CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* controls the size */\n\n  display: grid;\n  gap: 10px;\n  grid: auto-flow var(--s) / repeat(2, var(--s));\n  place-items: center;\n}\n.gallery > img {\n  width: 100%; \n  aspect-ratio: 1;\n  object-fit: cover;\n}</code></pre>\n\n\n\n<p>The first thing that might catch your eye is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid\" rel=\"noopener\"><code>grid</code></a> property. It’s pretty uncommonly used but is super helpful in that it’s a shorthand that lets you define a complete grid in one declaration. It’s not the most intuitive — and not to mention readable — property, but we are here to <em>learn</em> and <em>discover</em> new things, so let’s use it rather than writing out all of the individual grid properties.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid: auto-flow var(--s) / repeat(2,var(--s));\n\n/* is equivalent to this: */\ngrid-template-columns: repeat(2, var(--s));\ngrid-auto-rows: var(--s);</code></pre>\n\n\n\n<p>This defines two columns equal to the <code>--s</code> variable and sets the height of all the rows to <code>--s</code> as well. Since we have four images, we will automatically get a 2×2 grid.</p>\n\n\n\n<p>Here’s another way we could have written it:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-template-columns: repeat(2, var(--s));\ngrid-template-rows: repeat(2, var(--s));</code></pre>\n\n\n\n<p>…which can be reduced with the <code>grid</code> shorthand:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid: repeat(2,var(--s)) / repeat(2,var(--s));</code></pre>\n\n\n\n<p>After setting the grid, we rotate it and the images with CSS <code>transform</code>s and we get this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOexjRd/81e863cc4d71bd6047a7cd9be29062a3\" src=\"//codepen.io/anon/embed/preview/gOexjRd/81e863cc4d71bd6047a7cd9be29062a3?height=600&amp;theme-id=1&amp;slug-hash=gOexjRd/81e863cc4d71bd6047a7cd9be29062a3&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOexjRd/81e863cc4d71bd6047a7cd9be29062a3\" title=\"CodePen Embed gOexjRd/81e863cc4d71bd6047a7cd9be29062a3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Note how I rotate them both by <code>45deg</code>, but in the opposite direction.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  /* etc. */\n  transform: rotate(45deg);\n}\n.gallery > img {\n  /* etc. */\n  transform: rotate(-45deg);\n}</code></pre>\n\n\n\n<p>Rotating the images in the negative direction prevents them from getting rotated with the grid so they stay straight. Now, we apply a <code>clip-path</code> to clip a rhombus shape out of them.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"319\" height=\"316\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781081072_image.png?resize=319%2C316&#038;ssl=1\" alt=\"\" class=\"wp-image-367330\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781081072_image.png?w=319&amp;ssl=1 319w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781081072_image.png?resize=300%2C297&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781081072_image.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><code>clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%)</code></figcaption></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBoXyVX/36921e398a269bbfb6a143d969e1b1a1\" src=\"//codepen.io/anon/embed/preview/qBoXyVX/36921e398a269bbfb6a143d969e1b1a1?height=600&amp;theme-id=1&amp;slug-hash=qBoXyVX/36921e398a269bbfb6a143d969e1b1a1&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBoXyVX/36921e398a269bbfb6a143d969e1b1a1\" title=\"CodePen Embed qBoXyVX/36921e398a269bbfb6a143d969e1b1a1\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We are almost done! We need to rectify the size of the image to make them fit together. Otherwise, they’re spaced far apart to the point where it doesn’t look like a grid of images.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"542\" height=\"514\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781816498_image.png?resize=542%2C514&#038;ssl=1\" alt=\"\" class=\"wp-image-367331\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781816498_image.png?w=542&amp;ssl=1 542w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781816498_image.png?resize=300%2C285&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The image is within the boundary of the green circle, which is the inscribed circle of the grid area where the image is placed. What we want is to make the image bigger to fit inside the red circle, which is the circumscribed circle of the grid area.</p>\n\n\n\n<p>Don’t worry, I won’t introduce any more boring geometry. All you need to know is that the relationship between the radius of each circle is the square root of 2 (<code>sqrt(2)</code>). This is the value we need to increase the size of our images to fill the area. We will use <code>100%*sqrt(2) = 141%</code> and be done!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"11\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* control the size */\n\n  display: grid;\n  grid: auto-flow var(--s) / repeat(2,var(--s));\n  gap: 10px;\n  place-items: center;\n  transform: rotate(45deg);\n}\n.gallery > img {\n  width: 141%; /* 100%*sqrt(2) = 141% */\n  aspect-ratio: 1;\n  object-fit: cover;\n  transform: rotate(-45deg);\n  clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);\n}</code></pre>\n\n\n\n<p>Like the hexagon grid, we can make things fancier with that nice zooming hover effect:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKowpYz\" src=\"//codepen.io/anon/embed/KKowpYz?height=600&amp;theme-id=1&amp;slug-hash=KKowpYz&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKowpYz\" title=\"CodePen Embed KKowpYz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"css-grid-of-triangular-shapes\">CSS Grid of Triangular Shapes</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoRGPoW\" src=\"//codepen.io/anon/embed/PoRGPoW?height=600&amp;theme-id=1&amp;slug-hash=PoRGPoW&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoRGPoW\" title=\"CodePen Embed PoRGPoW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>You probably know by now that the big trick is figuring out the <code>clip-path</code> to get the shapes we want. For this grid, each element has its own <code>clip-path</code> value whereas the last two grids worked with a consistent shape. So, this time around, it’s like we’re working with a few different triangular shapes that come together to form a rectangular grid of images.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"290\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?resize=1024%2C290&#038;ssl=1\" alt=\"\" class=\"wp-image-367332\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?resize=1024%2C290&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?resize=768%2C218&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?w=1030&amp;ssl=1 1030w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The three images at the top</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1013\" height=\"279\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828620332_image.png?resize=1013%2C279&#038;ssl=1\" alt=\"\" class=\"wp-image-367333\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828620332_image.png?w=1013&amp;ssl=1 1013w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828620332_image.png?resize=300%2C83&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828620332_image.png?resize=768%2C212&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The three images at the bottom</figcaption></figure>\n\n\n\n<p>We place them inside a 3×2 grid with the following CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  display: grid;\n  gap: 10px; \n  grid-template-columns: auto auto auto; /* 3 columns */\n  place-items: center;\n}\n.gallery > img {\n  width: 200px; /* controls the size */\n  aspect-ratio: 1;\n  object-fit: cover;\n}\n/* the clip-path values */\n.gallery > img:nth-child(1) { clip-path: polygon(0 0, 50% 0, 100% 100% ,0 100%); }\n.gallery > img:nth-child(2) { clip-path: polygon(0 0, 100% 0, 50% 100%); }\n.gallery > img:nth-child(3) { clip-path: polygon(50% 0, 100% 0, 100% 100%, 0 100%); }\n.gallery > img:nth-child(4) { clip-path: polygon(0 0, 100% 0, 50% 100%, 0 100%); }\n.gallery > img:nth-child(5) { clip-path: polygon(50% 0, 100% 100%, 0% 100%); }\n.gallery > img:nth-child(6) { clip-path: polygon(0 0, 100% 0 ,100% 100%, 50% 100%); } }</code></pre>\n\n\n\n<p>Here’s what we get:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a\" src=\"//codepen.io/anon/embed/preview/abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a?height=600&amp;theme-id=1&amp;slug-hash=abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a\" title=\"CodePen Embed abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The final touch is to make the width of the middle column equal <code>0</code> to get rid of the spaces between the images. The same sort of spacing problem we had with the rhombus grid, but with a different approach for the shapes we’re using:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-template-columns: auto 0 auto;</code></pre>\n\n\n\n<p>I had to fiddle with the <code>clip-path</code> values to make sure they would all appear to fit together nicely like a puzzle. The original images overlap when the middle column has zero width, but after slicing the images, the illusion is perfect:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"940\" height=\"459\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658829628433_image.png?resize=940%2C459&#038;ssl=1\" alt=\"\" class=\"wp-image-367334\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658829628433_image.png?w=940&amp;ssl=1 940w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658829628433_image.png?resize=300%2C146&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658829628433_image.png?resize=768%2C375&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"css-pizza-pie-grid\">CSS Pizza Pie Grid</h3>\n\n\n<p>Guess what? We can get another cool grid by simply adding <code>border-radius</code> and <code>overflow</code> to our grid or triangular shapes. &#x1f389;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abYygRW/ba0f716af470c64ce13f6f7f2958cbfe\" src=\"//codepen.io/anon/embed/abYygRW/ba0f716af470c64ce13f6f7f2958cbfe?height=600&amp;theme-id=1&amp;slug-hash=abYygRW/ba0f716af470c64ce13f6f7f2958cbfe&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abYygRW/ba0f716af470c64ce13f6f7f2958cbfe\" title=\"CodePen Embed abYygRW/ba0f716af470c64ce13f6f7f2958cbfe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"css-grid-of-puzzle-pieces\">CSS Grid of Puzzle Pieces</h3>\n\n\n<p>This time we are going to play with the CSS <a href=\"https://css-tricks.com/almanac/properties/m/mask/\"><code>mask</code></a> property to make the images look like pieces of a puzzle.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJvWKPm\" src=\"//codepen.io/anon/embed/OJvWKPm?height=600&amp;theme-id=1&amp;slug-hash=OJvWKPm&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJvWKPm\" title=\"CodePen Embed OJvWKPm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">If you haven’t used <code>mask</code> with <a href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/\">CSS gradients</a>, I highly recommend <a href=\"https://css-tricks.com/css-borders-using-masks/\">this other article</a> I wrote on the topic because it’ll help with what comes next. Why gradients? Because that’s what we’re using to get the round notches in the puzzle piece shapes.</p>\n\n\n\n<p>Setting up the grid should be a cinch by now, so let’s focus instead on the <code>mask</code> part.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxBXwP/e13c06c572e0c93d95d92e98995d05e0\" src=\"//codepen.io/anon/embed/mdxBXwP/e13c06c572e0c93d95d92e98995d05e0?height=450&amp;theme-id=1&amp;slug-hash=mdxBXwP/e13c06c572e0c93d95d92e98995d05e0&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxBXwP/e13c06c572e0c93d95d92e98995d05e0\" title=\"CodePen Embed mdxBXwP/e13c06c572e0c93d95d92e98995d05e0\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>As illustrated in the above demo, we need two gradients to create the final shape. One gradient creates a circle (the green part) and the other creates the right curve while filling in the top part.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--g: 6px; /* controls the gap */\n--r: 42px;  /* control the circular shapes */\n\nbackground: \n  radial-gradient(var(--r) at left 50% bottom var(--r), green 95%, #0000),\n  radial-gradient(calc(var(--r) + var(--g)) at calc(100% + var(--g)) 50%, #0000 95%, red)\n  top/100% calc(100% - var(--r)) no-repeat;</code></pre>\n\n\n\n<p>Two variables control the shape. The <code>--g</code> variable is nothing but the grid gap. We need to account for the gap to correctly place our circles so they overlap perfectly when the whole puzzle is assembled. The <code>--r</code> variable controls the size of circular parts of the puzzle shape.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"756\" height=\"369\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658918624175_image.png?resize=756%2C369&#038;ssl=1\" alt=\"\" class=\"wp-image-367336\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658918624175_image.png?w=756&amp;ssl=1 756w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658918624175_image.png?resize=300%2C146&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now we take the same CSS and update a few values in it to create the three other shapes:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1\" src=\"//codepen.io/anon/embed/preview/JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1?height=600&amp;theme-id=1&amp;slug-hash=JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1\" title=\"CodePen Embed JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We have the shapes, but not the overlapping edges we need to make them fit together. Each image is limited to the grid cell it’s in, so it makes sense why the shapes are sort of jumbled at the moment:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"497\" height=\"478\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658932167687_image.png?resize=497%2C478&#038;ssl=1\" alt=\"\" class=\"wp-image-367338\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658932167687_image.png?w=497&amp;ssl=1 497w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658932167687_image.png?resize=300%2C289&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We need to create an overflow by increasing the height/width of the images. From the above figure, we have to increase the height of the first and fourth images while we increase the width of the second and third ones. You have probably already guessed that we need to increase them using the <code>--r</code> variable.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:is(:nth-child(1),:nth-child(4)) {\n  width: 100%;\n  height: calc(100% + var(--r));\n}\n.gallery > img:is(:nth-child(2),:nth-child(3)) {\n  height: 100%;\n  width: calc(100% + var(--r));\n}</code></pre>\n\n\n\n<p>We are getting closer!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_dymVjdz/839e965687fb03aff15cf4d11fc21e09\" src=\"//codepen.io/anon/embed/preview/dymVjdz/839e965687fb03aff15cf4d11fc21e09?height=600&amp;theme-id=1&amp;slug-hash=dymVjdz/839e965687fb03aff15cf4d11fc21e09&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed dymVjdz/839e965687fb03aff15cf4d11fc21e09\" title=\"CodePen Embed dymVjdz/839e965687fb03aff15cf4d11fc21e09\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We created the overlap but, by default, our images either overlap on the right (if we increase the width) or the bottom (if we increase the height). But that’s not what we want for the second and fourth images. The fix is to use <code>place-self: end</code> on those two images and our full code becomes this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJvWKPm\" src=\"//codepen.io/anon/embed/preview/OJvWKPm?height=600&amp;theme-id=1&amp;slug-hash=OJvWKPm&amp;default-tab=css,result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJvWKPm\" title=\"CodePen Embed OJvWKPm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here is another example where I am using a conic gradient instead of a radial gradient. This gives us triangular puzzle pieces while keeping the same underlying HTML and CSS.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9\" src=\"//codepen.io/anon/embed/preview/RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9?height=600&amp;theme-id=1&amp;slug-hash=RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9\" title=\"CodePen Embed RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>A last one! This time I am using <code>clip-path</code> and since it&#8217;s a property we can animate, we get a cool hover by simply updating the custom property that controls the shape.<br></p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOezMrY\" src=\"//codepen.io/anon/embed/preview/gOezMrY?height=600&amp;theme-id=1&amp;slug-hash=gOezMrY&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOezMrY\" title=\"CodePen Embed gOezMrY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>That’s all for this first part! By combining the things we’ve already learned about CSS Grid with some added <code>clip-path</code> and <code>mask</code> magic, we were able to make grid layouts featuring different kinds of shapes. And we used the same HTML markup each time! And the markup itself is nothing more than a container with a handful of image elements!</p>\n\n\n\n<p>In the second part, we are going to explore more complex-looking grids with more fancy shapes and hover effects.</p>\n\n\n\n<p>I’m planning to take the demo of expanding image panels we made together in <a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout\">this other article</a>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNzxeOO/fae9ee2f379890e26459f66cff344cee\" src=\"//codepen.io/anon/embed/preview/WNzxeOO/fae9ee2f379890e26459f66cff344cee?height=450&amp;theme-id=1&amp;slug-hash=WNzxeOO/fae9ee2f379890e26459f66cff344cee&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNzxeOO/fae9ee2f379890e26459f66cff344cee\" title=\"CodePen Embed WNzxeOO/fae9ee2f379890e26459f66cff344cee\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>…and transform it into a zig-zag image panels! And this is only one example among the many we will discover in the next article.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='251' src='https://videopress.com/embed/nLE0fL33?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1/\">CSS Grid and Custom Shapes, Part 1</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "In a previous article, I looked at CSS Grid’s ability to create complex layouts using its auto-placement powers. I took that one step further in another article that added a zooming hover effect to images in a grid layout. This time, I want to dive into another type of grid, one that works with shapes.\n\n\n\n\n\n\n\nLike, what if the images aren’t perfectly square but instead are shaped like hexagons or rhombuses? Spoiler alert: we can do it. In fact, we’re going to combine CSS Grid techniques we’ve looked at and drop in some CSS clip-path and mask magic to create fancy grids of images for just about any shape you can imagine!\n\n\nLet’s start with some markup\n\n\nMost of the layouts we are going to look at may look easy to achieve at first glance, but the challenging part is to achieve them with the same HTML markup. We can use a lot of wrappers, divs, and whatnot, but the goal of this post is to use the same and smallest amount of HTML code and still get all the different grids we want. After all, what’s CSS but a way to separate styling and markup? Our styling should not depend on the markup, and vice versa.\n\n\n\nThis said, let’s start with this:\n\n\n\n<div class=\"gallery\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n  <img src=\"...\" alt=\"...\">\n  <!-- as many times as we want -->\n</div>\n\n\n\nA container with images is all that we need here. Nothing more!\n\n\nCSS Grid of Hexagons\n\n\nThis is also sometimes referred to as a “honeycomb” grid.\n\n\n\nCodePen Embed Fallback\n\n\n\nThere are already plenty of other blog posts out there that show how to make this. Heck, I wrote one here on CSS-Tricks! That article is still good and goes way deep on making a responsive layout. But for this specific case, we are going to rely on a much simpler CSS approach.\n\n\n\nFirst, let’s use clip-path on the images to create the hexagon shape and we place all of them in the same grid area so they overlap.\n\n\n\n.gallery {\n  --s: 150px; /* controls the size */\n  display: grid;\n}\n\n.gallery > img {\n  grid-area: 1/1;\n  width: var(--s);\n  aspect-ratio: 1.15;\n  object-fit: cover;\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%);\n}\n\n\n\nclip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%)\n\n\n\nNothing fancy yet. All the images are hexagons and above each other. So it looks like all we have is a single hexagon-shaped image element, but there are really seven.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe next step is to apply a translation to the images to correctly place them on the grid.\n\n\n\n\n\n\n\nNotice that we still want one of the images to remain in the center. The rest are placed around it using CSS translate and good ol’ fashioned geometry. Here’s are the mock formulas I came up with for each image in the grid:\n\n\n\ntranslate((height + gap)*sin(0deg), (height + gap)*cos(0))\ntranslate((height + gap)*sin(60deg), (height + gap)*cos(60deg))\ntranslate((height + gap)*sin(120deg), (height + gap)*cos(120deg))\ntranslate((height + gap)*sin(180deg), (height + gap)*cos(180deg))\ntranslate((height + gap)*sin(240deg), (height + gap)*cos(240deg))\ntranslate((height + gap)*sin(300deg), (height + gap)*cos(300deg))\n\n\n\nA few calculations and optimization later (let’s skip that boring part, right?) we get the following CSS:\n\n\n\n.gallery {\n  --s: 150px; /* control the size */\n  --g: 10px;  /* control the gap */\n  display: grid;\n}\n.gallery > img {\n  grid-area: 1/1;\n  width: var(--s);\n  aspect-ratio: 1.15;\n  object-fit: cover;\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50% ,75% 100%, 25% 100%, 0 50%);\n  transform: translate(var(--_x,0), var(--_y,0));\n}\n.gallery > img:nth-child(1) { --_y: calc(-100% - var(--g)); }\n.gallery > img:nth-child(7) { --_y: calc( 100% + var(--g)); }\n.gallery > img:nth-child(3),\n.gallery > img:nth-child(5) { --_x: calc(-75% - .87*var(--g)); }\n.gallery > img:nth-child(4),\n.gallery > img:nth-child(6) { --_x: calc( 75% + .87*var(--g)); }\n.gallery > img:nth-child(3),\n.gallery > img:nth-child(4) { --_y: calc(-50% - .5*var(--g)); }\n.gallery > img:nth-child(5), \n.gallery > img:nth-child(6) { --_y: calc( 50% + .5*var(--g)); }\n\n\n\nMaybe that’ll be easier when we get real trigonometry functions in CSS!\n\n\n\nEach image is translated by the --_x and --_y variables that are based on those formulas. Only the second image (nth-child(2)) is undefined in any selector because it’s the one in the center. It can be any image if you decide to use a different order. Here’s the order I’m using:\n\n\n\n\n\n\n\nWith only a few lines of code, we get a cool grid of images. To this, I added a little hover effect to the images to make things fancier.\n\n\n\nGuess what? We can get another hexagon grid by simply updating a few values.\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you check the code and compare it with the previous one you will notice that I have simply swapped the values inside clip-path and I switched between --x and --y. That’s all!\n\n\nCSS Grid of Rhombuses\n\n\nRhombus is such a fancy word for a square that’s rotated 45 degrees.\n\n\n\nCodePen Embed Fallback\n\n\n\nSame HTML, remember? We first start by defining a 2×2 grid of images in CSS:\n\n\n\n.gallery {\n  --s: 150px; /* controls the size */\n\n  display: grid;\n  gap: 10px;\n  grid: auto-flow var(--s) / repeat(2, var(--s));\n  place-items: center;\n}\n.gallery > img {\n  width: 100%; \n  aspect-ratio: 1;\n  object-fit: cover;\n}\n\n\n\nThe first thing that might catch your eye is the grid property. It’s pretty uncommonly used but is super helpful in that it’s a shorthand that lets you define a complete grid in one declaration. It’s not the most intuitive — and not to mention readable — property, but we are here to learn and discover new things, so let’s use it rather than writing out all of the individual grid properties.\n\n\n\ngrid: auto-flow var(--s) / repeat(2,var(--s));\n\n/* is equivalent to this: */\ngrid-template-columns: repeat(2, var(--s));\ngrid-auto-rows: var(--s);\n\n\n\nThis defines two columns equal to the --s variable and sets the height of all the rows to --s as well. Since we have four images, we will automatically get a 2×2 grid.\n\n\n\nHere’s another way we could have written it:\n\n\n\ngrid-template-columns: repeat(2, var(--s));\ngrid-template-rows: repeat(2, var(--s));\n\n\n\n…which can be reduced with the grid shorthand:\n\n\n\ngrid: repeat(2,var(--s)) / repeat(2,var(--s));\n\n\n\nAfter setting the grid, we rotate it and the images with CSS transforms and we get this:\n\n\n\nCodePen Embed Fallback\n\n\n\nNote how I rotate them both by 45deg, but in the opposite direction.\n\n\n\n.gallery {\n  /* etc. */\n  transform: rotate(45deg);\n}\n.gallery > img {\n  /* etc. */\n  transform: rotate(-45deg);\n}\n\n\n\nRotating the images in the negative direction prevents them from getting rotated with the grid so they stay straight. Now, we apply a clip-path to clip a rhombus shape out of them.\n\n\n\nclip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%)\n\n\n\nCodePen Embed Fallback\n\n\n\nWe are almost done! We need to rectify the size of the image to make them fit together. Otherwise, they’re spaced far apart to the point where it doesn’t look like a grid of images.\n\n\n\n\n\n\n\nThe image is within the boundary of the green circle, which is the inscribed circle of the grid area where the image is placed. What we want is to make the image bigger to fit inside the red circle, which is the circumscribed circle of the grid area.\n\n\n\nDon’t worry, I won’t introduce any more boring geometry. All you need to know is that the relationship between the radius of each circle is the square root of 2 (sqrt(2)). This is the value we need to increase the size of our images to fill the area. We will use 100%*sqrt(2) = 141% and be done!\n\n\n\n.gallery {\n  --s: 150px; /* control the size */\n\n  display: grid;\n  grid: auto-flow var(--s) / repeat(2,var(--s));\n  gap: 10px;\n  place-items: center;\n  transform: rotate(45deg);\n}\n.gallery > img {\n  width: 141%; /* 100%*sqrt(2) = 141% */\n  aspect-ratio: 1;\n  object-fit: cover;\n  transform: rotate(-45deg);\n  clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);\n}\n\n\n\nLike the hexagon grid, we can make things fancier with that nice zooming hover effect:\n\n\n\nCodePen Embed Fallback\n\n\nCSS Grid of Triangular Shapes\n\n\nCodePen Embed Fallback\n\n\n\nYou probably know by now that the big trick is figuring out the clip-path to get the shapes we want. For this grid, each element has its own clip-path value whereas the last two grids worked with a consistent shape. So, this time around, it’s like we’re working with a few different triangular shapes that come together to form a rectangular grid of images.\n\n\n\nThe three images at the top\n\n\n\nThe three images at the bottom\n\n\n\nWe place them inside a 3×2 grid with the following CSS:\n\n\n\n.gallery {\n  display: grid;\n  gap: 10px; \n  grid-template-columns: auto auto auto; /* 3 columns */\n  place-items: center;\n}\n.gallery > img {\n  width: 200px; /* controls the size */\n  aspect-ratio: 1;\n  object-fit: cover;\n}\n/* the clip-path values */\n.gallery > img:nth-child(1) { clip-path: polygon(0 0, 50% 0, 100% 100% ,0 100%); }\n.gallery > img:nth-child(2) { clip-path: polygon(0 0, 100% 0, 50% 100%); }\n.gallery > img:nth-child(3) { clip-path: polygon(50% 0, 100% 0, 100% 100%, 0 100%); }\n.gallery > img:nth-child(4) { clip-path: polygon(0 0, 100% 0, 50% 100%, 0 100%); }\n.gallery > img:nth-child(5) { clip-path: polygon(50% 0, 100% 100%, 0% 100%); }\n.gallery > img:nth-child(6) { clip-path: polygon(0 0, 100% 0 ,100% 100%, 50% 100%); } }\n\n\n\nHere’s what we get:\n\n\n\nCodePen Embed Fallback\n\n\n\nThe final touch is to make the width of the middle column equal 0 to get rid of the spaces between the images. The same sort of spacing problem we had with the rhombus grid, but with a different approach for the shapes we’re using:\n\n\n\ngrid-template-columns: auto 0 auto;\n\n\n\nI had to fiddle with the clip-path values to make sure they would all appear to fit together nicely like a puzzle. The original images overlap when the middle column has zero width, but after slicing the images, the illusion is perfect:\n\n\n\n\n\n\nCSS Pizza Pie Grid\n\n\nGuess what? We can get another cool grid by simply adding border-radius and overflow to our grid or triangular shapes. 🎉\n\n\n\nCodePen Embed Fallback\n\n\nCSS Grid of Puzzle Pieces\n\n\nThis time we are going to play with the CSS mask property to make the images look like pieces of a puzzle.\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you haven’t used mask with CSS gradients, I highly recommend this other article I wrote on the topic because it’ll help with what comes next. Why gradients? Because that’s what we’re using to get the round notches in the puzzle piece shapes.\n\n\n\nSetting up the grid should be a cinch by now, so let’s focus instead on the mask part.\n\n\n\nCodePen Embed Fallback\n\n\n\nAs illustrated in the above demo, we need two gradients to create the final shape. One gradient creates a circle (the green part) and the other creates the right curve while filling in the top part.\n\n\n\n--g: 6px; /* controls the gap */\n--r: 42px;  /* control the circular shapes */\n\nbackground: \n  radial-gradient(var(--r) at left 50% bottom var(--r), green 95%, #0000),\n  radial-gradient(calc(var(--r) + var(--g)) at calc(100% + var(--g)) 50%, #0000 95%, red)\n  top/100% calc(100% - var(--r)) no-repeat;\n\n\n\nTwo variables control the shape. The --g variable is nothing but the grid gap. We need to account for the gap to correctly place our circles so they overlap perfectly when the whole puzzle is assembled. The --r variable controls the size of circular parts of the puzzle shape.\n\n\n\n\n\n\n\nNow we take the same CSS and update a few values in it to create the three other shapes:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe have the shapes, but not the overlapping edges we need to make them fit together. Each image is limited to the grid cell it’s in, so it makes sense why the shapes are sort of jumbled at the moment:\n\n\n\n\n\n\n\nWe need to create an overflow by increasing the height/width of the images. From the above figure, we have to increase the height of the first and fourth images while we increase the width of the second and third ones. You have probably already guessed that we need to increase them using the --r variable.\n\n\n\n.gallery > img:is(:nth-child(1),:nth-child(4)) {\n  width: 100%;\n  height: calc(100% + var(--r));\n}\n.gallery > img:is(:nth-child(2),:nth-child(3)) {\n  height: 100%;\n  width: calc(100% + var(--r));\n}\n\n\n\nWe are getting closer!\n\n\n\nCodePen Embed Fallback\n\n\n\nWe created the overlap but, by default, our images either overlap on the right (if we increase the width) or the bottom (if we increase the height). But that’s not what we want for the second and fourth images. The fix is to use place-self: end on those two images and our full code becomes this:\n\n\n\nCodePen Embed Fallback\n\n\n\nHere is another example where I am using a conic gradient instead of a radial gradient. This gives us triangular puzzle pieces while keeping the same underlying HTML and CSS.\n\n\n\nCodePen Embed Fallback\n\n\n\nA last one! This time I am using clip-path and since it’s a property we can animate, we get a cool hover by simply updating the custom property that controls the shape.\n\n\n\nCodePen Embed Fallback\n\n\nWrapping up\n\n\nThat’s all for this first part! By combining the things we’ve already learned about CSS Grid with some added clip-path and mask magic, we were able to make grid layouts featuring different kinds of shapes. And we used the same HTML markup each time! And the markup itself is nothing more than a container with a handful of image elements!\n\n\n\nIn the second part, we are going to explore more complex-looking grids with more fancy shapes and hover effects.\n\n\n\nI’m planning to take the demo of expanding image panels we made together in this other article:\n\n\n\nCodePen Embed Fallback\n\n\n\n…and transform it into a zig-zag image panels! And this is only one example among the many we will discover in the next article.\n\n\n\n\n\n\n\nCSS Grid and Custom Shapes, Part 1 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367324",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-15T13:13:47.000Z",
      "date_modified": "2022-08-15T13:13:47.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367403",
      "url": "https://css-tricks.com/quick-tip-clear-vs-code-cache-for-open-files/",
      "title": "Quick Tip: Clear VS Code Cache for Open Files",
      "summary": "If you use VS Code, you might have enabled the setting for re-opening a previously open file next time the app launches. I do. I like that.\nHey, thanks for remembering, buddy! 🤗\nBut sometimes you really, really don’t want …\n\nQuick Tip: Clear VS Code Cache for Open Files originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>If you use VS Code, you might have enabled the setting for re-opening a previously open file next time the app launches. I do. I like that.</p>\n\n\n\n<span id=\"more-367403\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1003\" height=\"563\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-open-last-file.png?resize=1003%2C563&#038;ssl=1\" alt=\"\" class=\"wp-image-367404\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-open-last-file.png?w=1003&amp;ssl=1 1003w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-open-last-file.png?resize=300%2C168&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-open-last-file.png?resize=768%2C431&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Hey, thanks for remembering, buddy! &#x1f917;</figcaption></figure>\n\n\n\n<p>But sometimes you really, really don&#8217;t want that to happen.</p>\n\n\n\n<p>I recently ran into one of those times! I had to reinstall my local copy of this site and, with it, the 3GB+ database that accompanies it. Being a WordPress site and all, I needed to open up the SQL database file to search-and-replace some stuff.</p>\n\n\n\n<p>If you&#8217;ve ever tried to open a super duper large file in VS Code, then you know you might need to jiggle a few settings that increase the memory limit and all that. The app is super flexible like that. There&#8217;s even a <a href=\"https://marketplace.visualstudio.com/items?itemName=mbehr1.vsc-lfs\" rel=\"noopener\">nice extension</a> that&#8217;ll both increase the memory <em>and</em> perform a search-and-replace on open.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"507\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?resize=1024%2C507&#038;ssl=1\" alt=\"\" class=\"wp-image-367406\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?resize=1024%2C507&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?resize=300%2C149&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?resize=768%2C381&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?w=1223&amp;ssl=1 1223w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Anyway, that big ol’ database file crashed VS Code several times and I wound up finding another way to go about things. However, VS Code keeps trying to open that file and inevitably crashes even though I nuked the file. And that means I wait for the MacOS beachball of fun to spin around before the app crashes and I can reopen it again for reals.</p>\n\n\n\n<p>Well, I finally decided to fix that today and spent a little time searching around. One <a href=\"https://stackoverflow.com/questions/57887568/vs-code-crashing-on-restart-after-opening-large-file\" rel=\"noopener\">Stack Overflow thread</a> suggests disabling extensions and increasing the memory limit via the command line. I&#8217;m glad that worked for some folks, but I had to keep looking.</p>\n\n\n\n<p><a href=\"https://stackoverflow.com/questions/45216264/clear-file-content-cache-in-visual-studio-code\" rel=\"noopener\">Another thread</a> suggests clearing the app&#8217;s cache from the command palette.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1223\" height=\"606\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?resize=1223%2C606&#038;ssl=1\" alt=\"\" class=\"wp-image-367407\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?w=1223&amp;ssl=1 1223w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?resize=300%2C149&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?resize=1024%2C507&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?resize=768%2C381&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Nice, but no dice. &#x1f3b2;</p>\n\n\n\n<p>I wound up going with a scorched earth strategy <a href=\"https://www.youtube.com/watch?v=pmI-rgGNZcs\" rel=\"noopener\">shared by Jie Jenn in a helpful YouTube video</a>. You&#8217;ve gotta manually trash the cached files from VS Code. The video walks through it in Windows, but it&#8217;s pretty darn similar in MacOS. The VS Code cache is located in your user folder.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2614\" height=\"1136\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=2614%2C1136&#038;ssl=1\" alt=\"\" class=\"wp-image-367411\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?w=2614&amp;ssl=1 2614w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=300%2C130&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=1024%2C445&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=768%2C334&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=1536%2C668&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=2048%2C890&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Notice that I have the <code>Backups</code> folder highlighted there. Jie removed the files from the <code>CachedData</code> folder, but all that did was trigger a prompt for me to re-install the app. So, I took a risk and deleted what appeared to be a 3GB+ file in <code>Backups</code>. I showed that file the door and VS Code has been happy ever since.</p>\n\n\n\n<p>Ask me again in a week and maybe I&#8217;ll find out that I really screwed something up. But so far, so good!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/quick-tip-clear-vs-code-cache-for-open-files/\">Quick Tip: Clear VS Code Cache for Open Files</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "If you use VS Code, you might have enabled the setting for re-opening a previously open file next time the app launches. I do. I like that.\n\n\n\n\n\n\n\nHey, thanks for remembering, buddy! 🤗\n\n\n\nBut sometimes you really, really don’t want that to happen.\n\n\n\nI recently ran into one of those times! I had to reinstall my local copy of this site and, with it, the 3GB+ database that accompanies it. Being a WordPress site and all, I needed to open up the SQL database file to search-and-replace some stuff.\n\n\n\nIf you’ve ever tried to open a super duper large file in VS Code, then you know you might need to jiggle a few settings that increase the memory limit and all that. The app is super flexible like that. There’s even a nice extension that’ll both increase the memory and perform a search-and-replace on open.\n\n\n\n\n\n\n\nAnyway, that big ol’ database file crashed VS Code several times and I wound up finding another way to go about things. However, VS Code keeps trying to open that file and inevitably crashes even though I nuked the file. And that means I wait for the MacOS beachball of fun to spin around before the app crashes and I can reopen it again for reals.\n\n\n\nWell, I finally decided to fix that today and spent a little time searching around. One Stack Overflow thread suggests disabling extensions and increasing the memory limit via the command line. I’m glad that worked for some folks, but I had to keep looking.\n\n\n\nAnother thread suggests clearing the app’s cache from the command palette.\n\n\n\n\n\n\n\nNice, but no dice. 🎲\n\n\n\nI wound up going with a scorched earth strategy shared by Jie Jenn in a helpful YouTube video. You’ve gotta manually trash the cached files from VS Code. The video walks through it in Windows, but it’s pretty darn similar in MacOS. The VS Code cache is located in your user folder.\n\n\n\n\n\n\n\nNotice that I have the Backups folder highlighted there. Jie removed the files from the CachedData folder, but all that did was trigger a prompt for me to re-install the app. So, I took a risk and deleted what appeared to be a 3GB+ file in Backups. I showed that file the door and VS Code has been happy ever since.\n\n\n\nAsk me again in a week and maybe I’ll find out that I really screwed something up. But so far, so good!\n\nQuick Tip: Clear VS Code Cache for Open Files originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367403",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-11T13:35:56.000Z",
      "date_modified": "2022-08-11T13:35:56.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367370",
      "url": "https://css-tricks.com/designing-for-long-form-articles/",
      "title": "Designing for Long-Form Articles",
      "summary": "Designing a beautiful “article” is wrought with tons of considerations. Unlike, say, a homepage, a long-form article is less about designing an interface than it is designing text in a way that creates a relaxed and comfortable reading experience.\nThat’s …\n\nDesigning for Long-Form Articles originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Designing a beautiful “article” is wrought with tons of considerations. Unlike, say, a homepage, a long-form article is less about designing an interface than it is designing text in a way that creates a relaxed and comfortable reading experience.</p>\n\n\n\n<p>That’s because articles deal with long-form content which, in turn, tends to be valued by a ”time on page” interaction with users. We want someone to read a complete narrative. There’s a natural space between the time someone lands on an article and reads all the words. And hopefully, that space is immersive enough to not only hold a user’s, but provoke thoughts, ideas, and, possibly, actions. At least that’s what I’m hoping as I have your attention and you make your way through the very article you’re reading.</p>\n\n\n\n<p>There’s a balance. On one hand, we hear that <a href=\"https://geoffgraham.me/no-one-reads-the-internet/\" rel=\"noopener\">“no one reads the Internet.”</a> On the other, a long-form article demands careful attention. Considering the current value of content marketing and the growing impatience in users, captivating readers for as long as possible should be a key concern. Let’s take a look at some best practices and examples of incredible article pages to get a better idea of what makes a visually appealing reading experience for long-form articles (without sacrificing user experience), and how we can replicate the effects.</p>\n\n\n\n<span id=\"more-367370\"></span>\n\n\n<h3 id=\"quick-wins\">Quick wins</h3>\n\n\n<p>Let me quickly list out what I think might already be obvious to many of you, but are effective things for content legibility:</p>\n\n\n\n<ul><li><strong>Increase the font size:</strong> We know that <code>16px</code> is the default and is perfectly fine in many designs, but a larger font size is inviting in that it implies the user is free to lean back and settle in without having to angle forward with the screen in their face to read.</li><li><strong>Aim for characters per line:</strong> Very few people I know like to work harder than they need to, and that goes for reading too. Rather than using the full viewport width, try to narrow things down and balance that with your larger font size to get <em>fewer</em> characters on each line of text. Your sweet spot may vary, though many folks suggest somewhere between 45-75 characters per line to help limit how far the reader’s eye has to work to go from left to right. Chris has a <a href=\"https://css-tricks.com/bookmarklet-colorize-text-45-75-characters-line-length-testing/\">bookmarklet to help count characters</a>, but we also have the <code>ch</code> unit in CSS to get predictable results.</li><li><strong>Bump up the line height:</strong> A default line height is going to feel smashed. It’s funny, but more space between lines (up to a point, of course) is less work for eyes, which seems antithetical to the characters-per-line advice where we generally want eyes to travel a shorter distance. A line height between <code>1.2</code> and <code>1.5</code> seems to be a pretty typical range for long-form content.</li></ul>\n\n\n\n<p>If you haven’t seen it before,&nbsp;<a target=\"_blank\" href=\"https://www.pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography\" rel=\"noreferrer noopener\">Pierrick Calvez has a great</a><a target=\"_blank\" href=\"https://www.pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography\" rel=\"noreferrer noopener\">&nbsp;</a><a target=\"_blank\" href=\"https://www.pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography\" rel=\"noreferrer noopener\">“five-minute”</a><a target=\"_blank\" href=\"https://www.pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography\" rel=\"noreferrer noopener\">&nbsp;guide to typography</a>&nbsp;that packs in a bunch of low-hanging fruit like these.</p>\n\n\n<h3 id=\"design-for-extra-breathing-room\">Design for extra breathing room</h3>\n\n\n<p>You may be accustomed to designing&nbsp;“above&nbsp;the fold” where real estate is a prime commodity. That’s sort of like beach-front property in the web world because it’s where we’re used to packing in high-value things, like hero banners, calls to action, and anything else to help sell a thing. Above the fold can be a lot like a dense urban downtown with high traffic and high-rise buildings.</p>\n\n\n\n<p>Articles are different. They allow you to stretch out a bit. If we want to take the city development analogy a little further, articles have the acreage to lean into a&nbsp;“less&nbsp;is more” sort of design approach. That’s what makes seemingly small design choices — like type — so important to the overall experience.</p>\n\n\n\n<p>Check out&nbsp;the example below.&nbsp;The link underlines have a little more room to breathe&nbsp;(specifically,&nbsp;they appear below the descenders). This is actually something that you can enable sitewide but looks especially nice on article pages since it increases readability.&nbsp;That’s the sort of subtle design choice that contributes to extra breathing room.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=2880%2C1800&#038;ssl=1\" alt=\"A long-form article on the Taste website.\" class=\"wp-image-367371\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><code>text-underline-position: under;</code> is the line of CSS that makes this work. Naturally, <code>text-decoration</code> must be set to something other than <code>none</code> (<code>underline</code> in this case), too.</p>\n\n\n\n<p>The example above also features <code>text-decoration-thickness</code>, which alters the thickness of underlines (and other line types). You can use this CSS property to match a line’s thickness to a font’s size and/or weight.</p>\n\n\n\n<p>Here’s a full example:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  text-decoration: underline;\n  text-decoration-thickness: 2px;\n\n  /* or */\n  text-decoration: underline 2px;\n  text-underline-position: under;\n}</code></pre>\n\n\n\n<p>But before you reach for the <code>text-decoration</code> shorthand, Šime Vidas has <a href=\"https://css-tricks.com/when-to-avoid-css-text-decoration-shorthand/\">a few “gotchas”</a> when it comes to using it that are worth reviewing.</p>\n\n\n<h3 id=\"leading-into-the-content\">Leading into the content</h3>\n\n\n<p><dfn>Drop caps</dfn> are stylized letters that can be placed at the beginning of a document or document section. <a href=\"https://www.smashingmagazine.com/2012/04/drop-caps-historical-use-and-current-best-practices/\" rel=\"noopener\">They were once used in Latin texts</a>, but today they’re mostly used for decorative reasons.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=2880%2C1800&#038;ssl=1\" alt=\"\" class=\"wp-image-367372\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Personally, I think that drop caps hinder readability. However, they can be a nice way to “lead” a reader into the main content, and they shouldn’t introduce any serious accessibility issues as long as you’re using the <a href=\"https://css-tricks.com/almanac/selectors/f/first-letter/\"><code>::first-letter</code></a> pseudo-element. There are <a href=\"https://css-tricks.com/snippets/css/drop-caps/\">other (older)</a> <a href=\"https://css-tricks.com/snippets/css/drop-caps/\">methods</a> that involve more HTML and CSS as well as the use of ARIA attributes in order for the content to remain accessible.</p>\n\n\n\n<p>Using <code>::first-letter</code>, the CSS would look something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* select the first letter of the first paragraph */\narticle > p:first-child::first-letter {\n  color: #903;\n  float: left;\n  font-family: Georgia;\n  font-size: 75px;\n  line-height: 60px;\n  padding-top: 4px;\n  padding-right: 8px;\n  padding-left: 3px;\n}</code></pre>\n\n\n\n<p>It sure would be nice if we could use the <a href=\"https://css-tricks.com/almanac/properties/i/initial-letter/\"><code>initial-letter</code></a> property, but there’s pretty much no support for it at the time I’m writing this. If we had it, all that math for font size and line height would be calculated for us!</p>\n\n\n\n<p>CodePen challenged folks to show off their drop-cap-styling skills several years ago and you can see a whole bunch of neat examples from it in <a href=\"https://codepen.io/collection/DrBKPx\" rel=\"noopener\">this collection</a>.</p>\n\n\n<h3 id=\"skip-to-main-content\">Skip to main content</h3>\n\n\n<p>Screen readers allow users to skip to the main content as long as it wraps it within a <code>&lt;main&gt;</code> element. However, those who navigate websites by tabbing don’t benefit from this. Instead, we must create a &#8220;skip to main content&#8221; anchor link. This link is customarily hidden but revealed once the user makes their first tab (i.e. show on focus).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=1024%2C640&#038;ssl=1\" alt=\"\" class=\"wp-image-367377\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It would look something like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- anchor -->\n&lt;a id=\"skip-link\" href=\"#main\">Skip to main content&lt;/a>\n\n&lt;!-- target -->\n&lt;main class=\"main\">\n  &lt;!-- main content -->\n&lt;/main></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#skip-link {\n  position: absolute; /* remove it from the flow */\n  transform: translateX(-100%); /* move it off-screen so that it appears hidden but remains focusable */\n}\n#skip-link:focus {\n  position: unset; /* insert it back into the flow */\n  transform: unset; /* move it back onto the screen */\n}\n\n.main {\n  scroll-margin: 1rem; /* adds breathing room above the scroll target */\n}</code></pre>\n\n\n\n<p>There are other ways to go about it, of course. Here are a couple of deeper dives on creating skip links.</p>\n\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card article\" id=\"mini-post-367370\">\n\n  <time datetime=\"2021-08-03\" title=\"Originally published Aug 10, 2022\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Aug 3, 2021  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/a-deep-dive-on-skipping-to-content/\">\n      A Deep Dive on Skipping to Content    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/design/\" rel=\"tag\">design</a> <a href=\"https://css-tricks.com/tag/design-principles/\" rel=\"tag\">design principles</a> <a href=\"https://css-tricks.com/tag/editorial/\" rel=\"tag\">editorial</a> <a href=\"https://css-tricks.com/tag/typography/\" rel=\"tag\">typography</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/paulratcliffe/\" aria-label=\"Author page of Paul Ratcliffe\">\n      <img loading=\"lazy\" alt=\"\" class=\"avatar avatar-80 photo avatar-default\" height=\"80\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/1618384308886.jpeg?resize=80%2C80&#038;ssl=1\" width=\"80\"  data-recalc-dims=\"1\">    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/paulratcliffe/\">\n      Paul Ratcliffe    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-367370\">\n\n  <time datetime=\"2020-03-17\" title=\"Originally published Aug 10, 2022\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Aug 25, 2021  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/how-to-create-a-skip-to-content-link/\">\n      How to Create a “Skip to Content” Link    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/design/\" rel=\"tag\">design</a> <a href=\"https://css-tricks.com/tag/design-principles/\" rel=\"tag\">design principles</a> <a href=\"https://css-tricks.com/tag/editorial/\" rel=\"tag\">editorial</a> <a href=\"https://css-tricks.com/tag/typography/\" rel=\"tag\">typography</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/paulryan/\" aria-label=\"Author page of Paul Ryan\">\n      <img loading=\"lazy\" alt=\"\" class=\"avatar avatar-80 photo avatar-default\" height=\"80\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/04/headshot.jpg?resize=80%2C80&#038;ssl=1\" width=\"80\"  data-recalc-dims=\"1\">    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/paulryan/\">\n      Paul Ryan    </a>\n  </div>\n\n</article>\n    </div>\n  \n\n\n<h3 id=\"seamless-visuals\">Seamless visuals</h3>\n\n\n<p>I love the illustrations in <a href=\"https://tastecooking.com/women-arent-ruining-food/\" rel=\"noopener\">this article</a>. Despite how incredible they look, they don’t demand too much cognitive attention. They introduce brief moments of delight but also suggest that the article itself has something more important to say. Partly, this comes down to the use of transparency, whereas rectangular images capture more negative space and therefore demand more attention (which is fine if that’s the desired effect and images are crucial to the story).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=2880%2C1800&#038;ssl=1\" alt=\"\" class=\"wp-image-367379\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>However, it’s important to know that the images aren’t actually transparent at all, but instead are non-transparent JPEGs with the same background color as the content. I’m presuming that’s to keep the size of the images smaller compared to PNGs that support transparency.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"3662\" height=\"2234\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=3662%2C2234&#038;ssl=1\" alt=\"Inspecting an image element in DevTools showing the JPEG images in the source.\" class=\"wp-image-367380\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?w=3662&amp;ssl=1 3662w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=300%2C183&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=1024%2C625&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=768%2C469&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=1536%2C937&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=2048%2C1249&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The downside to “faking” a transparent background like this is that it would require additional trickery (and maintenance) to support a <a href=\"https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/\">dark mode UI</a> if your site happens to offer one. If the illustrations are pretty flat and simple, then SVG might be the way to go instead since it’s small, scalable, and capable of blending into whatever background it’s on.</p>\n\n\n\n<p>But if you’re bound to using raster images and would rather work with PNG files for transparency, you’ll want to look into using <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/\">responsive images</a> and the <a href=\"https://css-tricks.com/native-lazy-loading/\"><code>loading=\"lazy\"</code> attribute</a> for faster loading times.</p>\n\n\n<h3 id=\"put-the-focus-on-the-type-and-semantics\">Put the focus on the type and semantics</h3>\n\n\n<p>You may have very little say over&nbsp;<em>how</em>&nbsp;or&nbsp;<em>where</em>&nbsp;someone reads content on the web these days. Whether the user receives it in an RSS feed, gets it delivered by email, sees it copy-and-pasted from a colleague, finds it on a scraped site, or whatnot, your content might look&nbsp;<em>different</em>&nbsp;than you prefer. You could design what you think is the most gorgeous article in all the land and the user still might&nbsp;<a target=\"_blank\" href=\"https://css-tricks.com/reader-mode-the-button-to-beat/\" rel=\"noreferrer noopener\">smash that Reader Mode button</a>&nbsp;to your dismay.</p>\n\n\n\n<p>That’s ok! The discoverability of content is very much as important as the design of it, and many users have their own ways of discovering content and preferences for what makes a good reading experience.</p>\n\n\n\n<p>But there are reasons why someone would want a Reader Mode. For one, it’s like&nbsp;“not&nbsp;seeing any CSS”&nbsp;at all. By that,&nbsp;I mean&nbsp;<a href=\"https://css-tricks.com/reader-mode-the-button-to-beat/\" target=\"_blank\" rel=\"noreferrer noopener\">Safari’s Reader Mode</a>&nbsp;or&nbsp;<a href=\"https://brave.com/speed-reader/\" target=\"_blank\" rel=\"noreferrer noopener\">Brave SpeedReader</a>, which use machine learning to detect articles. There’s no fetching or executing of CSS, JavaScript, or non-article images, which boosts performance and also blocks ads and tracking.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=2880%2C1800&#038;ssl=1\" alt=\"Fong-form article viewed with Brave's SpeedReader feature.\" class=\"wp-image-367381\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This sort of&nbsp;<a target=\"_blank\" href=\"https://css-tricks.com/this-page-is-a-truly-naked-brutalist-html-quine/\" rel=\"noreferrer noopener\">“brute</a><a target=\"_blank\" href=\"https://css-tricks.com/this-page-is-a-truly-naked-brutalist-html-quine/\" rel=\"noreferrer noopener\">&nbsp;minimalism”</a>&nbsp;puts the focus on the content rather than the styles. So, you might actually&nbsp;<em>want</em>&nbsp;to embrace a browser’s opinionated reading styles specifically for that purpose.</p>\n\n\n\n<p>The way to do that is not by using CSS, but by paying closer attention to your HTML. Reader modes work best with markup that uses simple, semantic, article-related HTML. You’ve got to do more than&nbsp;simply&nbsp;slapping&nbsp;&lt;article&gt;&nbsp;tags around the article to get the most from it.</p>\n\n\n\n<p>You might just find that a minimal design that emphasizes legibility over slickness is actually a good strategy to use in your site’s design. I’d strongly suggest reading Robin’s post on the&nbsp;<a target=\"_blank\" href=\"https://www.robinrendle.com/notes/the-smallest-css/\" rel=\"noreferrer noopener\">“smallest</a><a target=\"_blank\" href=\"https://www.robinrendle.com/notes/the-smallest-css/\" rel=\"noreferrer noopener\">&nbsp;CSS” for a solid reading experience</a>.</p>\n\n\n<h3 id=\"roundup-of-longform-articles\">Roundup of long-form articles!</h3>\n\n\n<p>I’ve shared a lot of what I think makes for a great reading experience for long-form articles on the web. But seeing is believing and I’ve rounded up a bunch of examples that showcase what we’ve covered.</p>\n\n\n\n<div class=\"wp-block-jetpack-slideshow aligncenter\" data-effect=\"slide\"><div class=\"wp-block-jetpack-slideshow_container swiper-container\"><ul class=\"wp-block-jetpack-slideshow_swiper-wrapper swiper-wrapper\"><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"1779\" height=\"2160\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367382\" data-id=\"367382\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=1779%2C2160&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?w=1779&amp;ssl=1 1779w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=247%2C300&amp;ssl=1 247w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=843%2C1024&amp;ssl=1 843w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=768%2C932&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=1265%2C1536&amp;ssl=1 1265w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=1687%2C2048&amp;ssl=1 1687w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">Polygon uses a strong, provacative visual to hook readers into the ain content. Notice how the drop cap, larger font size, and increased line height make this feel like a page you can sit back with and relax.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"1779\" height=\"2160\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367395\" data-id=\"367395\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=1779%2C2160&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?w=1779&amp;ssl=1 1779w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=247%2C300&amp;ssl=1 247w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=843%2C1024&amp;ssl=1 843w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=768%2C932&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=1265%2C1536&amp;ssl=1 1265w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=1687%2C2048&amp;ssl=1 1687w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">The TASTE website uses transparent images that blend into the background color of the content. There’s plenty of space between elements and bold accents — like thick borders and a heavy drop cap — pull the reader’s eye down the page.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"1779\" height=\"2160\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367385\" data-id=\"367385\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=1779%2C2160&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?w=1779&amp;ssl=1 1779w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=247%2C300&amp;ssl=1 247w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=843%2C1024&amp;ssl=1 843w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=768%2C932&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=1265%2C1536&amp;ssl=1 1265w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=1687%2C2048&amp;ssl=1 1687w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">The Outline is a prime example of minimalism. Notice how something as subtle as a squiggly horizontal rule can be an eye-catching embellishment when there are fewer things competing for attention.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3322\" height=\"4050\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367386\" data-id=\"367386\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=3322%2C4050&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?w=3322&amp;ssl=1 3322w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=246%2C300&amp;ssl=1 246w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=840%2C1024&amp;ssl=1 840w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=768%2C936&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=1260%2C1536&amp;ssl=1 1260w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=1680%2C2048&amp;ssl=1 1680w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">The brutalist style of the Dropbox blog is probably a controversial one. The colors, fonts, and use of space are all over the place, and the content being floated to the right just feels unfamiliar. But does it break any design ‘rules’? Nope. I could grow to like it in time, especially in a milder form.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3234\" height=\"3962\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367394\" data-id=\"367394\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=3234%2C3962&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?w=3234&amp;ssl=1 3234w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=245%2C300&amp;ssl=1 245w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=836%2C1024&amp;ssl=1 836w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=768%2C941&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=1254%2C1536&amp;ssl=1 1254w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=1672%2C2048&amp;ssl=1 1672w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">Urban Beardsman’s design is extremely linear. As somebody that has difficulty concentrating and is easily distracted by sidebars, in-article CTA boxes, and even blockquotes, I very much enjoy how easy it is to read this blog like a book. The perfect example of &#8220;less is more.&#8221;</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3234\" height=\"3962\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367393\" data-id=\"367393\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=3234%2C3962&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?w=3234&amp;ssl=1 3234w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=245%2C300&amp;ssl=1 245w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=836%2C1024&amp;ssl=1 836w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=768%2C941&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=1254%2C1536&amp;ssl=1 1254w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=1672%2C2048&amp;ssl=1 1672w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">There’s nothing unique about the GoSquared blog, but it managed to include pretty much all of the things we discussed in the article — a better underline design, seamless images, and some very readable typography. Quite impressive.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3322\" height=\"4050\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367391\" data-id=\"367391\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=3322%2C4050&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?w=3322&amp;ssl=1 3322w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=246%2C300&amp;ssl=1 246w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=840%2C1024&amp;ssl=1 840w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=768%2C936&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=1260%2C1536&amp;ssl=1 1260w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=1680%2C2048&amp;ssl=1 1680w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">The Smart Passive Income blog proves how far you can get just by choosing a legible font and using readable font sizes, line heights, letter spacings, and paragraph spacings.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3322\" height=\"4050\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367390\" data-id=\"367390\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=3322%2C4050&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?w=3322&amp;ssl=1 3322w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=246%2C300&amp;ssl=1 246w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=840%2C1024&amp;ssl=1 840w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=768%2C936&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=1260%2C1536&amp;ssl=1 1260w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=1680%2C2048&amp;ssl=1 1680w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">Recipe pages are consistently sucky, but not Little Fat Boy. The lack of sameness throughout the page makes it easy jump to different parts of the recipe without getting lost. Plus, the ingredients are pinned to the top-right for your convenience.</figcaption></figure></li></ul><a class=\"wp-block-jetpack-slideshow_button-prev swiper-button-prev swiper-button-white\" role=\"button\"></a><a class=\"wp-block-jetpack-slideshow_button-next swiper-button-next swiper-button-white\" role=\"button\"></a><a aria-label=\"Pause Slideshow\" class=\"wp-block-jetpack-slideshow_button-pause\" role=\"button\"></a><div class=\"wp-block-jetpack-slideshow_pagination swiper-pagination swiper-pagination-white\"></div></div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/designing-for-long-form-articles/\">Designing for Long-Form Articles</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Designing a beautiful “article” is wrought with tons of considerations. Unlike, say, a homepage, a long-form article is less about designing an interface than it is designing text in a way that creates a relaxed and comfortable reading experience.\n\n\n\nThat’s because articles deal with long-form content which, in turn, tends to be valued by a ”time on page” interaction with users. We want someone to read a complete narrative. There’s a natural space between the time someone lands on an article and reads all the words. And hopefully, that space is immersive enough to not only hold a user’s, but provoke thoughts, ideas, and, possibly, actions. At least that’s what I’m hoping as I have your attention and you make your way through the very article you’re reading.\n\n\n\nThere’s a balance. On one hand, we hear that “no one reads the Internet.” On the other, a long-form article demands careful attention. Considering the current value of content marketing and the growing impatience in users, captivating readers for as long as possible should be a key concern. Let’s take a look at some best practices and examples of incredible article pages to get a better idea of what makes a visually appealing reading experience for long-form articles (without sacrificing user experience), and how we can replicate the effects.\n\n\n\n\n\n\nQuick wins\n\n\nLet me quickly list out what I think might already be obvious to many of you, but are effective things for content legibility:\n\n\n\nIncrease the font size: We know that 16px is the default and is perfectly fine in many designs, but a larger font size is inviting in that it implies the user is free to lean back and settle in without having to angle forward with the screen in their face to read.Aim for characters per line: Very few people I know like to work harder than they need to, and that goes for reading too. Rather than using the full viewport width, try to narrow things down and balance that with your larger font size to get fewer characters on each line of text. Your sweet spot may vary, though many folks suggest somewhere between 45-75 characters per line to help limit how far the reader’s eye has to work to go from left to right. Chris has a bookmarklet to help count characters, but we also have the ch unit in CSS to get predictable results.Bump up the line height: A default line height is going to feel smashed. It’s funny, but more space between lines (up to a point, of course) is less work for eyes, which seems antithetical to the characters-per-line advice where we generally want eyes to travel a shorter distance. A line height between 1.2 and 1.5 seems to be a pretty typical range for long-form content.\n\n\n\nIf you haven’t seen it before, Pierrick Calvez has a great “five-minute” guide to typography that packs in a bunch of low-hanging fruit like these.\n\n\nDesign for extra breathing room\n\n\nYou may be accustomed to designing “above the fold” where real estate is a prime commodity. That’s sort of like beach-front property in the web world because it’s where we’re used to packing in high-value things, like hero banners, calls to action, and anything else to help sell a thing. Above the fold can be a lot like a dense urban downtown with high traffic and high-rise buildings.\n\n\n\nArticles are different. They allow you to stretch out a bit. If we want to take the city development analogy a little further, articles have the acreage to lean into a “less is more” sort of design approach. That’s what makes seemingly small design choices — like type — so important to the overall experience.\n\n\n\nCheck out the example below. The link underlines have a little more room to breathe (specifically, they appear below the descenders). This is actually something that you can enable sitewide but looks especially nice on article pages since it increases readability. That’s the sort of subtle design choice that contributes to extra breathing room.\n\n\n\n\n\n\n\ntext-underline-position: under; is the line of CSS that makes this work. Naturally, text-decoration must be set to something other than none (underline in this case), too.\n\n\n\nThe example above also features text-decoration-thickness, which alters the thickness of underlines (and other line types). You can use this CSS property to match a line’s thickness to a font’s size and/or weight.\n\n\n\nHere’s a full example:\n\n\n\na {\n  text-decoration: underline;\n  text-decoration-thickness: 2px;\n\n  /* or */\n  text-decoration: underline 2px;\n  text-underline-position: under;\n}\n\n\n\nBut before you reach for the text-decoration shorthand, Šime Vidas has a few “gotchas” when it comes to using it that are worth reviewing.\n\n\nLeading into the content\n\n\nDrop caps are stylized letters that can be placed at the beginning of a document or document section. They were once used in Latin texts, but today they’re mostly used for decorative reasons.\n\n\n\n\n\n\n\nPersonally, I think that drop caps hinder readability. However, they can be a nice way to “lead” a reader into the main content, and they shouldn’t introduce any serious accessibility issues as long as you’re using the ::first-letter pseudo-element. There are other (older) methods that involve more HTML and CSS as well as the use of ARIA attributes in order for the content to remain accessible.\n\n\n\nUsing ::first-letter, the CSS would look something like this:\n\n\n\n/* select the first letter of the first paragraph */\narticle > p:first-child::first-letter {\n  color: #903;\n  float: left;\n  font-family: Georgia;\n  font-size: 75px;\n  line-height: 60px;\n  padding-top: 4px;\n  padding-right: 8px;\n  padding-left: 3px;\n}\n\n\n\nIt sure would be nice if we could use the initial-letter property, but there’s pretty much no support for it at the time I’m writing this. If we had it, all that math for font size and line height would be calculated for us!\n\n\n\nCodePen challenged folks to show off their drop-cap-styling skills several years ago and you can see a whole bunch of neat examples from it in this collection.\n\n\nSkip to main content\n\n\nScreen readers allow users to skip to the main content as long as it wraps it within a <main> element. However, those who navigate websites by tabbing don’t benefit from this. Instead, we must create a “skip to main content” anchor link. This link is customarily hidden but revealed once the user makes their first tab (i.e. show on focus).\n\n\n\n\n\n\n\nIt would look something like this:\n\n\n\n<!-- anchor -->\n<a id=\"skip-link\" href=\"#main\">Skip to main content</a>\n\n<!-- target -->\n<main class=\"main\">\n  <!-- main content -->\n</main>\n\n\n\n#skip-link {\n  position: absolute; /* remove it from the flow */\n  transform: translateX(-100%); /* move it off-screen so that it appears hidden but remains focusable */\n}\n#skip-link:focus {\n  position: unset; /* insert it back into the flow */\n  transform: unset; /* move it back onto the screen */\n}\n\n.main {\n  scroll-margin: 1rem; /* adds breathing room above the scroll target */\n}\n\n\n\nThere are other ways to go about it, of course. Here are a couple of deeper dives on creating skip links.\n\n\n\n    \t\t\n    \n      \n\n  \n    \n                \n        Article\n      \n\n    on\n\n    Aug 3, 2021  \n\n  \n    \n      A Deep Dive on Skipping to Content    \n  \n\n  \n      \n      design design principles editorial typography    \n  \n  \n    \n          \n  \n    \n      Paul Ratcliffe    \n  \n\n\n\n\n  \n    \n                \n        Article\n      \n\n    on\n\n    Aug 25, 2021  \n\n  \n    \n      How to Create a “Skip to Content” Link    \n  \n\n  \n      \n      design design principles editorial typography    \n  \n  \n    \n          \n  \n    \n      Paul Ryan    \n  \n\n\n    \n  \n\n\nSeamless visuals\n\n\nI love the illustrations in this article. Despite how incredible they look, they don’t demand too much cognitive attention. They introduce brief moments of delight but also suggest that the article itself has something more important to say. Partly, this comes down to the use of transparency, whereas rectangular images capture more negative space and therefore demand more attention (which is fine if that’s the desired effect and images are crucial to the story).\n\n\n\n\n\n\n\nHowever, it’s important to know that the images aren’t actually transparent at all, but instead are non-transparent JPEGs with the same background color as the content. I’m presuming that’s to keep the size of the images smaller compared to PNGs that support transparency.\n\n\n\n\n\n\n\nThe downside to “faking” a transparent background like this is that it would require additional trickery (and maintenance) to support a dark mode UI if your site happens to offer one. If the illustrations are pretty flat and simple, then SVG might be the way to go instead since it’s small, scalable, and capable of blending into whatever background it’s on.\n\n\n\nBut if you’re bound to using raster images and would rather work with PNG files for transparency, you’ll want to look into using responsive images and the loading=\"lazy\" attribute for faster loading times.\n\n\nPut the focus on the type and semantics\n\n\nYou may have very little say over how or where someone reads content on the web these days. Whether the user receives it in an RSS feed, gets it delivered by email, sees it copy-and-pasted from a colleague, finds it on a scraped site, or whatnot, your content might look different than you prefer. You could design what you think is the most gorgeous article in all the land and the user still might smash that Reader Mode button to your dismay.\n\n\n\nThat’s ok! The discoverability of content is very much as important as the design of it, and many users have their own ways of discovering content and preferences for what makes a good reading experience.\n\n\n\nBut there are reasons why someone would want a Reader Mode. For one, it’s like “not seeing any CSS” at all. By that, I mean Safari’s Reader Mode or Brave SpeedReader, which use machine learning to detect articles. There’s no fetching or executing of CSS, JavaScript, or non-article images, which boosts performance and also blocks ads and tracking.\n\n\n\n\n\n\n\nThis sort of “brute minimalism” puts the focus on the content rather than the styles. So, you might actually want to embrace a browser’s opinionated reading styles specifically for that purpose.\n\n\n\nThe way to do that is not by using CSS, but by paying closer attention to your HTML. Reader modes work best with markup that uses simple, semantic, article-related HTML. You’ve got to do more than simply slapping <article> tags around the article to get the most from it.\n\n\n\nYou might just find that a minimal design that emphasizes legibility over slickness is actually a good strategy to use in your site’s design. I’d strongly suggest reading Robin’s post on the “smallest CSS” for a solid reading experience.\n\n\nRoundup of long-form articles!\n\n\nI’ve shared a lot of what I think makes for a great reading experience for long-form articles on the web. But seeing is believing and I’ve rounded up a bunch of examples that showcase what we’ve covered.\n\n\n\nPolygon uses a strong, provacative visual to hook readers into the ain content. Notice how the drop cap, larger font size, and increased line height make this feel like a page you can sit back with and relax.The TASTE website uses transparent images that blend into the background color of the content. There’s plenty of space between elements and bold accents — like thick borders and a heavy drop cap — pull the reader’s eye down the page.The Outline is a prime example of minimalism. Notice how something as subtle as a squiggly horizontal rule can be an eye-catching embellishment when there are fewer things competing for attention.The brutalist style of the Dropbox blog is probably a controversial one. The colors, fonts, and use of space are all over the place, and the content being floated to the right just feels unfamiliar. But does it break any design ‘rules’? Nope. I could grow to like it in time, especially in a milder form.Urban Beardsman’s design is extremely linear. As somebody that has difficulty concentrating and is easily distracted by sidebars, in-article CTA boxes, and even blockquotes, I very much enjoy how easy it is to read this blog like a book. The perfect example of “less is more.”There’s nothing unique about the GoSquared blog, but it managed to include pretty much all of the things we discussed in the article — a better underline design, seamless images, and some very readable typography. Quite impressive.The Smart Passive Income blog proves how far you can get just by choosing a legible font and using readable font sizes, line heights, letter spacings, and paragraph spacings.Recipe pages are consistently sucky, but not Little Fat Boy. The lack of sameness throughout the page makes it easy jump to different parts of the recipe without getting lost. Plus, the ingredients are pinned to the top-right for your convenience.\n\nDesigning for Long-Form Articles originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367370",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-10T14:30:01.000Z",
      "date_modified": "2022-08-10T14:30:01.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367369",
      "url": "https://css-tricks.com/committing-css-crimes/",
      "title": "Committing CSS Crimes",
      "summary": "The time for CSS-Tricks is over. Now is the time for CSS Crimes!\nIn this current landscape of content service providers, users are often limited to expressing themselves in text, links, and images. Sanitization rules tend to strip out HTML, …\n\nCommitting CSS Crimes originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>The time for CSS-Tricks is over. Now is the time for CSS Crimes!</p>\n\n\n\n<p>In this current landscape of content service providers, users are often limited to expressing themselves in text, links, and images. Sanitization rules tend to strip out HTML, JavaScript, and various attributes.</p>\n\n\n\n<p>Social media service <a href=\"https://cohost.org/\" rel=\"noopener\">Cohost</a> allows users to have greater freedom with markup and inline styles than we may be typically used to. Some users have taken advantage of this freedom to commit CSS Crimes! It has resulted in creative recreations of familiar interfaces and interactive games by using properties in unconventional ways.</p>\n\n\n\n<span id=\"more-367369\"></span>\n\n\n\n<p><a href=\"https://cohost.org/blackle/post/42994-div-style-pointer\" rel=\"noopener\">Blackle Mori created a contraption</a> where pulling a handle slowly turns a series of gears, pulleys, and chains. Eventually an aperture opens to reveal the site&#8217;s mascot (&#8220;eggbug&#8221;) and the proclamation &#8220;Good Job!&#8221;. I have stared at this in Developer Tools and it is an amazing combination of <code>grid</code>, <code>resize</code>, <code>transform</code>, and <code>calc()</code>. I ended up adding a <code>border</code> to all <code>&lt;div&gt;</code>s to try and get a better understanding of how each individual element moved.</p>\n\n\n\n<ul><li>Several other CSS Crimes use <code>resize</code> to allow viewers rudimentary click and drag functionality.<ul><li><a href=\"https://cohost.org/blackle/post/31913-tutorial-how-to-mak\" rel=\"noopener\">Blackle Mori explains this technique here!</a></li></ul></li><li>Other CSS Crimes create limited interaction through <a href=\"https://css-tricks.com/quick-reminder-that-details-summary-is-the-easiest-way-ever-to-make-an-accordion/\"><code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code></a>.<ul><li><a href=\"https://cohost.org/blackle/post/31694-tutorial-how-to-mak\" rel=\"noopener\">Blackle Mori explains this technique here!</a></li></ul></li><li>Some members of the community have taken Andrew Siller&#8217;s technique from <a href=\"https://www.youtube.com/watch?v=GJa6eD7tFbY\" rel=\"noopener\">&#8220;Night of the Living GIF: Making Interactive Multiplayer Experiences&#8221;</a> to create a multiplayer Pokemon experience!</li></ul>\n\n\n\n<p>There have been situations in the past where I have been restricted from using the full toolkit of HTML, JavaScript, and CSS. There have been many instances of using decorative <a href=\"https://css-tricks.com/the-shapes-of-css/\">CSS shapes</a> to get around images. I have used <code>:hover</code> as a workaround for <code>mouseenter</code> and <code>mouseleave</code>. I have used <a href=\"https://css-tricks.com/the-checkbox-hack/\"><code>input:checked</code> as a sibling selector</a> for toggling.</p>\n\n\n\n<p>While CSS Crimes are probably not something you would want to employ on a regular basis, we should embrace experiments within constraints that can foster creative solutions.</p>\n<p><a href=\"https://www.theverge.com/2022/8/3/23288689/cohost-social-media-css-games\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/committing-css-crimes/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/committing-css-crimes/\">Committing CSS Crimes</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "The time for CSS-Tricks is over. Now is the time for CSS Crimes!\n\n\n\nIn this current landscape of content service providers, users are often limited to expressing themselves in text, links, and images. Sanitization rules tend to strip out HTML, JavaScript, and various attributes.\n\n\n\nSocial media service Cohost allows users to have greater freedom with markup and inline styles than we may be typically used to. Some users have taken advantage of this freedom to commit CSS Crimes! It has resulted in creative recreations of familiar interfaces and interactive games by using properties in unconventional ways.\n\n\n\n\n\n\n\nBlackle Mori created a contraption where pulling a handle slowly turns a series of gears, pulleys, and chains. Eventually an aperture opens to reveal the site’s mascot (“eggbug”) and the proclamation “Good Job!”. I have stared at this in Developer Tools and it is an amazing combination of grid, resize, transform, and calc(). I ended up adding a border to all <div>s to try and get a better understanding of how each individual element moved.\n\n\n\nSeveral other CSS Crimes use resize to allow viewers rudimentary click and drag functionality.Blackle Mori explains this technique here!Other CSS Crimes create limited interaction through <details> and <summary>.Blackle Mori explains this technique here!Some members of the community have taken Andrew Siller’s technique from “Night of the Living GIF: Making Interactive Multiplayer Experiences” to create a multiplayer Pokemon experience!\n\n\n\nThere have been situations in the past where I have been restricted from using the full toolkit of HTML, JavaScript, and CSS. There have been many instances of using decorative CSS shapes to get around images. I have used :hover as a workaround for mouseenter and mouseleave. I have used input:checked as a sibling selector for toggling.\n\n\n\nWhile CSS Crimes are probably not something you would want to employ on a regular basis, we should embrace experiments within constraints that can foster creative solutions.\nTo Shared Link — Permalink on CSS-Tricks\nCommitting CSS Crimes originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367369",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-09T13:01:44.000Z",
      "date_modified": "2022-08-09T13:01:44.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367204",
      "url": "https://css-tricks.com/zooming-images-in-a-grid-layout/",
      "title": "Zooming Images in a Grid Layout",
      "summary": "Creating a grid of images is easy, thanks to CSS Grid. But making the grid do fancy things after the images have been placed can be tricky to pull off.\nSay you want to add some fancy hover effect to …\n\nZooming Images in a Grid Layout originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Creating a grid of images is easy, thanks to CSS Grid. But making the grid do fancy things <em>after</em> the images have been placed can be tricky to pull off.</p>\n\n\n\n<p>Say you want to add some fancy hover effect to the images where they grow and zoom beyond the rows and columns where they sit? We can do that!</p>\n\n\n\n<span id=\"more-367204\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWVyaMe\" src=\"//codepen.io/anon/embed/MWVyaMe?height=650&amp;theme-id=1&amp;slug-hash=MWVyaMe&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWVyaMe\" title=\"CodePen Embed MWVyaMe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Cool, right? If you check the code, you won’t find any JavaScript, complex selectors, or even <a href=\"https://css-tricks.com/magic-numbers-in-css/\">magic numbers</a>. And this is only one example among many we will explore!</p>\n\n\n<h3 id=\"building-the-grid\">Building the grid</h3>\n\n\n<p>The HTML code to create the grid is as simple as a list of images within a container. We don’t need more than that.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"gallery\">\n  &lt;img>\n  &lt;img>\n  &lt;img>\n  &lt;!-- etc. -->\n&lt;/div></code></pre>\n\n\n\n<p>For the CSS, we first start by setting the grid using the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* controls the size */\n  --g: 10px;  /* controls the gap */\n\n  display: grid;\n  gap: var(--g);\n  width: calc(3*var(--s) + 2*var(--g)); /* 3 times the size plus 2 times the gap */\n  aspect-ratio: 1;\n  grid-template-columns: repeat(3, auto);\n}</code></pre>\n\n\n\n<p>In short, we have two variables, one that controls the size of the images and one that sets the size of the gap between images. <a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\"><code>aspect-ratio</code></a> helps keep things in proportion.</p>\n\n\n\n<p>You might be wondering why we are only defining three columns but no rows. No, I didn’t forget the rows — we just don’t need to explicitly set them. CSS Grid is capable of automatically placing items on <a href=\"https://css-tricks.com/difference-explicit-implicit-grids/\">implicit rows and columns</a>, meaning we get as many rows as needed to any number of images we throw at it. We can explicitly define the rows instead but we need to add <code>grid-auto-flow: column</code> to make sure the browser will create the needed columns for us.</p>\n\n\n\n<p>Here is an example to illustrate both cases. The difference is that one flows in a <code>row</code> direction an the other in a <code>column</code> direction.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402\" src=\"//codepen.io/anon/embed/GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402?height=375&amp;theme-id=1&amp;slug-hash=GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402&amp;default-tab=result\" height=\"375\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402\" title=\"CodePen Embed GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">Check out <a href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers\">this other article I wrote</a> for more about the implicit grids and the auto-placement algorithm.</p>\n\n\n\n<p>Now that we have our grid, it’s time to style the images:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img {\n  width: 0;\n  height: 0;\n  min-height: 100%;\n  min-width: 100%;\n  object-fit: cover;\n}</code></pre>\n\n\n\n<p>The hover effect we’re making relies on this CSS. It probably looks weird to you that we’re making images that have both no width or height but have a minimum width and height of 100%. But you will see that it’s a pretty neat trick for what we are trying to achieve.</p>\n\n\n\n<p>What I’m doing here is telling the browser that the images need to have <code>0</code> width and height but also need to have a minimum height equal to <code>100%</code>… but <code>100%</code> of what? When using percentages, the value is <a href=\"https://css-tricks.com/its-all-relative/\">relative to something else</a>. In this case, our image is placed inside a <a href=\"https://www.w3.org/TR/css-grid-1/#grid-track-concept\" rel=\"noopener\">grid cell</a> and we need to know that size to know what’s <code>100%</code> is relative to.</p>\n\n\n\n<p>The browser will first ignore <code>min-height: 100%</code> to calculate the size of the grid cells, but it will use the <code>height: 0</code> in its calculation. That means our images will not contribute to the size of the grid cells… because they technically have no physical size. This will result in three equal columns and rows that are based on the size of the grid (which we defined on the <code>.gallery</code>’s width and <code>aspect-ratio</code>). The height of each grid cell is nothing but the variable <code>--s</code> we defined (same for the width).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"683\" height=\"543\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657396789143_image.png?resize=683%2C543&#038;ssl=1\" alt=\"\" class=\"wp-image-367205\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657396789143_image.png?w=683&amp;ssl=1 683w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657396789143_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now that we have the dimensions of our grid’s cells, the browser will use it with <code>min-height: 100%</code> (and <code>min-width: 100%</code>) which will force the images to completely fill the space of each grid cell. The whole thing may look a bit confusing but the main idea is to make sure that the grid defines the size of the images rather than the other way around. I don’t want the image to define the size of the grid and you will understand why after adding the hover effect.</p>\n\n\n<h3 id=\"creating-the-hover-effect\">Creating the hover effect</h3>\n\n\n<p>What we need to do is increase the scale of the images when they’re hovered. We can do that by adjusting an image’s <code>width</code> and <code>height</code> on <code>:hover</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --f: 1.5; /* controls the scale factor */\n}\n\n.gallery img:hover{\n  width:  calc(var(--s) * var(--f));\n  height: calc(var(--s) * var(--f));\n}</code></pre>\n\n\n\n<p>I added a new custom variable, <code>--f</code>, to the mix as a scale factor to control the size on hover. Notice how I’m multiplying the size variable, <code>--s</code>, by it to calculate the new image size.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>But you said that the image size needs to be 0. What is going on? I am lost&#8230;</p></blockquote>\n\n\n\n<p>What I said is still true but I am making an exception for the hovered image. I am telling the browser that only one image will have a size that’s not equal to zero — so it will contribute to the dimension of the grid — while all the others remain equal to <code>0</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"850\" height=\"405\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657399681779_image.png?resize=850%2C405&#038;ssl=1\" alt=\"\" class=\"wp-image-367206\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657399681779_image.png?w=850&amp;ssl=1 850w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657399681779_image.png?resize=300%2C143&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657399681779_image.png?resize=768%2C366&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The left side shows the grid in its natural state without any hovered images, which is what the right side is showing. All the grid cells on the left side are equal in size since all the images have no physical dimensions.</p>\n\n\n\n<p>On the right side, the second image in the first row is hovered, which gives it dimensions that affect the grid cell’s size. The browser will make that specific grid cell bigger on hover, which contributes to the overall size. And since the size of the whole grid is set (because we set a fixed <code>width</code> on the <code>.gallery</code>), the other grid cells will logically respond by becoming smaller in order to keep the <code>.gallery</code>‘s overall size in tact.</p>\n\n\n\n<p>That’s our zoom effect in action! By increasing the size of only one image we affect the whole grid configuration, and we said before that the grid defines the size of the images so that each image stretches inside its grid cell to fill all the space.</p>\n\n\n\n<p>To this, we add a touch of <code>transition</code> and use <code>object-fit</code> to avoid image distortion and the illusion is perfect!</p>\n\n\n\n<p>I know that the logic behind the trick is not easy to grasp. Don’t worry if you don’t fully understand it. The most important is to understand the structure of the code used and how to modify it to get more variations. That’s what we will do next!</p>\n\n\n<h3 id=\"adding-more-images\">Adding more images</h3>\n\n\n<p>We created a 3×3 grid to explain the main trick, but you have probably guessed that we there’d no need to stop there. We can make the number of columns and rows variables and add as many images as we want.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abYNPaG/ad9882af8ae5e2661895e62b63b0249f\" src=\"//codepen.io/anon/embed/abYNPaG/ad9882af8ae5e2661895e62b63b0249f?height=750&amp;theme-id=1&amp;slug-hash=abYNPaG/ad9882af8ae5e2661895e62b63b0249f&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abYNPaG/ad9882af8ae5e2661895e62b63b0249f\" title=\"CodePen Embed abYNPaG/ad9882af8ae5e2661895e62b63b0249f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --n: 3; /* number of rows*/\n  --m: 4; /* number of columns */\n  --s: 150px; /* control the size */\n  --g: 10px;  /* control the gap */\n  --f: 1.5;   /* control the scale factor */\n\n  display: grid;\n  gap: var(--g);\n  width:  calc(var(--m)*var(--s) + (var(--m) - 1)*var(--g));\n  height: calc(var(--n)*var(--s) + (var(--n) - 1)*var(--g));\n  grid-template-columns: repeat(var(--m),auto);\n}</code></pre>\n\n\n\n<p>We have two new variables for the number of rows and columns. Then we simply define the width and height of our grid using them. Same for <code>grid-template-columns</code> which uses the <code>--m</code> variable. And just like before, we don’t need to explicitly define the rows since the CSS Grid’s auto-placement feature will do the job for us no matter how many image elements we’re using.</p>\n\n\n\n<p>Why not different values for the width and height? We can do that:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f\" src=\"//codepen.io/anon/embed/ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f?height=600&amp;theme-id=1&amp;slug-hash=ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f\" title=\"CodePen Embed ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --n: 3; /* number of rows*/\n  --m: 4; /* number of columns */\n  --h: 120px; /* control the height */\n  --w: 150px; /* control the width */\n  --g: 10px;  /* control the gap */\n  --f: 1.5;   /* control the scale factor */\n\n  display: grid;\n  gap: var(--g);\n  width:  calc(var(--m)*var(--w) + (var(--m) - 1)*var(--g));\n  height: calc(var(--n)*var(--h) + (var(--n) - 1)*var(--g));\n  grid-template-columns: repeat(var(--m),auto);\n}\n\n.gallery img:hover{\n  width:  calc(var(--w)*var(--f));\n  height: calc(var(--h)*var(--f));\n}</code></pre>\n\n\n\n<p>We replace <code>--s</code> with two variables, one for the width, <code>--w</code>, and another one for the height, <code>--h</code>. Then we adjust everything else accordingly.</p>\n\n\n\n<p>So, we started with a grid with a fixed size and number of elements, but then we made a new set of variables to get any configuration we want. All we have to do is to add as many images as we want and adjust the CSS variables accordingly. The combinations are limitless!</p>\n\n\n<h3 id=\"a-fullscreen-gallery-of-images\">A full-screen gallery of images</h3>\n\n\n<p>What about a full-screen version? Yes, that’s also possible. All we need is to know what values we need to assign to our variables. If we want <code>N</code> rows of images and we want our grid to be full screen, we first need to solve for a height of <code>100vh</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--n) * var(--h) + (var(--n) - 1) * var(--g) = 100vh</code></pre>\n\n\n\n<p>Same logic for the width, but using <code>vw</code> instead of <code>vh</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--m) * var(--w) + (var(--m) - 1) * var(--g) = 100vw</code></pre>\n\n\n\n<p>We do the math to get:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--w: (100vw - (var(--m) - 1) * var(--g)) / var(--m)\n--h: (100vh - (var(--n) - 1) * var(--g)) / var(--n)</code></pre>\n\n\n\n<p>Done!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMZbwy/25fa03e17ac76431733157d58e026bfb\" src=\"//codepen.io/anon/embed/eYMZbwy/25fa03e17ac76431733157d58e026bfb?height=650&amp;theme-id=1&amp;slug-hash=eYMZbwy/25fa03e17ac76431733157d58e026bfb&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMZbwy/25fa03e17ac76431733157d58e026bfb\" title=\"CodePen Embed eYMZbwy/25fa03e17ac76431733157d58e026bfb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>It’s the same exact HTML but with some updated variables that change the grid’s sizing and behavior.</p>\n\n\n\n<p>Note that I have omitted the formula we previously set on the <code>.gallery</code>‘s <code>width</code> and <code>height</code> and replaced them with <code>100vw</code> and <code>100vh</code>, respectively. The formula will give us the same result but since we know what value we want, we can ditch all that added complexity.</p>\n\n\n\n<p>We can also simplify the <code>--h</code> and <code>--w</code> by removing the gap from the equation in favor of this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--h: calc(100vh / var(--n)); /* Viewport height divided by number of rows */\n--w: calc(100vw / var(--m)); /* Viewport width divided by number of columns */</code></pre>\n\n\n\n<p>This will make the hovered image grow a bit more than the previous example, but it is no big deal since we can control the scale with the <code>--f</code> variable we’re using as a multiplier.</p>\n\n\n\n<p>And since the variables are used in one place we can still simplify the code by removing them altogether:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3\" src=\"//codepen.io/anon/embed/eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3?height=650&amp;theme-id=1&amp;slug-hash=eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3\" title=\"CodePen Embed eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>It’s important to note this optimization applies only to the full-screen example and not to the examples we’ve covered. This example is a particular case where we can make the code lighter by removing some of the complex calculation work we needed in the other examples.</p>\n\n\n\n<p>We actually have everything we need to create the popular pattern of expanding panels:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNzxeOO/fae9ee2f379890e26459f66cff344cee\" src=\"//codepen.io/anon/embed/WNzxeOO/fae9ee2f379890e26459f66cff344cee?height=450&amp;theme-id=1&amp;slug-hash=WNzxeOO/fae9ee2f379890e26459f66cff344cee&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNzxeOO/fae9ee2f379890e26459f66cff344cee\" title=\"CodePen Embed WNzxeOO/fae9ee2f379890e26459f66cff344cee\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"lets-dig-even-deeper\">Let’s dig even deeper</h3>\n\n\n<p>Did you notice that our scale factor can be less than <code>1</code>? We can define the size of the hovered image to be smaller than <code>--h</code> or <code>--w</code> but the image gets bigger on hover.</p>\n\n\n\n<p>The initial grid cell size is equal to <code>--w</code> and <code>--h</code>, so why do a smaller values make the grid cell <em>bigger</em>? Shouldn’t the cell get <em>smaller</em>, or at least maintain its initial size? And what is the final size of the grid cell?</p>\n\n\n\n<p>We need to dig deeper into how the CSS Grid algorithm calculates the size of the grid cells. And this is involves understanding CSS Grid’s default <strong>stretch alignment</strong>.</p>\n\n\n\n<p>Here’s an example to understand the logic.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e\" src=\"//codepen.io/anon/embed/YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e?height=350&amp;theme-id=1&amp;slug-hash=YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e\" title=\"CodePen Embed YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>On the left side of the demo, I defined a two-column with <code>auto</code> width. We get the intuitive result: two equal columns (and two equal grid cells). But the grid I set up on the right side of the demo, where I am updating the alignment using <code>place-content: start</code>, appears to have nothing.</p>\n\n\n\n<p>DevTools helps show us what’s really happening in both cases:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"574\" height=\"269\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657403436182_image-1.png?resize=574%2C269&#038;ssl=1\" alt=\"\" class=\"wp-image-367208\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657403436182_image-1.png?w=574&amp;ssl=1 574w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657403436182_image-1.png?resize=300%2C141&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In the second grid, we have two columns, but their widths equal zero, so we get two grid cells that are collapsed at the top-left corner of the grid container. This is <em>not</em> a bug but the logical result of the grid’s alignment. When we size a column (or row) with <code>auto</code>, it means that its content dictates its size — but we have an empty <code>div</code> with no content to make room for.</p>\n\n\n\n<p>But since <code>stretch</code> is the default alignment and we have enough space inside our grid, the browser will stretch both grid cells equally to cover all that area. That’s how the grid on the left winds up with two equal columns.</p>\n\n\n\n<p>From <a href=\"https://www.w3.org/TR/css-grid-1/#grid-align\" rel=\"noopener\">the specification</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note that certain values of <a href=\"https://www.w3.org/TR/css-align-3/#propdef-justify-content\" rel=\"noopener\"><code>justify-content</code></a> and <a href=\"https://www.w3.org/TR/css-align-3/#propdef-align-content\" rel=\"noopener\"><code>align-content</code></a> can cause the tracks to be spaced apart (<a href=\"https://www.w3.org/TR/css-align-3/#valdef-align-content-space-around\" rel=\"noopener\"><code>space-around</code></a>, <a href=\"https://www.w3.org/TR/css-align-3/#valdef-align-content-space-between\" rel=\"noopener\"><code>space-between</code></a>, <a href=\"https://www.w3.org/TR/css-align-3/#valdef-align-content-space-evenly\" rel=\"noopener\"><code>space-evenly</code></a>) or to be resized (<a href=\"https://www.w3.org/TR/css-align-3/#valdef-align-content-stretch\" rel=\"noopener\"><code>stretch</code></a>).</p></blockquote>\n\n\n\n<p>Note the “to be resized” which is the key here. In the last example, I used <code>place-content</code> which is the shorthand for <code>justify-content</code> and <code>align-content</code></p>\n\n\n\n<p>And this is buried somewhere in <a href=\"https://www.w3.org/TR/css-grid-1/#algo-stretch\" rel=\"noopener\">the Grid Sizing algorithm</a> specs:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>This step expands tracks that have an <a href=\"https://www.w3.org/TR/css-grid-1/#valdef-grid-template-columns-auto\" rel=\"noopener\">auto</a> <a href=\"https://www.w3.org/TR/css-grid-1/#max-track-sizing-function\" rel=\"noopener\">max track sizing function</a> by dividing any remaining positive, <a href=\"https://www.w3.org/TR/css-sizing-3/#definite\" rel=\"noopener\">definite</a> <a href=\"https://www.w3.org/TR/css-grid-1/#free-space\" rel=\"noopener\">free space</a> equally amongst them. If the free space is <a href=\"https://www.w3.org/TR/css-sizing-3/#indefinite\" rel=\"noopener\">indefinite</a>, but the <a href=\"https://www.w3.org/TR/css-grid-1/#grid-container\" rel=\"noopener\">grid container</a> has a definite <a href=\"https://www.w3.org/TR/CSS2/visudet.html#propdef-min-width\" rel=\"noopener\">min-width/height</a>, use that size to calculate the free space for this step instead.</p></blockquote>\n\n\n\n<p>“Equally&#8221; explains why we wind up with equal grid cells, but it applies to “the free space” which is very important.</p>\n\n\n\n<p>Let’s take the previous example and add content to one of the <code>div</code>s:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a\" src=\"//codepen.io/anon/embed/YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a?height=350&amp;theme-id=1&amp;slug-hash=YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a\" title=\"CodePen Embed YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We added a square <code>50px</code> image. Here’s an illustration of how each grid in our example responds to that image:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"599\" height=\"280\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657404278772_image.png?resize=599%2C280&#038;ssl=1\" alt=\"\" class=\"wp-image-367209\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657404278772_image.png?w=599&amp;ssl=1 599w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657404278772_image.png?resize=300%2C140&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In the first case, we can see that the first cell (in red) is bigger than the second one (in blue). In the second case, the size of the first cell changes to fit the physical size of the image while the second cell remains with no dimensions. The free space is divided equally, but the first cell has more content inside which makes it bigger.</p>\n\n\n\n<p>This is the math to figure out our free space:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">(grid width) - (gap) - (image width) = (free space)\n200px - 5px - 50px = 145px </code></pre>\n\n\n\n<p>Divided by two — the number of columns — we get a width of <code>72.5px</code> for each column. But we add the size of the image, <code>50px</code>, to the first column which leaves us with one column at <code>122.5px</code> and the second one equal to <code>72.5px</code>.</p>\n\n\n\n<p>The same logic applies to our grid of images. All the images have a size equal to <code>0</code> (no content) while the hovered image contributes to size — even if it’s just <code>1px</code> — making its grid cell bigger than the others. For this reason, the scale factor can be any value bigger than <code>0</code> even decimals between <code>0</code> and <code>1</code>.</p>\n\n\n\n<p>To get the final width of the grid cells, we do the same calculation to get the following:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">(container width) - (sum of all gaps) - (hovered image width) = (free space)</code></pre>\n\n\n\n<p>The width of container is defined by:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--m)*var(--w) + (var(--m) - 1)*var(--g)</code></pre>\n\n\n\n<p>…and all the gaps are equal to:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">(var(--m) - 1)*var(--g)</code></pre>\n\n\n\n<p>…and for the hovered image we have:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--w)*var(--f)</code></pre>\n\n\n\n<p>We can calculate all of that with our variables:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--m)*var(--w) - var(--w)*var(--f) = var(--w)*(var(--m) - var(--f))</code></pre>\n\n\n\n<p>The number of columns is defined by <code>--m</code> ,so we divide that free space equally to get:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--w)*(var(--m) - var(--f))/var(--m)</code></pre>\n\n\n\n<p>…which gives us the size of the non-hovered images. For hovered images, we have this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--w)*(var(--m) - var(--f))/var(--m) + var(--w)*var(--f)\nvar(--w)*((var(--m) - var(--f))/var(--m) + var(--f))</code></pre>\n\n\n\n<p>If we want to control the final size of the hovered image, we consider the above formula to get the exact size we want. If, for example, we want the image to be twice as big:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">(var(--m) - var(--f))/var(--m) + var(--f) = 2</code></pre>\n\n\n\n<p>So, the value of our scale multiplier, <code>--f</code>, needs to be equal to:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--m)/(var(--m) - 1)</code></pre>\n\n\n\n<p>For three columns we will have <code>3/2 = 1.5</code> and that’s the scale factor I used in the first demo of this article because I wanted to make the image twice as big on hover!</p>\n\n\n\n<p>The same logic applies to the height calculation and in case we want to control both of them independently we will need to consider two scale factors to make sure we have a specific width and height on hover.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  /* same as before */\n   --fw: 1.5; /* controls the scale factor for the width */\n   --fh: 1.2; /* controls the scale factor for the height */\n\n  /* same as before */\n}\n\n.gallery img:hover{\n  width:  calc(var(--w)*var(--fw));\n  height: calc(var(--h)*var(--fh));\n}</code></pre>\n\n\n\n<p>Now, you know all the secrets to create any kind of image grid with a cool hover effect while also having control of the sizing you want using the math we just covered.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>In my <a href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers\">last article</a>, we created a complex-looking grid with a few lines of CSS that put CSS Grid’s implicit grid and auto-placement features to use. In this article, we relied on some CSS Grid sizing trickery to create a fancy grid of images that zoom on hover and cause the grid to adjust accordingly. All of this with a simplified code that is easy to adjust using CSS variables!</p>\n\n\n\n<p>In the next article, we will play with shapes! We will combine CSS grid with mask and clip-path to get fancy grid of images.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/zooming-images-in-a-grid-layout/\">Zooming Images in a Grid Layout</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Creating a grid of images is easy, thanks to CSS Grid. But making the grid do fancy things after the images have been placed can be tricky to pull off.\n\n\n\nSay you want to add some fancy hover effect to the images where they grow and zoom beyond the rows and columns where they sit? We can do that!\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\n\nCool, right? If you check the code, you won’t find any JavaScript, complex selectors, or even magic numbers. And this is only one example among many we will explore!\n\n\nBuilding the grid\n\n\nThe HTML code to create the grid is as simple as a list of images within a container. We don’t need more than that.\n\n\n\n<div class=\"gallery\">\n  <img>\n  <img>\n  <img>\n  <!-- etc. -->\n</div>\n\n\n\nFor the CSS, we first start by setting the grid using the following:\n\n\n\n.gallery {\n  --s: 150px; /* controls the size */\n  --g: 10px;  /* controls the gap */\n\n  display: grid;\n  gap: var(--g);\n  width: calc(3*var(--s) + 2*var(--g)); /* 3 times the size plus 2 times the gap */\n  aspect-ratio: 1;\n  grid-template-columns: repeat(3, auto);\n}\n\n\n\nIn short, we have two variables, one that controls the size of the images and one that sets the size of the gap between images. aspect-ratio helps keep things in proportion.\n\n\n\nYou might be wondering why we are only defining three columns but no rows. No, I didn’t forget the rows — we just don’t need to explicitly set them. CSS Grid is capable of automatically placing items on implicit rows and columns, meaning we get as many rows as needed to any number of images we throw at it. We can explicitly define the rows instead but we need to add grid-auto-flow: column to make sure the browser will create the needed columns for us.\n\n\n\nHere is an example to illustrate both cases. The difference is that one flows in a row direction an the other in a column direction.\n\n\n\nCodePen Embed Fallback\n\n\n\nCheck out this other article I wrote for more about the implicit grids and the auto-placement algorithm.\n\n\n\nNow that we have our grid, it’s time to style the images:\n\n\n\n.gallery > img {\n  width: 0;\n  height: 0;\n  min-height: 100%;\n  min-width: 100%;\n  object-fit: cover;\n}\n\n\n\nThe hover effect we’re making relies on this CSS. It probably looks weird to you that we’re making images that have both no width or height but have a minimum width and height of 100%. But you will see that it’s a pretty neat trick for what we are trying to achieve.\n\n\n\nWhat I’m doing here is telling the browser that the images need to have 0 width and height but also need to have a minimum height equal to 100%… but 100% of what? When using percentages, the value is relative to something else. In this case, our image is placed inside a grid cell and we need to know that size to know what’s 100% is relative to.\n\n\n\nThe browser will first ignore min-height: 100% to calculate the size of the grid cells, but it will use the height: 0 in its calculation. That means our images will not contribute to the size of the grid cells… because they technically have no physical size. This will result in three equal columns and rows that are based on the size of the grid (which we defined on the .gallery’s width and aspect-ratio). The height of each grid cell is nothing but the variable --s we defined (same for the width).\n\n\n\n\n\n\n\nNow that we have the dimensions of our grid’s cells, the browser will use it with min-height: 100% (and min-width: 100%) which will force the images to completely fill the space of each grid cell. The whole thing may look a bit confusing but the main idea is to make sure that the grid defines the size of the images rather than the other way around. I don’t want the image to define the size of the grid and you will understand why after adding the hover effect.\n\n\nCreating the hover effect\n\n\nWhat we need to do is increase the scale of the images when they’re hovered. We can do that by adjusting an image’s width and height on :hover:\n\n\n\n.gallery {\n  --f: 1.5; /* controls the scale factor */\n}\n\n.gallery img:hover{\n  width:  calc(var(--s) * var(--f));\n  height: calc(var(--s) * var(--f));\n}\n\n\n\nI added a new custom variable, --f, to the mix as a scale factor to control the size on hover. Notice how I’m multiplying the size variable, --s, by it to calculate the new image size.\n\n\n\nBut you said that the image size needs to be 0. What is going on? I am lost…\n\n\n\nWhat I said is still true but I am making an exception for the hovered image. I am telling the browser that only one image will have a size that’s not equal to zero — so it will contribute to the dimension of the grid — while all the others remain equal to 0.\n\n\n\n\n\n\n\nThe left side shows the grid in its natural state without any hovered images, which is what the right side is showing. All the grid cells on the left side are equal in size since all the images have no physical dimensions.\n\n\n\nOn the right side, the second image in the first row is hovered, which gives it dimensions that affect the grid cell’s size. The browser will make that specific grid cell bigger on hover, which contributes to the overall size. And since the size of the whole grid is set (because we set a fixed width on the .gallery), the other grid cells will logically respond by becoming smaller in order to keep the .gallery‘s overall size in tact.\n\n\n\nThat’s our zoom effect in action! By increasing the size of only one image we affect the whole grid configuration, and we said before that the grid defines the size of the images so that each image stretches inside its grid cell to fill all the space.\n\n\n\nTo this, we add a touch of transition and use object-fit to avoid image distortion and the illusion is perfect!\n\n\n\nI know that the logic behind the trick is not easy to grasp. Don’t worry if you don’t fully understand it. The most important is to understand the structure of the code used and how to modify it to get more variations. That’s what we will do next!\n\n\nAdding more images\n\n\nWe created a 3×3 grid to explain the main trick, but you have probably guessed that we there’d no need to stop there. We can make the number of columns and rows variables and add as many images as we want.\n\n\n\nCodePen Embed Fallback\n\n\n\n.gallery {\n  --n: 3; /* number of rows*/\n  --m: 4; /* number of columns */\n  --s: 150px; /* control the size */\n  --g: 10px;  /* control the gap */\n  --f: 1.5;   /* control the scale factor */\n\n  display: grid;\n  gap: var(--g);\n  width:  calc(var(--m)*var(--s) + (var(--m) - 1)*var(--g));\n  height: calc(var(--n)*var(--s) + (var(--n) - 1)*var(--g));\n  grid-template-columns: repeat(var(--m),auto);\n}\n\n\n\nWe have two new variables for the number of rows and columns. Then we simply define the width and height of our grid using them. Same for grid-template-columns which uses the --m variable. And just like before, we don’t need to explicitly define the rows since the CSS Grid’s auto-placement feature will do the job for us no matter how many image elements we’re using.\n\n\n\nWhy not different values for the width and height? We can do that:\n\n\n\nCodePen Embed Fallback\n\n\n\n.gallery {\n  --n: 3; /* number of rows*/\n  --m: 4; /* number of columns */\n  --h: 120px; /* control the height */\n  --w: 150px; /* control the width */\n  --g: 10px;  /* control the gap */\n  --f: 1.5;   /* control the scale factor */\n\n  display: grid;\n  gap: var(--g);\n  width:  calc(var(--m)*var(--w) + (var(--m) - 1)*var(--g));\n  height: calc(var(--n)*var(--h) + (var(--n) - 1)*var(--g));\n  grid-template-columns: repeat(var(--m),auto);\n}\n\n.gallery img:hover{\n  width:  calc(var(--w)*var(--f));\n  height: calc(var(--h)*var(--f));\n}\n\n\n\nWe replace --s with two variables, one for the width, --w, and another one for the height, --h. Then we adjust everything else accordingly.\n\n\n\nSo, we started with a grid with a fixed size and number of elements, but then we made a new set of variables to get any configuration we want. All we have to do is to add as many images as we want and adjust the CSS variables accordingly. The combinations are limitless!\n\n\nA full-screen gallery of images\n\n\nWhat about a full-screen version? Yes, that’s also possible. All we need is to know what values we need to assign to our variables. If we want N rows of images and we want our grid to be full screen, we first need to solve for a height of 100vh:\n\n\n\nvar(--n) * var(--h) + (var(--n) - 1) * var(--g) = 100vh\n\n\n\nSame logic for the width, but using vw instead of vh:\n\n\n\nvar(--m) * var(--w) + (var(--m) - 1) * var(--g) = 100vw\n\n\n\nWe do the math to get:\n\n\n\n--w: (100vw - (var(--m) - 1) * var(--g)) / var(--m)\n--h: (100vh - (var(--n) - 1) * var(--g)) / var(--n)\n\n\n\nDone!\n\n\n\nCodePen Embed Fallback\n\n\n\nIt’s the same exact HTML but with some updated variables that change the grid’s sizing and behavior.\n\n\n\nNote that I have omitted the formula we previously set on the .gallery‘s width and height and replaced them with 100vw and 100vh, respectively. The formula will give us the same result but since we know what value we want, we can ditch all that added complexity.\n\n\n\nWe can also simplify the --h and --w by removing the gap from the equation in favor of this:\n\n\n\n--h: calc(100vh / var(--n)); /* Viewport height divided by number of rows */\n--w: calc(100vw / var(--m)); /* Viewport width divided by number of columns */\n\n\n\nThis will make the hovered image grow a bit more than the previous example, but it is no big deal since we can control the scale with the --f variable we’re using as a multiplier.\n\n\n\nAnd since the variables are used in one place we can still simplify the code by removing them altogether:\n\n\n\nCodePen Embed Fallback\n\n\n\nIt’s important to note this optimization applies only to the full-screen example and not to the examples we’ve covered. This example is a particular case where we can make the code lighter by removing some of the complex calculation work we needed in the other examples.\n\n\n\nWe actually have everything we need to create the popular pattern of expanding panels:\n\n\n\nCodePen Embed Fallback\n\n\nLet’s dig even deeper\n\n\nDid you notice that our scale factor can be less than 1? We can define the size of the hovered image to be smaller than --h or --w but the image gets bigger on hover.\n\n\n\nThe initial grid cell size is equal to --w and --h, so why do a smaller values make the grid cell bigger? Shouldn’t the cell get smaller, or at least maintain its initial size? And what is the final size of the grid cell?\n\n\n\nWe need to dig deeper into how the CSS Grid algorithm calculates the size of the grid cells. And this is involves understanding CSS Grid’s default stretch alignment.\n\n\n\nHere’s an example to understand the logic.\n\n\n\nCodePen Embed Fallback\n\n\n\nOn the left side of the demo, I defined a two-column with auto width. We get the intuitive result: two equal columns (and two equal grid cells). But the grid I set up on the right side of the demo, where I am updating the alignment using place-content: start, appears to have nothing.\n\n\n\nDevTools helps show us what’s really happening in both cases:\n\n\n\n\n\n\n\nIn the second grid, we have two columns, but their widths equal zero, so we get two grid cells that are collapsed at the top-left corner of the grid container. This is not a bug but the logical result of the grid’s alignment. When we size a column (or row) with auto, it means that its content dictates its size — but we have an empty div with no content to make room for.\n\n\n\nBut since stretch is the default alignment and we have enough space inside our grid, the browser will stretch both grid cells equally to cover all that area. That’s how the grid on the left winds up with two equal columns.\n\n\n\nFrom the specification:\n\n\n\nNote that certain values of justify-content and align-content can cause the tracks to be spaced apart (space-around, space-between, space-evenly) or to be resized (stretch).\n\n\n\nNote the “to be resized” which is the key here. In the last example, I used place-content which is the shorthand for justify-content and align-content\n\n\n\nAnd this is buried somewhere in the Grid Sizing algorithm specs:\n\n\n\nThis step expands tracks that have an auto max track sizing function by dividing any remaining positive, definite free space equally amongst them. If the free space is indefinite, but the grid container has a definite min-width/height, use that size to calculate the free space for this step instead.\n\n\n\n“Equally” explains why we wind up with equal grid cells, but it applies to “the free space” which is very important.\n\n\n\nLet’s take the previous example and add content to one of the divs:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe added a square 50px image. Here’s an illustration of how each grid in our example responds to that image:\n\n\n\n\n\n\n\nIn the first case, we can see that the first cell (in red) is bigger than the second one (in blue). In the second case, the size of the first cell changes to fit the physical size of the image while the second cell remains with no dimensions. The free space is divided equally, but the first cell has more content inside which makes it bigger.\n\n\n\nThis is the math to figure out our free space:\n\n\n\n(grid width) - (gap) - (image width) = (free space)\n200px - 5px - 50px = 145px \n\n\n\nDivided by two — the number of columns — we get a width of 72.5px for each column. But we add the size of the image, 50px, to the first column which leaves us with one column at 122.5px and the second one equal to 72.5px.\n\n\n\nThe same logic applies to our grid of images. All the images have a size equal to 0 (no content) while the hovered image contributes to size — even if it’s just 1px — making its grid cell bigger than the others. For this reason, the scale factor can be any value bigger than 0 even decimals between 0 and 1.\n\n\n\nTo get the final width of the grid cells, we do the same calculation to get the following:\n\n\n\n(container width) - (sum of all gaps) - (hovered image width) = (free space)\n\n\n\nThe width of container is defined by:\n\n\n\nvar(--m)*var(--w) + (var(--m) - 1)*var(--g)\n\n\n\n…and all the gaps are equal to:\n\n\n\n(var(--m) - 1)*var(--g)\n\n\n\n…and for the hovered image we have:\n\n\n\nvar(--w)*var(--f)\n\n\n\nWe can calculate all of that with our variables:\n\n\n\nvar(--m)*var(--w) - var(--w)*var(--f) = var(--w)*(var(--m) - var(--f))\n\n\n\nThe number of columns is defined by --m ,so we divide that free space equally to get:\n\n\n\nvar(--w)*(var(--m) - var(--f))/var(--m)\n\n\n\n…which gives us the size of the non-hovered images. For hovered images, we have this:\n\n\n\nvar(--w)*(var(--m) - var(--f))/var(--m) + var(--w)*var(--f)\nvar(--w)*((var(--m) - var(--f))/var(--m) + var(--f))\n\n\n\nIf we want to control the final size of the hovered image, we consider the above formula to get the exact size we want. If, for example, we want the image to be twice as big:\n\n\n\n(var(--m) - var(--f))/var(--m) + var(--f) = 2\n\n\n\nSo, the value of our scale multiplier, --f, needs to be equal to:\n\n\n\nvar(--m)/(var(--m) - 1)\n\n\n\nFor three columns we will have 3/2 = 1.5 and that’s the scale factor I used in the first demo of this article because I wanted to make the image twice as big on hover!\n\n\n\nThe same logic applies to the height calculation and in case we want to control both of them independently we will need to consider two scale factors to make sure we have a specific width and height on hover.\n\n\n\n.gallery {\n  /* same as before */\n   --fw: 1.5; /* controls the scale factor for the width */\n   --fh: 1.2; /* controls the scale factor for the height */\n\n  /* same as before */\n}\n\n.gallery img:hover{\n  width:  calc(var(--w)*var(--fw));\n  height: calc(var(--h)*var(--fh));\n}\n\n\n\nNow, you know all the secrets to create any kind of image grid with a cool hover effect while also having control of the sizing you want using the math we just covered.\n\n\nWrapping up\n\n\nIn my last article, we created a complex-looking grid with a few lines of CSS that put CSS Grid’s implicit grid and auto-placement features to use. In this article, we relied on some CSS Grid sizing trickery to create a fancy grid of images that zoom on hover and cause the grid to adjust accordingly. All of this with a simplified code that is easy to adjust using CSS variables!\n\n\n\nIn the next article, we will play with shapes! We will combine CSS grid with mask and clip-path to get fancy grid of images.\n\nZooming Images in a Grid Layout originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367204",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-08T12:55:49.000Z",
      "date_modified": "2022-08-08T12:55:49.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367283",
      "url": "https://css-tricks.com/how-i-added-scroll-snapping-to-my-twitter-timeline/",
      "title": "How I Added Scroll Snapping To My Twitter Timeline",
      "summary": "CSS Scroll Snap allows websites to snap the web page or any other scroll container to a specific scroll position when the user performs a scrolling operation. This feature has been supported in all modern browsers for over two years, …\n\nHow I Added Scroll Snapping To My Twitter Timeline originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p><a href=\"https://css-tricks.com/practical-css-scroll-snapping/\">CSS Scroll Snap</a> allows websites to snap the web page or any other scroll container to a specific scroll position when the user performs a scrolling operation. This feature has been <a href=\"https://caniuse.com/css-snappoints\" rel=\"noopener\">supported in all modern browsers</a> for over two years, but many websites that could benefit from it are still not using it.</p>\n\n\n\n<p>Scroll snapping is probably most associated with horizontal carousels (see <a href=\"https://css-tricks.com/css-only-carousel/\">Chris’s CSS-only approach</a>) and particular web pages divided into full-screen slides. But why stop there? I believe that snapping can improve the scrolling experience on any web page that lays out items in a grid or feed.</p>\n\n\n\n<span id=\"more-367283\"></span>\n\n\n\n<p>For example, most shopping websites show products in a grid. Ideally, the user would like to jump between the grid rows with minimal effort. The user can press <kbd>Space</kbd> to scroll the page by roughly one screen (viewport height), but depending on the height of the grid rows, the scroll position will eventually get “out of sync” with the grid, and the user will have to re-adjust it manually.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='276' src='https://videopress.com/embed/iAdN0niy?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>If we add scroll snapping to this page, the user can consistently scroll to the next row with the <kbd>Space</kbd> key (pressing <kbd>Shift</kbd> + <kbd>Space</kbd> will scroll to the previous row). It’s pretty effortless.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='276' src='https://videopress.com/embed/UhR3Z1B1?cover=1&amp;playsinline=1&amp;posterUrl=https%3A%2F%2Fcss-tricks.com%2Fwp-content%2Fuploads%2F2022%2F07%2Fhm-scroll-snap-after_mp4_dvd.original.jpg&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>I think that scroll snapping would be a welcome addition to this website. And it’s not even that complicated to implement. The CSS code that I used for this example is relatively simple:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  scroll-snap-type: y proximity;\n}\n\n.product-item {\n  scroll-snap-align: start;\n  scroll-margin-top: 75px; /* height of web page’s sticky header */\n}</code></pre>\n\n\n\n<p>You don’t have to wait if a website you visit regularly hasn’t yet added scroll snapping and you think it would improve your scrolling experience. You can add scroll snapping yourself — with user styles.</p>\n\n\n<h3 id=\"adding-user-styles-to-websites\">Adding user styles to websites</h3>\n\n\n<p>In the video above, you can see that I selected a user.css file in Safari’s advanced preferences. This file is a user style sheet. It contains CSS styles that I’ve written, stored in a local <code>.css</code> file, and added to Safari. These “user styles” are then applied to every web page I open in Safari.</p>\n\n\n\n<p>Chrome and Firefox do not allow users to select a user style sheet. Firefox supported a similar feature called <code>userContent.css</code> in the past, but that feature was deprecated and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1541233\" rel=\"noopener\">disabled by default</a> in 2019. I recommend the <a href=\"https://add0n.com/stylus.html\" rel=\"noopener\">Stylus browser extension</a> for these two browsers (and other Chromium-based browsers).</p>\n\n\n\n<p>One significant advantage of Stylus is that it allows you to write user styles for specific websites and URLs. Safari’s user style sheet applies to all websites, but this can be worked around, e.g., by using the new <code>:has()</code> pseudo-class to <a href=\"https://twitter.com/derSchepp/status/1548755658845085697\" rel=\"noopener\">create selectors that only match specific websites</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2243\" height=\"911\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=2243%2C911&#038;ssl=1\" alt=\"\" class=\"wp-image-367288\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?w=2243&amp;ssl=1 2243w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=300%2C122&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=1024%2C416&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=768%2C312&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=1536%2C624&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=2048%2C832&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The Stylus extension has been reviewed by both Chrome and Firefox teams and received a badge that denotes high standards.</figcaption></figure>\n\n\n\n<p>The CSS Cascading module defines a <a href=\"https://drafts.csswg.org/css-cascade/#cascading-origins\" rel=\"noopener\">User Origin</a> for styles the user adds. Safari’s user style sheet belongs to this origin, but the Stylus extension injects user styles to the Author Origin, where the website’s style sheets live. Specifically, Stylus inserts user styles directly to the page via a <code>&lt;style&gt;</code> element at the end of <code>&lt;html&gt;</code> which makes it the <a href=\"https://twitter.com/simevidas/status/1549659536168042501\" rel=\"noopener\">final style sheet on the page</a>. Technically, this means styles added via Stylus are classified as author styles since they’re not in the User Origin, but I will continue to call them user styles because the user adds them.</p>\n\n\n\n<p>However, it’s worth keeping this distinction in mind because it affects the cascade. When selector specificity is equal, a real user style is weaker than the page’s own style. This makes user styles an excellent<a href=\"https://twitter.com/simevidas/status/1490189228306837508\" rel=\"noopener\"> fit for user defaults</a>. Under the same conditions, a style added via Stylus is <em>stronger</em> than the page‘s style, so Stylus cannot as easily be used to define user defaults.</p>\n\n\n\n<p>If we add <code>!important</code> to the mix, both real user styles and styles added via Stylus are stronger than the page’s styles. So when you want to impose your user styles on a website, it doesn’t matter if you use Safari’s “Style sheet” option or the Stylus extension. Your <code>!important</code> styles will win either way.</p>\n\n\n\n<p>In the next section, I will use a set of <code>!important</code> user styles to enforce scroll snapping on the timeline page of Twitter’s website. My goal is to speed up the process of reading my Twitter timeline by avoiding awkward scroll positions where the topmost tweet is only partially on screen.</p>\n\n\n<h3 id=\"scroll-snap-for-twitters-timeline\">Scroll snap for Twitter’s timeline</h3>\n\n\n<p>After some experimentation, I’ve settled on the following CSS code. These styles work well in Firefox, but I’ve experienced some issues in Chrome and Safari. I will describe these issues in more detail later in the article, but for now, let’s focus on the behavior in Firefox.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  scroll-snap-type: y mandatory !important;\n}\n\n/* tweets in the timeline are &lt;article> elements */\narticle {\n  scroll-snap-align: start !important;\n}\n\n/* un-stick the sticky header and make it “snappable” as well */\n[aria-label=\"Home timeline\"] > :first-child {\n  position: static !important;\n  scroll-snap-align: start !important;\n}\n\n/* hide the “new Tweets available” floating toast notification */\n[aria-label=\"New Tweets are available.\"] {\n  display: none !important;\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">It is necessary to add <code>!important</code> to each declaration because all the user styles must win over the web page’s own styles for our custom scroll snapping implementation to work correctly. I wish that instead of repeatedly writing <code>!important</code>, I could just put my user styles in an “important layer,” but <a href=\"https://twitter.com/simevidas/status/1547645242932809730\" rel=\"noopener\">such a CSS feature does not exist</a> (yet).</p>\n\n\n\n<p>Watch the video below to see my scroll snap user styles in action. Notice how each press on the <kbd>Space</kbd> key scrolls the next set of tweets into view, and the first tweet of each set is aligned to the top edge of the viewport. This allows me to read my timeline more quickly. When I need to go back to the previous set of tweets, I can press <kbd>Shift</kbd> + <kbd>Space</kbd>.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='277' src='https://videopress.com/embed/nIXD4Q1t?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>What I like about this type of scroll snapping is that it allows me to predict how far the page will scroll whenever I press <kbd>Space</kbd>. Each scroll distance equals the combined heights of the visible tweets that are entirely on the screen. In other words, the partially visible tweet at the bottom of the screen will move to the top of the screen, which is precisely what I want.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1420\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=2560%2C1420&#038;ssl=1\" alt=\"\" class=\"wp-image-367295\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=300%2C166&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=1024%2C568&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=768%2C426&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=1536%2C852&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=2048%2C1136&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>I know in advance that pressing <code>Space</code> will scroll Dave’s tweet to the top of the screen.</figcaption></figure>\n\n\n\n<p>To try out my scroll snap user styles on your own Twitter timeline, follow these steps:</p>\n\n\n\n<ol><li>Install the <a href=\"https://add0n.com/stylus.html\" rel=\"noopener\">Stylus extension</a> with Firefox Add-ons or the Chrome Web Store.</li><li>Navigate to your Twitter timeline at <a href=\"https://twitter.com/home\" rel=\"noopener\">https://twitter.com/home</a>.</li><li>Click the Stylus icon in the browser’s toolbar and click “this URL” in the pop-up.</li><li>Stylus will open a code editor in a new browser tab. Copy-paste my scroll snap user styles into the editor and press the Save button in the sidebar on the left. The styles will be applied to your Twitter timeline immediately (no need to reload the page).</li><li>You can update the styles at any time. Click the Stylus icon and the Pencil icon to open the editor again.</li></ol>\n\n\n<h3 id=\"inability-to-override-snapping\">Inability to override snapping</h3>\n\n\n<p>My implementation of scroll snapping for Twitter’s timeline has one major flaw. If a tweet is taller than the viewport, it is impossible to scroll the page to reveal the bottom part of that tweet (e.g., if you want to like or retweet that tweet) because the browser forcefully snaps the page to show the top of the tweet (or the top of the following tweet).</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='277' src='https://videopress.com/embed/WmY6xjoq?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p class=\"is-style-explanation\">The severity of this problem depends on the user’s display. Viewing Twitter’s timeline on a large desktop monitor at a small page zoom factor, you may not encounter any tweets taller than the viewport.</p>\n\n\n\n<p>I have asked the CSS Working Group if it would be possible to add a mechanism allowing the user to <a href=\"https://github.com/w3c/csswg-drafts/issues/7530\" rel=\"noopener\">override the browser’s mandatory scroll snapping</a>. I should probably mention that this problem could, at least in theory, be resolved by switching from <code>mandatory</code> to <code>proximity</code> snapping. I’ve tested <code>proximity</code> snapping in Chrome and Firefox, and I found it inconsistent and confusing. The browser would often snap when I didn’t expect it to, and vice versa. Maybe Twitter’s code is interfering with the <code>proximity</code> algorithm, the browsers are still a bit buggy, or perhaps I’m just “scrolling it wrong,” if that’s even possible. I don’t know.</p>\n\n\n\n<p>But the main reason why I went with <code>mandatory</code> snapping is that I wanted to avoid situations where the topmost tweet is only partially on screen after a scroll. The type of fast-scrolling between sets of tweets that I’ve shown in the video above is only possible with <code>mandatory</code> snapping.</p>\n\n\n\n<p>If you, like me, prefer <code>mandatory</code> snapping, I can suggest the following two workarounds for the “tall tweet” problem:</p>\n\n\n\n<ul><li>You can open the tweet on its own page and return to the timeline afterward.</li><li>If you only want to click the Like or Retweet buttons, you can <kbd>Shift</kbd>-click the tweet to select it and then press <kbd>L</kbd> to like it, or <kbd>T</kbd> followed by <kbd>Enter</kbd> to retweet it.</li></ul>\n\n\n<h3 id=\"issues-in-chrome-and-safari\">Issues in Chrome and Safari</h3>\n\n\n<p>My scroll snap user styles produce noticeably different scroll snapping behaviors in Chrome, Safari, and Firefox. Those differences are in part since the exact implementation of the snapping mechanism is <a href=\"https://drafts.csswg.org/css-scroll-snap-1/#overview\" rel=\"noopener\">left up to the browser</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The CSS Scroll Snap Module intentionally does not specify nor mandate any precise animations or physics used to enforce snap positions; this is left up to the user agent.</p></blockquote>\n\n\n\n<p>The current version of Safari has a bug that prevents scroll snapping from working correctly on the Twitter timeline. I have <a href=\"https://bugs.webkit.org/show_bug.cgi?id=243107\" rel=\"noopener\">reported this bug</a>.</p>\n\n\n\n<p>In Chrome, I have encountered the following problems:</p>\n\n\n\n<ul><li>The scrolling operations animate inconsistently. Sometimes the animation is slow, sometimes it’s instant, and sometimes it starts slow but is then cut short. I found this irritating.</li><li>The scrolling operations animate too slowly in general. I performed a test in Chrome and Firefox (20 <kbd>Space</kbd> presses), and it took me 70% more time to cover the same distance on my Twitter timeline in Chrome than in Firefox (18.5 seconds in Chrome vs. 11 seconds in Firefox).</li><li>When I scroll using my laptop’s trackpad, the page flickers a lot. When I attempt to scroll fast by holding down the <kbd>Space</kbd> key, the page scrolls very slowly and oscillates. I suspect that both issues are caused by the same algorithm. It seems that Chrome re-snaps at a very high rate in these cases. I have <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1346716\" rel=\"noopener\">reported this bug</a>.</li></ul>\n\n\n\n<p>These browser bugs and differences between browsers can be a problem for websites considering implementing scroll snapping. For example, a web developer might hold back because they don’t like how scroll snapping behaves in one particular browser. Browsers can mitigate this problem by becoming more interoperable. In fact, Scroll Snap is one of the areas of focus of the cross-browser <a href=\"https://web.dev/interop-2022/\" rel=\"noopener\">Interop 2022 effort</a>.</p>\n\n\n\n<p>Another way the situation could be improved is by introducing new CSS properties that would make scroll snapping more configurable. This could include the duration of the snapping animation, the length of the proximity threshold for snapping, and a mechanism to override mandatory snapping.</p>\n\n\n<h3 id=\"to-snap-or-not-to-snap\">To snap or not to snap?</h3>\n\n\n<p>I’ve been using my scroll snap user styles on Twitter’s timeline for a couple of weeks, and I don’t want to go back. The ability to quickly flip through my feed with only the <kbd>Space</kbd> key is just on another level.</p>\n\n\n\n<p>However, I consider this an advanced feature that probably isn’t for everyone. There’s a reason why I’ve enabled it only on the timeline (<code>/home</code> path) and nowhere else on Twitter’s website. Snapping is a significant change in how the page scrolls, and it takes some time to get used to. It can work great for a specific use case, but it can also get in the way and frustrate the user.</p>\n\n\n\n<p>Websites with feeds should therefore consider offering scroll snapping only as an optional feature, after careful consideration and plenty of testing in different browsers and with different input methods (mouse, keyboard, trackpad, touch screen, etc.).</p>\n\n\n<h3 id=\"before-you-go\">Before you go…</h3>\n\n\n<p>Finally, I highly recommend installing and trying out the <a href=\"https://add0n.com/stylus.html\" rel=\"noopener\">Stylus browser extension</a>. Web developers (or anyone who knows CSS) have the power to style any website in their browser. You can apply minor improvements and fixes to your favorite websites. I mostly use it to hide page elements that I find annoying, such as sticky headers, video pop-ups, and vote counts.</p>\n\n\n\n<p>But more importantly, Stylus allows you to quickly test new CSS features on any website and report browser bugs, if necessary. By doing this, you can help make the web platform a little better.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-i-added-scroll-snapping-to-my-twitter-timeline/\">How I Added Scroll Snapping To My Twitter Timeline</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "CSS Scroll Snap allows websites to snap the web page or any other scroll container to a specific scroll position when the user performs a scrolling operation. This feature has been supported in all modern browsers for over two years, but many websites that could benefit from it are still not using it.\n\n\n\nScroll snapping is probably most associated with horizontal carousels (see Chris’s CSS-only approach) and particular web pages divided into full-screen slides. But why stop there? I believe that snapping can improve the scrolling experience on any web page that lays out items in a grid or feed.\n\n\n\n\n\n\n\nFor example, most shopping websites show products in a grid. Ideally, the user would like to jump between the grid rows with minimal effort. The user can press Space to scroll the page by roughly one screen (viewport height), but depending on the height of the grid rows, the scroll position will eventually get “out of sync” with the grid, and the user will have to re-adjust it manually.\n\n\n\n\n\n\n\n\n\nIf we add scroll snapping to this page, the user can consistently scroll to the next row with the Space key (pressing Shift + Space will scroll to the previous row). It’s pretty effortless.\n\n\n\n\n\n\n\n\n\nI think that scroll snapping would be a welcome addition to this website. And it’s not even that complicated to implement. The CSS code that I used for this example is relatively simple:\n\n\n\nhtml {\n  scroll-snap-type: y proximity;\n}\n\n.product-item {\n  scroll-snap-align: start;\n  scroll-margin-top: 75px; /* height of web page’s sticky header */\n}\n\n\n\nYou don’t have to wait if a website you visit regularly hasn’t yet added scroll snapping and you think it would improve your scrolling experience. You can add scroll snapping yourself — with user styles.\n\n\nAdding user styles to websites\n\n\nIn the video above, you can see that I selected a user.css file in Safari’s advanced preferences. This file is a user style sheet. It contains CSS styles that I’ve written, stored in a local .css file, and added to Safari. These “user styles” are then applied to every web page I open in Safari.\n\n\n\nChrome and Firefox do not allow users to select a user style sheet. Firefox supported a similar feature called userContent.css in the past, but that feature was deprecated and disabled by default in 2019. I recommend the Stylus browser extension for these two browsers (and other Chromium-based browsers).\n\n\n\nOne significant advantage of Stylus is that it allows you to write user styles for specific websites and URLs. Safari’s user style sheet applies to all websites, but this can be worked around, e.g., by using the new :has() pseudo-class to create selectors that only match specific websites.\n\n\n\nThe Stylus extension has been reviewed by both Chrome and Firefox teams and received a badge that denotes high standards.\n\n\n\nThe CSS Cascading module defines a User Origin for styles the user adds. Safari’s user style sheet belongs to this origin, but the Stylus extension injects user styles to the Author Origin, where the website’s style sheets live. Specifically, Stylus inserts user styles directly to the page via a <style> element at the end of <html> which makes it the final style sheet on the page. Technically, this means styles added via Stylus are classified as author styles since they’re not in the User Origin, but I will continue to call them user styles because the user adds them.\n\n\n\nHowever, it’s worth keeping this distinction in mind because it affects the cascade. When selector specificity is equal, a real user style is weaker than the page’s own style. This makes user styles an excellent fit for user defaults. Under the same conditions, a style added via Stylus is stronger than the page‘s style, so Stylus cannot as easily be used to define user defaults.\n\n\n\nIf we add !important to the mix, both real user styles and styles added via Stylus are stronger than the page’s styles. So when you want to impose your user styles on a website, it doesn’t matter if you use Safari’s “Style sheet” option or the Stylus extension. Your !important styles will win either way.\n\n\n\nIn the next section, I will use a set of !important user styles to enforce scroll snapping on the timeline page of Twitter’s website. My goal is to speed up the process of reading my Twitter timeline by avoiding awkward scroll positions where the topmost tweet is only partially on screen.\n\n\nScroll snap for Twitter’s timeline\n\n\nAfter some experimentation, I’ve settled on the following CSS code. These styles work well in Firefox, but I’ve experienced some issues in Chrome and Safari. I will describe these issues in more detail later in the article, but for now, let’s focus on the behavior in Firefox.\n\n\n\nhtml {\n  scroll-snap-type: y mandatory !important;\n}\n\n/* tweets in the timeline are <article> elements */\narticle {\n  scroll-snap-align: start !important;\n}\n\n/* un-stick the sticky header and make it “snappable” as well */\n[aria-label=\"Home timeline\"] > :first-child {\n  position: static !important;\n  scroll-snap-align: start !important;\n}\n\n/* hide the “new Tweets available” floating toast notification */\n[aria-label=\"New Tweets are available.\"] {\n  display: none !important;\n}\n\n\n\nIt is necessary to add !important to each declaration because all the user styles must win over the web page’s own styles for our custom scroll snapping implementation to work correctly. I wish that instead of repeatedly writing !important, I could just put my user styles in an “important layer,” but such a CSS feature does not exist (yet).\n\n\n\nWatch the video below to see my scroll snap user styles in action. Notice how each press on the Space key scrolls the next set of tweets into view, and the first tweet of each set is aligned to the top edge of the viewport. This allows me to read my timeline more quickly. When I need to go back to the previous set of tweets, I can press Shift + Space.\n\n\n\n\n\n\n\n\n\nWhat I like about this type of scroll snapping is that it allows me to predict how far the page will scroll whenever I press Space. Each scroll distance equals the combined heights of the visible tweets that are entirely on the screen. In other words, the partially visible tweet at the bottom of the screen will move to the top of the screen, which is precisely what I want.\n\n\n\nI know in advance that pressing Space will scroll Dave’s tweet to the top of the screen.\n\n\n\nTo try out my scroll snap user styles on your own Twitter timeline, follow these steps:\n\n\n\nInstall the Stylus extension with Firefox Add-ons or the Chrome Web Store.Navigate to your Twitter timeline at https://twitter.com/home.Click the Stylus icon in the browser’s toolbar and click “this URL” in the pop-up.Stylus will open a code editor in a new browser tab. Copy-paste my scroll snap user styles into the editor and press the Save button in the sidebar on the left. The styles will be applied to your Twitter timeline immediately (no need to reload the page).You can update the styles at any time. Click the Stylus icon and the Pencil icon to open the editor again.\n\n\nInability to override snapping\n\n\nMy implementation of scroll snapping for Twitter’s timeline has one major flaw. If a tweet is taller than the viewport, it is impossible to scroll the page to reveal the bottom part of that tweet (e.g., if you want to like or retweet that tweet) because the browser forcefully snaps the page to show the top of the tweet (or the top of the following tweet).\n\n\n\n\n\n\n\n\n\nThe severity of this problem depends on the user’s display. Viewing Twitter’s timeline on a large desktop monitor at a small page zoom factor, you may not encounter any tweets taller than the viewport.\n\n\n\nI have asked the CSS Working Group if it would be possible to add a mechanism allowing the user to override the browser’s mandatory scroll snapping. I should probably mention that this problem could, at least in theory, be resolved by switching from mandatory to proximity snapping. I’ve tested proximity snapping in Chrome and Firefox, and I found it inconsistent and confusing. The browser would often snap when I didn’t expect it to, and vice versa. Maybe Twitter’s code is interfering with the proximity algorithm, the browsers are still a bit buggy, or perhaps I’m just “scrolling it wrong,” if that’s even possible. I don’t know.\n\n\n\nBut the main reason why I went with mandatory snapping is that I wanted to avoid situations where the topmost tweet is only partially on screen after a scroll. The type of fast-scrolling between sets of tweets that I’ve shown in the video above is only possible with mandatory snapping.\n\n\n\nIf you, like me, prefer mandatory snapping, I can suggest the following two workarounds for the “tall tweet” problem:\n\n\n\nYou can open the tweet on its own page and return to the timeline afterward.If you only want to click the Like or Retweet buttons, you can Shift-click the tweet to select it and then press L to like it, or T followed by Enter to retweet it.\n\n\nIssues in Chrome and Safari\n\n\nMy scroll snap user styles produce noticeably different scroll snapping behaviors in Chrome, Safari, and Firefox. Those differences are in part since the exact implementation of the snapping mechanism is left up to the browser:\n\n\n\nThe CSS Scroll Snap Module intentionally does not specify nor mandate any precise animations or physics used to enforce snap positions; this is left up to the user agent.\n\n\n\nThe current version of Safari has a bug that prevents scroll snapping from working correctly on the Twitter timeline. I have reported this bug.\n\n\n\nIn Chrome, I have encountered the following problems:\n\n\n\nThe scrolling operations animate inconsistently. Sometimes the animation is slow, sometimes it’s instant, and sometimes it starts slow but is then cut short. I found this irritating.The scrolling operations animate too slowly in general. I performed a test in Chrome and Firefox (20 Space presses), and it took me 70% more time to cover the same distance on my Twitter timeline in Chrome than in Firefox (18.5 seconds in Chrome vs. 11 seconds in Firefox).When I scroll using my laptop’s trackpad, the page flickers a lot. When I attempt to scroll fast by holding down the Space key, the page scrolls very slowly and oscillates. I suspect that both issues are caused by the same algorithm. It seems that Chrome re-snaps at a very high rate in these cases. I have reported this bug.\n\n\n\nThese browser bugs and differences between browsers can be a problem for websites considering implementing scroll snapping. For example, a web developer might hold back because they don’t like how scroll snapping behaves in one particular browser. Browsers can mitigate this problem by becoming more interoperable. In fact, Scroll Snap is one of the areas of focus of the cross-browser Interop 2022 effort.\n\n\n\nAnother way the situation could be improved is by introducing new CSS properties that would make scroll snapping more configurable. This could include the duration of the snapping animation, the length of the proximity threshold for snapping, and a mechanism to override mandatory snapping.\n\n\nTo snap or not to snap?\n\n\nI’ve been using my scroll snap user styles on Twitter’s timeline for a couple of weeks, and I don’t want to go back. The ability to quickly flip through my feed with only the Space key is just on another level.\n\n\n\nHowever, I consider this an advanced feature that probably isn’t for everyone. There’s a reason why I’ve enabled it only on the timeline (/home path) and nowhere else on Twitter’s website. Snapping is a significant change in how the page scrolls, and it takes some time to get used to. It can work great for a specific use case, but it can also get in the way and frustrate the user.\n\n\n\nWebsites with feeds should therefore consider offering scroll snapping only as an optional feature, after careful consideration and plenty of testing in different browsers and with different input methods (mouse, keyboard, trackpad, touch screen, etc.).\n\n\nBefore you go…\n\n\nFinally, I highly recommend installing and trying out the Stylus browser extension. Web developers (or anyone who knows CSS) have the power to style any website in their browser. You can apply minor improvements and fixes to your favorite websites. I mostly use it to hide page elements that I find annoying, such as sticky headers, video pop-ups, and vote counts.\n\n\n\nBut more importantly, Stylus allows you to quickly test new CSS features on any website and report browser bugs, if necessary. By doing this, you can help make the web platform a little better.\n\nHow I Added Scroll Snapping To My Twitter Timeline originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367283",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-05T13:10:09.000Z",
      "date_modified": "2022-08-05T13:10:09.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367361",
      "url": "https://css-tricks.com/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/",
      "title": "Actually, the San Francisco Typeface Does Ship as a Variable Font",
      "summary": "Apple unveiled an expanded version of its San Francisco system font at WWDC 2022. Then, last month, Jim Nielsen zeroed in on the font’s variations, explaining how the font provides a spectrum of variations based on the width and weight…\n\nActually, the San Francisco Typeface Does Ship as a Variable Font originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Apple <a href=\"https://developer.apple.com/videos/play/wwdc2022/110381/\" rel=\"noopener\">unveiled</a> an expanded version of its San Francisco system font at WWDC 2022. Then, last month, Jim Nielsen zeroed in on the font&#8217;s variations, <a href=\"https://blog.jim-nielsen.com/2022/visualizing-sf-font-variations/\" rel=\"noopener\">explaining</a> how the font provides a spectrum of variations based on the <strong>width</strong> and <strong>weight</strong>. It&#8217;s a remarkable read if you haven&#8217;t checked it.</p>\n\n\n\n<span id=\"more-367361\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"589\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=1024%2C589&#038;ssl=1\" alt=\"\" class=\"wp-image-367362\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=1024%2C589&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=300%2C173&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=768%2C442&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=1536%2C883&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?w=1600&amp;ssl=1 1600w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With all of these great new options, you might be tempted to use them in a web design. Chris was <a href=\"https://chriscoyier.net/2022/06/16/expanded-san-francisco-typeface/\" rel=\"noopener\">ogling over the expanded sets as well</a> over on his personal blog and pondered:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>But it’s not year clear how we might tap into the condensed, compressed, and expanded varieties in CSS, or if there is even a plan to allow that. I suppose we can peek around Apple.com eventually and see how they do it if they start using them there.</p><p>Doesn’t this make perfect sense to construct as a variable font and ship the whole kit and kaboodle that way?</p></blockquote>\n\n\n\n<p>Turns out, yes. It does make perfect sense. Chris follows up in a <a href=\"https://chriscoyier.net/2022/08/02/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\" rel=\"noopener\">new post</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>But just yesterday I randomly stumbled across the fact that&nbsp;<strong>the built-in San Francisco font (on the Apple devices that have it built-in) is already variable (!!).&nbsp;</strong>See, I was&nbsp;<a href=\"https://v-fonts.com/fonts/roboto-flex\" rel=\"noopener\">derping around with Roboto Flex</a>, and had&nbsp;<code>system-ui</code>&nbsp;as the fallback font, and I was noticing that during the FOUT, the&nbsp;<code>font-variation-settings</code>&nbsp;I was using had an effect on the fallback font, which renders as San Francisco on my Mac. Which… unless I’m daft… means that San Francisco is a variable font.</p></blockquote>\n\n\n\n<p>So, as for using it? Chris has a demo, of course:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwMQYyQ\" src=\"//codepen.io/anon/embed/RwMQYyQ?height=450&amp;theme-id=1&amp;slug-hash=RwMQYyQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwMQYyQ\" title=\"CodePen Embed RwMQYyQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>There are some gotchas to all this, the most significant being fallbacks for non-Apple devices. After all, that demo is simply calling <code>system-ui</code> for the font family — it&#8217;s not telling the browser to download a font file or anything and who knows if Apple is gonna ever ship a variable font file we can serve up as an actual custom web font.</p>\n\n\n\n<p>The other interesting thing? Chris did some sleuthing and counted 35 layout featured included in that system font. Go <a href=\"https://chriscoyier.net/2022/08/02/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\" rel=\"noopener\">read the rest of the post</a> to see &#8217;em all (and to get a good ol&#8217; dose of Chris-isms — I know I miss them!).</p>\n<p><a href=\"https://chriscoyier.net/2022/08/02/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\">Actually, the San Francisco Typeface Does Ship as a Variable Font</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Apple unveiled an expanded version of its San Francisco system font at WWDC 2022. Then, last month, Jim Nielsen zeroed in on the font’s variations, explaining how the font provides a spectrum of variations based on the width and weight. It’s a remarkable read if you haven’t checked it.\n\n\n\n\n\n\n\n\n\n\n\nWith all of these great new options, you might be tempted to use them in a web design. Chris was ogling over the expanded sets as well over on his personal blog and pondered:\n\n\n\nBut it’s not year clear how we might tap into the condensed, compressed, and expanded varieties in CSS, or if there is even a plan to allow that. I suppose we can peek around Apple.com eventually and see how they do it if they start using them there.Doesn’t this make perfect sense to construct as a variable font and ship the whole kit and kaboodle that way?\n\n\n\nTurns out, yes. It does make perfect sense. Chris follows up in a new post:\n\n\n\nBut just yesterday I randomly stumbled across the fact that the built-in San Francisco font (on the Apple devices that have it built-in) is already variable (!!). See, I was derping around with Roboto Flex, and had system-ui as the fallback font, and I was noticing that during the FOUT, the font-variation-settings I was using had an effect on the fallback font, which renders as San Francisco on my Mac. Which… unless I’m daft… means that San Francisco is a variable font.\n\n\n\nSo, as for using it? Chris has a demo, of course:\n\n\n\nCodePen Embed Fallback\n\n\n\nThere are some gotchas to all this, the most significant being fallbacks for non-Apple devices. After all, that demo is simply calling system-ui for the font family — it’s not telling the browser to download a font file or anything and who knows if Apple is gonna ever ship a variable font file we can serve up as an actual custom web font.\n\n\n\nThe other interesting thing? Chris did some sleuthing and counted 35 layout featured included in that system font. Go read the rest of the post to see ’em all (and to get a good ol’ dose of Chris-isms — I know I miss them!).\nTo Shared Link — Permalink on CSS-Tricks\nActually, the San Francisco Typeface Does Ship as a Variable Font originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367361",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-04T20:20:28.000Z",
      "date_modified": "2022-08-04T20:20:28.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367238",
      "url": "https://css-tricks.com/converting-speech-to-pdf-with-nextjs-and-expressjs/",
      "title": "Converting Speech to PDF with NextJS and ExpressJS",
      "summary": "With speech interfaces becoming more of a thing, it’s worth exploring some of the things we can do with speech interactions. Like, what if we could say something and have that transcribed and pumped out as a downloadable PDF?\nWell, …\n\nConverting Speech to PDF with NextJS and ExpressJS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>With speech interfaces becoming more of a thing, it’s worth exploring some of the things we can do with speech interactions. Like, what if we could say something and have that transcribed and pumped out as a downloadable PDF?</p>\n\n\n\n<p>Well, spoiler alert: we absolutely <em>can</em> do that! There are libraries and frameworks we can cobble together to make it happen, and that’s what we’re going to do together in this article.</p>\n\n\n\n<span id=\"more-367238\"></span>\n\n\n\n<div class=\"wp-container-3 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/bonarhyme/audio-to-pdf-server\" rel=\"noopener\">Server repo </a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/bonarhyme/audio-to-pdf-web-client\" rel=\"noopener\">Client repo</a></div>\n</div>\n\n\n<h3 id=\"these-are-the-tools-were-using\">These are the tools we‘re using</h3>\n\n\n<p>First off, these are the two big players: Next.js and Express.js.</p>\n\n\n\n<p><a href=\"https://nextjs.org\" rel=\"noopener\">Next.js</a> tacks on additional functionalities to React, including key features for building static sites. It&#8217;s a go-to for many developers because of what it offers right out of the box, like dynamic routing, image optimization, built-in-domain and subdomain routing, fast refreshes, file system routing, and API routes… among <a href=\"https://nextjs.org/docs/getting-started\" rel=\"noopener\">many, many other things</a>.</p>\n\n\n\n<p>In our case, we definitely need Next.js for its <a href=\"https://nextjs.org/docs/api-routes/introduction\" rel=\"noopener\">API routes</a> on our client server. We want a route that takes a text file, converts it to PDF, writes it to our filesystem, then sends a response to the client.</p>\n\n\n\n<p><a href=\"https://expressjs.com\" rel=\"noopener\">Express.js</a> allows us to get a little Node.js app going with routing, HTTP helpers, and templating. It’s a server for our own API, which is what we’ll need as we pass and parse data between things.</p>\n\n\n\n<p>We have some other dependencies we’ll be putting to use:</p>\n\n\n\n<ol><li><a href=\"https://www.npmjs.com/package/react-speech-recognition\" rel=\"noopener\">react-speech-recognition</a>: A library for converting speech to text, making it available to React components.</li><li><a href=\"https://www.npmjs.com/package/regenerator-runtime\" rel=\"noopener\">regenerator-runtime</a>: A library for troubleshooting the “<code>regeneratorRuntime</code> is not defined” error that shows up in Next.js when using react-speech-recognition</li><li><a href=\"https://www.npmjs.com/package/html-pdf-node\" rel=\"noopener\">html-pdf-node</a>: A library for converting an HTML page or public URL into a PDF</li><li><a href=\"https://axios-http.com/\" rel=\"noopener\">axios</a>: A library for making HTTP requests in both the browser and Node.js</li><li><a href=\"https://www.npmjs.com/package/cors\" rel=\"noopener\">cors</a>: A library that allows cross-origin resource sharing</li></ol>\n\n\n<h3 id=\"setting-up\">Setting up</h3>\n\n\n<p>The first thing we want to do is create two project folders, one for the client and one for the server. Name them whatever you’d like. I’m naming mine <code>audio-to-pdf-client</code> and <code>audio-to-pdf-server</code>, respectively.</p>\n\n\n\n<p>The fastest way to get started with Next.js on the client side is to bootstrap it with <a href=\"https://nextjs.org/learn/basics/create-nextjs-app/setup\" rel=\"noopener\">create-next-app</a>. So, open your terminal and run the following command from your client project folder:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npx create-next-app client</code></pre>\n\n\n\n<p>Now we need our Express server. We can get it by <code>cd</code>-ing into the server project folder and running the <code>npm init</code> command. A <code>package.json</code> file will be created in the server project folder once it’s done.</p>\n\n\n\n<p>We still need to actually install Express, so let’s do that now with <code>npm install express</code>. Now we can create a new <code>index.js</code> file in the server project folder and drop this code in there:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const express = require(\"express\")\nconst app = express()\n\napp.listen(4000, () => console.log(\"Server is running on port 4000\"))</code></pre>\n\n\n\n<p>Ready to run the server?</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">node index.js</code></pre>\n\n\n\n<p>We’re going to need a couple more folders and and another file to move forward:</p>\n\n\n\n<ul><li>Create a <code>components</code> folder in the client project folder.</li><li>Create a <code>SpeechToText.jsx</code> file in the <code>components</code> subfolder.</li></ul>\n\n\n\n<p>Before we go any further, we have a little cleanup to do. Specifically, we need to replace the default code in the <code>pages/index.js</code> file with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import Head from \"next/head\";\nimport SpeechToText from \"../components/SpeechToText\";\n\nexport default function Home() {\n  return (\n    &lt;div className=\"home\">\n      &lt;Head>\n        &lt;title>Audio To PDF&lt;/title>\n        &lt;meta\n          name=\"description\"\n          content=\"An app that converts audio to pdf in the browser\"\n        />\n        &lt;link rel=\"icon\" href=\"/favicon.ico\" />\n      &lt;/Head>\n\n      &lt;h1>Convert your speech to pdf&lt;/h1>\n\n      &lt;main>\n        &lt;SpeechToText />\n      &lt;/main>\n    &lt;/div>\n  );\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">The imported <code>SpeechToText</code> component will eventually be exported from <code>components/SpeechToText.jsx</code>.</p>\n\n\n<h3 id=\"lets-install-the-other-dependencies\">Let’s install the other dependencies</h3>\n\n\n<p>Alright, we have the initial setup for our app out of the way. Now we can install the libraries that handle the data that’s passed around.</p>\n\n\n\n<p>We can install our client dependencies with:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm install react-speech-recognition regenerator-runtime axios</code></pre>\n\n\n\n<p>Our Express server dependencies are up next, so let’s <code>cd</code> into the server project folder and install those:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm install html-pdf-node cors</code></pre>\n\n\n\n<p>Probably a good time to pause and make sure the files in our project folders are in tact. Here&#8217;s what you should have in the client project folder at this point:</p>\n\n\n\n<pre rel=\"File structure\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">/audio-to-pdf-web-client\n├─ /components\n|  └── SpeechToText.jsx\n├─ /pages\n|  ├─ _app.js\n|  └── index.js\n└── /styles\n    ├─globals.css\n    └── Home.module.css</code></pre>\n\n\n\n<p>And here&#8217;s what you should have in the server project folder:</p>\n\n\n\n<pre rel=\"File structure\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">/audio-to-pdf-server\n└── index.js</code></pre>\n\n\n<h3 id=\"building-the-ui\">Building the UI</h3>\n\n\n<p>Well, our speech-to-PDF wouldn’t be all that great if there’s no way to interact with it, so let’s make a React component for it that we can call <code>&lt;SpeechToText&gt;</code>.</p>\n\n\n\n<p>You can totally use your own markup. Here’s what I’ve got to give you an idea of the pieces we’re putting together:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React from \"react\";\n\nconst SpeechToText = () => {\n  return (\n    &lt;>\n      &lt;section>\n        &lt;div className=\"button-container\">\n          &lt;button type=\"button\" style={{ \"--bgColor\": \"blue\" }}>\n            Start\n          &lt;/button>\n          &lt;button type=\"button\" style={{ \"--bgColor\": \"orange\" }}>\n            Stop\n          &lt;/button>\n        &lt;/div>\n        &lt;div\n          className=\"words\"\n          contentEditable\n          suppressContentEditableWarning={true}\n        >&lt;/div>\n        &lt;div className=\"button-container\">\n          &lt;button type=\"button\" style={{ \"--bgColor\": \"red\" }}>\n            Reset\n          &lt;/button>\n          &lt;button type=\"button\" style={{ \"--bgColor\": \"green\" }}>\n            Convert to pdf\n          &lt;/button>\n        &lt;/div>\n      &lt;/section>\n    &lt;/>\n  );\n};\n\nexport default SpeechToText;</code></pre>\n\n\n\n<p>This component returns a <a href=\"https://reactjs.org/docs/fragments.html\" rel=\"noopener\">React fragment</a> that contains an HTML <code>&lt;``section``&gt;</code> element that contains three divs:</p>\n\n\n\n<ul><li><code><strong>.button-container</strong></code> contains two buttons that will be used to start and stop speech recognition.</li><li><code><strong>.words</strong></code> has <code>contentEditable</code> and <code>suppressContentEditableWarning</code> attributes to make this element editable and suppress any warnings from React.</li><li>Another <code><strong>.button-container</strong></code> holds two more buttons that will be used to reset and convert speech to PDF, respectively.</li></ul>\n\n\n\n<p>Styling is another thing altogether. I won’t go into it here, but you’re welcome to use some styles I wrote either as a starting point for your own <code>styles/global.css</code> file.</p>\n\n\n\n<details >\n  <summary>\n          View Full CSS      </summary>\n  \n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html,\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\n    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.home {\n  background-color: #333;\n  min-height: 100%;\n  padding: 0 1rem;\n  padding-bottom: 3rem;\n}\n\nh1 {\n  width: 100%;\n  max-width: 400px;\n  margin: auto;\n  padding: 2rem 0;\n  text-align: center;\n  text-transform: capitalize;\n  color: white;\n  font-size: 1rem;\n}\n\n.button-container {\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  gap: 3rem;\n}\n\nbutton {\n  color: white;\n  background-color: var(--bgColor);\n  font-size: 1.2rem;\n  padding: 0.5rem 1.5rem;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  opacity: 0.9;\n}\n\nbutton:active {\n  transform: scale(0.99);\n}\n\n.words {\n  max-width: 700px;\n  margin: 50px auto;\n  height: 50vh;\n  border-radius: 5px;\n  padding: 1rem 2rem 1rem 5rem;\n  background-image: -webkit-gradient(\n    linear,\n    0 0,\n    0 100%,\n    from(#d9eaf3),\n    color-stop(4%, #fff)\n  ) 0 4px;\n  background-size: 100% 3rem;\n  background-attachment: scroll;\n  position: relative;\n  line-height: 3rem;\n  overflow-y: auto;\n}\n\n.success,\n.error {\n  background-color: #fff;\n  margin: 1rem auto;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  width: max-content;\n  text-align: center;\n  display: block;\n}\n\n.success {\n  color: green;\n}\n\n.error {\n  color: red;\n}\n</code></pre>\n\n\n\n<p class=\"is-style-explanation\">The CSS variables in there are being used to control the background color of the buttons.</p>\n\n\n</details>\n\n\n<p>Let’s see the latest changes! Run <code>npm run dev</code> in the terminal and check them out.</p>\n\n\n\n<p>You should see this in browser when you visit <code>http://localhost:3000</code>:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1090\" height=\"697\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?resize=1090%2C697&#038;ssl=1\" alt=\"\" class=\"wp-image-367242\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?w=1090&amp;ssl=1 1090w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?resize=300%2C192&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?resize=1024%2C655&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?resize=768%2C491&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"our-first-speech-to-text-conversion\">Our first speech to text conversion!</h3>\n\n\n<p>The first action to take is to import the necessary dependencies into our <code>&lt;SpeechToText&gt;</code> component:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React, { useRef, useState } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport axios from \"axios\";</code></pre>\n\n\n\n<p>Then we check if speech recognition is supported by the browser and render a notice if not supported:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const speechRecognitionSupported =\n  SpeechRecognition.browserSupportsSpeechRecognition();\n\nif (!speechRecognitionSupported) {\n  return &lt;div>Your browser does not support speech recognition.&lt;/div>;\n}</code></pre>\n\n\n\n<p>Next up, let’s extract <code>transcript</code> and <code>resetTranscript</code> from the <code>useSpeechRecognition()</code> hook:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const { transcript, resetTranscript } = useSpeechRecognition();</code></pre>\n\n\n\n<p>This is what we need for the state that handles <code>listening</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const [listening, setListening] = useState(false);</code></pre>\n\n\n\n<p>We also need a <code>ref</code> for the <code>div</code> with the <code>contentEditable</code> attribute, then we need to add the <code>ref</code> attribute to it and pass <code>transcript</code> as <code>children</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const textBodyRef = useRef(null);</code></pre>\n\n\n\n<p>…and:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;div\n  className=\"words\"\n  contentEditable\n  ref={textBodyRef}\n  suppressContentEditableWarning={true}\n  >\n  {transcript}\n&lt;/div></code></pre>\n\n\n\n<p>The last thing we need here is a function that triggers speech recognition and to tie that function to the <code>onClick</code> event listener of our button. The button sets listening to <code>true</code> and makes it run continuously. We’ll disable the button while it’s in that state to prevent us from firing off additional events.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const startListening = () => {\n  setListening(true);\n  SpeechRecognition.startListening({\n    continuous: true,\n  });\n};</code></pre>\n\n\n\n<p>…and:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;button\n  type=\"button\"\n  onClick={startListening}\n  style={{ \"--bgColor\": \"blue\" }}\n  disabled={listening}\n>\n  Start\n&lt;/button></code></pre>\n\n\n\n<p>Clicking on the button should now start up the transcription.</p>\n\n\n<h3 id=\"more-functions\">More functions</h3>\n\n\n<p>OK, so we have a component that can <em>start</em> listening. But now we need it to do a few other things as well, like <code>stopListening</code>, <code>resetText</code> and <code>handleConversion</code>. Let’s make those functions.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const stopListening = () => {\n  setListening(false);\n  SpeechRecognition.stopListening();\n};\n\nconst resetText = () => {\n  stopListening();\n  resetTranscript();\n  textBodyRef.current.innerText = \"\";\n};\n\nconst handleConversion = async () => {}</code></pre>\n\n\n\n<p>Each of the functions will be added to an <code>onClick</code> event listener on the appropriate buttons:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;button\n  type=\"button\"\n  onClick={stopListening}\n  style={{ \"--bgColor\": \"orange\" }}\n  disabled={listening === false}\n>\n  Stop\n&lt;/button>\n\n&lt;div className=\"button-container\">\n  &lt;button\n    type=\"button\"\n    onClick={resetText}\n    style={{ \"--bgColor\": \"red\" }}\n  >\n    Reset\n  &lt;/button>\n  &lt;button\n    type=\"button\"\n    style={{ \"--bgColor\": \"green\" }}\n    onClick={handleConversion}\n  >\n    Convert to pdf\n  &lt;/button>\n&lt;/div></code></pre>\n\n\n\n<p class=\"is-style-explanation\">The <code>handleConversion</code> function is asynchronous because we will eventually be making an API request. The “Stop” button has the disabled attribute that would be be triggered when listening is false.</p>\n\n\n\n<p>If we restart the server and refresh the browser, we can now start, stop, and reset our speech transcription in the browser.</p>\n\n\n\n<p>Now what we need is for the app to <em>transcribe</em> that recognized speech by converting it to a PDF file. For that, we need the server-side path from Express.js.</p>\n\n\n<h3 id=\"setting-up-the-api-route\">Setting up the API route</h3>\n\n\n<p>The purpose of this route is to take a text file, convert it to a PDF, write that PDF to our filesystem, then send a response to the client.</p>\n\n\n\n<p>To setup, we would open the <code>server/index.js</code> file and import the <code>html-pdf-node</code> and <code>fs</code> dependencies that will be used to write and open our filesystem.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const HTMLToPDF = require(\"html-pdf-node\");\nconst fs = require(\"fs\");\nconst cors = require(\"cors)</code></pre>\n\n\n\n<p>Next, we will setup our route:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">app.use(cors())\napp.use(express.json())\n\napp.post(\"/\", (req, res) => {\n  // etc.\n})</code></pre>\n\n\n\n<p>We then proceed to define our options required in order to use <code>html-pdf-node</code> inside the route:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let options = { format: \"A4\" };\nlet file = {\n  content: `&lt;html>&lt;body>&lt;pre style='font-size: 1.2rem'>${req.body.text}&lt;/pre>&lt;/body>&lt;/html>`,\n};</code></pre>\n\n\n\n<p>The <code>options</code> object accepts a value to set the paper size and style. Paper sizes follow a much different system than the sizing units we typically use on the web. For example, <a href=\"https://www.papersizes.org/a-paper-sizes.htm\" rel=\"noopener\">A4 is the typical letter size</a>.</p>\n\n\n\n<p>The <code>file</code> object accepts either the URL of a public website or HTML markup. In order to generate our HTML page, we will use the <code>html</code>, <code>body</code>, <code>pre</code> HTML tags and the text from the <code>req.body</code>.</p>\n\n\n\n<p class=\"is-style-explanation\">You can apply any styling of your choice.</p>\n\n\n\n<p>Next, we will add a <code>trycatch</code> to handle any errors that might pop up along the way:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">try {\n\n} catch(error){\n  console.log(error);\n  res.status(500).send(error);\n}</code></pre>\n\n\n\n<p>Next, we will use the <code>generatePdf</code> from the <code>html-pdf-node</code> library to generate a <code>pdfBuffer</code> (the raw PDF file) from our file and create a unique <code>pdfName</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">HTMLToPDF.generatePdf(file, options).then((pdfBuffer) => {\n  // console.log(\"PDF Buffer:-\", pdfBuffer);\n  const pdfName = \"./data/speech\" + Date.now() + \".pdf\";\n\n  // Next code here\n}</code></pre>\n\n\n\n<p>From there, we use the filesystem module to write, read and (yes, finally!) send a response to the client app:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">fs.writeFile(pdfName, pdfBuffer, function (writeError) {\n  if (writeError) {\n    return res\n      .status(500)\n      .json({ message: \"Unable to write file. Try again.\" });\n  }\n\n  fs.readFile(pdfName, function (readError, readData) {\n    if (!readError &amp;&amp; readData) {\n      // console.log({ readData });\n      res.setHeader(\"Content-Type\", \"application/pdf\");\n      res.setHeader(\"Content-Disposition\", \"attachment\");\n      res.send(readData);\n      return;\n    }\n\n    return res\n      .status(500)\n      .json({ message: \"Unable to write file. Try again.\" });\n  });\n});</code></pre>\n\n\n\n<p>Let’s break that down a bit:</p>\n\n\n\n<ul><li>The <code>writeFile</code> filesystem module accepts a file name, data and a callback function that can returns an error message if there’s an issue writing to the file. If you’re working with a CDN that provides error endpoints, you could use those instead.</li><li>The <code>readFile</code> filesystem module accepts a file name and a callback function that is capable or returning a read error as well as the read data. Once we have no read error and the read data is present, we will construct and send a response to the client. Again, this can be replaced with your CDN’s endpoints if you have them.</li><li>The <code>res.setHeader(\"Content-Type\", \"application/pdf\");</code> tells the browser that we are sending a PDF file.</li><li>The <code>res.setHeader(\"Content-Disposition\", \"attachment\");</code> tells the browser to make the received data downloadable.</li></ul>\n\n\n\n<p>Since the API route ready, we can use it in our app at <code>http://localhost:4000</code>. We can the proceed to the client part of our application to complete the <code>handleConversion</code> function.</p>\n\n\n<h3 id=\"handling-the-conversion\">Handling the conversion</h3>\n\n\n<p>Before we can start working on a <code>handleConversion</code> function, we need to create a state that handles our API requests for loading, error, success, and other messages. We’re going use React’s <code><a href=\"https://reactjs.org/docs/hooks-state.html\" rel=\"noopener\">useState</a></code> hook to set that up:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const [response, setResponse] = useState({\n  loading: false,\n  message: \"\",\n  error: false,\n  success: false,\n});</code></pre>\n\n\n\n<p>In the <code>handleConversion</code> function, we will check for when the web page has been loaded before running our code and make sure the <code>div</code> with the <code>editable</code> attribute is not empty:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (typeof window !== \"undefined\") {\nconst userText = textBodyRef.current.innerText;\n  // console.log(textBodyRef.current.innerText);\n\n  if (!userText) {\n    alert(\"Please speak or write some text.\");\n    return;\n  }\n}</code></pre>\n\n\n\n<p>We proceed by wrapping our eventual API request in a <code>trycatch</code>, handling any error that may arise, and updating the response state:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">try {\n\n} catch(error){\n  setResponse({\n    ...response,\n    loading: false,\n    error: true,\n    message:\n      \"An unexpected error occurred. Text not converted. Please try again\",\n    success: false,\n  });\n}</code></pre>\n\n\n\n<p>Next, we set some values for the response state and also set config for <code>axios</code> and make a post request to the server:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">setResponse({\n  ...response,\n  loading: true,\n  message: \"\",\n  error: false,\n  success: false,\n});\nconst config = {\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  responseType: \"blob\",\n};\n\nconst res = await axios.post(\n  \"http://localhost:4000\",\n  {\n    text: textBodyRef.current.innerText,\n  },\n  config\n);</code></pre>\n\n\n\n<p>Once we have gotten a successful response, we set the response state with the appropriate values and instruct the browser to download the received PDF:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">setResponse({\n  ...response,\n  loading: false,\n  error: false,\n  message:\n    \"Conversion was successful. Your download will start soon...\",\n  success: true,\n});\n\n// convert the received data to a file\nconst url = window.URL.createObjectURL(new Blob([res.data]));\n// create an anchor element\nconst link = document.createElement(\"a\");\n// set the href of the created anchor element\nlink.href = url;\n// add the download attribute, give the downloaded file a name\nlink.setAttribute(\"download\", \"yourfile.pdf\");\n// add the created anchor tag to the DOM\ndocument.body.appendChild(link);\n// force a click on the link to start a simulated download\nlink.click();</code></pre>\n\n\n\n<p>And we can use the following below the contentEditable <code>div</code> for displaying messages:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;div>\n  {response.success &amp;&amp; &lt;i className=\"success\">{response.message}&lt;/i>}\n  {response.error &amp;&amp; &lt;i className=\"error\">{response.message}&lt;/i>}\n&lt;/div></code></pre>\n\n\n<h3 id=\"final-code\">Final code</h3>\n\n\n<p>I’ve packaged everything up on GitHub so you can check out the full source code for both the server and the client.</p>\n\n\n\n<div class=\"wp-container-4 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/bonarhyme/audio-to-pdf-server\" rel=\"noopener\">Server repo </a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/bonarhyme/audio-to-pdf-web-client\" rel=\"noopener\">Client repo</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/converting-speech-to-pdf-with-nextjs-and-expressjs/\">Converting Speech to PDF with NextJS and ExpressJS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "With speech interfaces becoming more of a thing, it’s worth exploring some of the things we can do with speech interactions. Like, what if we could say something and have that transcribed and pumped out as a downloadable PDF?\n\n\n\nWell, spoiler alert: we absolutely can do that! There are libraries and frameworks we can cobble together to make it happen, and that’s what we’re going to do together in this article.\n\n\n\n\n\n\n\n\nServer repo \n\n\n\nClient repo\n\n\n\nThese are the tools we‘re using\n\n\nFirst off, these are the two big players: Next.js and Express.js.\n\n\n\nNext.js tacks on additional functionalities to React, including key features for building static sites. It’s a go-to for many developers because of what it offers right out of the box, like dynamic routing, image optimization, built-in-domain and subdomain routing, fast refreshes, file system routing, and API routes… among many, many other things.\n\n\n\nIn our case, we definitely need Next.js for its API routes on our client server. We want a route that takes a text file, converts it to PDF, writes it to our filesystem, then sends a response to the client.\n\n\n\nExpress.js allows us to get a little Node.js app going with routing, HTTP helpers, and templating. It’s a server for our own API, which is what we’ll need as we pass and parse data between things.\n\n\n\nWe have some other dependencies we’ll be putting to use:\n\n\n\nreact-speech-recognition: A library for converting speech to text, making it available to React components.regenerator-runtime: A library for troubleshooting the “regeneratorRuntime is not defined” error that shows up in Next.js when using react-speech-recognitionhtml-pdf-node: A library for converting an HTML page or public URL into a PDFaxios: A library for making HTTP requests in both the browser and Node.jscors: A library that allows cross-origin resource sharing\n\n\nSetting up\n\n\nThe first thing we want to do is create two project folders, one for the client and one for the server. Name them whatever you’d like. I’m naming mine audio-to-pdf-client and audio-to-pdf-server, respectively.\n\n\n\nThe fastest way to get started with Next.js on the client side is to bootstrap it with create-next-app. So, open your terminal and run the following command from your client project folder:\n\n\n\nnpx create-next-app client\n\n\n\nNow we need our Express server. We can get it by cd-ing into the server project folder and running the npm init command. A package.json file will be created in the server project folder once it’s done.\n\n\n\nWe still need to actually install Express, so let’s do that now with npm install express. Now we can create a new index.js file in the server project folder and drop this code in there:\n\n\n\nconst express = require(\"express\")\nconst app = express()\n\napp.listen(4000, () => console.log(\"Server is running on port 4000\"))\n\n\n\nReady to run the server?\n\n\n\nnode index.js\n\n\n\nWe’re going to need a couple more folders and and another file to move forward:\n\n\n\nCreate a components folder in the client project folder.Create a SpeechToText.jsx file in the components subfolder.\n\n\n\nBefore we go any further, we have a little cleanup to do. Specifically, we need to replace the default code in the pages/index.js file with this:\n\n\n\nimport Head from \"next/head\";\nimport SpeechToText from \"../components/SpeechToText\";\n\nexport default function Home() {\n  return (\n    <div className=\"home\">\n      <Head>\n        <title>Audio To PDF</title>\n        <meta\n          name=\"description\"\n          content=\"An app that converts audio to pdf in the browser\"\n        />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <h1>Convert your speech to pdf</h1>\n\n      <main>\n        <SpeechToText />\n      </main>\n    </div>\n  );\n}\n\n\n\nThe imported SpeechToText component will eventually be exported from components/SpeechToText.jsx.\n\n\nLet’s install the other dependencies\n\n\nAlright, we have the initial setup for our app out of the way. Now we can install the libraries that handle the data that’s passed around.\n\n\n\nWe can install our client dependencies with:\n\n\n\nnpm install react-speech-recognition regenerator-runtime axios\n\n\n\nOur Express server dependencies are up next, so let’s cd into the server project folder and install those:\n\n\n\nnpm install html-pdf-node cors\n\n\n\nProbably a good time to pause and make sure the files in our project folders are in tact. Here’s what you should have in the client project folder at this point:\n\n\n\n/audio-to-pdf-web-client\n├─ /components\n|  └── SpeechToText.jsx\n├─ /pages\n|  ├─ _app.js\n|  └── index.js\n└── /styles\n    ├─globals.css\n    └── Home.module.css\n\n\n\nAnd here’s what you should have in the server project folder:\n\n\n\n/audio-to-pdf-server\n└── index.js\n\n\nBuilding the UI\n\n\nWell, our speech-to-PDF wouldn’t be all that great if there’s no way to interact with it, so let’s make a React component for it that we can call <SpeechToText>.\n\n\n\nYou can totally use your own markup. Here’s what I’ve got to give you an idea of the pieces we’re putting together:\n\n\n\nimport React from \"react\";\n\nconst SpeechToText = () => {\n  return (\n    <>\n      <section>\n        <div className=\"button-container\">\n          <button type=\"button\" style={{ \"--bgColor\": \"blue\" }}>\n            Start\n          </button>\n          <button type=\"button\" style={{ \"--bgColor\": \"orange\" }}>\n            Stop\n          </button>\n        </div>\n        <div\n          className=\"words\"\n          contentEditable\n          suppressContentEditableWarning={true}\n        ></div>\n        <div className=\"button-container\">\n          <button type=\"button\" style={{ \"--bgColor\": \"red\" }}>\n            Reset\n          </button>\n          <button type=\"button\" style={{ \"--bgColor\": \"green\" }}>\n            Convert to pdf\n          </button>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default SpeechToText;\n\n\n\nThis component returns a React fragment that contains an HTML <``section``> element that contains three divs:\n\n\n\n.button-container contains two buttons that will be used to start and stop speech recognition..words has contentEditable and suppressContentEditableWarning attributes to make this element editable and suppress any warnings from React.Another .button-container holds two more buttons that will be used to reset and convert speech to PDF, respectively.\n\n\n\nStyling is another thing altogether. I won’t go into it here, but you’re welcome to use some styles I wrote either as a starting point for your own styles/global.css file.\n\n\n\n\n  \n          View Full CSS      \n  \n\nhtml,\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\n    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.home {\n  background-color: #333;\n  min-height: 100%;\n  padding: 0 1rem;\n  padding-bottom: 3rem;\n}\n\nh1 {\n  width: 100%;\n  max-width: 400px;\n  margin: auto;\n  padding: 2rem 0;\n  text-align: center;\n  text-transform: capitalize;\n  color: white;\n  font-size: 1rem;\n}\n\n.button-container {\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  gap: 3rem;\n}\n\nbutton {\n  color: white;\n  background-color: var(--bgColor);\n  font-size: 1.2rem;\n  padding: 0.5rem 1.5rem;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  opacity: 0.9;\n}\n\nbutton:active {\n  transform: scale(0.99);\n}\n\n.words {\n  max-width: 700px;\n  margin: 50px auto;\n  height: 50vh;\n  border-radius: 5px;\n  padding: 1rem 2rem 1rem 5rem;\n  background-image: -webkit-gradient(\n    linear,\n    0 0,\n    0 100%,\n    from(#d9eaf3),\n    color-stop(4%, #fff)\n  ) 0 4px;\n  background-size: 100% 3rem;\n  background-attachment: scroll;\n  position: relative;\n  line-height: 3rem;\n  overflow-y: auto;\n}\n\n.success,\n.error {\n  background-color: #fff;\n  margin: 1rem auto;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  width: max-content;\n  text-align: center;\n  display: block;\n}\n\n.success {\n  color: green;\n}\n\n.error {\n  color: red;\n}\n\n\n\n\nThe CSS variables in there are being used to control the background color of the buttons.\n\n\n\n\n\nLet’s see the latest changes! Run npm run dev in the terminal and check them out.\n\n\n\nYou should see this in browser when you visit http://localhost:3000:\n\n\n\n\n\n\nOur first speech to text conversion!\n\n\nThe first action to take is to import the necessary dependencies into our <SpeechToText> component:\n\n\n\nimport React, { useRef, useState } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport axios from \"axios\";\n\n\n\nThen we check if speech recognition is supported by the browser and render a notice if not supported:\n\n\n\nconst speechRecognitionSupported =\n  SpeechRecognition.browserSupportsSpeechRecognition();\n\nif (!speechRecognitionSupported) {\n  return <div>Your browser does not support speech recognition.</div>;\n}\n\n\n\nNext up, let’s extract transcript and resetTranscript from the useSpeechRecognition() hook:\n\n\n\nconst { transcript, resetTranscript } = useSpeechRecognition();\n\n\n\nThis is what we need for the state that handles listening:\n\n\n\nconst [listening, setListening] = useState(false);\n\n\n\nWe also need a ref for the div with the contentEditable attribute, then we need to add the ref attribute to it and pass transcript as children:\n\n\n\nconst textBodyRef = useRef(null);\n\n\n\n…and:\n\n\n\n<div\n  className=\"words\"\n  contentEditable\n  ref={textBodyRef}\n  suppressContentEditableWarning={true}\n  >\n  {transcript}\n</div>\n\n\n\nThe last thing we need here is a function that triggers speech recognition and to tie that function to the onClick event listener of our button. The button sets listening to true and makes it run continuously. We’ll disable the button while it’s in that state to prevent us from firing off additional events.\n\n\n\nconst startListening = () => {\n  setListening(true);\n  SpeechRecognition.startListening({\n    continuous: true,\n  });\n};\n\n\n\n…and:\n\n\n\n<button\n  type=\"button\"\n  onClick={startListening}\n  style={{ \"--bgColor\": \"blue\" }}\n  disabled={listening}\n>\n  Start\n</button>\n\n\n\nClicking on the button should now start up the transcription.\n\n\nMore functions\n\n\nOK, so we have a component that can start listening. But now we need it to do a few other things as well, like stopListening, resetText and handleConversion. Let’s make those functions.\n\n\n\nconst stopListening = () => {\n  setListening(false);\n  SpeechRecognition.stopListening();\n};\n\nconst resetText = () => {\n  stopListening();\n  resetTranscript();\n  textBodyRef.current.innerText = \"\";\n};\n\nconst handleConversion = async () => {}\n\n\n\nEach of the functions will be added to an onClick event listener on the appropriate buttons:\n\n\n\n<button\n  type=\"button\"\n  onClick={stopListening}\n  style={{ \"--bgColor\": \"orange\" }}\n  disabled={listening === false}\n>\n  Stop\n</button>\n\n<div className=\"button-container\">\n  <button\n    type=\"button\"\n    onClick={resetText}\n    style={{ \"--bgColor\": \"red\" }}\n  >\n    Reset\n  </button>\n  <button\n    type=\"button\"\n    style={{ \"--bgColor\": \"green\" }}\n    onClick={handleConversion}\n  >\n    Convert to pdf\n  </button>\n</div>\n\n\n\nThe handleConversion function is asynchronous because we will eventually be making an API request. The “Stop” button has the disabled attribute that would be be triggered when listening is false.\n\n\n\nIf we restart the server and refresh the browser, we can now start, stop, and reset our speech transcription in the browser.\n\n\n\nNow what we need is for the app to transcribe that recognized speech by converting it to a PDF file. For that, we need the server-side path from Express.js.\n\n\nSetting up the API route\n\n\nThe purpose of this route is to take a text file, convert it to a PDF, write that PDF to our filesystem, then send a response to the client.\n\n\n\nTo setup, we would open the server/index.js file and import the html-pdf-node and fs dependencies that will be used to write and open our filesystem.\n\n\n\nconst HTMLToPDF = require(\"html-pdf-node\");\nconst fs = require(\"fs\");\nconst cors = require(\"cors)\n\n\n\nNext, we will setup our route:\n\n\n\napp.use(cors())\napp.use(express.json())\n\napp.post(\"/\", (req, res) => {\n  // etc.\n})\n\n\n\nWe then proceed to define our options required in order to use html-pdf-node inside the route:\n\n\n\nlet options = { format: \"A4\" };\nlet file = {\n  content: `<html><body><pre style='font-size: 1.2rem'>${req.body.text}</pre></body></html>`,\n};\n\n\n\nThe options object accepts a value to set the paper size and style. Paper sizes follow a much different system than the sizing units we typically use on the web. For example, A4 is the typical letter size.\n\n\n\nThe file object accepts either the URL of a public website or HTML markup. In order to generate our HTML page, we will use the html, body, pre HTML tags and the text from the req.body.\n\n\n\nYou can apply any styling of your choice.\n\n\n\nNext, we will add a trycatch to handle any errors that might pop up along the way:\n\n\n\ntry {\n\n} catch(error){\n  console.log(error);\n  res.status(500).send(error);\n}\n\n\n\nNext, we will use the generatePdf from the html-pdf-node library to generate a pdfBuffer (the raw PDF file) from our file and create a unique pdfName:\n\n\n\nHTMLToPDF.generatePdf(file, options).then((pdfBuffer) => {\n  // console.log(\"PDF Buffer:-\", pdfBuffer);\n  const pdfName = \"./data/speech\" + Date.now() + \".pdf\";\n\n  // Next code here\n}\n\n\n\nFrom there, we use the filesystem module to write, read and (yes, finally!) send a response to the client app:\n\n\n\nfs.writeFile(pdfName, pdfBuffer, function (writeError) {\n  if (writeError) {\n    return res\n      .status(500)\n      .json({ message: \"Unable to write file. Try again.\" });\n  }\n\n  fs.readFile(pdfName, function (readError, readData) {\n    if (!readError && readData) {\n      // console.log({ readData });\n      res.setHeader(\"Content-Type\", \"application/pdf\");\n      res.setHeader(\"Content-Disposition\", \"attachment\");\n      res.send(readData);\n      return;\n    }\n\n    return res\n      .status(500)\n      .json({ message: \"Unable to write file. Try again.\" });\n  });\n});\n\n\n\nLet’s break that down a bit:\n\n\n\nThe writeFile filesystem module accepts a file name, data and a callback function that can returns an error message if there’s an issue writing to the file. If you’re working with a CDN that provides error endpoints, you could use those instead.The readFile filesystem module accepts a file name and a callback function that is capable or returning a read error as well as the read data. Once we have no read error and the read data is present, we will construct and send a response to the client. Again, this can be replaced with your CDN’s endpoints if you have them.The res.setHeader(\"Content-Type\", \"application/pdf\"); tells the browser that we are sending a PDF file.The res.setHeader(\"Content-Disposition\", \"attachment\"); tells the browser to make the received data downloadable.\n\n\n\nSince the API route ready, we can use it in our app at http://localhost:4000. We can the proceed to the client part of our application to complete the handleConversion function.\n\n\nHandling the conversion\n\n\nBefore we can start working on a handleConversion function, we need to create a state that handles our API requests for loading, error, success, and other messages. We’re going use React’s useState hook to set that up:\n\n\n\nconst [response, setResponse] = useState({\n  loading: false,\n  message: \"\",\n  error: false,\n  success: false,\n});\n\n\n\nIn the handleConversion function, we will check for when the web page has been loaded before running our code and make sure the div with the editable attribute is not empty:\n\n\n\nif (typeof window !== \"undefined\") {\nconst userText = textBodyRef.current.innerText;\n  // console.log(textBodyRef.current.innerText);\n\n  if (!userText) {\n    alert(\"Please speak or write some text.\");\n    return;\n  }\n}\n\n\n\nWe proceed by wrapping our eventual API request in a trycatch, handling any error that may arise, and updating the response state:\n\n\n\ntry {\n\n} catch(error){\n  setResponse({\n    ...response,\n    loading: false,\n    error: true,\n    message:\n      \"An unexpected error occurred. Text not converted. Please try again\",\n    success: false,\n  });\n}\n\n\n\nNext, we set some values for the response state and also set config for axios and make a post request to the server:\n\n\n\nsetResponse({\n  ...response,\n  loading: true,\n  message: \"\",\n  error: false,\n  success: false,\n});\nconst config = {\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  responseType: \"blob\",\n};\n\nconst res = await axios.post(\n  \"http://localhost:4000\",\n  {\n    text: textBodyRef.current.innerText,\n  },\n  config\n);\n\n\n\nOnce we have gotten a successful response, we set the response state with the appropriate values and instruct the browser to download the received PDF:\n\n\n\nsetResponse({\n  ...response,\n  loading: false,\n  error: false,\n  message:\n    \"Conversion was successful. Your download will start soon...\",\n  success: true,\n});\n\n// convert the received data to a file\nconst url = window.URL.createObjectURL(new Blob([res.data]));\n// create an anchor element\nconst link = document.createElement(\"a\");\n// set the href of the created anchor element\nlink.href = url;\n// add the download attribute, give the downloaded file a name\nlink.setAttribute(\"download\", \"yourfile.pdf\");\n// add the created anchor tag to the DOM\ndocument.body.appendChild(link);\n// force a click on the link to start a simulated download\nlink.click();\n\n\n\nAnd we can use the following below the contentEditable div for displaying messages:\n\n\n\n<div>\n  {response.success && <i className=\"success\">{response.message}</i>}\n  {response.error && <i className=\"error\">{response.message}</i>}\n</div>\n\n\nFinal code\n\n\nI’ve packaged everything up on GitHub so you can check out the full source code for both the server and the client.\n\n\n\n\nServer repo \n\n\n\nClient repo\n\n\nConverting Speech to PDF with NextJS and ExpressJS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367238",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-04T12:55:39.000Z",
      "date_modified": "2022-08-04T12:55:39.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367158",
      "url": "https://css-tricks.com/implicit-grids-repeatable-layout-patterns-and-danglers/",
      "title": "Implicit Grids, Repeatable Layout Patterns, and Danglers",
      "summary": "Dave Rupert with some modern CSS magic that tackles one of those classic conundrums: what happens when the CSS for component is unable to handle the content we throw at it?\nThe specific situation is when a layout grid expects …\n\nImplicit Grids, Repeatable Layout Patterns, and Danglers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p><a href=\"https://daverupert.com/2022/07/solving-the-dangler-conundrum-with-has-and-container-queries/\" rel=\"noopener\">Dave Rupert with some modern CSS magic</a> that tackles one of those classic conundrums: what happens when the CSS for component is unable to handle the content we throw at it?</p>\n\n\n\n<p>The specific situation is when a layout grid expects an even number of items, but is supplied with an odd number instead. We’re left with a “dangling” element at the end that throws off the layout. Sounds like what’s needed is some <a href=\"https://defensivecss.dev\" rel=\"noopener\">Defensive CSS</a> and Dave accomplishes it.</p>\n\n\n\n<span id=\"more-367158\"></span>\n\n\n\n<p>He reaches for <code>:has()</code> to write a nifty selector that sniffs out the last item in a grid that contains an odd number of items:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.items:has(.item:last-of-type:nth-of-type(odd)) .item:first-of-type { }</code></pre>\n\n\n\n<p>Breaking that down:</p>\n\n\n\n<ul><li>We have a parent container of <code>.items</code>.</li><li>If the container <code>:has()</code> an <code>.item</code> child that is the last of its type,</li><li>…and that <code>.item</code> happens to be an odd-numbered instance,</li><li>…then select the first <code>.item</code> element of that type and style it!</li></ul>\n\n\n\n<p>In this case, that last <code>.item</code> can be set to go full-width to prevent holes in the layout.</p>\n\n\n\n<p>If… then… CSS has conditional logic powers! We&#8217;re only talking about support for Safari TP and Edge/Chrome Canary at the moment, but that&#8217;s pretty awesome.</p>\n\n\n\n<p>As chance has it, Temani Afif recently shared tricks he learned while <a href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/\">experimenting with implicit grids</a>. By taking advantage of CSS Grid’s auto-placement algorithm, we don’t even have to explicitly declare a fixed number of columns and rows for a grid — CSS will create them for us if they’re needed!</p>\n\n\n\n<p>No, Temani’s techniques aren’t alternative solutions to Dave’s “dangler” dilemma. But combining Temani’s approach to repeatable grid layout patterns with Dave’s defensive CSS use of <code>:has()</code>, we get a pretty powerful and complex-looking grid that’s lightweight and capable of handling any number of items while maintaining a balanced, repeatable pattern.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGvogLz\" src=\"//codepen.io/anon/embed/bGvogLz?height=850&amp;theme-id=1&amp;slug-hash=bGvogLz&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGvogLz\" title=\"CodePen Embed bGvogLz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/implicit-grids-repeatable-layout-patterns-and-danglers/\">Implicit Grids, Repeatable Layout Patterns, and Danglers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Dave Rupert with some modern CSS magic that tackles one of those classic conundrums: what happens when the CSS for component is unable to handle the content we throw at it?\n\n\n\nThe specific situation is when a layout grid expects an even number of items, but is supplied with an odd number instead. We’re left with a “dangling” element at the end that throws off the layout. Sounds like what’s needed is some Defensive CSS and Dave accomplishes it.\n\n\n\n\n\n\n\nHe reaches for :has() to write a nifty selector that sniffs out the last item in a grid that contains an odd number of items:\n\n\n\n.items:has(.item:last-of-type:nth-of-type(odd)) .item:first-of-type { }\n\n\n\nBreaking that down:\n\n\n\nWe have a parent container of .items.If the container :has() an .item child that is the last of its type,…and that .item happens to be an odd-numbered instance,…then select the first .item element of that type and style it!\n\n\n\nIn this case, that last .item can be set to go full-width to prevent holes in the layout.\n\n\n\nIf… then… CSS has conditional logic powers! We’re only talking about support for Safari TP and Edge/Chrome Canary at the moment, but that’s pretty awesome.\n\n\n\nAs chance has it, Temani Afif recently shared tricks he learned while experimenting with implicit grids. By taking advantage of CSS Grid’s auto-placement algorithm, we don’t even have to explicitly declare a fixed number of columns and rows for a grid — CSS will create them for us if they’re needed!\n\n\n\nNo, Temani’s techniques aren’t alternative solutions to Dave’s “dangler” dilemma. But combining Temani’s approach to repeatable grid layout patterns with Dave’s defensive CSS use of :has(), we get a pretty powerful and complex-looking grid that’s lightweight and capable of handling any number of items while maintaining a balanced, repeatable pattern.\n\n\n\nCodePen Embed Fallback\n\nImplicit Grids, Repeatable Layout Patterns, and Danglers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367158",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-02T13:10:49.000Z",
      "date_modified": "2022-08-02T13:10:49.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367178",
      "url": "https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/",
      "title": "Exploring CSS Grid’s Implicit Grid and Auto-Placement Powers",
      "summary": "When working with CSS Grid, the first thing to do is to set display: grid on the element that we want to be become a grid container. Then we explicitly define the grid using a combination of grid-template-columns, grid-template-rows…\n\nExploring CSS Grid’s Implicit Grid and Auto-Placement Powers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>When working with CSS Grid, the first thing to do is to set <code>display: grid</code> on the element that we want to be become a grid container. Then we explicitly define the grid using a combination of <code><a href=\"https://css-tricks.com/almanac/properties/g/grid-template-columns/\">grid-template-columns</a></code>, <code><a href=\"https://css-tricks.com/almanac/properties/g/grid-template-rows/\">grid-template-rows</a></code>, and <code><a href=\"https://css-tricks.com/almanac/properties/g/grid-template-areas/\">grid-template-areas</a></code>. And from there, the next step is to place items inside the grid.</p>\n\n\n\n<p>This is the classic approach that should be used and I also recommend it. However, there is another approach for creating grids <strong>without any explicit definition</strong>. We call this the <strong>implicit grid</strong>.</p>\n\n\n\n<span id=\"more-367178\"></span>\n\n\n<div class=\"simpletoc ticss-7f323a3b\"><h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc-list\"   >\n<li>\n<a  href=\"#explicit-implicit-what-the-heck-is-going-on-here\">“Explicit, implicit? What the heck is going on here?”</a></li><li>\n<a  href=\"#dynamic-sidebar\">Dynamic sidebar</a></li><li>\n<a  href=\"#image-grid\">Image grid</a></li><li>\n<a  href=\"#dynamic-layouts\">Dynamic layouts</a></li><li>\n<a  href=\"#grid-patterns\">Grid patterns</a></li><li>\n<a  href=\"#want-more\">Want more?</a></li><li>\n<a  href=\"#wrapping-up\">Wrapping up</a></li></ul></div>\n\n<h3 id=\"explicit-implicit-what-the-heck-is-going-on-here\">“Explicit, implicit? What the heck is going on here?”</h3>\n\n\n<p>Strange terms, right? <a href=\"https://css-tricks.com/difference-explicit-implicit-grids/\">Manuel Matuzovic already</a> <a href=\"https://css-tricks.com/difference-explicit-implicit-grids/\">has</a> <a href=\"https://css-tricks.com/difference-explicit-implicit-grids/\">a good explanation</a> of what we may by “implicit” and “explicit” in CSS Grid, but let’s dig straight into what <a href=\"https://www.w3.org/TR/css-grid-1/#implicit-grids\" rel=\"noopener\">the</a> <a href=\"https://www.w3.org/TR/css-grid-1/#implicit-grids\" rel=\"noopener\">s</a><a href=\"https://www.w3.org/TR/css-grid-1/#implicit-grids\" rel=\"noopener\">pecification</a> says:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The <a href=\"https://www.w3.org/TR/css-grid-1/#propdef-grid-template-rows\" rel=\"noopener\"><code>grid-template-rows</code></a>, <a href=\"https://www.w3.org/TR/css-grid-1/#propdef-grid-template-columns\" rel=\"noopener\"><code>grid-template-columns</code></a>, and <a href=\"https://www.w3.org/TR/css-grid-1/#propdef-grid-template-areas\" rel=\"noopener\"><code>grid-template-areas</code></a> properties define a fixed number of tracks that form <strong>the explicit grid</strong>. When grid items are positioned outside of these bounds, the grid container generates implicit grid tracks by adding implicit grid lines to the grid. These lines together with the explicit grid form <strong>the implicit grid</strong>.</p></blockquote>\n\n\n\n<p>So, in plain English, the browser auto-generates extra rows and columns in case any elements happen to be placed outside the defined grid.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What about auto-placement?</p></blockquote>\n\n\n\n<p>Similar to the concept of implicit grid, <a href=\"https://www.w3.org/TR/css-grid-1/#common-uses-auto-placement\" rel=\"noopener\">auto-placement</a> is the ability of the browser to automatically place the items inside the grid. We don’t always need to give the position of each item.</p>\n\n\n\n<p>Through different use cases, we are going to see how such features can help us create complex and dynamic grid with a few lines of code.</p>\n\n\n<h3 id=\"dynamic-sidebar\">Dynamic sidebar</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWYPpEB/0717adced0f44e076f3936f35cde0650\" src=\"//codepen.io/anon/embed/NWYPpEB/0717adced0f44e076f3936f35cde0650?height=650&amp;theme-id=1&amp;slug-hash=NWYPpEB/0717adced0f44e076f3936f35cde0650&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWYPpEB/0717adced0f44e076f3936f35cde0650\" title=\"CodePen Embed NWYPpEB/0717adced0f44e076f3936f35cde0650\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here, we have three different layouts but we only have one grid configuration that works for all of them.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\n  display: grid;\n  grid-template-columns: 1fr;\n}</code></pre>\n\n\n\n<p>Only one column is taking up all the free space. This is our “explicit” grid. It’s set up to fit one grid item in the <code>main</code> grid container. That’s all. One column and one row:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYdWGzG\" src=\"//codepen.io/anon/embed/LYdWGzG?height=350&amp;theme-id=1&amp;slug-hash=LYdWGzG&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYdWGzG\" title=\"CodePen Embed LYdWGzG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But what if we decided to drop another element in there, say an <code>aside</code> (our dynamic sidebar). As it’s currently (and explicitly) defined, our grid will have to adjust automatically to find a place for that element. And if we do nothing else with our CSS, here’s what DevTools tells us is happening.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"790\" height=\"192\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_22CFA31B1660A9828247E1ADB4304E7D5F3D7A0297EF8C4102BEC76643B72155_1658164432480_implicit-grid-tracks.jpg?resize=790%2C192&#038;ssl=1\" alt=\"\" class=\"wp-image-367179\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_22CFA31B1660A9828247E1ADB4304E7D5F3D7A0297EF8C4102BEC76643B72155_1658164432480_implicit-grid-tracks.jpg?w=790&amp;ssl=1 790w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_22CFA31B1660A9828247E1ADB4304E7D5F3D7A0297EF8C4102BEC76643B72155_1658164432480_implicit-grid-tracks.jpg?resize=300%2C73&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_22CFA31B1660A9828247E1ADB4304E7D5F3D7A0297EF8C4102BEC76643B72155_1658164432480_implicit-grid-tracks.jpg?resize=768%2C187&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The element takes up the entire column that is explicitly set on the container. Meanwhile, the falls onto a new row between implicit grid lines labeled 2 and 3. Note that I’m using a <code>20px</code> gap to help separate things visually.</figcaption></figure>\n\n\n\n<p>We can move the <code>&lt;aside&gt;</code> to a column beside the <code>&lt;section&gt;</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">aside {\n  grid-column-start: 2;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoRpZbj\" src=\"//codepen.io/anon/embed/PoRpZbj?height=350&amp;theme-id=1&amp;slug-hash=PoRpZbj&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoRpZbj\" title=\"CodePen Embed PoRpZbj\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And here’s what DevTools tells us now:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"790\" height=\"192\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_22CFA31B1660A9828247E1ADB4304E7D5F3D7A0297EF8C4102BEC76643B72155_1658164938340_implcit-grid-column.jpg?resize=790%2C192&#038;ssl=1\" alt=\"\" class=\"wp-image-367180\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_22CFA31B1660A9828247E1ADB4304E7D5F3D7A0297EF8C4102BEC76643B72155_1658164938340_implcit-grid-column.jpg?w=790&amp;ssl=1 790w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_22CFA31B1660A9828247E1ADB4304E7D5F3D7A0297EF8C4102BEC76643B72155_1658164938340_implcit-grid-column.jpg?resize=300%2C73&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_22CFA31B1660A9828247E1ADB4304E7D5F3D7A0297EF8C4102BEC76643B72155_1658164938340_implcit-grid-column.jpg?resize=768%2C187&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The element is between the grid container’s first and second grid column lines. The starts at the second grid column line and ends at a third line we never declared.</figcaption></figure>\n\n\n\n<p>We place our element in the second column but… we don’t have a second column. Weird, right? We never declared a second column on the <code>&lt;main&gt;</code> grid container, but the browser created one for us! This is the key part from the specification we looked at:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>When grid items are positioned outside of these bounds, the grid container generates implicit grid tracks by adding implicit grid lines to the grid.</p></blockquote>\n\n\n\n<p>This powerful feature allows us to have dynamic layouts. If we only have the <code>&lt;section&gt;</code> element, all we get is one column. But if we add an <code>&lt;aside&gt;</code> element to the mix, an extra column is created to contain it.</p>\n\n\n\n<p>We could place the <code>&lt;aside&gt;</code> before the <code>&lt;section&gt;</code> instead like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">aside {\n  grid-column-end: -2;\n} </code></pre>\n\n\n\n<p>This creates the implicit column at the start of the grid, unlike the previous code that places the implicit column at the end.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"751\" height=\"448\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1658223128249_image.png?resize=751%2C448&#038;ssl=1\" alt=\"\" class=\"wp-image-367181\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1658223128249_image.png?w=751&amp;ssl=1 751w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1658223128249_image.png?resize=300%2C179&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>We can have either a right or left sidebar</figcaption></figure>\n\n\n\n<p>We can do the same thing more easily using the <code>grid-auto-flow</code> property to set any and all implicit tracks to flow in a <code>column</code> direction:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGvNxbW/c53c1762286176b403f5e59fc0493ee0\" src=\"//codepen.io/anon/embed/bGvNxbW/c53c1762286176b403f5e59fc0493ee0?height=650&amp;theme-id=1&amp;slug-hash=bGvNxbW/c53c1762286176b403f5e59fc0493ee0&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGvNxbW/c53c1762286176b403f5e59fc0493ee0\" title=\"CodePen Embed bGvNxbW/c53c1762286176b403f5e59fc0493ee0\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now there’s no need to specify <code>grid-column-start</code> to place the <code>&lt;aside&gt;</code> element to the right of the <code>&lt;section&gt;</code>! In fact, any other grid item we decide to throw in there at any time will now flow in a column direction, each one placed in its own implicit grid tracks. Perfect for situations where the number of items in the grid isn’t known in advance!</p>\n\n\n\n<p>That said, we do still need <code>grid-column-end</code> if we want to place it in a column to the left of it because, otherwise, the <code>&lt;aside&gt;</code> will occupy the explicit column which, in turn, pushes the <code>&lt;section&gt;</code> outside the explicit grid and forces it to take the implicit column.</p>\n\n\n\n<p>I know, I know. That’s a little convoluted. Here is another example we can use to better understand this little quirk:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGvNxNW/54fd420773f2335f049210994a4f5360\" src=\"//codepen.io/anon/embed/bGvNxNW/54fd420773f2335f049210994a4f5360?height=450&amp;theme-id=1&amp;slug-hash=bGvNxNW/54fd420773f2335f049210994a4f5360&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGvNxNW/54fd420773f2335f049210994a4f5360\" title=\"CodePen Embed bGvNxNW/54fd420773f2335f049210994a4f5360\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In the first example, we didn’t specify any placement. In this case, the browser will first place the <code>&lt;aside&gt;</code> element in the explicit column since it comes first in the DOM. The <code>&lt;section&gt;</code>, meanwhile, is automatically placed in the grid column the browser automatically (or implicitly) creates for us.</p>\n\n\n\n<p>In the second example, we set the <code>&lt;aside&gt;</code> element outside of the explicit grid:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">aside {\n  grid-column-end: -2;\n}</code></pre>\n\n\n\n<p>Now it doesn’t matter that <code>&lt;aside&gt;</code> comes first in the HTML. By reassigning <code>&lt;aside&gt;</code> somewhere else, we’ve made the <code>&lt;section&gt;</code> element available to take the explicit column.</p>\n\n\n<h3 id=\"image-grid\">Image grid</h3>\n\n\n<p>Let’s try something different with a grid of images where we have a big image and a few thumbnails beside it (or under it).</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxLYLNW\" src=\"//codepen.io/anon/embed/xxLYLNW?height=850&amp;theme-id=1&amp;slug-hash=xxLYLNW&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxLYLNW\" title=\"CodePen Embed xxLYLNW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We have two grid configurations. But guess what? I am not defining any grid at all! All I am doing is this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid img:first-child {\n  grid-area: span 3 / span 3;\n}</code></pre>\n\n\n\n<p>It’s surprising we only need one line of code to pull off something like this, so let’s dissect what’s going on and you will see that it’s easier than you may think. First of all, <code>grid-area</code> is a shorthand property that combines the following properties into a single declaration:</p>\n\n\n\n<ul><li><code>grid-row-start</code></li><li><code>grid-row-end</code></li><li><code>grid-column-start</code></li><li><code>grid-column-end</code></li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Wait! Isn’t <code>grid-area</code> the property we use to define <a href=\"https://css-tricks.com/simple-named-grid-areas/\">named areas</a> instead of where elements start and end on the grid?</p></blockquote>\n\n\n\n<p>Yes, but it also does more. We could write a whole lot more about <code>grid-area</code>, but in this particular case:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n\n/* ...is equivalent to: */\n.grid img:first-child {\n  grid-row-start: span 3;\n  grid-column-start: span 3;\n  grid-row-end: auto;\n  grid-column-end: auto;\n}</code></pre>\n\n\n\n<p>We can see the same thing when cracking open DevTools to expand the shorthand version:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"215\" height=\"109\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628320609_image.png?resize=215%2C109&#038;ssl=1\" alt=\"\" class=\"wp-image-367182\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>This means that the first image element in the grid needs to span <strong>three columns</strong> and <strong>three rows</strong>. But since we didn’t define any columns or rows, the browser does it for us.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"655\" height=\"354\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628458941_image.png?resize=655%2C354&#038;ssl=1\" alt=\"\" class=\"wp-image-367183\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628458941_image.png?w=655&amp;ssl=1 655w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628458941_image.png?resize=300%2C162&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’ve essentially placed the first image in the HTML to take up a 3⨉3 grid. That means that any other images will be placed automatically in those same three columns without the need to specify anything new.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"668\" height=\"468\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628687145_image.png?resize=668%2C468&#038;ssl=1\" alt=\"\" class=\"wp-image-367184\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628687145_image.png?w=668&amp;ssl=1 668w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628687145_image.png?resize=300%2C210&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>To summarize, we told the browser that the first image needs take up the space of three columns and three rows that we never explicitly defined when setting up the grid container. The browser set those columns and rows up for us. As a result, <strong>the remaining images in the HTML flow right into place using the same three columns and rows</strong>. And since the first image takes up all three columns in the first row, the remaining images flow into additional rows that each contain three columns, where each image takes up a single column.</p>\n\n\n\n<p>All this from one line of CSS! That’s the power of “implicit” grid” and auto-placement.</p>\n\n\n\n<p>For the second grid configuration in that demo, all I’ve done is change the automatic flow direction using <code>grid-auto-flow: column</code> the same way we did earlier when placing an <code>&lt;aside&gt;</code> element next to a <code>&lt;section&gt;</code>. This forces the browser to create a <em>fourth</em> column it can use to place the remaining images. And since we have three rows, the remaining images get placed inside the same vertical column.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"660\" height=\"289\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628884092_image.png?resize=660%2C289&#038;ssl=1\" alt=\"\" class=\"wp-image-367185\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628884092_image.png?w=660&amp;ssl=1 660w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656628884092_image.png?resize=300%2C131&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We need to add a few properties to the images to make sure they fit nicely inside the grid without any overflow:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-gap: 10px;\n}\n\n/* for the second grid configuration */\n.horizontal {\n  grid-auto-flow: column;\n}\n\n/* The large 3⨉3 image */\n.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n\n/* Help prevent stretched or distorted images */\nimg {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}</code></pre>\n\n\n\n<p>And of course, we can easily update the grid to consider more images by adjusting one value. That would be the <code>3</code> in the styles for the large image. We have this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid img:first-child {\n  grid-area: span 3 / span 3;\n}</code></pre>\n\n\n\n<p>But we could add a fourth column simply by changing it to <code>4</code> instead:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid img:first-child {\n  grid-area: span 4 / span 4;\n}</code></pre>\n\n\n\n<p>Even better: let’s set that up as a custom property to make things even easier to update.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaPOrW/4d9af8f949d672715c6762758082b4c6\" src=\"//codepen.io/anon/embed/YzaPOrW/4d9af8f949d672715c6762758082b4c6?height=750&amp;theme-id=1&amp;slug-hash=YzaPOrW/4d9af8f949d672715c6762758082b4c6&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaPOrW/4d9af8f949d672715c6762758082b4c6\" title=\"CodePen Embed YzaPOrW/4d9af8f949d672715c6762758082b4c6\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"dynamic-layouts\">Dynamic layouts</h3>\n\n\n<p>The first use case with the sidebar was our first dynamic layout. Now we will tackle more complex layouts where the number of elements will dictate the grid configuration.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLKyxWr/58d4e3558c4fbd00626b4a5891bf97bb\" src=\"//codepen.io/anon/embed/yLKyxWr/58d4e3558c4fbd00626b4a5891bf97bb?height=750&amp;theme-id=1&amp;slug-hash=yLKyxWr/58d4e3558c4fbd00626b4a5891bf97bb&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLKyxWr/58d4e3558c4fbd00626b4a5891bf97bb\" title=\"CodePen Embed yLKyxWr/58d4e3558c4fbd00626b4a5891bf97bb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In this example, we can have anywhere from one to four elements where the grid adjusts in way that nicely fits the number of elements without leaving any awkward gaps or missing spaces.</p>\n\n\n\n<p>When we have one element, we do nothing. The element will stretch to fill the only row and column automatically created by the grid.</p>\n\n\n\n<p>Bit when we add the second element, we create another (implicit) column using <code>grid-column-start: 2</code>.</p>\n\n\n\n<p>When we add a third element, it should take up the width of two columns — that’s why we used <code>grid-column-start: span 2</code>, but only if it’s the <code>:last-child</code> because if (and when) we add a fourth element, that one should only take up a single column.</p>\n\n\n\n<p>Adding that up, we have <strong>four grid configurations</strong> with only <strong>two declarations</strong> and the magic of implicit grid:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n}\n.grid :nth-child(2) {\n  grid-column-start: 2;\n}\n.grid :nth-child(3):last-child {\n  grid-column-start: span 2;\n}</code></pre>\n\n\n\n<p>Let’s try another one:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaPJKQ/9f6e805701fcb0774333a580212d2e19\" src=\"//codepen.io/anon/embed/YzaPJKQ/9f6e805701fcb0774333a580212d2e19?height=750&amp;theme-id=1&amp;slug-hash=YzaPJKQ/9f6e805701fcb0774333a580212d2e19&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaPJKQ/9f6e805701fcb0774333a580212d2e19\" title=\"CodePen Embed YzaPJKQ/9f6e805701fcb0774333a580212d2e19\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We’re doing nothing for the first and second cases where we have only one or two elements. When we add a third element, though, we tell the browser that — as long as it’s the <code>:last-child</code> — it should span two columns. When we add a fourth element, we tell the browser that element needs to be placed in the second column.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n}\n.grid :nth-child(3):last-child {\n  grid-column-start: span 2;\n}\n.grid :nth-child(4) {\n  grid-column-start: 2;\n}</code></pre>\n\n\n\n<p>Are you starting to get the trick? We give the browser specific instructions based on the number of elements (using <code>:nth-child</code>) and, sometimes, one instruction can change the layout completely.</p>\n\n\n\n<p>It should be noted that the sizing will not be the same when we work with different content:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poLvBJa/2d4b881ab5de5c6fc75098c6d9dea565\" src=\"//codepen.io/anon/embed/poLvBJa/2d4b881ab5de5c6fc75098c6d9dea565?height=750&amp;theme-id=1&amp;slug-hash=poLvBJa/2d4b881ab5de5c6fc75098c6d9dea565&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poLvBJa/2d4b881ab5de5c6fc75098c6d9dea565\" title=\"CodePen Embed poLvBJa/2d4b881ab5de5c6fc75098c6d9dea565\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Since we didn’t define any sizes for our items, the browser automatically sizes them for us based on their contents and we may end up with different sizing than what we just saw. To overcome this, we have to <em>explicitly</em> specify that all the columns and rows are equally sized:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-auto-rows: 1fr;\ngrid-auto-columns: 1fr;</code></pre>\n\n\n\n<p>Hey, we haven’t played with those properties yet! <a href=\"https://css-tricks.com/almanac/properties/g/grid-auto-rows/\"><code>grid-auto-rows</code></a> and <a href=\"https://css-tricks.com/almanac/properties/g/grid-auto-columns/\"><code>grid-auto-columns</code></a> set the size of implicit rows and columns, respectively, in a grid container. Or, as <a href=\"https://drafts.csswg.org/css-grid/#propdef-grid-auto-columns\" rel=\"noopener\">the spec</a> explains it:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The <a href=\"https://drafts.csswg.org/css-grid/#propdef-grid-auto-columns\" rel=\"noopener\"><code>grid-auto-columns</code></a> and <a href=\"https://drafts.csswg.org/css-grid/#propdef-grid-auto-rows\" rel=\"noopener\"><code>grid-auto-rows</code></a> properties specify the size of tracks not assigned a size by <code><a href=\"https://drafts.csswg.org/css-grid/#propdef-grid-template-rows\" rel=\"noopener\">grid-template-rows</a></code> or <code><a href=\"https://drafts.csswg.org/css-grid/#propdef-grid-template-columns\" rel=\"noopener\">grid-template-columns</a></code>.</p></blockquote>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvmBZoe/cad8346d9375fe78d197912ad0dff131\" src=\"//codepen.io/anon/embed/wvmBZoe/cad8346d9375fe78d197912ad0dff131?height=750&amp;theme-id=1&amp;slug-hash=wvmBZoe/cad8346d9375fe78d197912ad0dff131&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvmBZoe/cad8346d9375fe78d197912ad0dff131\" title=\"CodePen Embed wvmBZoe/cad8346d9375fe78d197912ad0dff131\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here is another example where we can go up to six elements. This time I will let you dissect the code. Don’t worry, the selectors may look complex but the logic is pretty straightforward.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjLomYR/993766536bfd0b7591edb2ac615a175f\" src=\"//codepen.io/anon/embed/JjLomYR/993766536bfd0b7591edb2ac615a175f?height=750&amp;theme-id=1&amp;slug-hash=JjLomYR/993766536bfd0b7591edb2ac615a175f&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjLomYR/993766536bfd0b7591edb2ac615a175f\" title=\"CodePen Embed JjLomYR/993766536bfd0b7591edb2ac615a175f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Even with six elements, we only needed two declarations. Imagine all the complex and dynamic layouts we can achieve with a few lines of code!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What’s going on with that <code>grid-auto-rows</code> and why does it take three values? Are we defining three rows?</p></blockquote>\n\n\n\n<p>No, we are not defining three rows. But we <em>are</em> defining three values as a pattern for our implicit rows. The logic is as follows:</p>\n\n\n\n<ul><li>If we have one row, it will get sized with the first value.</li><li>If we have two rows, the first one gets the first value and the second one the second value.</li><li>If we have three rows, the three values will get used.</li><li>If we have four rows (and here comes the interesting part), we use the three values for the first three rows and we reuse the first value again for the fourth row. That’s why it’s a kind of pattern that we repeat to size all the implicit rows.</li><li>If we have 100 rows, they will be sized three-by-three to have <code>2fr 2fr 1fr 2fr 2fr 1fr 2fr 2fr 1fr</code>, etc.</li></ul>\n\n\n\n<p>Unlike <code>grid-template-rows</code> which defines the number of rows and their sizes, <code>grid-auto-rows</code> only sizes row that may get created along the way.</p>\n\n\n\n<p>If we get back to our example, the logic is to have equal size when two rows are created (we will use the <code>2fr 2fr</code>), but if a third row is created we make it a bit smaller.</p>\n\n\n<h3 id=\"grid-patterns\">Grid patterns</h3>\n\n\n<p>For this last one, we are going to talk about patterns. You have probably seen those two column layouts where one column is wider than the other, and each row alternates the placement of those columns.</p>\n\n\n\n<p>This sort layout can be difficult too pull off without knowing exactly how much content we’re dealing with, but CSS Grid’s auto-placement powers makes it a relative cinch.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaPJVY/c462c7a29acbbb257e5b147c686f2d51\" src=\"//codepen.io/anon/embed/YzaPJVY/c462c7a29acbbb257e5b147c686f2d51?height=750&amp;theme-id=1&amp;slug-hash=YzaPJVY/c462c7a29acbbb257e5b147c686f2d51&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaPJVY/c462c7a29acbbb257e5b147c686f2d51\" title=\"CodePen Embed YzaPJVY/c462c7a29acbbb257e5b147c686f2d51\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Take a peek at the code. It may look complex but let’s break it down because it winds up being pretty straightforward.</p>\n\n\n\n<p>The first thing to do is to identify the pattern. Ask yourself: “After how many elements should the pattern repeat?” In this case it’s after every four elements. So, let’s look at using only four elements for now:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"608\" height=\"212\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656668565317_image.png?resize=608%2C212&#038;ssl=1\" alt=\"\" class=\"wp-image-367186\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656668565317_image.png?w=608&amp;ssl=1 608w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656668565317_image.png?resize=300%2C105&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now, let’s define the grid and set up the general pattern using the <code>:nth-child</code> selector for alternating between elements:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-auto-columns: 1fr; /* all the columns are equal */\n  grid-auto-rows: 100px; /* all the rows equal to 100px */\n}\n.grid :nth-child(4n + 1) { /* ?? */ }\n.grid :nth-child(4n + 2) { /* ?? */ }\n.grid :nth-child(4n + 3) { /* ?? */ }\n.grid :nth-child(4n + 4) { /* ?? */ }</code></pre>\n\n\n\n<p>We said that our pattern repeats every four elements, so we will logically use <code>4n + x</code> where <code>x</code> ranges from 1 to 4. It’s a little easier to explain the pattern this way:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">4(0) + 1 = 1 = 1st element /* we start with n = 0 */\n4(0) + 2 = 2 = 2nd element\n4(0) + 3 = 3 = 3rd element\n4(0) + 4 = 4 = 4th element\n4(1) + 1 = 5 = 5th element /* our pattern repeat here at n = 1 */\n4(1) + 2 = 6 = 6th element\n4(1) + 3 = 7 = 7th element\n4(1) + 4 = 8 = 8th element\n4(2) + 1 = 9 = 9th element /* our pattern repeat again here at n = 2 */\netc.</code></pre>\n\n\n\n<p>Perfect, right? We have four elements, and repeat the pattern on the fifth element, the ninth element and so on.</p>\n\n\n\n<p class=\"is-style-explanation\">Those <code>:nth-child</code> selectors can be tricky! Chris has a super helpful <a href=\"https://css-tricks.com/how-nth-child-works/\">explanation of how it all works</a>, including <a href=\"https://css-tricks.com/useful-nth-child-recipies/\">recipes for creating different patterns</a>.</p>\n\n\n\n<p>Now we configure each element so that:</p>\n\n\n\n<ol><li>The first element needs to take two columns and start at column one (<code>grid-column: 1/span 2</code>).</li><li>The second element is placed in the third column (<code>grid-column-start: 3</code>).</li><li>The third element is placed at the first column: (<code>grid-column-start: 1</code>).</li><li>The fourth element takes two columns and starts at the second column: (<code>grid-column: 2/span 2</code>).</li></ol>\n\n\n\n<p>Here that is in CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-auto-columns: 1fr; /* all the columns are equal */\n  grid-auto-rows: 100px; /* all the rows are equal to 100px */\n}\n.grid :nth-child(4n + 1) { grid-column: 1/span 2; }\n.grid :nth-child(4n + 2) { grid-column-start: 3; }\n.grid :nth-child(4n + 3) { grid-column-start: 1; }\n.grid :nth-child(4n + 4) { grid-column: 2/span 2; }</code></pre>\n\n\n\n<p>We could stop here and be done… but we can do better! Specifically, we can remove some declarations and rely grid’s auto-placement powers to do the job for us. This is the trickiest part to grok and requires a lot of practice to be able to identify what can be removed.</p>\n\n\n\n<p>The first thing we can do is update <code>grid-column: 1 /span 2</code> and use only <code>grid-column: span 2</code> since, by default, the browser will place the first item into the first column. We can also remove this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid :nth-child(4n + 3) { grid-column-start: 1; }</code></pre>\n\n\n\n<p>By placing the first, second, and fourth items, the grid automatically places the third item in the correct place. That means we’re left with this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-auto-rows: 100px; /* all the rows are equal to 100px */\n  grid-auto-columns: 1fr; /* all the columns are equal */\n}\n.grid :nth-child(4n + 1) { grid-column: span 2; }\n.grid :nth-child(4n + 2) { grid-column-start: 3; }\n.grid :nth-child(4n + 4) { grid-column: 2/span 2; }</code></pre>\n\n\n\n<p>But c’mon we can stroll do better! We can also remove this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid :nth-child(4n + 2) { grid-column-start: 3; }</code></pre>\n\n\n\n<p>Why? If we place the fourth element in the second column while allowing it to take up two full columns, we’re forcing the grid to create a third implicit column, giving us a total of three columns without explicitly telling it to. The fourth element cannot go into the first row since the first item is also taking two columns, so it flows to the next row. This configuration leave us with an empty column in the first row and an empty one in the second row.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"609\" height=\"212\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656669552703_image.png?resize=609%2C212&#038;ssl=1\" alt=\"\" class=\"wp-image-367187\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656669552703_image.png?w=609&amp;ssl=1 609w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656669552703_image.png?resize=300%2C104&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I think you know the end of the story. The browser will automatically place the second and third items in those empty spots. So our code becomes even simpler:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-auto-columns: 1fr; /* all the columns are equal */\n  grid-auto-rows: 100px; /* all the rows are equal to 100px */\n}\n.grid :nth-child(4n + 1) { grid-column: span 2; }\n.grid :nth-child(4n + 4) { grid-column: 2/span 2; }</code></pre>\n\n\n\n<p>All it takes is five declarations to create a very cool and very flexible pattern. The optimization part may be tricky, but you get used to it and gain some tricks with practice.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Why not use <code>grid-template-columns</code> to define explicit columns since we know the number of columns?</p></blockquote>\n\n\n\n<p>We can do that! Here’s the code for it:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* all the columns are equal */\n  grid-auto-rows: 100px; /* all the rows are equal to 100px */\n}\n.grid :nth-child(4n + 1),\n.grid :nth-child(4n + 4) {\n  grid-column: span 2;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExEazLZ/73bf8a38c32f834321ea9e63510e23c9\" src=\"//codepen.io/anon/embed/ExEazLZ/73bf8a38c32f834321ea9e63510e23c9?height=750&amp;theme-id=1&amp;slug-hash=ExEazLZ/73bf8a38c32f834321ea9e63510e23c9&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExEazLZ/73bf8a38c32f834321ea9e63510e23c9\" title=\"CodePen Embed ExEazLZ/73bf8a38c32f834321ea9e63510e23c9\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>As you can see, the code is definitely more intuitive. We define three explicit grid columns and we tell the browser that the first and fourth elements need to take two columns. I highly recommend this approach! But the goal of this article is to explore new ideas and tricks that we get from CSS Grid’s implicit and auto-placement powers.</p>\n\n\n\n<p>The explicit approach is more straightforward, while an implicit grid requires you to — pardon the pun — fill in the gaps where CSS is doing additional work behind the scenes. In the end, I believe that having a solid understanding of implicit grids will help you better understand the CSS Grid algorithm. After all, we are not here to study what’s obvious — we are here to explore wild territories!</p>\n\n\n\n<p>Let’s try another pattern, a bit quicker this time:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzxaJom\" src=\"//codepen.io/anon/embed/YzxaJom?height=750&amp;theme-id=1&amp;slug-hash=YzxaJom&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzxaJom\" title=\"CodePen Embed YzxaJom\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Our pattern repeats every six elements. The third and fourth elements each need to occupy two full rows. If we place the third and the fourth elements, it seems that we don’t need to touch the others, so let’s try the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-rows: 100px;\n}\n.grid :nth-child(6n + 3) {\n  grid-area: span 2/2; /* grid-row-start: span 2 &amp;&amp; grid-column-start: 2 */\n}\n.grid :nth-child(6n + 4) {\n  grid-area: span 2/1; /* grid-row-start: span 2 &amp;&amp; grid-column-start: 1 */\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOebJNq/bfb026fdd80549f4b5e1d72e6bdf5e13\" src=\"//codepen.io/anon/embed/gOebJNq/bfb026fdd80549f4b5e1d72e6bdf5e13?height=750&amp;theme-id=1&amp;slug-hash=gOebJNq/bfb026fdd80549f4b5e1d72e6bdf5e13&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOebJNq/bfb026fdd80549f4b5e1d72e6bdf5e13\" title=\"CodePen Embed gOebJNq/bfb026fdd80549f4b5e1d72e6bdf5e13\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Hmm, no good. We need to place the second element in the first column. Otherwise, the grid will automatically place it in the second column.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid :nth-child(6n + 2) {\n  grid-column: 1; /* grid-column-start: 1 */\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BaryeXg/658adad08195ed95cd50e53de42494f2\" src=\"//codepen.io/anon/embed/BaryeXg/658adad08195ed95cd50e53de42494f2?height=750&amp;theme-id=1&amp;slug-hash=BaryeXg/658adad08195ed95cd50e53de42494f2&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BaryeXg/658adad08195ed95cd50e53de42494f2\" title=\"CodePen Embed BaryeXg/658adad08195ed95cd50e53de42494f2\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Better, but there’s still more work, We need to shift the third element to the top. It’s tempting to try placing it in the first row this way:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid :nth-child(6n + 3) {\n  grid-area: 1/2/span 2; \n    /* Equivalent to:\n       grid-row-start: 1;\n       grid-row-end: span 2;\n       grid-column-start: 2 \n     */\n}</code></pre>\n\n\n\n<p>But this doesn’t work because it forces all the <code>6n + 3</code> elements to get placed in the same area which makes a jumbled layout. The real solution is to keep the initial definition of the third element and add <code>grid-auto-flow: dense</code> to fill the gaps. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow\" rel=\"noopener\">From MDN</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[The] &#8220;dense&#8221; packing algorithm attempts to fill <strong>in holes earlier in the grid</strong>, if smaller items come up later. This may cause items to appear out-of-order, when doing so would fill in holes left by larger items. If it is omitted, a &#8220;sparse&#8221; algorithm is used, where the placement algorithm only ever moves &#8220;forward&#8221; in the grid when placing items, never backtracking to fill holes. This ensures that all of the auto-placed items appear &#8220;in order&#8221;, even if this leaves holes that could have been filled by later items.</p></blockquote>\n\n\n\n<p>I know this property is not very intuitive but never forget it when you face a placement issue. Before trying different configurations in vain, add it because it may fix your layout with no additional effort.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Why not always add this property by default?</p></blockquote>\n\n\n\n<p>I don’t recommend it because, in some cases, we don’t want that behavior. Note how the MDN’s explanation there mentions it causes items to flow “out-of-order” to fill holes left by larger items. Visual order is usually just as important as the source order, particularly when it comes to accessible interfaces, and <code>grid-auto-flow: dense</code> can sometimes cause a mismatch between the visual and source order.</p>\n\n\n\n<p>Our final code is then:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: dense;\n  grid-auto-rows: 100px;\n}\n.grid :nth-child(6n + 2) { grid-column: 1; }\n.grid :nth-child(6n + 3) { grid-area: span 2/2; }\n.grid :nth-child(6n + 4) { grid-row: span 2; }</code></pre>\n\n\n\n<p>Another one? Let’s go!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWEOMdr\" src=\"//codepen.io/anon/embed/MWEOMdr?height=950&amp;theme-id=1&amp;slug-hash=MWEOMdr&amp;default-tab=result\" height=\"950\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWEOMdr\" title=\"CodePen Embed MWEOMdr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>For this one, I will not talk too much and instead show you an illustration of the code I have used. Try to see if you get how I reached that code:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"674\" height=\"474\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656673113922_image.png?resize=674%2C474&#038;ssl=1\" alt=\"\" class=\"wp-image-367188\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656673113922_image.png?w=674&amp;ssl=1 674w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656673113922_image.png?resize=300%2C211&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The items in black are implicitly placed in the grid. It should be noted that we can get the same layout more ways than how I got there. Can you figure those out, too? What about using <code>grid-template-columns</code>? Share your works in the comment section.</p>\n\n\n\n<p>I am gonna leave you with a last pattern:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"608\" height=\"742\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656674978920_image.png?resize=608%2C742&#038;ssl=1\" alt=\"\" class=\"wp-image-367189\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656674978920_image.png?w=608&amp;ssl=1 608w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_F4C924AEFDB642C9861B01422787157264225531682D164A8C42B48A83B84E89_1656674978920_image.png?resize=246%2C300&amp;ssl=1 246w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I do <a href=\"https://codepen.io/t_afif/pen/bGoLyXQ/c235fd09a97c0873d31cd9b7d5530dd5\" rel=\"noopener\">have a solution</a> for this one but it’s your turn to practice. Take all that we have learned and try to code this by yourself and then compare it with my solution. Don’t worry if you end with something verbose — the most important thing is finding a working solution.</p>\n\n\n<h3 id=\"want-more\">Want more?</h3>\n\n\n<p>Before we end I want to share a few Stack Overflow questions related to CSS Grid where I jumped in with answers that use many of the techniques we covered here together. It’s a good list that shows just how many real use cases and real-world situations come up where these things come in handy:</p>\n\n\n\n<ul><li><a href=\"https://stackoverflow.com/a/61197351/8620333\" rel=\"noopener\">Change the number of columns and rows in a grid as the number of items increase</a></li><li><a href=\"https://stackoverflow.com/a/58478256/8620333\" rel=\"noopener\">CSS Grid &#8211; 2&#215;2 grid always taking up the full width when possible</a></li><li><a href=\"https://stackoverflow.com/q/52898785/8620333\" rel=\"noopener\">How to repeat a CSS grid layout pattern?</a></li><li><a href=\"https://stackoverflow.com/a/60090576/8620333\" rel=\"noopener\">Create CSS grid layout with pure CSS</a></li><li><a href=\"https://stackoverflow.com/a/61330399/8620333\" rel=\"noopener\">CSS Grid vs dynamic definition list autoplacement</a></li><li><a href=\"https://stackoverflow.com/a/61141540/8620333\" rel=\"noopener\">CSS Grid &#8211; alternate order of elements only on Desktop</a></li><li><a href=\"https://stackoverflow.com/a/51079015/8620333\" rel=\"noopener\">Image Tile Using CSS Grid</a></li><li><a href=\"https://stackoverflow.com/q/69452147/8620333\" rel=\"noopener\">How to fix this complex CSS grid of photos based on 4 columns?</a></li><li><a href=\"https://stackoverflow.com/a/63807293/8620333\" rel=\"noopener\">Repeating grid layout with unknown amount of items</a></li><li><a href=\"https://stackoverflow.com/a/70947263/8620333\" rel=\"noopener\">Creating a repeating CSS Grid layout</a></li><li><a href=\"https://stackoverflow.com/a/56103169/8620333\" rel=\"noopener\">Is it possible to make every second row in a CSS Grid to have different number of columns?</a></li><li><a href=\"https://stackoverflow.com/a/65504637/8620333\" rel=\"noopener\">Place items in pairs in two rows using css grid</a></li><li><a href=\"https://stackoverflow.com/a/61786201/8620333\" rel=\"noopener\">How to set up a dynamic grid based on flex or grid</a></li><li><a href=\"https://stackoverflow.com/a/62113491/8620333\" rel=\"noopener\">CSS complex grid auto layout</a></li><li><a href=\"https://stackoverflow.com/q/73093172/8620333\" rel=\"noopener\">Can I stack a right-hand set of columns with CSS Grid instead of Flex?</a></li><li><a href=\"https://stackoverflow.com/q/73044810/8620333\" rel=\"noopener\">Change grid layout depending on number of elements</a></li></ul>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>CSS Grid has been around for years, but there are still a lot of little-known and used tricks that aren’t widely discussed. The implicit grid and auto-placement features are two of them!</p>\n\n\n\n<p>And yes, this can get challenging! It has taken me a lot of time to grok the logic behind implicit grids and I still struggle with auto-placement. If you want to spend more time wrapping your head around explicit and implicit grids, here are a couple of additional explanations and examples worth checking out:</p>\n\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card link\" id=\"mini-post-367178\">\n\n  <time datetime=\"2018-10-22\" title=\"Originally published Aug 1, 2022\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Oct 22, 2018  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/understanding-the-difference-between-grid-template-and-grid-auto/\">\n      Understanding the difference between grid-template and grid-auto    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/grid/\" rel=\"tag\">grid</a> <a href=\"https://css-tricks.com/tag/grid-auto-flow/\" rel=\"tag\">grid-auto-flow</a> <a href=\"https://css-tricks.com/tag/grid-template-columns/\" rel=\"tag\">grid-template-columns</a> <a href=\"https://css-tricks.com/tag/grid-template-rows/\" rel=\"tag\">grid-template-rows</a> <a href=\"https://css-tricks.com/tag/implicit-grid/\" rel=\"tag\">implicit grid</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-367178\">\n\n  <time datetime=\"2017-07-21\" title=\"Originally published Aug 1, 2022\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Jul 28, 2017  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/collection-interesting-facts-css-grid-layout/\">\n      A Collection of Interesting Facts about CSS Grid Layout    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/grid/\" rel=\"tag\">grid</a> <a href=\"https://css-tricks.com/tag/grid-auto-flow/\" rel=\"tag\">grid-auto-flow</a> <a href=\"https://css-tricks.com/tag/grid-template-columns/\" rel=\"tag\">grid-template-columns</a> <a href=\"https://css-tricks.com/tag/grid-template-rows/\" rel=\"tag\">grid-template-rows</a> <a href=\"https://css-tricks.com/tag/implicit-grid/\" rel=\"tag\">implicit grid</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/mmatuzo/\" aria-label=\"Author page of Manuel Matuzovic\">\n      <img alt='' src='https://secure.gravatar.com/avatar/fee3aee3642c55f15adfcbeab11e6bb6?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/fee3aee3642c55f15adfcbeab11e6bb6?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/mmatuzo/\">\n      Manuel Matuzovic    </a>\n  </div>\n\n</article>\n    </div>\n  \n\n\n\n<p>Similarly, you might want to read about <a href=\"https://css-tricks.com/almanac/properties/g/grid-auto-columns/\"><code>grid-auto-columns</code></a> in the CSS-Tricks Almanac because Mojtaba Seyedi goes into great detail and includes incredibly helpful visuals to help explain the behavior.</p>\n\n\n\n<p>Like I said when we started, the methods we covered here are not meant to replace the common ways you already know for building grids. I am simply exploring different ways that can be helpful in some cases.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/\">Exploring CSS Grid’s Implicit Grid and Auto-Placement Powers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "When working with CSS Grid, the first thing to do is to set display: grid on the element that we want to be become a grid container. Then we explicitly define the grid using a combination of grid-template-columns, grid-template-rows, and grid-template-areas. And from there, the next step is to place items inside the grid.\n\n\n\nThis is the classic approach that should be used and I also recommend it. However, there is another approach for creating grids without any explicit definition. We call this the implicit grid.\n\n\n\n\n\n\nTable of Contents\n\n“Explicit, implicit? What the heck is going on here?”\nDynamic sidebar\nImage grid\nDynamic layouts\nGrid patterns\nWant more?\nWrapping up\n\n“Explicit, implicit? What the heck is going on here?”\n\n\nStrange terms, right? Manuel Matuzovic already has a good explanation of what we may by “implicit” and “explicit” in CSS Grid, but let’s dig straight into what the specification says:\n\n\n\nThe grid-template-rows, grid-template-columns, and grid-template-areas properties define a fixed number of tracks that form the explicit grid. When grid items are positioned outside of these bounds, the grid container generates implicit grid tracks by adding implicit grid lines to the grid. These lines together with the explicit grid form the implicit grid.\n\n\n\nSo, in plain English, the browser auto-generates extra rows and columns in case any elements happen to be placed outside the defined grid.\n\n\n\nWhat about auto-placement?\n\n\n\nSimilar to the concept of implicit grid, auto-placement is the ability of the browser to automatically place the items inside the grid. We don’t always need to give the position of each item.\n\n\n\nThrough different use cases, we are going to see how such features can help us create complex and dynamic grid with a few lines of code.\n\n\nDynamic sidebar\n\n\nCodePen Embed Fallback\n\n\n\nHere, we have three different layouts but we only have one grid configuration that works for all of them.\n\n\n\nmain {\n  display: grid;\n  grid-template-columns: 1fr;\n}\n\n\n\nOnly one column is taking up all the free space. This is our “explicit” grid. It’s set up to fit one grid item in the main grid container. That’s all. One column and one row:\n\n\n\nCodePen Embed Fallback\n\n\n\nBut what if we decided to drop another element in there, say an aside (our dynamic sidebar). As it’s currently (and explicitly) defined, our grid will have to adjust automatically to find a place for that element. And if we do nothing else with our CSS, here’s what DevTools tells us is happening.\n\n\n\nThe element takes up the entire column that is explicitly set on the container. Meanwhile, the falls onto a new row between implicit grid lines labeled 2 and 3. Note that I’m using a 20px gap to help separate things visually.\n\n\n\nWe can move the <aside> to a column beside the <section>:\n\n\n\naside {\n  grid-column-start: 2;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd here’s what DevTools tells us now:\n\n\n\nThe element is between the grid container’s first and second grid column lines. The starts at the second grid column line and ends at a third line we never declared.\n\n\n\nWe place our element in the second column but… we don’t have a second column. Weird, right? We never declared a second column on the <main> grid container, but the browser created one for us! This is the key part from the specification we looked at:\n\n\n\nWhen grid items are positioned outside of these bounds, the grid container generates implicit grid tracks by adding implicit grid lines to the grid.\n\n\n\nThis powerful feature allows us to have dynamic layouts. If we only have the <section> element, all we get is one column. But if we add an <aside> element to the mix, an extra column is created to contain it.\n\n\n\nWe could place the <aside> before the <section> instead like this:\n\n\n\naside {\n  grid-column-end: -2;\n} \n\n\n\nThis creates the implicit column at the start of the grid, unlike the previous code that places the implicit column at the end.\n\n\n\nWe can have either a right or left sidebar\n\n\n\nWe can do the same thing more easily using the grid-auto-flow property to set any and all implicit tracks to flow in a column direction:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow there’s no need to specify grid-column-start to place the <aside> element to the right of the <section>! In fact, any other grid item we decide to throw in there at any time will now flow in a column direction, each one placed in its own implicit grid tracks. Perfect for situations where the number of items in the grid isn’t known in advance!\n\n\n\nThat said, we do still need grid-column-end if we want to place it in a column to the left of it because, otherwise, the <aside> will occupy the explicit column which, in turn, pushes the <section> outside the explicit grid and forces it to take the implicit column.\n\n\n\nI know, I know. That’s a little convoluted. Here is another example we can use to better understand this little quirk:\n\n\n\nCodePen Embed Fallback\n\n\n\nIn the first example, we didn’t specify any placement. In this case, the browser will first place the <aside> element in the explicit column since it comes first in the DOM. The <section>, meanwhile, is automatically placed in the grid column the browser automatically (or implicitly) creates for us.\n\n\n\nIn the second example, we set the <aside> element outside of the explicit grid:\n\n\n\naside {\n  grid-column-end: -2;\n}\n\n\n\nNow it doesn’t matter that <aside> comes first in the HTML. By reassigning <aside> somewhere else, we’ve made the <section> element available to take the explicit column.\n\n\nImage grid\n\n\nLet’s try something different with a grid of images where we have a big image and a few thumbnails beside it (or under it).\n\n\n\nCodePen Embed Fallback\n\n\n\nWe have two grid configurations. But guess what? I am not defining any grid at all! All I am doing is this:\n\n\n\n.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n\n\n\nIt’s surprising we only need one line of code to pull off something like this, so let’s dissect what’s going on and you will see that it’s easier than you may think. First of all, grid-area is a shorthand property that combines the following properties into a single declaration:\n\n\n\ngrid-row-startgrid-row-endgrid-column-startgrid-column-end\n\n\n\nWait! Isn’t grid-area the property we use to define named areas instead of where elements start and end on the grid?\n\n\n\nYes, but it also does more. We could write a whole lot more about grid-area, but in this particular case:\n\n\n\n.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n\n/* ...is equivalent to: */\n.grid img:first-child {\n  grid-row-start: span 3;\n  grid-column-start: span 3;\n  grid-row-end: auto;\n  grid-column-end: auto;\n}\n\n\n\nWe can see the same thing when cracking open DevTools to expand the shorthand version:\n\n\n\n\n\n\n\nThis means that the first image element in the grid needs to span three columns and three rows. But since we didn’t define any columns or rows, the browser does it for us.\n\n\n\n\n\n\n\nWe’ve essentially placed the first image in the HTML to take up a 3⨉3 grid. That means that any other images will be placed automatically in those same three columns without the need to specify anything new.\n\n\n\n\n\n\n\nTo summarize, we told the browser that the first image needs take up the space of three columns and three rows that we never explicitly defined when setting up the grid container. The browser set those columns and rows up for us. As a result, the remaining images in the HTML flow right into place using the same three columns and rows. And since the first image takes up all three columns in the first row, the remaining images flow into additional rows that each contain three columns, where each image takes up a single column.\n\n\n\nAll this from one line of CSS! That’s the power of “implicit” grid” and auto-placement.\n\n\n\nFor the second grid configuration in that demo, all I’ve done is change the automatic flow direction using grid-auto-flow: column the same way we did earlier when placing an <aside> element next to a <section>. This forces the browser to create a fourth column it can use to place the remaining images. And since we have three rows, the remaining images get placed inside the same vertical column.\n\n\n\n\n\n\n\nWe need to add a few properties to the images to make sure they fit nicely inside the grid without any overflow:\n\n\n\n.grid {\n  display: grid;\n  grid-gap: 10px;\n}\n\n/* for the second grid configuration */\n.horizontal {\n  grid-auto-flow: column;\n}\n\n/* The large 3⨉3 image */\n.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n\n/* Help prevent stretched or distorted images */\nimg {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n\n\nAnd of course, we can easily update the grid to consider more images by adjusting one value. That would be the 3 in the styles for the large image. We have this:\n\n\n\n.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n\n\n\nBut we could add a fourth column simply by changing it to 4 instead:\n\n\n\n.grid img:first-child {\n  grid-area: span 4 / span 4;\n}\n\n\n\nEven better: let’s set that up as a custom property to make things even easier to update.\n\n\n\nCodePen Embed Fallback\n\n\nDynamic layouts\n\n\nThe first use case with the sidebar was our first dynamic layout. Now we will tackle more complex layouts where the number of elements will dictate the grid configuration.\n\n\n\nCodePen Embed Fallback\n\n\n\nIn this example, we can have anywhere from one to four elements where the grid adjusts in way that nicely fits the number of elements without leaving any awkward gaps or missing spaces.\n\n\n\nWhen we have one element, we do nothing. The element will stretch to fill the only row and column automatically created by the grid.\n\n\n\nBit when we add the second element, we create another (implicit) column using grid-column-start: 2.\n\n\n\nWhen we add a third element, it should take up the width of two columns — that’s why we used grid-column-start: span 2, but only if it’s the :last-child because if (and when) we add a fourth element, that one should only take up a single column.\n\n\n\nAdding that up, we have four grid configurations with only two declarations and the magic of implicit grid:\n\n\n\n.grid {\n  display: grid;\n}\n.grid :nth-child(2) {\n  grid-column-start: 2;\n}\n.grid :nth-child(3):last-child {\n  grid-column-start: span 2;\n}\n\n\n\nLet’s try another one:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe’re doing nothing for the first and second cases where we have only one or two elements. When we add a third element, though, we tell the browser that — as long as it’s the :last-child — it should span two columns. When we add a fourth element, we tell the browser that element needs to be placed in the second column.\n\n\n\n.grid {\n  display: grid;\n}\n.grid :nth-child(3):last-child {\n  grid-column-start: span 2;\n}\n.grid :nth-child(4) {\n  grid-column-start: 2;\n}\n\n\n\nAre you starting to get the trick? We give the browser specific instructions based on the number of elements (using :nth-child) and, sometimes, one instruction can change the layout completely.\n\n\n\nIt should be noted that the sizing will not be the same when we work with different content:\n\n\n\nCodePen Embed Fallback\n\n\n\nSince we didn’t define any sizes for our items, the browser automatically sizes them for us based on their contents and we may end up with different sizing than what we just saw. To overcome this, we have to explicitly specify that all the columns and rows are equally sized:\n\n\n\ngrid-auto-rows: 1fr;\ngrid-auto-columns: 1fr;\n\n\n\nHey, we haven’t played with those properties yet! grid-auto-rows and grid-auto-columns set the size of implicit rows and columns, respectively, in a grid container. Or, as the spec explains it:\n\n\n\nThe grid-auto-columns and grid-auto-rows properties specify the size of tracks not assigned a size by grid-template-rows or grid-template-columns.\n\n\n\nCodePen Embed Fallback\n\n\n\nHere is another example where we can go up to six elements. This time I will let you dissect the code. Don’t worry, the selectors may look complex but the logic is pretty straightforward.\n\n\n\nCodePen Embed Fallback\n\n\n\nEven with six elements, we only needed two declarations. Imagine all the complex and dynamic layouts we can achieve with a few lines of code!\n\n\n\nWhat’s going on with that grid-auto-rows and why does it take three values? Are we defining three rows?\n\n\n\nNo, we are not defining three rows. But we are defining three values as a pattern for our implicit rows. The logic is as follows:\n\n\n\nIf we have one row, it will get sized with the first value.If we have two rows, the first one gets the first value and the second one the second value.If we have three rows, the three values will get used.If we have four rows (and here comes the interesting part), we use the three values for the first three rows and we reuse the first value again for the fourth row. That’s why it’s a kind of pattern that we repeat to size all the implicit rows.If we have 100 rows, they will be sized three-by-three to have 2fr 2fr 1fr 2fr 2fr 1fr 2fr 2fr 1fr, etc.\n\n\n\nUnlike grid-template-rows which defines the number of rows and their sizes, grid-auto-rows only sizes row that may get created along the way.\n\n\n\nIf we get back to our example, the logic is to have equal size when two rows are created (we will use the 2fr 2fr), but if a third row is created we make it a bit smaller.\n\n\nGrid patterns\n\n\nFor this last one, we are going to talk about patterns. You have probably seen those two column layouts where one column is wider than the other, and each row alternates the placement of those columns.\n\n\n\nThis sort layout can be difficult too pull off without knowing exactly how much content we’re dealing with, but CSS Grid’s auto-placement powers makes it a relative cinch.\n\n\n\nCodePen Embed Fallback\n\n\n\nTake a peek at the code. It may look complex but let’s break it down because it winds up being pretty straightforward.\n\n\n\nThe first thing to do is to identify the pattern. Ask yourself: “After how many elements should the pattern repeat?” In this case it’s after every four elements. So, let’s look at using only four elements for now:\n\n\n\n\n\n\n\nNow, let’s define the grid and set up the general pattern using the :nth-child selector for alternating between elements:\n\n\n\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr; /* all the columns are equal */\n  grid-auto-rows: 100px; /* all the rows equal to 100px */\n}\n.grid :nth-child(4n + 1) { /* ?? */ }\n.grid :nth-child(4n + 2) { /* ?? */ }\n.grid :nth-child(4n + 3) { /* ?? */ }\n.grid :nth-child(4n + 4) { /* ?? */ }\n\n\n\nWe said that our pattern repeats every four elements, so we will logically use 4n + x where x ranges from 1 to 4. It’s a little easier to explain the pattern this way:\n\n\n\n4(0) + 1 = 1 = 1st element /* we start with n = 0 */\n4(0) + 2 = 2 = 2nd element\n4(0) + 3 = 3 = 3rd element\n4(0) + 4 = 4 = 4th element\n4(1) + 1 = 5 = 5th element /* our pattern repeat here at n = 1 */\n4(1) + 2 = 6 = 6th element\n4(1) + 3 = 7 = 7th element\n4(1) + 4 = 8 = 8th element\n4(2) + 1 = 9 = 9th element /* our pattern repeat again here at n = 2 */\netc.\n\n\n\nPerfect, right? We have four elements, and repeat the pattern on the fifth element, the ninth element and so on.\n\n\n\nThose :nth-child selectors can be tricky! Chris has a super helpful explanation of how it all works, including recipes for creating different patterns.\n\n\n\nNow we configure each element so that:\n\n\n\nThe first element needs to take two columns and start at column one (grid-column: 1/span 2).The second element is placed in the third column (grid-column-start: 3).The third element is placed at the first column: (grid-column-start: 1).The fourth element takes two columns and starts at the second column: (grid-column: 2/span 2).\n\n\n\nHere that is in CSS:\n\n\n\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr; /* all the columns are equal */\n  grid-auto-rows: 100px; /* all the rows are equal to 100px */\n}\n.grid :nth-child(4n + 1) { grid-column: 1/span 2; }\n.grid :nth-child(4n + 2) { grid-column-start: 3; }\n.grid :nth-child(4n + 3) { grid-column-start: 1; }\n.grid :nth-child(4n + 4) { grid-column: 2/span 2; }\n\n\n\nWe could stop here and be done… but we can do better! Specifically, we can remove some declarations and rely grid’s auto-placement powers to do the job for us. This is the trickiest part to grok and requires a lot of practice to be able to identify what can be removed.\n\n\n\nThe first thing we can do is update grid-column: 1 /span 2 and use only grid-column: span 2 since, by default, the browser will place the first item into the first column. We can also remove this:\n\n\n\n.grid :nth-child(4n + 3) { grid-column-start: 1; }\n\n\n\nBy placing the first, second, and fourth items, the grid automatically places the third item in the correct place. That means we’re left with this:\n\n\n\n.grid {\n  display: grid;\n  grid-auto-rows: 100px; /* all the rows are equal to 100px */\n  grid-auto-columns: 1fr; /* all the columns are equal */\n}\n.grid :nth-child(4n + 1) { grid-column: span 2; }\n.grid :nth-child(4n + 2) { grid-column-start: 3; }\n.grid :nth-child(4n + 4) { grid-column: 2/span 2; }\n\n\n\nBut c’mon we can stroll do better! We can also remove this:\n\n\n\n.grid :nth-child(4n + 2) { grid-column-start: 3; }\n\n\n\nWhy? If we place the fourth element in the second column while allowing it to take up two full columns, we’re forcing the grid to create a third implicit column, giving us a total of three columns without explicitly telling it to. The fourth element cannot go into the first row since the first item is also taking two columns, so it flows to the next row. This configuration leave us with an empty column in the first row and an empty one in the second row.\n\n\n\n\n\n\n\nI think you know the end of the story. The browser will automatically place the second and third items in those empty spots. So our code becomes even simpler:\n\n\n\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr; /* all the columns are equal */\n  grid-auto-rows: 100px; /* all the rows are equal to 100px */\n}\n.grid :nth-child(4n + 1) { grid-column: span 2; }\n.grid :nth-child(4n + 4) { grid-column: 2/span 2; }\n\n\n\nAll it takes is five declarations to create a very cool and very flexible pattern. The optimization part may be tricky, but you get used to it and gain some tricks with practice.\n\n\n\nWhy not use grid-template-columns to define explicit columns since we know the number of columns?\n\n\n\nWe can do that! Here’s the code for it:\n\n\n\n.grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* all the columns are equal */\n  grid-auto-rows: 100px; /* all the rows are equal to 100px */\n}\n.grid :nth-child(4n + 1),\n.grid :nth-child(4n + 4) {\n  grid-column: span 2;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nAs you can see, the code is definitely more intuitive. We define three explicit grid columns and we tell the browser that the first and fourth elements need to take two columns. I highly recommend this approach! But the goal of this article is to explore new ideas and tricks that we get from CSS Grid’s implicit and auto-placement powers.\n\n\n\nThe explicit approach is more straightforward, while an implicit grid requires you to — pardon the pun — fill in the gaps where CSS is doing additional work behind the scenes. In the end, I believe that having a solid understanding of implicit grids will help you better understand the CSS Grid algorithm. After all, we are not here to study what’s obvious — we are here to explore wild territories!\n\n\n\nLet’s try another pattern, a bit quicker this time:\n\n\n\nCodePen Embed Fallback\n\n\n\nOur pattern repeats every six elements. The third and fourth elements each need to occupy two full rows. If we place the third and the fourth elements, it seems that we don’t need to touch the others, so let’s try the following:\n\n\n\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-rows: 100px;\n}\n.grid :nth-child(6n + 3) {\n  grid-area: span 2/2; /* grid-row-start: span 2 && grid-column-start: 2 */\n}\n.grid :nth-child(6n + 4) {\n  grid-area: span 2/1; /* grid-row-start: span 2 && grid-column-start: 1 */\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nHmm, no good. We need to place the second element in the first column. Otherwise, the grid will automatically place it in the second column.\n\n\n\n.grid :nth-child(6n + 2) {\n  grid-column: 1; /* grid-column-start: 1 */\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBetter, but there’s still more work, We need to shift the third element to the top. It’s tempting to try placing it in the first row this way:\n\n\n\n.grid :nth-child(6n + 3) {\n  grid-area: 1/2/span 2; \n    /* Equivalent to:\n       grid-row-start: 1;\n       grid-row-end: span 2;\n       grid-column-start: 2 \n     */\n}\n\n\n\nBut this doesn’t work because it forces all the 6n + 3 elements to get placed in the same area which makes a jumbled layout. The real solution is to keep the initial definition of the third element and add grid-auto-flow: dense to fill the gaps. From MDN:\n\n\n\n[The] “dense” packing algorithm attempts to fill in holes earlier in the grid, if smaller items come up later. This may cause items to appear out-of-order, when doing so would fill in holes left by larger items. If it is omitted, a “sparse” algorithm is used, where the placement algorithm only ever moves “forward” in the grid when placing items, never backtracking to fill holes. This ensures that all of the auto-placed items appear “in order”, even if this leaves holes that could have been filled by later items.\n\n\n\nI know this property is not very intuitive but never forget it when you face a placement issue. Before trying different configurations in vain, add it because it may fix your layout with no additional effort.\n\n\n\nWhy not always add this property by default?\n\n\n\nI don’t recommend it because, in some cases, we don’t want that behavior. Note how the MDN’s explanation there mentions it causes items to flow “out-of-order” to fill holes left by larger items. Visual order is usually just as important as the source order, particularly when it comes to accessible interfaces, and grid-auto-flow: dense can sometimes cause a mismatch between the visual and source order.\n\n\n\nOur final code is then:\n\n\n\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: dense;\n  grid-auto-rows: 100px;\n}\n.grid :nth-child(6n + 2) { grid-column: 1; }\n.grid :nth-child(6n + 3) { grid-area: span 2/2; }\n.grid :nth-child(6n + 4) { grid-row: span 2; }\n\n\n\nAnother one? Let’s go!\n\n\n\nCodePen Embed Fallback\n\n\n\nFor this one, I will not talk too much and instead show you an illustration of the code I have used. Try to see if you get how I reached that code:\n\n\n\n\n\n\n\nThe items in black are implicitly placed in the grid. It should be noted that we can get the same layout more ways than how I got there. Can you figure those out, too? What about using grid-template-columns? Share your works in the comment section.\n\n\n\nI am gonna leave you with a last pattern:\n\n\n\n\n\n\n\nI do have a solution for this one but it’s your turn to practice. Take all that we have learned and try to code this by yourself and then compare it with my solution. Don’t worry if you end with something verbose — the most important thing is finding a working solution.\n\n\nWant more?\n\n\nBefore we end I want to share a few Stack Overflow questions related to CSS Grid where I jumped in with answers that use many of the techniques we covered here together. It’s a good list that shows just how many real use cases and real-world situations come up where these things come in handy:\n\n\n\nChange the number of columns and rows in a grid as the number of items increaseCSS Grid – 2×2 grid always taking up the full width when possibleHow to repeat a CSS grid layout pattern?Create CSS grid layout with pure CSSCSS Grid vs dynamic definition list autoplacementCSS Grid – alternate order of elements only on DesktopImage Tile Using CSS GridHow to fix this complex CSS grid of photos based on 4 columns?Repeating grid layout with unknown amount of itemsCreating a repeating CSS Grid layoutIs it possible to make every second row in a CSS Grid to have different number of columns?Place items in pairs in two rows using css gridHow to set up a dynamic grid based on flex or gridCSS complex grid auto layoutCan I stack a right-hand set of columns with CSS Grid instead of Flex?Change grid layout depending on number of elements\n\n\nWrapping up\n\n\nCSS Grid has been around for years, but there are still a lot of little-known and used tricks that aren’t widely discussed. The implicit grid and auto-placement features are two of them!\n\n\n\nAnd yes, this can get challenging! It has taken me a lot of time to grok the logic behind implicit grids and I still struggle with auto-placement. If you want to spend more time wrapping your head around explicit and implicit grids, here are a couple of additional explanations and examples worth checking out:\n\n\n\n    \t\t\n    \n      \n\n  \n    \n                \n        Article\n      \n\n    on\n\n    Oct 22, 2018  \n\n  \n    \n      Understanding the difference between grid-template and grid-auto    \n  \n\n  \n      \n      grid grid-auto-flow grid-template-columns grid-template-rows implicit grid    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n        Article\n      \n\n    on\n\n    Jul 28, 2017  \n\n  \n    \n      A Collection of Interesting Facts about CSS Grid Layout    \n  \n\n  \n      \n      grid grid-auto-flow grid-template-columns grid-template-rows implicit grid    \n  \n  \n    \n          \n  \n    \n      Manuel Matuzovic    \n  \n\n\n    \n  \n\n\n\nSimilarly, you might want to read about grid-auto-columns in the CSS-Tricks Almanac because Mojtaba Seyedi goes into great detail and includes incredibly helpful visuals to help explain the behavior.\n\n\n\nLike I said when we started, the methods we covered here are not meant to replace the common ways you already know for building grids. I am simply exploring different ways that can be helpful in some cases.\n\nExploring CSS Grid’s Implicit Grid and Auto-Placement Powers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367178",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-08-01T13:44:13.000Z",
      "date_modified": "2022-08-01T13:44:13.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367270",
      "url": "https://css-tricks.com/scroll-shadows-pure-css-parallax-game-back-on/",
      "title": "Scroll Shadows? Pure CSS Parallax? Game Back On.",
      "summary": "Chris calls scroll shadows one his favorite CSS-Tricks of all time. Lea Verou popularized the pure CSS approach using four layered background gradients with some clever background-attachment magic. The result is a slick scrolling interaction that gives users a hint …\n\nScroll Shadows? Pure CSS Parallax? Game Back On. originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Chris <a href=\"https://css-tricks.com/books/greatest-css-tricks/scroll-shadows/\">calls</a> <em>scroll shadows</em> one his favorite CSS-Tricks of all time. Lea Verou <a href=\"http://lea.verou.me/2012/04/background-attachment-local/\" rel=\"noopener\">popularized</a> the pure CSS approach using four layered background gradients with some clever <code>background-attachment</code> magic. The result is a slick scrolling interaction that gives users a hint that additional content is available in a scrollable container.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzXBYvL\" src=\"//codepen.io/anon/embed/YzXBYvL?height=450&amp;theme-id=1&amp;slug-hash=YzXBYvL&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzXBYvL\" title=\"CodePen Embed YzXBYvL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Just one problem: it <a href=\"https://css-tricks.com/ios-13-broke-the-classic-pure-css-parallax-technique/\">broke</a> in Safari iOS 13. One day it was all good. The next, not so much. And that wasn’t the only thing affected. <a href=\"https://keithclark.co.uk/articles/pure-css-parallax-websites/\" rel=\"noopener\">Keith Clark’s CSS-only parallax effect</a> also stopped working right about then.</p>\n\n\n\n<p>Well, reader <a href=\"https://css-tricks.com/scroll-shadows-with-javascript/#comment-1796537\">Ronald wrote in</a> to say that all is working once again! In fact, I’m writing this on my iPad (Safari 15.5) right now and Chris’s demo is looking sharp as ever. So is Keith’s <a href=\"https://keithclark.co.uk/articles/pure-css-parallax-websites/demo3/\" rel=\"noopener\">original demo</a>.</p>\n\n\n\n<p>So, what broke it? We still don’t know. But the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-13-release-notes\" rel=\"noopener\">Safari 13 release notes</a> offer clues:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><ul><li>Added support for one-finger accelerated scrolling to all frames and&nbsp;<code>overflow:<wbr>scroll</code>&nbsp;elements eliminating the need to&nbsp;<code>set-webkit-overflow-scrolling: touch</code>.</li><li>Changed the default behavior on iPad for wide web pages with responsive meta-tags that require horizontal scrolling. Pages are scaled to prevent horizontal scrolling and any text is resized to preserve legibility.</li></ul></p></blockquote>\n\n\n\n<p>When was it fixed and what fixed it? Well, on the scroll shadow side, the Safari 15.4 <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-15_4-release-notes\" rel=\"noopener\">included</a> some work on <code>background-attachment: local</code> that may have done the trick. On the parallax side, Safari 14.1 <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-14_1-release-notes\" rel=\"noopener\">added</a> support for individual transform properties… so maybe that?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/scroll-shadows-pure-css-parallax-game-back-on/\">Scroll Shadows? Pure CSS Parallax? Game Back On.</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Chris calls scroll shadows one his favorite CSS-Tricks of all time. Lea Verou popularized the pure CSS approach using four layered background gradients with some clever background-attachment magic. The result is a slick scrolling interaction that gives users a hint that additional content is available in a scrollable container.\n\n\n\nCodePen Embed Fallback\n\n\n\nJust one problem: it broke in Safari iOS 13. One day it was all good. The next, not so much. And that wasn’t the only thing affected. Keith Clark’s CSS-only parallax effect also stopped working right about then.\n\n\n\nWell, reader Ronald wrote in to say that all is working once again! In fact, I’m writing this on my iPad (Safari 15.5) right now and Chris’s demo is looking sharp as ever. So is Keith’s original demo.\n\n\n\nSo, what broke it? We still don’t know. But the Safari 13 release notes offer clues:\n\n\n\nAdded support for one-finger accelerated scrolling to all frames and overflow:scroll elements eliminating the need to set-webkit-overflow-scrolling: touch.Changed the default behavior on iPad for wide web pages with responsive meta-tags that require horizontal scrolling. Pages are scaled to prevent horizontal scrolling and any text is resized to preserve legibility.\n\n\n\nWhen was it fixed and what fixed it? Well, on the scroll shadow side, the Safari 15.4 included some work on background-attachment: local that may have done the trick. On the parallax side, Safari 14.1 added support for individual transform properties… so maybe that?\n\nScroll Shadows? Pure CSS Parallax? Game Back On. originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367270",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-29T14:55:31.000Z",
      "date_modified": "2022-07-29T14:55:31.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367170",
      "url": "https://css-tricks.com/recreating-mdns-truncated-text-effect/",
      "title": "Recreating MDN’s Truncated Text Effect",
      "summary": "It’s no secret that MDN rolled out a new design back in March. It’s gorgeous! And there are some sweet CSS-y gems in it that are fun to look at. One of those gems is how card components handle truncated …\n\nRecreating MDN’s Truncated Text Effect originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>It&#8217;s no secret that MDN <a href=\"https://hacks.mozilla.org/2022/03/a-new-year-a-new-mdn/\" rel=\"noopener\">rolled out a new design</a> back in March. It&#8217;s gorgeous! And there are some sweet CSS-y gems in it that are fun to look at. One of those gems is how card components handle truncated text.</p>\n\n\n\n<span id=\"more-367170\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"448\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-2.44.36-PM.png?resize=1024%2C448&#038;ssl=1\" alt=\"\" class=\"wp-image-367171\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-2.44.36-PM.png?resize=1024%2C448&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-2.44.36-PM.png?resize=300%2C131&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-2.44.36-PM.png?resize=768%2C336&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-2.44.36-PM.png?resize=1536%2C672&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-2.44.36-PM.png?w=1764&amp;ssl=1 1764w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Pretty cool, yeah? I wanna tear that apart in just a bit, but a couple of things really draw me into this approach:</p>\n\n\n\n<ul><li>It&#8217;s an example of intentionally cutting off content. We&#8217;ve referred to that as <a href=\"https://css-tricks.com/overflow-and-data-loss-in-css/\">CSS data loss</a> in other places. And while data loss is generally a bad thing, I like how it&#8217;s being used here since excerpts are meant to be a teaser for the full content.</li><li>This is different than truncating text with <code><a href=\"https://css-tricks.com/almanac/properties/t/text-overflow/\">text-overflow: ellipsis</a></code>, a topic that came up rather recently when Eric Eggert <a href=\"https://css-tricks.com/text-overflow-ellipsis-considered-harmful/\">shared</a> his concerns with it. The main argument against it is that there is no way to recover the text that gets cut off in the truncation — assistive tech will announce it, but sighted users have no way to recover it. MDNs approach provides a bit more control in that department since the truncation is merely visual.</li></ul>\n\n\n\n<p>So, how did MDN do it? Nothing too fancy here as far the HTML goes, just a container with a paragraph.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"card\">\n  &lt;p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Inventore consectetur temporibus quae aliquam nobis nam accusantium, minima quam iste magnam autem neque laborum nulla esse cupiditate modi impedit sapiente vero?&lt;/p>\n&lt;/div></code></pre>\n\n\n\n<p>We can drop in a few baseline styles to shore things up.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxBorB\" src=\"//codepen.io/anon/embed/mdxBorB?height=450&amp;theme-id=1&amp;slug-hash=mdxBorB&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxBorB\" title=\"CodePen Embed mdxBorB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Again, nothing too fancy. Our goal is cut the content off after, say, the third line. We can set a <code>max-height</code> on the paragraph and hide the overflow for that:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card p {\n  max-height: calc(4rem * var(--base)); /* Set a cut-off point for the content */\n  overflow: hidden; /* Cut off the content */\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNdGRjB\" src=\"//codepen.io/anon/embed/rNdGRjB?height=450&amp;theme-id=1&amp;slug-hash=rNdGRjB&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNdGRjB\" title=\"CodePen Embed rNdGRjB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Whoa whoa, what&#8217;s up with that <code>calc()</code> stuff? Notice that I set up a <code>--base</code> variable up front that can be used as a common multiplier. I&#8217;m using it to compute the <code>font-size</code>, <code>line-height</code>, <code>padding</code> for the card, and now the <code>max-height</code> of the paragraph. I find it easier to work with a constant values especially when the sizing I need is really based on scale like this. I noticed MDN uses a similar <code>--base-line-height</code> variable, probably for the same purpose.</p>\n\n\n\n<p>Getting that third line of text to fade out? It&#8217;s a classic <code>linear-gradient()</code> on the pargraph&#8217;s <code>:after</code> pseudo-element, which is pinned to the bottom-right corner of the card. So, we can set that up:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card p:after {\n  content: \"\"; /* Needed to render the pseudo */\n  background-image: linear-gradient(to right, transparent, var(--background) 80%);\n  position: absolute;\n  inset-inline-end: 0; /* Logical property equivalent to `right: 0` */\n}</code></pre>\n\n\n\n<p>Notice I&#8217;m calling a <code>--background</code> variable that&#8217;s set to the same background color value that&#8217;s used on the <code>.card</code> itself. That way, the text appears to fade into the background. And I found that I needed to tweak the second color stop in the gradient because the text isn&#8217;t completely hidden when the gradient blends all the way to 100%. I found <code>80%</code> to be a sweet spot for my eyes.</p>\n\n\n\n<p>And, yes, <code>:after</code> needs a <code>height</code> and <code>width</code>. The <code>height</code> is where that <code>--base</code> variables comes back into play because we want that scaled to the paragraph&#8217;s <code>line-height</code> in order to cover the text with the height of <code>:after</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card p:after {\n  /* same as before */\n  height: calc(1rem * var(--base) + 1px);\n  width: 100%; /* relative to the .card container */\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Adding one extra pixel of height seemed to do the trick, but MDN was able to pull it off without it when I peeked at DevTools. Then again, I&#8217;m not using <code>top</code> (or <code>inset-block-start</code>) to offset the gradient in that direction either. &#x1f937;&#x200d;&#x2642;&#xfe0f;</p>\n\n\n\n<p>Now that <code>p:after</code> is absolutely positioned, we need to explicitly declare relative positioning on the paragraph to keep <code>:after</code> in its flow. Otherwise, <code>:after</code> would be completely yanked from the document flow and wind up outside of the card. This becomes the full CSS for the <code>.card</code> paragraph:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card p {\n  max-height: calc(4rem * var(--base)); /* Set a cut-off point for the content */\n  overflow: hidden; /* Cut off the content */\n  position: relative; /* needed for :after */\n}</code></pre>\n\n\n\n<p>We&#8217;re done, right? Nope! The dang gradient just doesn&#8217;t seem to be in the right position.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxWXBjR\" src=\"//codepen.io/anon/embed/xxWXBjR?height=450&amp;theme-id=1&amp;slug-hash=xxWXBjR&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxWXBjR\" title=\"CodePen Embed xxWXBjR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I&#8217;ll admit I brain-farted on this one and fired up DevTools on MDN to see what the heck I was missing. Oh yeah, <code>:after</code> needs to be displayed as a block element. It&#8217;s clear as day when adding a red border to it.&#x1f926;&#x200d;&#x2642;&#xfe0f;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOeGEKK\" src=\"//codepen.io/anon/embed/gOeGEKK?height=450&amp;theme-id=1&amp;slug-hash=gOeGEKK&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOeGEKK\" title=\"CodePen Embed gOeGEKK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4\"><code markup=\"tt\">.card p:after {\n  content: \"\";\n  background: linear-gradient(to right, transparent, var(--background) 80%);\n  display: block;\n  height: calc(1rem * var(--base) + 1px);\n  inset-block-end: 0;\n  position: absolute;\n  width: 100%;\n}</code></pre>\n\n\n\n<p>All together now!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYRebog\" src=\"//codepen.io/anon/embed/vYRebog?height=450&amp;theme-id=1&amp;slug-hash=vYRebog&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYRebog\" title=\"CodePen Embed vYRebog\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And, yep, <s>looks</s> sounds like VoiceOver respects the full text. I haven&#8217;t tested any other screen readers though.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1648\" height=\"920\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-5.07.34-PM.png?resize=1648%2C920&#038;ssl=1\" alt=\"\" class=\"wp-image-367174\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-5.07.34-PM.png?w=1648&amp;ssl=1 1648w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-5.07.34-PM.png?resize=300%2C167&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-5.07.34-PM.png?resize=1024%2C572&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-5.07.34-PM.png?resize=768%2C429&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/Screen-Shot-2022-07-27-at-5.07.34-PM.png?resize=1536%2C857&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I also noticed that MDN&#8217;s implementation removes <code><a href=\"https://css-tricks.com/almanac/properties/p/pointer-events/\">pointer-events</a></code> from <code>p:after</code>. Probably a good defensive tactic to prevent odd behaviors when selecting text. I added it in and selecting text does feel a little smoother, at least in Safari, Firefox, and Chrome.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/recreating-mdns-truncated-text-effect/\">Recreating MDN&#8217;s Truncated Text Effect</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "It’s no secret that MDN rolled out a new design back in March. It’s gorgeous! And there are some sweet CSS-y gems in it that are fun to look at. One of those gems is how card components handle truncated text.\n\n\n\n\n\n\n\n\n\n\n\nPretty cool, yeah? I wanna tear that apart in just a bit, but a couple of things really draw me into this approach:\n\n\n\nIt’s an example of intentionally cutting off content. We’ve referred to that as CSS data loss in other places. And while data loss is generally a bad thing, I like how it’s being used here since excerpts are meant to be a teaser for the full content.This is different than truncating text with text-overflow: ellipsis, a topic that came up rather recently when Eric Eggert shared his concerns with it. The main argument against it is that there is no way to recover the text that gets cut off in the truncation — assistive tech will announce it, but sighted users have no way to recover it. MDNs approach provides a bit more control in that department since the truncation is merely visual.\n\n\n\nSo, how did MDN do it? Nothing too fancy here as far the HTML goes, just a container with a paragraph.\n\n\n\n<div class=\"card\">\n  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Inventore consectetur temporibus quae aliquam nobis nam accusantium, minima quam iste magnam autem neque laborum nulla esse cupiditate modi impedit sapiente vero?</p>\n</div>\n\n\n\nWe can drop in a few baseline styles to shore things up.\n\n\n\nCodePen Embed Fallback\n\n\n\nAgain, nothing too fancy. Our goal is cut the content off after, say, the third line. We can set a max-height on the paragraph and hide the overflow for that:\n\n\n\n.card p {\n  max-height: calc(4rem * var(--base)); /* Set a cut-off point for the content */\n  overflow: hidden; /* Cut off the content */\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nWhoa whoa, what’s up with that calc() stuff? Notice that I set up a --base variable up front that can be used as a common multiplier. I’m using it to compute the font-size, line-height, padding for the card, and now the max-height of the paragraph. I find it easier to work with a constant values especially when the sizing I need is really based on scale like this. I noticed MDN uses a similar --base-line-height variable, probably for the same purpose.\n\n\n\nGetting that third line of text to fade out? It’s a classic linear-gradient() on the pargraph’s :after pseudo-element, which is pinned to the bottom-right corner of the card. So, we can set that up:\n\n\n\n.card p:after {\n  content: \"\"; /* Needed to render the pseudo */\n  background-image: linear-gradient(to right, transparent, var(--background) 80%);\n  position: absolute;\n  inset-inline-end: 0; /* Logical property equivalent to `right: 0` */\n}\n\n\n\nNotice I’m calling a --background variable that’s set to the same background color value that’s used on the .card itself. That way, the text appears to fade into the background. And I found that I needed to tweak the second color stop in the gradient because the text isn’t completely hidden when the gradient blends all the way to 100%. I found 80% to be a sweet spot for my eyes.\n\n\n\nAnd, yes, :after needs a height and width. The height is where that --base variables comes back into play because we want that scaled to the paragraph’s line-height in order to cover the text with the height of :after.\n\n\n\n.card p:after {\n  /* same as before */\n  height: calc(1rem * var(--base) + 1px);\n  width: 100%; /* relative to the .card container */\n}\n\n\n\nAdding one extra pixel of height seemed to do the trick, but MDN was able to pull it off without it when I peeked at DevTools. Then again, I’m not using top (or inset-block-start) to offset the gradient in that direction either. 🤷‍♂️\n\n\n\nNow that p:after is absolutely positioned, we need to explicitly declare relative positioning on the paragraph to keep :after in its flow. Otherwise, :after would be completely yanked from the document flow and wind up outside of the card. This becomes the full CSS for the .card paragraph:\n\n\n\n.card p {\n  max-height: calc(4rem * var(--base)); /* Set a cut-off point for the content */\n  overflow: hidden; /* Cut off the content */\n  position: relative; /* needed for :after */\n}\n\n\n\nWe’re done, right? Nope! The dang gradient just doesn’t seem to be in the right position.\n\n\n\nCodePen Embed Fallback\n\n\n\nI’ll admit I brain-farted on this one and fired up DevTools on MDN to see what the heck I was missing. Oh yeah, :after needs to be displayed as a block element. It’s clear as day when adding a red border to it.🤦‍♂️\n\n\n\nCodePen Embed Fallback\n\n\n\n.card p:after {\n  content: \"\";\n  background: linear-gradient(to right, transparent, var(--background) 80%);\n  display: block;\n  height: calc(1rem * var(--base) + 1px);\n  inset-block-end: 0;\n  position: absolute;\n  width: 100%;\n}\n\n\n\nAll together now!\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd, yep, looks sounds like VoiceOver respects the full text. I haven’t tested any other screen readers though.\n\n\n\n\n\n\n\nI also noticed that MDN’s implementation removes pointer-events from p:after. Probably a good defensive tactic to prevent odd behaviors when selecting text. I added it in and selecting text does feel a little smoother, at least in Safari, Firefox, and Chrome.\n\nRecreating MDN’s Truncated Text Effect originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367170",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-28T17:18:46.000Z",
      "date_modified": "2022-07-28T17:18:46.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367003",
      "url": "https://css-tricks.com/why-i-chose-angular-to-build-a-url-shortener/",
      "title": "Why I Chose Angular to Build a URL Shortener",
      "summary": "URL Shorteners are tools we use to make links shorter than they actually are. With a URL Shortener, you can transform a long link (maybe for a registration form or article) into a shorter version.\nBehind the scenes, the long …\n\nWhy I Chose Angular to Build a URL Shortener originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>URL Shorteners are tools we use to make links shorter than they actually are. With a URL Shortener, you can transform a long link (maybe for a registration form or article) into a shorter version.</p>\n\n\n\n<p>Behind the scenes, the long and short versions of a given link have been stored in some database. Then when a user visits the short link in a browser, the URL Shortener will redirect the user to the long version of the link (where the actual content is found).</p>\n\n\n\n<p>Shortened links from URL shorteners are commonly used when the long version of those links would be too long to use. Sharing links on social media or when designing flyers and adverts is a popular use of URL shorteners.</p>\n\n\n\n<p>For one of my projects, I created a personal URL shortener. My intention was to use it for links to articles I write or videos I make. I used&nbsp;<a href=\"https://keepdeploying.com/7754377478e0\" rel=\"noopener\">Firebase to build the backend of the URL shortener.</a>&nbsp;Specifically, I used the Firestore database to store short and long versions of any given link.</p>\n\n\n\n<p>To create links, I had to use the Firebase console. This wasn&#8217;t a problem but it was cumbersome for the high frequency of editing links. The user experience (UX) was not ideal. Now I was faced with a problem. How do I create, edit, and delete links? I needed to build a frontend for the URL shortener. I needed a website for this.</p>\n\n\n\n<p>In this article, we&#8217;ll review the available tools used for building this frontend, decision choices, and factors that influenced why they were made.</p>\n\n\n\n<span id=\"more-367003\"></span>\n\n\n<h2 id=\"problem-statement\">Problem statement</h2>\n\n\n<p>The project requirements were:</p>\n\n\n\n<ul><li><strong>Platform/Architecture</strong>. The engineering and structure of the coding process.</li><li><strong>UI Toolkit</strong>. Components to use for the various parts of the UI.</li><li><strong>Convenience</strong>. Building the backend was not tough, so this frontend should not be either. I wanted clean code and fast development.</li></ul>\n\n\n<h2 id=\"the-first-decision-choice-angular\">The First Decision Choice: Angular</h2>\n\n\n<p>Many ideas come to mind when starting out to build a frontend. In a broad sense, we could categorize frontend building options into 3 platforms:</p>\n\n\n\n<ol><li>Website Builders &#8211; like WordPress, Wix, Squarespace, etc.</li><li>Vanilla Building &#8211; using plain HTML, CSS, and JavaScript.</li><li>JavaScript Framework &#8211; like React, Vue, Angular, etc.</li></ol>\n\n\n\n<p>In my experience, website builders provide a very restricted collection of widgets, components, and templates. Most website builders don&#8217;t provide an easy way to integrate an entire custom backend like Firebase. While it is possible to build impressive sites by connecting these pieces together, the degree of complexity of my project was likely beyond what these services typically provide.</p>\n\n\n\n<p>Using the no-framework style or vanilla would have been a possibility. However, the deciding factor that made me not choose the pure vanilla route was that&nbsp;<a href=\"https://firebase.google.com/docs/web/learn-more#modular-version\" rel=\"noopener\">the latest non-CDN version of the Firebase JavaScript SDK (Version 9)</a>&nbsp;is designed with installation via <code>npm</code> or <code>yarn</code> and module bundling in mind.</p>\n\n\n\n<p>JavaScript frameworks handle frontend core parts (like routing, backend-linking, etc.) to reduce developer efforts. There are many of them and choosing which to use seemed to be a harder choice to make.</p>\n\n\n\n<p>There are many JavaScript frameworks for frontend development. Examples include Angular, React, Vue, etc.</p>\n\n\n\n<p>Of the available frameworks, I have the most familiarity with Angular. This is because I have used it on previous projects like:</p>\n\n\n\n<ul><li><a href=\"https://github.com/obumnwabude/choircarolquiz\" rel=\"noopener\">Choir Carol Quiz</a>: Portal where Quiz participants competed in two online rounds of timed multiple choice questions on select Bible chapters.</li><li><a href=\"https://github.com/obumnwabude/genesys-community\" rel=\"noopener\">Genesys AE-FUNAI Community</a>: Custom Form where members of Genesys Campus Club AE-FUNAI (my community) report their progress and share their achievements.</li><li><a href=\"https://github.com/obumnwabude/tutorialmgt\" rel=\"noopener\">Tutorial Management System</a>: Simple session management dashboard between students and tutors.</li></ul>\n\n\n\n<p>This familiarity allows me to build quickly with Angular. Being able to build quickly should not be underestimated.</p>\n\n\n\n<p>I chose Angular because of its Object-Oriented Programming (OOP) ability. OOP is a programming paradigm that focuses more on classes, data, or state being managed, rather than on the logic controlling the data, as is the case with functional programming. Separation of concerns is one advantage of using OOP. In other words, OOP permits encapsulation. It permits you to scope aspects of the program to peculiar domains or classes.</p>\n\n\n\n<p>In Angular, components (and their lifecycle methods) are scoped to TypeScript classes. This makes you think the OOP way. The OOP advantage reflects in how Angular components serve as reusable UI units in the Angular framework. That way you see an Angular component as some self-sufficient entity that is yet part of a whole. This makes frontend development easy as various parts of the frontend app can be scoped to components and hence can be used where needed.</p>\n\n\n\n<p>I also chose Angular because it uses TypeScript. TypeScript is JavaScript with features of a typed programming language. Typing in this context means a variable can&#8217;t change the kind of value it holds all through its life. For example, a variable holding a string will not all of a sudden hold a number while it is used in that program. Typing increases code quality and reduces bugs.</p>\n\n\n\n<p>As a result of its type system, TypeScript reduces the time spent debugging Angular apps. It gives developer experience as the developer will have more time to build the frontend app. Debugging also becomes easy for the developer.</p>\n\n\n\n<p class=\"is-style-explanation\">Note: <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-classes-in-typescript?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=why-i-chose-angular-to-build-a-url-shortener\">Here is more on Object-Oriented Programming with TypeScript</a></p>\n\n\n\n<p>Still, on Angular&#8217;s advantages, Angular apps come as a complete setup. They handle important features like bundling CSS preprocessors or Angular services by themselves. That said, when using Angular, you don&#8217;t need to configure each library independently, Angular takes care of this.</p>\n\n\n\n<p>An Angular service is what Angular uses to configure dependency injection. In simple terms, dependency injection is providing an application with what it needs to function (dependencies) without the application having to take care of how the dependencies were gotten. I also chose Angular because of its out-of-the-box handling of services. So Firebase, for example, will be auto-provided to all Angular components that need without any extra configuration.</p>\n\n\n\n<p>The benefits of Object-Oriented Programming, TypeScript, and dependency injection make Angular a go-to for frontend development. Coupled with the fact I was already familiar with Angular, Angular was more convenient for this URL shortener project.</p>\n\n\n\n<p><a href=\"https://css-tricks.com/tag/angular/\">Angular articles on CSS-Tricks</a>&nbsp;are also part of the story. They gave me more confidence with using Angular.</p>\n\n\n<h2 id=\"the-second-decision-choice-material-design\">The Second Decision Choice: Material Design</h2>\n\n\n<p>After choosing Angular, my next task was to consider how I would handle the user interface (UI).</p>\n\n\n\n<p>I could ignore and do vanilla CSS instead but why reinvent the wheel? After all, this would defeat the reason for using a JavaScript framework &#8211; convenience.</p>\n\n\n\n<p>With choosing a UI toolkit, there seems to be an ocean of options. To name a few, one can use Bootstrap, Bulma, Semantic UI, Tailwind, etc. Each toolkit has its own specifications and motivations.</p>\n\n\n\n<p>For the use case of my project, Material Design led the pack.</p>\n\n\n\n<p>One of the most important factors was the support for Angular and Material Design. There is an entire Angular-only specification for Material on&nbsp;<code>material.angular.io</code>&nbsp;(that is as a subdomain to the Angular docs itself).</p>\n\n\n\n<p>I settled for Material Design because it focuses on components. Unlike other CSS frameworks, it doesn&#8217;t have CSS utility classes. This was okay because I only wanted some component kit (buttons, icons, inputs, sidebars, snack bars, etc.) Material also adds animations, ripple, and shadow effects by itself; making it more convenient than other libraries.</p>\n\n\n\n<p>Furthermore, Angular Material has out-of-the-box theming support, when initializing Angular Material, you have the option of choosing a pre-defined theme for the entire Angular app or creating a custom one.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"464\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-theme.png?resize=1024%2C464&#038;ssl=1\" alt=\"Screenshot of installing Angular Material and selecting a theme.\" class=\"wp-image-367010\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-theme.png?resize=1024%2C464&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-theme.png?resize=300%2C136&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-theme.png?resize=768%2C348&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-theme.png?w=1437&amp;ssl=1 1437w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>For the sake of convenience, I chose a dark theme while setting up Angular Material.</p>\n\n\n<h2 id=\"the-third-decision-choice-reactive-forms\">The Third Decision Choice: Reactive Forms</h2>\n\n\n<p>With a framework and toolkit decided, I turned my attention to one of the most important features of the URL shortener. The core of the URL shortener&#8217;s frontend is the form for creating and updating links.</p>\n\n\n\n<p>Let&#8217;s call this form the links editor. The links editor form has only two inputs, one for the short version of a link and the other for the full URL the short version will redirect to.</p>\n\n\n\n<p>For managing forms, Angular comes with two mechanisms. So instead of creating a form and handling its validation and submission as is done in vanilla HTML and JavaScript, you have to use either of the two ways Angular provides. The two methods are:</p>\n\n\n\n<ol><li>Template-driven forms</li><li>Reactive forms</li></ol>\n\n\n\n<p><a href=\"https://angular.io/guide/forms\" rel=\"noopener\">Template-driven forms</a>&nbsp;as the name imply, involve the HTML (template) code controlling the greater part of the Angular form. This approach is preferable when your form does not do much or is for one-time usage.</p>\n\n\n\n<p><a href=\"https://angular.io/guide/reactive-forms\" rel=\"noopener\">Reactive forms</a>, on the other hand, provide a model-driven approach to handling form inputs whose values change over time. I needed reactive forms because it is the same form that I will use to edit different links at any point in time.</p>\n\n\n\n<p class=\"is-style-explanation\">Note: <a href=\"https://www.digitalocean.com/community/tutorials/angular-reactive-forms-introduction?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=why-i-chose-angular-to-build-a-url-shortener\">Here is more material on using Reactive Forms.</a></p>\n\n\n\n<p>At this point, the benefits of previous choices began playing out. Angular Material has&nbsp;<code>form-field</code>&nbsp;components. The&nbsp;<code>form-field</code>&nbsp;wraps the input as a component and provides animations, ripple effects, and error messages if necessary.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-link-form.gif?resize=1024%2C576&#038;ssl=1\" alt=\"Animated gif of short and long URLs entered into a form.\" class=\"wp-image-367014\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-link-form.gif?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-link-form.gif?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-link-form.gif?resize=768%2C432&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>So I used it for the two inputs of the editor form.</p>\n\n\n<h2 id=\"the-fourth-decision-choice-angular-material-bottom-sheet-and-drawer\">The Fourth Decision Choice: Angular Material Bottom Sheet and Drawer</h2>\n\n\n<p>The final decision involved how to improve the user experience. The URL shortener would need other features like viewing all created links and their analytics. These features would require space on the screen that required me to rethink if there were better solutions to display the links editor form to the user.</p>\n\n\n\n<p>If the user has no current need for the links editor form, it makes sense for the links editor form to not always be in view. This would free up space on the UI for other elements.</p>\n\n\n\n<p>However, splitting this user experience into two separate pages felt disruptive. Instead, to open the links editor when needed, I added a floating action button on the page for creating links. When clicked, the button will cause the editor form to be opened in any fitting UI component.</p>\n\n\n\n<p>A&nbsp;<a href=\"https://material.angular.io/components/bottom-sheet/overview\" rel=\"noopener\">bottom sheet</a>, as the name implies, is a UI component that opens from the bottom of the screen. It has interactive content the user can work it. It overlays the current view of a mobile screen (but doesn&#8217;t fully block it).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"470\" height=\"834\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-link-bottom-sheet.gif?resize=470%2C834&#038;ssl=1\" alt=\"Animated gif of interacting with a form displayed in a Bottom Sheet.\" class=\"wp-image-367015\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>Bottom sheets are usually used in place of pop-ups if the user will spend a long time interacting with their content. So, bottom sheets are a good fit to open the editor on mobile screens. However, interacting with a bottom sheet is hard when the screen is wide. I needed a different UI component for the links editor form on wide screens.</p>\n\n\n\n<p><a href=\"https://material.angular.io/components/sidenav/overview\" rel=\"noopener\">Drawers</a>&nbsp;open by the side. Using a drawer to open the links editor form on a wide screen was the go-to option. Drawers won&#8217;t be good for the editor on mobile screens. The screen&#8217;s width would be relatively small and the drawer might completely block the screen (which is not a desirable UX).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-link-drawer.gif?resize=1024%2C576&#038;ssl=1\" alt=\"Animated gif of interacting with a form displayed in a Drawer.\" class=\"wp-image-367016\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-link-drawer.gif?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-link-drawer.gif?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/angular-url-shortener-link-drawer.gif?resize=768%2C432&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I selected these two UI components from Material Design for the form to have some responsive effect. So whether on my phone or laptop creating links would be done in a fitting UI component.</p>\n\n\n\n<p>In the code, Angular checks if the device is of small screen width. If so, it opens a bottom sheet containing the links editor form. On the other hand, if the screen is wide, Angular opens a drawer containing the same form.</p>\n\n\n\n<p>Using these two components brought about a minor complication. If my phone is rotated or my laptop&#8217;s browser window&#8217;s width is reduced, the form opens on the contrary UI component. That is instead of opening in a drawer in a laptop, it will open in a bottom sheet (because the browser&#8217;s width was reduced).</p>\n\n\n<h2 id=\"maintenance-futureproofing-future-releases\">Maintenance, Future-proofing, Future Releases</h2>\n\n\n<p>When I thought of opportunities to iterate on this project, I ran into limitations with the current use case designed to support a single administrator. But with authentication and user accounts, it can support additional users managing links and accessing analytics.</p>\n\n\n\n<p>In that case, the above choices of components will still be appropriate. The links editor is responsive so on any device, users will have a good user experience.</p>\n\n\n\n<p>If I had to do it all over again, I think I would have tried out the vanilla method. Building entirely without any helpers like Angular, Material, or UI components. I would try building from scratch in HTML, CSS, and JavaScript and see if I didn&#8217;t lose out on convenience as I thought I would.</p>\n\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n\n<p><a href=\"https://github.com/obumnwabude/obum.me/tree/334353e0d1312ca4137f976177f83a53f2ac8cbb/admin\" rel=\"noopener\">You can access the final Angular code here on GitHub.</a></p>\n\n\n\n<p>This was a review of some of the main choices I made when developing my project. Of course, there is more to building the frontend of a URL shortener. But for a start, these UI components made the building process convenient. They made the links editor form responsive and could be of similar use to you in your projects (not necessarily a URL shortener).</p>\n\n\n\n<p>There are many other UI components from various libraries you can use for any such project. But as with my case, if convenience is a deciding factor, you would make the right decision choice that would be fitting for the UI.</p>\n\n\n\n<p>Ultimately, what shaped my decisions was understanding what my project required, knowledge of tools I had used from previous projects, and expectations with time constraints. My past experience — successes and mistakes — helped guide me too.</p>\n\n\n\n<p>Cheers!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/why-i-chose-angular-to-build-a-url-shortener/\">Why I Chose Angular to Build a URL Shortener</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "URL Shorteners are tools we use to make links shorter than they actually are. With a URL Shortener, you can transform a long link (maybe for a registration form or article) into a shorter version.\n\n\n\nBehind the scenes, the long and short versions of a given link have been stored in some database. Then when a user visits the short link in a browser, the URL Shortener will redirect the user to the long version of the link (where the actual content is found).\n\n\n\nShortened links from URL shorteners are commonly used when the long version of those links would be too long to use. Sharing links on social media or when designing flyers and adverts is a popular use of URL shorteners.\n\n\n\nFor one of my projects, I created a personal URL shortener. My intention was to use it for links to articles I write or videos I make. I used Firebase to build the backend of the URL shortener. Specifically, I used the Firestore database to store short and long versions of any given link.\n\n\n\nTo create links, I had to use the Firebase console. This wasn’t a problem but it was cumbersome for the high frequency of editing links. The user experience (UX) was not ideal. Now I was faced with a problem. How do I create, edit, and delete links? I needed to build a frontend for the URL shortener. I needed a website for this.\n\n\n\nIn this article, we’ll review the available tools used for building this frontend, decision choices, and factors that influenced why they were made.\n\n\n\n\n\n\nProblem statement\n\n\nThe project requirements were:\n\n\n\nPlatform/Architecture. The engineering and structure of the coding process.UI Toolkit. Components to use for the various parts of the UI.Convenience. Building the backend was not tough, so this frontend should not be either. I wanted clean code and fast development.\n\n\nThe First Decision Choice: Angular\n\n\nMany ideas come to mind when starting out to build a frontend. In a broad sense, we could categorize frontend building options into 3 platforms:\n\n\n\nWebsite Builders – like WordPress, Wix, Squarespace, etc.Vanilla Building – using plain HTML, CSS, and JavaScript.JavaScript Framework – like React, Vue, Angular, etc.\n\n\n\nIn my experience, website builders provide a very restricted collection of widgets, components, and templates. Most website builders don’t provide an easy way to integrate an entire custom backend like Firebase. While it is possible to build impressive sites by connecting these pieces together, the degree of complexity of my project was likely beyond what these services typically provide.\n\n\n\nUsing the no-framework style or vanilla would have been a possibility. However, the deciding factor that made me not choose the pure vanilla route was that the latest non-CDN version of the Firebase JavaScript SDK (Version 9) is designed with installation via npm or yarn and module bundling in mind.\n\n\n\nJavaScript frameworks handle frontend core parts (like routing, backend-linking, etc.) to reduce developer efforts. There are many of them and choosing which to use seemed to be a harder choice to make.\n\n\n\nThere are many JavaScript frameworks for frontend development. Examples include Angular, React, Vue, etc.\n\n\n\nOf the available frameworks, I have the most familiarity with Angular. This is because I have used it on previous projects like:\n\n\n\nChoir Carol Quiz: Portal where Quiz participants competed in two online rounds of timed multiple choice questions on select Bible chapters.Genesys AE-FUNAI Community: Custom Form where members of Genesys Campus Club AE-FUNAI (my community) report their progress and share their achievements.Tutorial Management System: Simple session management dashboard between students and tutors.\n\n\n\nThis familiarity allows me to build quickly with Angular. Being able to build quickly should not be underestimated.\n\n\n\nI chose Angular because of its Object-Oriented Programming (OOP) ability. OOP is a programming paradigm that focuses more on classes, data, or state being managed, rather than on the logic controlling the data, as is the case with functional programming. Separation of concerns is one advantage of using OOP. In other words, OOP permits encapsulation. It permits you to scope aspects of the program to peculiar domains or classes.\n\n\n\nIn Angular, components (and their lifecycle methods) are scoped to TypeScript classes. This makes you think the OOP way. The OOP advantage reflects in how Angular components serve as reusable UI units in the Angular framework. That way you see an Angular component as some self-sufficient entity that is yet part of a whole. This makes frontend development easy as various parts of the frontend app can be scoped to components and hence can be used where needed.\n\n\n\nI also chose Angular because it uses TypeScript. TypeScript is JavaScript with features of a typed programming language. Typing in this context means a variable can’t change the kind of value it holds all through its life. For example, a variable holding a string will not all of a sudden hold a number while it is used in that program. Typing increases code quality and reduces bugs.\n\n\n\nAs a result of its type system, TypeScript reduces the time spent debugging Angular apps. It gives developer experience as the developer will have more time to build the frontend app. Debugging also becomes easy for the developer.\n\n\n\nNote: Here is more on Object-Oriented Programming with TypeScript\n\n\n\nStill, on Angular’s advantages, Angular apps come as a complete setup. They handle important features like bundling CSS preprocessors or Angular services by themselves. That said, when using Angular, you don’t need to configure each library independently, Angular takes care of this.\n\n\n\nAn Angular service is what Angular uses to configure dependency injection. In simple terms, dependency injection is providing an application with what it needs to function (dependencies) without the application having to take care of how the dependencies were gotten. I also chose Angular because of its out-of-the-box handling of services. So Firebase, for example, will be auto-provided to all Angular components that need without any extra configuration.\n\n\n\nThe benefits of Object-Oriented Programming, TypeScript, and dependency injection make Angular a go-to for frontend development. Coupled with the fact I was already familiar with Angular, Angular was more convenient for this URL shortener project.\n\n\n\nAngular articles on CSS-Tricks are also part of the story. They gave me more confidence with using Angular.\n\n\nThe Second Decision Choice: Material Design\n\n\nAfter choosing Angular, my next task was to consider how I would handle the user interface (UI).\n\n\n\nI could ignore and do vanilla CSS instead but why reinvent the wheel? After all, this would defeat the reason for using a JavaScript framework – convenience.\n\n\n\nWith choosing a UI toolkit, there seems to be an ocean of options. To name a few, one can use Bootstrap, Bulma, Semantic UI, Tailwind, etc. Each toolkit has its own specifications and motivations.\n\n\n\nFor the use case of my project, Material Design led the pack.\n\n\n\nOne of the most important factors was the support for Angular and Material Design. There is an entire Angular-only specification for Material on material.angular.io (that is as a subdomain to the Angular docs itself).\n\n\n\nI settled for Material Design because it focuses on components. Unlike other CSS frameworks, it doesn’t have CSS utility classes. This was okay because I only wanted some component kit (buttons, icons, inputs, sidebars, snack bars, etc.) Material also adds animations, ripple, and shadow effects by itself; making it more convenient than other libraries.\n\n\n\nFurthermore, Angular Material has out-of-the-box theming support, when initializing Angular Material, you have the option of choosing a pre-defined theme for the entire Angular app or creating a custom one.\n\n\n\n\n\n\n\nFor the sake of convenience, I chose a dark theme while setting up Angular Material.\n\n\nThe Third Decision Choice: Reactive Forms\n\n\nWith a framework and toolkit decided, I turned my attention to one of the most important features of the URL shortener. The core of the URL shortener’s frontend is the form for creating and updating links.\n\n\n\nLet’s call this form the links editor. The links editor form has only two inputs, one for the short version of a link and the other for the full URL the short version will redirect to.\n\n\n\nFor managing forms, Angular comes with two mechanisms. So instead of creating a form and handling its validation and submission as is done in vanilla HTML and JavaScript, you have to use either of the two ways Angular provides. The two methods are:\n\n\n\nTemplate-driven formsReactive forms\n\n\n\nTemplate-driven forms as the name imply, involve the HTML (template) code controlling the greater part of the Angular form. This approach is preferable when your form does not do much or is for one-time usage.\n\n\n\nReactive forms, on the other hand, provide a model-driven approach to handling form inputs whose values change over time. I needed reactive forms because it is the same form that I will use to edit different links at any point in time.\n\n\n\nNote: Here is more material on using Reactive Forms.\n\n\n\nAt this point, the benefits of previous choices began playing out. Angular Material has form-field components. The form-field wraps the input as a component and provides animations, ripple effects, and error messages if necessary.\n\n\n\n\n\n\n\nSo I used it for the two inputs of the editor form.\n\n\nThe Fourth Decision Choice: Angular Material Bottom Sheet and Drawer\n\n\nThe final decision involved how to improve the user experience. The URL shortener would need other features like viewing all created links and their analytics. These features would require space on the screen that required me to rethink if there were better solutions to display the links editor form to the user.\n\n\n\nIf the user has no current need for the links editor form, it makes sense for the links editor form to not always be in view. This would free up space on the UI for other elements.\n\n\n\nHowever, splitting this user experience into two separate pages felt disruptive. Instead, to open the links editor when needed, I added a floating action button on the page for creating links. When clicked, the button will cause the editor form to be opened in any fitting UI component.\n\n\n\nA bottom sheet, as the name implies, is a UI component that opens from the bottom of the screen. It has interactive content the user can work it. It overlays the current view of a mobile screen (but doesn’t fully block it).\n\n\n\n\n\n\n\nBottom sheets are usually used in place of pop-ups if the user will spend a long time interacting with their content. So, bottom sheets are a good fit to open the editor on mobile screens. However, interacting with a bottom sheet is hard when the screen is wide. I needed a different UI component for the links editor form on wide screens.\n\n\n\nDrawers open by the side. Using a drawer to open the links editor form on a wide screen was the go-to option. Drawers won’t be good for the editor on mobile screens. The screen’s width would be relatively small and the drawer might completely block the screen (which is not a desirable UX).\n\n\n\n\n\n\n\nI selected these two UI components from Material Design for the form to have some responsive effect. So whether on my phone or laptop creating links would be done in a fitting UI component.\n\n\n\nIn the code, Angular checks if the device is of small screen width. If so, it opens a bottom sheet containing the links editor form. On the other hand, if the screen is wide, Angular opens a drawer containing the same form.\n\n\n\nUsing these two components brought about a minor complication. If my phone is rotated or my laptop’s browser window’s width is reduced, the form opens on the contrary UI component. That is instead of opening in a drawer in a laptop, it will open in a bottom sheet (because the browser’s width was reduced).\n\n\nMaintenance, Future-proofing, Future Releases\n\n\nWhen I thought of opportunities to iterate on this project, I ran into limitations with the current use case designed to support a single administrator. But with authentication and user accounts, it can support additional users managing links and accessing analytics.\n\n\n\nIn that case, the above choices of components will still be appropriate. The links editor is responsive so on any device, users will have a good user experience.\n\n\n\nIf I had to do it all over again, I think I would have tried out the vanilla method. Building entirely without any helpers like Angular, Material, or UI components. I would try building from scratch in HTML, CSS, and JavaScript and see if I didn’t lose out on convenience as I thought I would.\n\n\nConclusion\n\n\nYou can access the final Angular code here on GitHub.\n\n\n\nThis was a review of some of the main choices I made when developing my project. Of course, there is more to building the frontend of a URL shortener. But for a start, these UI components made the building process convenient. They made the links editor form responsive and could be of similar use to you in your projects (not necessarily a URL shortener).\n\n\n\nThere are many other UI components from various libraries you can use for any such project. But as with my case, if convenience is a deciding factor, you would make the right decision choice that would be fitting for the UI.\n\n\n\nUltimately, what shaped my decisions was understanding what my project required, knowledge of tools I had used from previous projects, and expectations with time constraints. My past experience — successes and mistakes — helped guide me too.\n\n\n\nCheers!\n\nWhy I Chose Angular to Build a URL Shortener originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367003",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-22T14:00:19.000Z",
      "date_modified": "2022-07-22T14:00:19.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367048",
      "url": "https://css-tricks.com/roundup-of-recent-document-outline-chatter/",
      "title": "Roundup of Recent Document Outline Chatter",
      "summary": "It’s not everyday that HTML headings are the topic de jour, but my folder of saved links is accumulating articles about the recently merged removal of the document outline algorithm in the WHATWG Living Standard.\nFirst off, you should know …\n\nRoundup of Recent Document Outline Chatter originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>It’s not everyday that HTML headings are the topic <em>de jour,</em> but my folder of saved links is accumulating articles about the <a href=\"https://github.com/whatwg/html/pull/7829\" rel=\"noopener\">recently merged</a> removal of the document outline algorithm in the WHATWG Living Standard.</p>\n\n\n\n<p>First off, you should know that the algorithm never really existed. Sure, it was in the spec. And sure, there was a warning about using it in the spec. But no browser ever implemented it, as <a href=\"https://brucelawson.co.uk/2022/why-the-html-outlining-algorithm-was-removed-from-the-spec-the-truth-will-shock-you/\" rel=\"noopener\">Bruce Lawson reminded us</a>. We have been living in a flat document structure the whole time.</p>\n\n\n\n<span id=\"more-367048\"></span>\n\n\n\n<p>This is <em>very</em> old news. Adrian Roselli has been writing about the document outline myth <a href=\"https://adrianroselli.com/2013/12/the-truth-about-truth-about-multiple-h1.html\" rel=\"noopener\">since 2013</a>. But it’s his 2016 post titled <a href=\"https://adrianroselli.com/2016/08/there-is-no-document-outline-algorithm.html\" rel=\"noopener\">“There Is No Document Outline Algorithm”</a> that comprehensively spells it out and has been updated regularly with extra nuggets of context about the conversations and struggles that got us here. This is really the best timeline of the saga. Amelia Bellamy-Royds has also <a href=\"https://css-tricks.com/document-outline-dilemma/\">delved into the roots of the dilemma</a> in the past here on CSS-Tricks.</p>\n\n\n\n<p>My mind instantly goes to all the work that&#8217;s gone into the making of a document outline algorithm that supports sectioning. Removing it from the spec is the right call for sure, but it doesn&#8217;t take away from the herculean efforts that went into it even if it is now buried in some version history. I also think about all the well-intentioned folks who have written about the algorithm erroneously over time (including on this very site!) with the expectation that it was just around the corner. There&#8217;s nearly seven years of mental and technical debt that we&#8217;ve accrued from what appear to be a lack of action.</p>\n\n\n\n<p>Looking past the “news” that the algorithm is officially no more, Bruce laments that there is no generic <code>&lt;h&gt;</code> element or the like that can be sectioned to produce the correct heading level. I agree. Having an <code>&lt;h1&gt;</code> element essentially exist as an exposed <code>&lt;title&gt;</code> is constraining, particularly since pages are so rarely structured around a single article with a single top-level heading. I often find myself wincing every time I’m making some sort of card component where using <code>&lt;h3&gt;</code> might be technically correct, but feels out of order. And that’s before we even talk about the styling considerations where a lower heading level now needs to look like a distinct higher heading level.</p>\n\n\n\n<p>Speaking of heading level management, Steve Faulkner (who authored the PR that plucked the algorithm from the spec) has a <a href=\"https://www.tpgi.com/subheadings-subtitles-alternative-titles-and-taglines-in-html/\" rel=\"noopener\">super practical overview of using the <code>&lt;hgroup&gt;</code> element</a> to handle heading patterns that involve subheadings, subtitles, alternative titles, snd taglines. I’m sure you’ve seen markup like this in the wild:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;h1>Disappointingly Average&lt;/h1>\n&lt;h2>The Autobiography of Geoff Graham&lt;/h2>\n&lt;h3>by Geoff Graham&lt;/h3></code></pre>\n\n\n\n<p>That doesn&#8217;t jive with a flat document outline that&#8217;s driven by heading levels. Each one of those headings represents a section that forms a hierarchy of information:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Disappointingly Average\n└── The Autobiography of Geoff Graham\n    └── by Geoff Graham</code></pre>\n\n\n\n<p>What we want instead is a <em>group</em> of headings. Cue the <code>&lt;hgroup&gt;</code> element:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>When nested within a&nbsp;<code>&lt;hgroup&gt;</code>&nbsp;element, the&nbsp;<code>&lt;p&gt;</code>&nbsp;element’s content represents a subheading, alternative title, or tagline which are not included in the document outline.</p></blockquote>\n\n\n\n<p>So, we get this structure:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;hgroup>\n  &lt;h1>Disappointingly Average&lt;/h1>\n  &lt;p>The Autobiography of Geoff Graham&lt;/p>\n  &lt;p>by Geoff Graham&lt;/p>\n&lt;/hgroup></code></pre>\n\n\n\n<p><code>&lt;hgroup&gt;</code> is <code>role=generic</code> at the moment, but Steve <a href=\"https://github.com/w3c/html-aam/pull/398#issuecomment-1181843606\" rel=\"noopener\">points to a proposal</a> that could map it to <code>role=group</code>. If that happens, the accessibility tree will allow assistive tech to assign more semantic meaning to those paragraphs as the subtitle and tagline pieces that they are. Sounds easy but Steve notes challenges that are in the way. He also demos how this sort of pattern could be implemented today with ARIA attributes.</p>\n\n\n\n<p>As long as we&#8217;re rounding things up, Matthias Ott published a few tips on <a href=\"https://matthiasott.com/notes/level-up-your-headings-game\" rel=\"noopener\">creating a structured outline with headings</a>. Check out the end for a great list of tools to check your heading outlines.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/roundup-of-recent-document-outline-chatter/\">Roundup of Recent Document Outline Chatter</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "It’s not everyday that HTML headings are the topic de jour, but my folder of saved links is accumulating articles about the recently merged removal of the document outline algorithm in the WHATWG Living Standard.\n\n\n\nFirst off, you should know that the algorithm never really existed. Sure, it was in the spec. And sure, there was a warning about using it in the spec. But no browser ever implemented it, as Bruce Lawson reminded us. We have been living in a flat document structure the whole time.\n\n\n\n\n\n\n\nThis is very old news. Adrian Roselli has been writing about the document outline myth since 2013. But it’s his 2016 post titled “There Is No Document Outline Algorithm” that comprehensively spells it out and has been updated regularly with extra nuggets of context about the conversations and struggles that got us here. This is really the best timeline of the saga. Amelia Bellamy-Royds has also delved into the roots of the dilemma in the past here on CSS-Tricks.\n\n\n\nMy mind instantly goes to all the work that’s gone into the making of a document outline algorithm that supports sectioning. Removing it from the spec is the right call for sure, but it doesn’t take away from the herculean efforts that went into it even if it is now buried in some version history. I also think about all the well-intentioned folks who have written about the algorithm erroneously over time (including on this very site!) with the expectation that it was just around the corner. There’s nearly seven years of mental and technical debt that we’ve accrued from what appear to be a lack of action.\n\n\n\nLooking past the “news” that the algorithm is officially no more, Bruce laments that there is no generic <h> element or the like that can be sectioned to produce the correct heading level. I agree. Having an <h1> element essentially exist as an exposed <title> is constraining, particularly since pages are so rarely structured around a single article with a single top-level heading. I often find myself wincing every time I’m making some sort of card component where using <h3> might be technically correct, but feels out of order. And that’s before we even talk about the styling considerations where a lower heading level now needs to look like a distinct higher heading level.\n\n\n\nSpeaking of heading level management, Steve Faulkner (who authored the PR that plucked the algorithm from the spec) has a super practical overview of using the <hgroup> element to handle heading patterns that involve subheadings, subtitles, alternative titles, snd taglines. I’m sure you’ve seen markup like this in the wild:\n\n\n\n<h1>Disappointingly Average</h1>\n<h2>The Autobiography of Geoff Graham</h2>\n<h3>by Geoff Graham</h3>\n\n\n\nThat doesn’t jive with a flat document outline that’s driven by heading levels. Each one of those headings represents a section that forms a hierarchy of information:\n\n\n\nDisappointingly Average\n└── The Autobiography of Geoff Graham\n    └── by Geoff Graham\n\n\n\nWhat we want instead is a group of headings. Cue the <hgroup> element:\n\n\n\nWhen nested within a <hgroup> element, the <p> element’s content represents a subheading, alternative title, or tagline which are not included in the document outline.\n\n\n\nSo, we get this structure:\n\n\n\n<hgroup>\n  <h1>Disappointingly Average</h1>\n  <p>The Autobiography of Geoff Graham</p>\n  <p>by Geoff Graham</p>\n</hgroup>\n\n\n\n<hgroup> is role=generic at the moment, but Steve points to a proposal that could map it to role=group. If that happens, the accessibility tree will allow assistive tech to assign more semantic meaning to those paragraphs as the subtitle and tagline pieces that they are. Sounds easy but Steve notes challenges that are in the way. He also demos how this sort of pattern could be implemented today with ARIA attributes.\n\n\n\nAs long as we’re rounding things up, Matthias Ott published a few tips on creating a structured outline with headings. Check out the end for a great list of tools to check your heading outlines.\n\nRoundup of Recent Document Outline Chatter originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367048",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-21T14:04:34.000Z",
      "date_modified": "2022-07-21T14:04:34.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=367064",
      "url": "https://css-tricks.com/logical-properties-for-useful-shorthands/",
      "title": "Logical Properties for Useful Shorthands",
      "summary": "Michelle Barker with my favorite sorta blog post: short, practical, and leaves you with a valuable nugget for your time. Here, she gets into logical property shorthands in CSS, particularly those that set lengths just on a single axis, …\n\nLogical Properties for Useful Shorthands originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Michelle Barker with my favorite sorta blog post: short, practical, and leaves you with a valuable nugget for your time. Here, <a href=\"https://css-irl.info/logical-properties-for-useful-shorthands/\" rel=\"noopener\">she gets into logical property shorthands in CSS</a>, particularly those that set lengths just on a single axis, say only the block (vertical) axis or just the inline (horizontal) axis.</p>\n\n\n\n<p>I say “block” and ”inline”  because, as far as logical properties are concerned, the x-axis could just as well behave like a vertical axis depending on the current <code>writing-mode</code>.</p>\n\n\n\n<p>So, where we’ve always had <code>padding</code>, <code>margin</code>, and <code>border</code> shorthands that can support a multi-value syntax, none of them allow us to declare lengths on a specific axis without also setting a length on the other axis.</p>\n\n\n\n<span id=\"more-367064\"></span>\n\n\n\n<p>For example:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* This gives us margin on the inline axis */\nmargin: 0 3rem;</code></pre>\n\n\n\n<p>…but we had to set the other axis in order to get there. With logical properties, however, we have additional shorthands for each axis meaning we can cue up the <code>margin-inline</code> shorthand to work specifically on the inline axis:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">margin-inline: 3rem;</code></pre>\n\n\n\n<p>Michelle mentions my favorite logical property shorthand in passing. How many times do you position something to this sort of tune:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.position-me {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}</code></pre>\n\n\n\n<p>We can get those four lines into in with <code>inset: 0</code>. Or we could target the block and inline axis directly with <code>inset-block</code> and <code>inset-inline</code>, respectively.</p>\n\n\n\n<p>While we’re talking shorthands, I always like to put a word of caution about <a href=\"https://css-tricks.com/accidental-css-resets/\">”accidental” CSS resets</a>. Just one of the <a href=\"https://css-tricks.com/my-dumbest-css-mistakes/\">common CSS mistakes I make</a>.</p>\n<p><a href=\"https://css-irl.info/logical-properties-for-useful-shorthands/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/logical-properties-for-useful-shorthands/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/logical-properties-for-useful-shorthands/\">Logical Properties for Useful Shorthands</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Michelle Barker with my favorite sorta blog post: short, practical, and leaves you with a valuable nugget for your time. Here, she gets into logical property shorthands in CSS, particularly those that set lengths just on a single axis, say only the block (vertical) axis or just the inline (horizontal) axis.\n\n\n\nI say “block” and ”inline”  because, as far as logical properties are concerned, the x-axis could just as well behave like a vertical axis depending on the current writing-mode.\n\n\n\nSo, where we’ve always had padding, margin, and border shorthands that can support a multi-value syntax, none of them allow us to declare lengths on a specific axis without also setting a length on the other axis.\n\n\n\n\n\n\n\nFor example:\n\n\n\n/* This gives us margin on the inline axis */\nmargin: 0 3rem;\n\n\n\n…but we had to set the other axis in order to get there. With logical properties, however, we have additional shorthands for each axis meaning we can cue up the margin-inline shorthand to work specifically on the inline axis:\n\n\n\nmargin-inline: 3rem;\n\n\n\nMichelle mentions my favorite logical property shorthand in passing. How many times do you position something to this sort of tune:\n\n\n\n.position-me {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n\n\n\nWe can get those four lines into in with inset: 0. Or we could target the block and inline axis directly with inset-block and inset-inline, respectively.\n\n\n\nWhile we’re talking shorthands, I always like to put a word of caution about ”accidental” CSS resets. Just one of the common CSS mistakes I make.\nTo Shared Link — Permalink on CSS-Tricks\nLogical Properties for Useful Shorthands originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/367064",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-20T16:16:34.000Z",
      "date_modified": "2022-07-20T16:16:34.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366993",
      "url": "https://css-tricks.com/how-stroke-dasharray-patterns-work/",
      "title": "How stroke-dasharray Patterns Work",
      "summary": "Say you have a line in SVG:\n<svg<line x1=\"0\" y1=\"30\" x2=\"500\" y2=\"30\" stroke-color=\"#f8a100\" /</svg\nYou can use the stroke-dasharray property in CSS to make dashes:\nline {\n  stroke-dasharray: 5;\n}\nThat 5 value is a relative unit based …\n\nHow stroke-dasharray Patterns Work originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Say you have a line in SVG:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;svg>\n  &lt;line x1=\"0\" y1=\"30\" x2=\"500\" y2=\"30\" stroke-color=\"#f8a100\" />\n&lt;/svg></code></pre>\n\n\n\n<p>You can use the <code><a href=\"https://css-tricks.com/almanac/properties/s/stroke-dasharray/\">stroke-dasharray</a></code> property in CSS to make dashes:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">line {\n  stroke-dasharray: 5;\n}</code></pre>\n\n\n\n<p>That&nbsp;<code>5</code>&nbsp;value is a relative unit based on the size of the SVG&#8217;s&nbsp;<code>viewBox</code>. We could use any CSS length, really. But what it does is make a pattern of dashes that are 5 units long with 5 unit gaps between them.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poLNzWe\" src=\"//codepen.io/anon/embed/poLNzWe?height=300&amp;theme-id=1&amp;slug-hash=poLNzWe&amp;default-tab=css,result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poLNzWe\" title=\"CodePen Embed poLNzWe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>So far, so good. We can use two values where the second value individually sets the gap length:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_dymOyyx\" src=\"//codepen.io/anon/embed/dymOyyx?height=300&amp;theme-id=1&amp;slug-hash=dymOyyx&amp;default-tab=css,result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed dymOyyx\" title=\"CodePen Embed dymOyyx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now we have dashes that are 5 units and gaps that are 10. Let&#8217;s try a third value:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOeLObr\" src=\"//codepen.io/anon/embed/gOeLObr?height=300&amp;theme-id=1&amp;slug-hash=gOeLObr&amp;default-tab=css,result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOeLObr\" title=\"CodePen Embed gOeLObr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>See how we&#8217;re forming a pattern here? It goes:</p>\n\n\n\n<ul><li>Dash: 5 units</li><li>Gap: 10 units</li><li>Dash: 15 units</li></ul>\n\n\n\n<p>You&#8217;d think it repeats after that in the exact same cadence. But no! It if did, we&#8217;d have dashes bumping into one another:</p>\n\n\n\n<ul><li>Dash: 5 units</li><li>Gap: 10 units</li><li><strong>Dash: 15 units</strong></li><li><strong>Dash: 5 units</strong></li><li>Gap: 10 units</li><li>Dash: 15 units</li><li>&#8230;and so on.</li></ul>\n\n\n\n<p>Instead,&nbsp;<code>stroke-dasharray</code>&nbsp;gets all smart and duplicates the pattern if there are an odd number of values So&#8230;</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">stroke-dasharray: 5 10 15;\n\n/* is the same as */\nstroke-dasharray: 5 10 15 5 10 15;</code></pre>\n\n\n\n<p>That&#8217;s actually why a single value works! Earlier, we declared a single&nbsp;<code>5</code>&nbsp;value. That&#8217;s really the same as saying&nbsp;<code>stroke-dasharray: 5 5</code>. Without the second value,&nbsp;<code>stroke-dasharray</code>&nbsp;implicitly duplicates the first value to get a repeatable pattern. Otherwise, it&#8217;d just be a solid line of dashes that are 5 units long, but no gaps between them!</p>\n\n\n\n<p>The pattern also depends on the size of the shape itself. Our SVG <code>line</code> is 500 units. Let&#8217;s set larger <code>stroke-dasharray</code> values and add them up:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">stroke-dasharray: 10 20 30 40 50; /* 150 units */</code></pre>\n\n\n\n<p>If the pattern runs four times (150 units ⨉ 4 iterations), we&#8217;re dealing with 600 total units. That additional 100 units is lopped off to prevent the pattern from overflowing itself.</p>\n\n\n\n<p>That&#8217;s all.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWmGLpN\" src=\"//codepen.io/anon/embed/QWmGLpN?height=600&amp;theme-id=1&amp;slug-hash=QWmGLpN&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWmGLpN\" title=\"CodePen Embed QWmGLpN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>&#x1f3a9; Hat tip to <a href=\"https://www.joshdance.com\" rel=\"noopener\">Joshua Dance</a> for <a href=\"https://codepen.io/joshdance-the-sans/pen/oNqzRym\" rel=\"noopener\">calling this out</a>!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-stroke-dasharray-patterns-work/\">How stroke-dasharray Patterns Work</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Say you have a line in SVG:\n\n\n\n<svg>\n  <line x1=\"0\" y1=\"30\" x2=\"500\" y2=\"30\" stroke-color=\"#f8a100\" />\n</svg>\n\n\n\nYou can use the stroke-dasharray property in CSS to make dashes:\n\n\n\nline {\n  stroke-dasharray: 5;\n}\n\n\n\nThat 5 value is a relative unit based on the size of the SVG’s viewBox. We could use any CSS length, really. But what it does is make a pattern of dashes that are 5 units long with 5 unit gaps between them.\n\n\n\nCodePen Embed Fallback\n\n\n\nSo far, so good. We can use two values where the second value individually sets the gap length:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow we have dashes that are 5 units and gaps that are 10. Let’s try a third value:\n\n\n\nCodePen Embed Fallback\n\n\n\nSee how we’re forming a pattern here? It goes:\n\n\n\nDash: 5 unitsGap: 10 unitsDash: 15 units\n\n\n\nYou’d think it repeats after that in the exact same cadence. But no! It if did, we’d have dashes bumping into one another:\n\n\n\nDash: 5 unitsGap: 10 unitsDash: 15 unitsDash: 5 unitsGap: 10 unitsDash: 15 units…and so on.\n\n\n\nInstead, stroke-dasharray gets all smart and duplicates the pattern if there are an odd number of values So…\n\n\n\nstroke-dasharray: 5 10 15;\n\n/* is the same as */\nstroke-dasharray: 5 10 15 5 10 15;\n\n\n\nThat’s actually why a single value works! Earlier, we declared a single 5 value. That’s really the same as saying stroke-dasharray: 5 5. Without the second value, stroke-dasharray implicitly duplicates the first value to get a repeatable pattern. Otherwise, it’d just be a solid line of dashes that are 5 units long, but no gaps between them!\n\n\n\nThe pattern also depends on the size of the shape itself. Our SVG line is 500 units. Let’s set larger stroke-dasharray values and add them up:\n\n\n\nstroke-dasharray: 10 20 30 40 50; /* 150 units */\n\n\n\nIf the pattern runs four times (150 units ⨉ 4 iterations), we’re dealing with 600 total units. That additional 100 units is lopped off to prevent the pattern from overflowing itself.\n\n\n\nThat’s all.\n\n\n\nCodePen Embed Fallback\n\n\n\n🎩 Hat tip to Joshua Dance for calling this out!\n\nHow stroke-dasharray Patterns Work originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366993",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-15T19:43:40.000Z",
      "date_modified": "2022-07-15T19:43:40.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366905",
      "url": "https://css-tricks.com/office-spaces/",
      "title": "Office Spaces",
      "summary": "I think it’s super timely that Jim Nielsen wrote about his office space the other day. My family recently re-rooted in Colorado and I was up late last night setting up my desk and everything around it. So late, in …\n\nOffice Spaces originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>I think it&#8217;s super timely that Jim Nielsen <a href=\"https://blog.jim-nielsen.com/2022/my-office-space/\" rel=\"noopener\">wrote about his office space</a> the other day. My family recently <a href=\"https://geoffgraham.me/fare-thee-well-long-beach/\" rel=\"noopener\">re-rooted in Colorado</a> and I was up late last night setting up my desk and everything around it. So late, in fact, that reading these words now bites me:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>My workspace isn’t what life revolves around.</p></blockquote>\n\n\n\n<p>I&#8217;ve spent years trying to live up to that. I remember how important my desk was to me when I began freelancing in 2013. Remote working was an outlier then and having a desk made me feel better whenever I told someone I worked from home and I got the inevitable &#8220;Oh, you&#8217;ll get a real job one day,&#8221; look.</p>\n\n\n\n<span id=\"more-366905\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"765\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_2822.jpg?resize=1024%2C765&#038;ssl=1\" alt=\"\" class=\"wp-image-366906\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_2822-scaled.jpg?resize=1024%2C765&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_2822-scaled.jpg?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_2822-scaled.jpg?resize=768%2C574&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_2822-scaled.jpg?resize=1536%2C1147&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_2822-scaled.jpg?resize=2048%2C1530&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>It doesn&#8217;t look like much, but that minimalism took me forever to figure out (circa October 2013).</figcaption></figure>\n\n\n\n<p>That helped my ego, sure. But it didn&#8217;t stop my 6-month old daughter from climbing the stairs to find me. We lived in an open concept condo at the time, and the living room stairs bled straight into my office as the landing.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"762\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-stairs.jpg?resize=1024%2C762&#038;ssl=1\" alt=\"\" class=\"wp-image-366930\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-stairs.jpg?resize=1024%2C762&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-stairs.jpg?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-stairs.jpg?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-stairs.jpg?w=1128&amp;ssl=1 1128w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>To be fair, it&#8217;s not like I was stopping her either.</figcaption></figure>\n\n\n\n<p>That meant I sometimes had a tiny art director looking over my shoulder.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"762\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-ceo.jpg?resize=1024%2C762&#038;ssl=1\" alt=\"\" class=\"wp-image-366912\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-ceo.jpg?resize=1024%2C762&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-ceo.jpg?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-ceo.jpg?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/harper-ceo.jpg?w=1128&amp;ssl=1 1128w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>&#8230;but it also forced me to find different spots to get some work done:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"762\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-working-patio.jpg?resize=1024%2C762&#038;ssl=1\" alt=\"\" class=\"wp-image-366909\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-working-patio.jpg?resize=1024%2C762&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-working-patio.jpg?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-working-patio.jpg?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-working-patio.jpg?w=1128&amp;ssl=1 1128w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Yanking the power cord from my office wall made me realize I could work anywhere I really needed to.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"765\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_3094.jpg?resize=1024%2C765&#038;ssl=1\" alt=\"\" class=\"wp-image-366910\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_3094-scaled.jpg?resize=1024%2C765&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_3094-scaled.jpg?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_3094-scaled.jpg?resize=768%2C574&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_3094-scaled.jpg?resize=1536%2C1147&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_3094-scaled.jpg?resize=2048%2C1530&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Thankfully, I lived in an urban downtown that had plenty of cafés I could use as an office in a pinch.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"762\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/cafe-wireframes-sketches.jpg?resize=1024%2C762&#038;ssl=1\" alt=\"\" class=\"wp-image-366913\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/cafe-wireframes-sketches.jpg?resize=1024%2C762&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/cafe-wireframes-sketches.jpg?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/cafe-wireframes-sketches.jpg?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/cafe-wireframes-sketches.jpg?w=1128&amp;ssl=1 1128w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>I used to <em>love</em> Zurb&#8217;s templates for sketching wireframes.</figcaption></figure>\n\n\n\n<p>If I&#8217;m being honest, I&#8217;ve probably done more work <em>outside</em> of my office than I ever have in it. It was right around this time that I had clients plugging me into various accounts for Slack, Zoom, Dropbox, Google Drive, and other tools that we now credit for creating asynchronous working environments. Other than a new banging set of Beats, there was nothing else I really needed to invest in to work this way.</p>\n\n\n\n<p>These were all things I was already using for myself, but it was my clients buying into them that really felt like the sea change that allowed me to call anywhere I was sitting &#8220;my&#8221; desk.</p>\n\n\n\n<p>Fast-forward to 2019. We moved to the &#8216;burbs into a house that gave me the luxury of a large dedicated office space.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"762\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-office-eastside-1024x762.jpg?resize=1024%2C762&#038;ssl=1\" alt=\"\" class=\"wp-image-366917\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-office-eastside.jpg?resize=1024%2C762&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-office-eastside.jpg?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-office-eastside.jpg?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-office-eastside.jpg?w=1128&amp;ssl=1 1128w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Check out <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">that killer poster</a> on the wall.</figcaption></figure>\n\n\n\n<p>My desk started to grow into the larger space.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"762\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-mega-desk.jpg?resize=1024%2C762&#038;ssl=1\" alt=\"\" class=\"wp-image-366920\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-mega-desk.jpg?resize=1024%2C762&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-mega-desk.jpg?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-mega-desk.jpg?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-mega-desk.jpg?w=1128&amp;ssl=1 1128w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>I was recording a lot of screencasts and lectures at the time. Thankfully, <a href=\"https://css-tricks.com/1000-podcasting-setup/\">Chris had a bunch of practical recommendations</a> for a homespun studio.</figcaption></figure>\n\n\n\n<p>I really lucked out when we moved because the extra space came in handy when my wife, Marcia, starting working exclusively from home following the start of the pandemic. It also meant we had enough space for when my daughters (yep, we had another along the way!) needed a homeschooling hub.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"762\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/homeschool-desk.jpg?resize=1024%2C762&#038;ssl=1\" alt=\"\" class=\"wp-image-366922\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/homeschool-desk.jpg?resize=1024%2C762&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/homeschool-desk.jpg?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/homeschool-desk.jpg?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/homeschool-desk.jpg?w=1128&amp;ssl=1 1128w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>So, back-of-the-napkin math tells me we had four humans in one office heading into 2020. I can&#8217;t overstate just how lucky we were to have an office like this at a time like that. It was often hectic, yes, but still gave us everything we needed (and more) to be a truly home-based family <a href=\"https://www.theguardian.com/media/video/2017/mar/10/bbc-correspondent-interrupted-by-his-children-live-on-air-video\" rel=\"noopener\">without becoming meme fodder</a>.</p>\n\n\n\n<hr class=\"wp-block-separator has-css-opacity\"/>\n\n\n\n<p>All of this leads me back to Jim&#8217;s post and why his comment about life revolving around desks bit me so hard. After spending so many years unraveling my life from the office, I found myself spending too much time last night curating the desk at my new home. I was essentially letting it re-establish itself as a sacred anchor in my life.</p>\n\n\n\n<p>So here I am trying to put Jim&#8217;s next piece of advice into action:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>It’s ok to have a bit of humility in your space. Perhaps a dose of it is even deserved.</p></blockquote>\n\n\n\n<p>That means my desk is not the center of the room that it&#8217;s in. It&#8217;s a work in progress, but so far  the desk is pushed off to the side up against a wall. Behind it is a reclaimed sofa I can easily retreat to. Across from that are my guitars and ukuleles for mental breaks where I get to use my hands more than my mind. Next to those is my record collection and turntable — another refuge that encourages me to step away from the screen and indulge other interests.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1920\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_0670-scaled.jpeg?resize=2560%2C1920&#038;ssl=1\" alt=\"\" class=\"wp-image-366936\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_0670-scaled.jpeg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_0670-scaled.jpeg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_0670-scaled.jpeg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_0670-scaled.jpeg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_0670-scaled.jpeg?resize=1536%2C1152&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/IMG_0670-scaled.jpeg?resize=2048%2C1536&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>I&#8217;ll get some artwork up on the walls at some point.</figcaption></figure>\n\n\n\n<p>And all of it is in a space large and welcoming enough to invite life in if it needs to — family, friends, fiddling around, whatever. It&#8217;s also conveniently located right off the family room for such <s>distractions</s>  moments.</p>\n\n\n<h2 id=\"whats-on-my-desk\">What&#8217;s on my desk</h2>\n\n\n<p>It feels odd to sign off without showing you what&#8217;s actually on my desk. It&#8217;s fun knowing what people use and how they&#8217;re set up. Here&#8217;s what I&#8217;ve got.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1300\" height=\"978\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-desk-1.jpg?resize=1300%2C978&#038;ssl=1\" alt=\"\" class=\"wp-image-366943\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-desk-1.jpg?w=1300&amp;ssl=1 1300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-desk-1.jpg?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-desk-1.jpg?resize=1024%2C770&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/geoff-desk-1.jpg?resize=768%2C578&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>First off, the desk itself is <a href=\"https://www.ikea.com/us/en/p/idasen-desk-sit-stand-black-dark-gray-s79280998/#content\" rel=\"noopener\">this one from IKEA</a>.</p>\n\n\n\n<ul><li><a href=\"https://www.apple.com/shop/buy-mac/macbook-pro/16-inch\" rel=\"noopener\">16&#8243; MacBook Pro</a> (2019)</li><li><a href=\"https://www.apple.com/shop/product/MK293LL/A/magic-keyboard-with-touch-id-for-mac-models-with-apple-silicon-us-english\" rel=\"noopener\">Apple Magic Keyboard</a> (no charging or TouchID)</li><li><a href=\"https://www.apple.com/shop/product/MMMP3AM/A/magic-trackpad-black-multi-touch-surface?fnode=ac01506cf028e3231772a35ff28369febb3036dbee96b59dd8805d68a7741113de5c2083a99cde213b9c8555d748667cec346754d30c9ffb01fd00ff76747d1bb05265d78ca98a1e7f3d8cad2e9857663ddb3fb6528b70616dd37753ac4b5790\" rel=\"noopener\">Apple Magic Trackpad</a> (with charging)</li><li><a href=\"https://www.lgnewsroom.com/2016/10/lg-ultrafine-5k4k-displays-designed-for-the-ultimate-mac-user-experience/\" rel=\"noopener\">27&#8243; LG UltraFine 4K external monitor</a> (2016, discontinued)</li><li><a href=\"https://www.dell.com/en-us/shop/dell-ultrasharp-27-4k-usb-c-hub-monitor-u2723qe/apd/210-bdpf/monitors-monitor-accessories\" rel=\"noopener\">27&#8243; Dell UltraSharp 4K USB-C monitor </a>(thank you, DigitalOcean!)</li><li><a href=\"https://www.shure.com/en-US/products/microphones/sm7b\" rel=\"noopener\">Shure SM7B</a> microphone (with mount)</li><li><a href=\"https://focusrite.com/en/usb-audio-interface/scarlett/scarlett-2i2\" rel=\"noopener\">Focusrite Scarlett 2i2</a> microphone preamp</li><li><a href=\"https://dbxpro.com/en/products/286s\" rel=\"noopener\">DBX 286s</a> microphone preamp processor</li><li><a href=\"https://www.amazon.com/UBeesize-Recording＆Live-Streaming-Instagram-Compatible/dp/B08L5VKNWR/ref=sxin_16_pa_sp_search_thematic_sspa?content-id=amzn1.sym.b245e49f-68a4-4489-b1f9-81f4034255f5%3Aamzn1.sym.b245e49f-68a4-4489-b1f9-81f4034255f5&amp;cv_ct_cx=circle+light+with+tripod&amp;keywords=circle+light+with+tripod&amp;pd_rd_i=B08L5VKNWR&amp;pd_rd_r=fcc518f6-323a-4904-bce0-ef49f69fb6c0&amp;pd_rd_w=r3Ikm&amp;pd_rd_wg=BthzN&amp;pf_rd_p=b245e49f-68a4-4489-b1f9-81f4034255f5&amp;pf_rd_r=6CY220K74XDEPQXDNHG0&amp;qid=1657667685&amp;refinements=p_85%3A2470955011&amp;rnid=2470954011&amp;sprefix=circle+light%2Caps%2C129&amp;sr=1-4-a73d1c8c-2fd2-4f19-aa41-2df022bcb241-spons&amp;psc=1&amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyRjkwWkdTUDVXWEFCJmVuY3J5cHRlZElkPUExMDIxOTgxU0hSWDZKM1BVMDFGJmVuY3J5cHRlZEFkSWQ9QTAzNjg3MDkzNU43QURBOVlXNUJNJndpZGdldE5hbWU9c3Bfc2VhcmNoX3RoZW1hdGljJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==\" rel=\"noopener\">UBeesize 12’’ Ring Light with Tripod</a> (the room is <em>super</em> dark)</li><li><a href=\"https://www.amazon.com/POP-Star-Wars-ATG-Child/dp/B08QXZ1DCP/ref=sr_1_7?crid=SVXMBKYKGY2E&amp;keywords=grogu&amp;qid=1657656682&amp;s=toys-and-games&amp;smid=ATVPDKIKX0DER&amp;sprefix=grogu%2Ctoys-and-games%2C137&amp;sr=1-7\" rel=\"noopener\">Grogu</a> (aka Baby Yoda) and <a href=\"https://www.amazon.com/Funko-Animation-Burgers-Action-Figure/dp/B015GMX4XG/ref=sr_1_2?crid=PAXBA20MNIFD&amp;keywords=bob+belcher+funko&amp;qid=1657656738&amp;rnid=2470954011&amp;s=toys-and-games&amp;sprefix=bob+belcher+funko%2Ctoys-and-games%2C93&amp;sr=1-2&amp;ufe=app_do%3Aamzn1.fos.15f6550b-5813-463a-bbad-262d8e0e60c8\" rel=\"noopener\">Bob Belcher</a> figures</li><li>Orange cup for pens and a <a href=\"https://mcphee.com/blogs/news/seth-godin-marketing-guru-action-figure\" rel=\"noopener\">Seth Godin action figure</a></li><li><a href=\"https://store.digitalocean.com/doswag/accessories/sammy-stress-ball/9979?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=office-spaces\">Sammy stress ball</a></li></ul>\n\n\n<h2 id=\"whats-your-office-like\">What&#8217;s your office like?</h2>\n\n\n<p>Is it a traditional office you commute to? A room that&#8217;s a few steps away from your bedroom? Maybe it&#8217;s even <em>in</em> your bedroom? Where do you work when you&#8217;re not there? What&#8217;s in there?</p>\n\n\n\n<p>Inquiring minds want to know (namely mine).</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/office-spaces/\">Office Spaces</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I think it’s super timely that Jim Nielsen wrote about his office space the other day. My family recently re-rooted in Colorado and I was up late last night setting up my desk and everything around it. So late, in fact, that reading these words now bites me:\n\n\n\nMy workspace isn’t what life revolves around.\n\n\n\nI’ve spent years trying to live up to that. I remember how important my desk was to me when I began freelancing in 2013. Remote working was an outlier then and having a desk made me feel better whenever I told someone I worked from home and I got the inevitable “Oh, you’ll get a real job one day,” look.\n\n\n\n\n\n\n\nIt doesn’t look like much, but that minimalism took me forever to figure out (circa October 2013).\n\n\n\nThat helped my ego, sure. But it didn’t stop my 6-month old daughter from climbing the stairs to find me. We lived in an open concept condo at the time, and the living room stairs bled straight into my office as the landing.\n\n\n\nTo be fair, it’s not like I was stopping her either.\n\n\n\nThat meant I sometimes had a tiny art director looking over my shoulder.\n\n\n\n\n\n\n\n…but it also forced me to find different spots to get some work done:\n\n\n\n\n\n\n\nYanking the power cord from my office wall made me realize I could work anywhere I really needed to.\n\n\n\n\n\n\n\nThankfully, I lived in an urban downtown that had plenty of cafés I could use as an office in a pinch.\n\n\n\nI used to love Zurb’s templates for sketching wireframes.\n\n\n\nIf I’m being honest, I’ve probably done more work outside of my office than I ever have in it. It was right around this time that I had clients plugging me into various accounts for Slack, Zoom, Dropbox, Google Drive, and other tools that we now credit for creating asynchronous working environments. Other than a new banging set of Beats, there was nothing else I really needed to invest in to work this way.\n\n\n\nThese were all things I was already using for myself, but it was my clients buying into them that really felt like the sea change that allowed me to call anywhere I was sitting “my” desk.\n\n\n\nFast-forward to 2019. We moved to the ‘burbs into a house that gave me the luxury of a large dedicated office space.\n\n\n\nCheck out that killer poster on the wall.\n\n\n\nMy desk started to grow into the larger space.\n\n\n\nI was recording a lot of screencasts and lectures at the time. Thankfully, Chris had a bunch of practical recommendations for a homespun studio.\n\n\n\nI really lucked out when we moved because the extra space came in handy when my wife, Marcia, starting working exclusively from home following the start of the pandemic. It also meant we had enough space for when my daughters (yep, we had another along the way!) needed a homeschooling hub.\n\n\n\n\n\n\n\nSo, back-of-the-napkin math tells me we had four humans in one office heading into 2020. I can’t overstate just how lucky we were to have an office like this at a time like that. It was often hectic, yes, but still gave us everything we needed (and more) to be a truly home-based family without becoming meme fodder.\n\n\n\n\n\n\n\nAll of this leads me back to Jim’s post and why his comment about life revolving around desks bit me so hard. After spending so many years unraveling my life from the office, I found myself spending too much time last night curating the desk at my new home. I was essentially letting it re-establish itself as a sacred anchor in my life.\n\n\n\nSo here I am trying to put Jim’s next piece of advice into action:\n\n\n\nIt’s ok to have a bit of humility in your space. Perhaps a dose of it is even deserved.\n\n\n\nThat means my desk is not the center of the room that it’s in. It’s a work in progress, but so far  the desk is pushed off to the side up against a wall. Behind it is a reclaimed sofa I can easily retreat to. Across from that are my guitars and ukuleles for mental breaks where I get to use my hands more than my mind. Next to those is my record collection and turntable — another refuge that encourages me to step away from the screen and indulge other interests.\n\n\n\nI’ll get some artwork up on the walls at some point.\n\n\n\nAnd all of it is in a space large and welcoming enough to invite life in if it needs to — family, friends, fiddling around, whatever. It’s also conveniently located right off the family room for such distractions  moments.\n\n\nWhat’s on my desk\n\n\nIt feels odd to sign off without showing you what’s actually on my desk. It’s fun knowing what people use and how they’re set up. Here’s what I’ve got.\n\n\n\n\n\n\n\nFirst off, the desk itself is this one from IKEA.\n\n\n\n16″ MacBook Pro (2019)Apple Magic Keyboard (no charging or TouchID)Apple Magic Trackpad (with charging)27″ LG UltraFine 4K external monitor (2016, discontinued)27″ Dell UltraSharp 4K USB-C monitor (thank you, DigitalOcean!)Shure SM7B microphone (with mount)Focusrite Scarlett 2i2 microphone preampDBX 286s microphone preamp processorUBeesize 12’’ Ring Light with Tripod (the room is super dark)Grogu (aka Baby Yoda) and Bob Belcher figuresOrange cup for pens and a Seth Godin action figureSammy stress ball\n\n\nWhat’s your office like?\n\n\nIs it a traditional office you commute to? A room that’s a few steps away from your bedroom? Maybe it’s even in your bedroom? Where do you work when you’re not there? What’s in there?\n\n\n\nInquiring minds want to know (namely mine).\n\nOffice Spaces originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366905",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-14T14:07:01.000Z",
      "date_modified": "2022-07-14T14:07:01.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366770",
      "url": "https://css-tricks.com/react-hooks-the-deep-cuts/",
      "title": "React Hooks: The Deep Cuts",
      "summary": "Hooks are reusable functions. They allow you to use state and other features (e.g. lifecycle methods and so on) without writing a class. Hook functions let us “hook into” the React state lifecycle using functional components, allowing us to manipulate …\n\nReact Hooks: The Deep Cuts originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Hooks are reusable functions. They allow you to use <strong>state</strong> and other features (e.g. lifecycle methods and so on) without writing a class. Hook functions let us “hook into” the <a href=\"https://css-tricks.com/the-circle-of-a-react-lifecycle/\">React state lifecycle</a> using functional components, allowing us to manipulate the state of our functional components without needing to convert them to class components.</p>\n\n\n\n<p>React <a href=\"https://reactjs.org/docs/hooks-intro.html\" rel=\"noopener\">introduced hooks</a> back in version 16.8 and has been adding more ever since. Some are more used and popular than others, like <code>useEffect</code>, <code>useState</code>, and <code>useContext</code> hooks. I have no doubt that you’ve reached for those if you work with React.</p>\n\n\n\n<p>But what I’m interested in are the lesser-known React hooks. While all React hooks are interesting in their own way, there are five of them that I really want to show you because they may not pop up in your everyday work — or maybe they do and knowing them gives you some extra superpowers.</p>\n\n\n\n<span id=\"more-366770\"></span>\n\n\n\n<div class=\"wp-container-6 wp-block-group ticss-b32e7816\"><div class=\"wp-block-group__inner-container\"><h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc-list\"   >\n<li>\n<a  href=\"#usereducer\">useReducer</a></li><li>\n<a  href=\"#useref\">useRef</a></li><li>\n<a  href=\"#useimperativehandle\">useImperativeHandle</a></li><li>\n<a  href=\"#usememo\">useMemo</a></li><li>\n<a  href=\"#usecallback\">useCallback</a></li><li>\n<a  href=\"#final-thoughts\">Final thoughts</a></li></ul></div></div>\n\n\n<h3 id=\"usereducer\"><code>useReducer</code></h3>\n\n\n<p>The <code>useReducer</code> hook is a state management tool like other hooks. Specifically, it is an alternative to the <code>useState</code> hook.</p>\n\n\n\n<p>If you use the <code>useReducer</code> hook to change two or more states (or actions), you won’t have to manipulate those states individually. The hook keeps track of all the states and collectively manages them. In other words: it manages and re-renders state changes. Unlike the <code>useState</code> hook, <code>useReducer</code> is easier when it comes to handling many states in complex projects.</p>\n\n\n<h4 id=\"use-cases\">Use cases</h4>\n\n\n<p><code>useReducer</code> can help reduce the complexity of working with multiple states. Use it when you find yourself needing to track multiple states collectively, as it allows you to treat state management and the rendering logic of a component as separate concerns.</p>\n\n\n<h4 id=\"syntax\">Syntax</h4>\n\n\n<p><code>useReducer</code> accepts three arguments, one of which is optional:</p>\n\n\n\n<ul><li>a reducer function</li><li><code>initialState</code></li><li>an <code>init</code> function (optional)</li></ul>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const [state, dispatch] = useReducer(reducer, initialState)\nconst [state, dispatch] = useReducer(reducer, initialState initFunction) // in the case where you initialize with the optional 3rd argument</code></pre>\n\n\n<h4 id=\"example\">Example</h4>\n\n\n<p>The following example is an interface that contains a text input, counter, and button. Interacting with each element updates the state. Notice how <code>useReducer</code> allows us to define multiple cases at once rather than setting them up individually.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { useReducer } from 'react';\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'DECREMENT':\n      return { ...state, count: state.count - 1 };\n    case 'USER_INPUT':\n      return { ...state, userInput: action.payload };\n    case 'TOGGLE_COLOR':\n      return { ...state, color: !state.color };\n    default:\n      throw new Error();\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, { count: 0, userInput: '', color: false })\n\n  return (\n    &lt;main className=\"App, App-header\" style={{ color: state.color ? '#000' : '#FF07FF'}}>\n      &lt;input style={{margin: '2rem'}}\n        type=\"text\"\n        value={state.userInput}\n        onChange={(e) => dispatch({ type: 'USER_INPUT', payload: e.target.value })}\n      />\n      &lt;br />&lt;br />\n      &lt;p style={{margin: '2rem'}} >{state.count}&lt;/p>\n      &lt;section style={{margin: '2rem'}}>\n        &lt;button  onClick={(() => dispatch({ type: 'DECREMENT' }))}>-&lt;/button>\n        &lt;button onClick={(() => dispatch({ type: 'INCREMENT' }))}>+&lt;/button>\n        &lt;button onClick={(() => dispatch({ type: 'TOGGLE_COLOR' }))}>Color&lt;/button>\n      &lt;/section>\n      &lt;br />&lt;br />\n      &lt;p style={{margin: '2rem'}}>{state.userInput}&lt;/p>\n    &lt;/main>\n  );\n}\nexport default App;</code></pre>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/usereducer-gb0cm6?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"UseReducer\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p>From the code above, noticed how we are able to easily managed several states in the <strong>reducer</strong> (switch-case), this shows the benefit of the <code>useReducer</code>. This is the power it gives when working in complex applications with multiple states.</p>\n\n\n<h3 id=\"useref\"><code>useRef</code></h3>\n\n\n<p>The <code>useRef</code> hook is used to create refs on elements in order to access the DOM. But more than that, it returns an object with a <code>.current</code> property that can be used throughout a component’s entire lifecycle, allowing data to persist without causing a re-render. So, the <code>useRef</code> value stays the same between renders; updating the reference does not trigger a re-render.</p>\n\n\n<h4 id=\"use-cases\">Use cases</h4>\n\n\n<p>Reach for the <code>useRef</code> hook when you want to:</p>\n\n\n\n<ul><li>Manipulate the DOM with stored mutable information.</li><li>Access information from child components (nested elements).</li><li>Set focus on an element.</li></ul>\n\n\n\n<p>It’s most useful when storing mutatable data in your app without causing a re-render.</p>\n\n\n<h4 id=\"syntax\">Syntax</h4>\n\n\n<p><code>useRef</code> only accepts one argument, which is the <strong>initial value</strong>.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const newRefComponent = useRef(initialValue);</code></pre>\n\n\n<h4 id=\"example\">Example</h4>\n\n\n<p>Here I used the <code>useRef</code> and <code>useState</code> hook to show the amount of times an application renders an updated state when typing in a text input.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import './App.css'\n\nfunction App() {\n  const [anyInput, setAnyInput] = useState(\" \");\n  const showRender = useRef(0);\n  const randomInput = useRef();\n  const toggleChange = (e) => {\n    setAnyInput (e.target.value);\n    showRender.current++;\n  \n  }\n  const focusRandomInput = () => {\n    randomInput.current.focus();\n  }\n\n  return (\n    &lt;div className=\"App\">\n      &lt;input className=\"TextBox\" \n        ref ={randomInput} type=\"text\" value={anyInput} onChange={toggleChange}\n      />\n      &lt;h3>Amount Of Renders: {showRender.current}&lt;/h3>\n      &lt;button onClick={focusRandomInput}>Click To Focus On Input &lt;/button>\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Notice how typing each character in the text field updates the app’s state, but never triggers a complete re-render.</p>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/useref-1ubcyf?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"UseRef\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n<h3 id=\"useimperativehandle\"><code>useImperativeHandle</code></h3>\n\n\n<p>You know how a child component has access to call functions passed down to them from the parent component? Parents pass those down via props, but that transfer is “unidirectional” in the sense that the parent is unable to call a function that’s in the child.</p>\n\n\n\n<p>Well, <code>useImperativeHandle</code> makes it possible for a parent to access a child component’s functions.</p>\n\n\n\n<p>How does that work?</p>\n\n\n\n<ul><li>A function is defined in the child component.</li><li>A <code>ref</code> is added in the parent.</li><li>We use <code>forwardRef</code>, allowing the <code>ref</code> that was defined to be passed to the child.</li><li><code>useImperativeHandle</code> exposes the child’s functions via the <code>ref</code>.</li></ul>\n\n\n<h4 id=\"use-cases\">Use cases</h4>\n\n\n<p><code>useImperativeHandle</code> works well when you want a parent component to be affected by changes in the child. So, things like a changed focus, incrementing and decrementing, and blurred elements may be situations where you find yourself reaching for this hook so the parent can be updated accordingly.</p>\n\n\n<h4 id=\"syntax\">Syntax</h4>\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">useImperativeHandle (ref, createHandle, [dependencies])</code></pre>\n\n\n<h4 id=\"example\">Example</h4>\n\n\n<p>In this example, we have two buttons, one that’s in a parent component and one that’s in a child. Clicking on the parent button retrieves data from the child, allowing us to manipulate the parent component. It’s set up so that clicking the child button does not pass anything from the parent component to the child to help illustrate how we are passing things in the opposite direction.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Parent component\nimport React, { useRef } from \"react\";\nimport ChildComponent from \"./childComponent\";\nimport './App.css';\n\nfunction useImperativeHandle() {\n  const controlRef = useRef(null);\n  return (\n    onClick={\n      () => {\n        controlRef.current.controlPrint();\n      }\n    }\n    >\n    Parent Box\n  );\n}\nexport default useImperativeHandle;</code></pre>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Child component\nimport React, { forwardRef, useImperativeHandle, useState } from \"react\";\n\nconst ChildComponent = forwardRef((props, ref) => {\n  const [print, setPrint] = useState(false);\n  useImperativeHandle(ref, () => ({\n    controlPrint() \n    { setPrint(!print); },\n  })\n  );\n\n  return (\n    &lt;>\n    Child Box\n    { print &amp;&amp; I am from the child component }\n  );\n});\n\nexport default ChildComponent;</code></pre>\n\n\n<h4 id=\"output\">Output</h4>\n\n\n<iframe src=\"https://codesandbox.io/embed/useimperativehandle-4xee9o?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"UseImperativeHandle\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n<h3 id=\"usememo\"><code>useMemo</code></h3>\n\n\n<p><code>useMemo</code> is one of the least-used but most interesting React hooks. It can improve performance and decrease latency, particularly on large computations in your app. How so? Every time a component’s state updates and components re-render, the <code>useMemo</code> hook prevents React from having to recalculate values.</p>\n\n\n\n<p>You see, functions respond to state changes. The <code>useMemo</code> hook takes a function and <strong>returns the return value of that function</strong>. It caches that value to prevent spending additional effort re-rendering it, then returns it when one of the dependencies has changed.</p>\n\n\n\n<p>This process is called <a href=\"https://epicreact.dev/memoization-and-react/\" rel=\"noopener\"><strong>memoization</strong></a> and it’s what helps to boost performance by remembering the value from a previous request so it can be used again without repeating all that math.</p>\n\n\n<h4 id=\"use-cases\">Use cases</h4>\n\n\n<p>The best use cases are going to be any time you’re working with heavy calculations where you want to store the value and use it on subsequent state changes. It can be a nice performance win, but using it too much can have the exact opposite effect by hogging your app’s memory.</p>\n\n\n<h4 id=\"syntax\">Syntax</h4>\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">useMemo( () => \n  { // Code goes here },\n  []\n)</code></pre>\n\n\n<h4 id=\"example\">Example</h4>\n\n\n<p>When clicking the button, this mini-program indicates when a number is even or odd, then squares the value. I added lots of zeros to the loop to increase its computation power. It returns the value in spilt seconds and still works well due to the <code>useMemo</code> hook.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// UseMemo.js\nimport React, { useState, useMemo } from 'react'\n\nfunction Memo() {\n  const [memoOne, setMemoOne] = useState(0);\n  const incrementMemoOne = () => { setMemoOne(memoOne + 1) }\n  const isEven = useMemo(() => { \n    let i = 0 while (i &lt; 2000000000) i++ return memoOne % 2 === 0\n  },\n  [memoOne]);\n  \n  const square = useMemo(()=> { \n    console.log(\"squared the number\"); for(var i=0; i &lt; 200000000; i++);\n    return memoOne * memoOne;\n  },\n  [memoOne]);\n\n  return (\n    Memo One - \n    { memoOne }\n    { isEven ? 'Even' : 'Odd' } { square } \n  );\n}\nexport default Memo</code></pre>\n\n\n<h4 id=\"output\">Output</h4>\n\n\n<iframe src=\"https://codesandbox.io/embed/usememo-jveriu?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"UseMemo\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p><code>useMemo</code> is a little like the <code>useCallback</code> hook, but the difference is that <code>useMemo</code> can store a memorized value from a function, where <code>useCallback</code> stores the memorized function itself.</p>\n\n\n<h3 id=\"usecallback\"><code>useCallback</code></h3>\n\n\n<p>The <code>useCallback</code> hook is another interesting one and the last section was sort of a spoiler alert for what it does.</p>\n\n\n\n<p>As we just saw, <code>useCallback</code> works like the <code>useMemo</code> hook in that they both use memoization to cache something for later use. While <code>useMemo</code> stores a function’s calculation as a cached value, <code>useCallback</code> stores and returns a function.</p>\n\n\n<h4 id=\"use-cases\">Use cases</h4>\n\n\n<p>Like <code>useMemo, useCallback</code> is a nice performance optimization in that it stores and returns a memoized callback and any of its dependencies without a re-render.</p>\n\n\n<h4 id=\"syntax\">Syntax</h4>\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const getMemoizedCallback = useCallback (\n  () => { doSomething () }, []\n);</code></pre>\n\n\n<h4 id=\"example\">Example</h4>\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\n{ useCallback, useState } from \"react\";\nimport CallbackChild from \"./UseCallback-Child\";\nimport \"./App.css\"\n\nexport default function App() {\n  const [toggle, setToggle] = useState(false);\n  const [data, setData] = useState(\"I am a data that would not change at every render, thanks to the useCallback\");\n  const returnFunction = useCallback(\n    (name) => \n    { return data + name; }, [data]\n  );\n  return (\n    onClick={() => {\n      setToggle(!toggle);\n    }}\n    >\n    {\" \"}\n\n    // Click To Toggle\n    { toggle &amp;&amp; h1. Toggling me no longer affects any function } \n  ); \n}</code></pre>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// The Child component\nimport React, { useEffect } from \"react\";\n\nfunction CallbackChild(\n  { returnFunction }\n) {\n  useEffect(() => \n    { console.log(\"FUNCTION WAS CALLED\"); },\n    [returnFunction]);\n  return { returnFunction(\" Hook!\") };\n}\nexport default CallbackChild;</code></pre>\n\n\n<h4 id=\"output\">Output</h4>\n\n\n<iframe src=\"https://codesandbox.io/embed/usecallback-ocsbb5?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"UseCallback\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n<h3 id=\"final-thoughts\">Final thoughts</h3>\n\n\n<p>There we go! We just looked at five super handy React hooks that I think often go overlooked. As with many roundups like this, we’re merely scratching the surface of these hooks. They each have their own nuances and considerations to take into account when you use them. But hopefully you have a nice high-level idea of what they are and when they might be a better fit than another hook you might reach for more often.</p>\n\n\n\n<p>The best way to fully understand them is by practice. So I encourage you to practice using these hooks in your application for better understanding. For that, you can get way more in depth by checking out the following resources:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/intro-to-react-hooks/\">Intro to React Hooks</a> (Kingsley Silas)</li><li><a href=\"https://reactjs.org/docs/hooks-overview.html\" rel=\"noopener\">Hooks at a Glance</a> (React documentation)</li><li><a href=\"https://react-hooks-cheatsheet.com/usecallback\" rel=\"noopener\">Hooks Cheatsheet</a> (Ohans Emmanuel)</li><li><a href=\"https://css-tricks.com/the-circle-of-a-react-lifecycle/\">The Circle of a React Lifecycle</a> (Kingsley Silas)</li><li><a href=\"https://css-tricks.com/the-hooks-of-react-router/\">Hooks of React Router</a> (Agney Menon)</li><li><a href=\"https://css-tricks.com/testing-react-hooks-with-enzyme-and-react-testing-library/\">Testing React Hooks With Enzyme and React Testing Library</a> (Kingsley Silas)</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/react-hooks-the-deep-cuts/\">React Hooks: The Deep Cuts</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Hooks are reusable functions. They allow you to use state and other features (e.g. lifecycle methods and so on) without writing a class. Hook functions let us “hook into” the React state lifecycle using functional components, allowing us to manipulate the state of our functional components without needing to convert them to class components.\n\n\n\nReact introduced hooks back in version 16.8 and has been adding more ever since. Some are more used and popular than others, like useEffect, useState, and useContext hooks. I have no doubt that you’ve reached for those if you work with React.\n\n\n\nBut what I’m interested in are the lesser-known React hooks. While all React hooks are interesting in their own way, there are five of them that I really want to show you because they may not pop up in your everyday work — or maybe they do and knowing them gives you some extra superpowers.\n\n\n\n\n\n\n\nTable of Contents\n\nuseReducer\nuseRef\nuseImperativeHandle\nuseMemo\nuseCallback\nFinal thoughts\n\n\nuseReducer\n\n\nThe useReducer hook is a state management tool like other hooks. Specifically, it is an alternative to the useState hook.\n\n\n\nIf you use the useReducer hook to change two or more states (or actions), you won’t have to manipulate those states individually. The hook keeps track of all the states and collectively manages them. In other words: it manages and re-renders state changes. Unlike the useState hook, useReducer is easier when it comes to handling many states in complex projects.\n\n\nUse cases\n\n\nuseReducer can help reduce the complexity of working with multiple states. Use it when you find yourself needing to track multiple states collectively, as it allows you to treat state management and the rendering logic of a component as separate concerns.\n\n\nSyntax\n\n\nuseReducer accepts three arguments, one of which is optional:\n\n\n\na reducer functioninitialStatean init function (optional)\n\n\n\nconst [state, dispatch] = useReducer(reducer, initialState)\nconst [state, dispatch] = useReducer(reducer, initialState initFunction) // in the case where you initialize with the optional 3rd argument\n\n\nExample\n\n\nThe following example is an interface that contains a text input, counter, and button. Interacting with each element updates the state. Notice how useReducer allows us to define multiple cases at once rather than setting them up individually.\n\n\n\nimport { useReducer } from 'react';\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'DECREMENT':\n      return { ...state, count: state.count - 1 };\n    case 'USER_INPUT':\n      return { ...state, userInput: action.payload };\n    case 'TOGGLE_COLOR':\n      return { ...state, color: !state.color };\n    default:\n      throw new Error();\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, { count: 0, userInput: '', color: false })\n\n  return (\n    <main className=\"App, App-header\" style={{ color: state.color ? '#000' : '#FF07FF'}}>\n      <input style={{margin: '2rem'}}\n        type=\"text\"\n        value={state.userInput}\n        onChange={(e) => dispatch({ type: 'USER_INPUT', payload: e.target.value })}\n      />\n      <br /><br />\n      <p style={{margin: '2rem'}} >{state.count}</p>\n      <section style={{margin: '2rem'}}>\n        <button  onClick={(() => dispatch({ type: 'DECREMENT' }))}>-</button>\n        <button onClick={(() => dispatch({ type: 'INCREMENT' }))}>+</button>\n        <button onClick={(() => dispatch({ type: 'TOGGLE_COLOR' }))}>Color</button>\n      </section>\n      <br /><br />\n      <p style={{margin: '2rem'}}>{state.userInput}</p>\n    </main>\n  );\n}\nexport default App;\n\n\n\n\n\n\n\nFrom the code above, noticed how we are able to easily managed several states in the reducer (switch-case), this shows the benefit of the useReducer. This is the power it gives when working in complex applications with multiple states.\n\n\nuseRef\n\n\nThe useRef hook is used to create refs on elements in order to access the DOM. But more than that, it returns an object with a .current property that can be used throughout a component’s entire lifecycle, allowing data to persist without causing a re-render. So, the useRef value stays the same between renders; updating the reference does not trigger a re-render.\n\n\nUse cases\n\n\nReach for the useRef hook when you want to:\n\n\n\nManipulate the DOM with stored mutable information.Access information from child components (nested elements).Set focus on an element.\n\n\n\nIt’s most useful when storing mutatable data in your app without causing a re-render.\n\n\nSyntax\n\n\nuseRef only accepts one argument, which is the initial value.\n\n\n\nconst newRefComponent = useRef(initialValue);\n\n\nExample\n\n\nHere I used the useRef and useState hook to show the amount of times an application renders an updated state when typing in a text input.\n\n\n\nimport './App.css'\n\nfunction App() {\n  const [anyInput, setAnyInput] = useState(\" \");\n  const showRender = useRef(0);\n  const randomInput = useRef();\n  const toggleChange = (e) => {\n    setAnyInput (e.target.value);\n    showRender.current++;\n  \n  }\n  const focusRandomInput = () => {\n    randomInput.current.focus();\n  }\n\n  return (\n    <div className=\"App\">\n      <input className=\"TextBox\" \n        ref ={randomInput} type=\"text\" value={anyInput} onChange={toggleChange}\n      />\n      <h3>Amount Of Renders: {showRender.current}</h3>\n      <button onClick={focusRandomInput}>Click To Focus On Input </button>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nNotice how typing each character in the text field updates the app’s state, but never triggers a complete re-render.\n\n\n\n\n\n\nuseImperativeHandle\n\n\nYou know how a child component has access to call functions passed down to them from the parent component? Parents pass those down via props, but that transfer is “unidirectional” in the sense that the parent is unable to call a function that’s in the child.\n\n\n\nWell, useImperativeHandle makes it possible for a parent to access a child component’s functions.\n\n\n\nHow does that work?\n\n\n\nA function is defined in the child component.A ref is added in the parent.We use forwardRef, allowing the ref that was defined to be passed to the child.useImperativeHandle exposes the child’s functions via the ref.\n\n\nUse cases\n\n\nuseImperativeHandle works well when you want a parent component to be affected by changes in the child. So, things like a changed focus, incrementing and decrementing, and blurred elements may be situations where you find yourself reaching for this hook so the parent can be updated accordingly.\n\n\nSyntax\n\n\nuseImperativeHandle (ref, createHandle, [dependencies])\n\n\nExample\n\n\nIn this example, we have two buttons, one that’s in a parent component and one that’s in a child. Clicking on the parent button retrieves data from the child, allowing us to manipulate the parent component. It’s set up so that clicking the child button does not pass anything from the parent component to the child to help illustrate how we are passing things in the opposite direction.\n\n\n\n// Parent component\nimport React, { useRef } from \"react\";\nimport ChildComponent from \"./childComponent\";\nimport './App.css';\n\nfunction useImperativeHandle() {\n  const controlRef = useRef(null);\n  return (\n    onClick={\n      () => {\n        controlRef.current.controlPrint();\n      }\n    }\n    >\n    Parent Box\n  );\n}\nexport default useImperativeHandle;\n\n\n\n// Child component\nimport React, { forwardRef, useImperativeHandle, useState } from \"react\";\n\nconst ChildComponent = forwardRef((props, ref) => {\n  const [print, setPrint] = useState(false);\n  useImperativeHandle(ref, () => ({\n    controlPrint() \n    { setPrint(!print); },\n  })\n  );\n\n  return (\n    <>\n    Child Box\n    { print && I am from the child component }\n  );\n});\n\nexport default ChildComponent;\n\n\nOutput\n\n\n\n\n\nuseMemo\n\n\nuseMemo is one of the least-used but most interesting React hooks. It can improve performance and decrease latency, particularly on large computations in your app. How so? Every time a component’s state updates and components re-render, the useMemo hook prevents React from having to recalculate values.\n\n\n\nYou see, functions respond to state changes. The useMemo hook takes a function and returns the return value of that function. It caches that value to prevent spending additional effort re-rendering it, then returns it when one of the dependencies has changed.\n\n\n\nThis process is called memoization and it’s what helps to boost performance by remembering the value from a previous request so it can be used again without repeating all that math.\n\n\nUse cases\n\n\nThe best use cases are going to be any time you’re working with heavy calculations where you want to store the value and use it on subsequent state changes. It can be a nice performance win, but using it too much can have the exact opposite effect by hogging your app’s memory.\n\n\nSyntax\n\n\nuseMemo( () => \n  { // Code goes here },\n  []\n)\n\n\nExample\n\n\nWhen clicking the button, this mini-program indicates when a number is even or odd, then squares the value. I added lots of zeros to the loop to increase its computation power. It returns the value in spilt seconds and still works well due to the useMemo hook.\n\n\n\n// UseMemo.js\nimport React, { useState, useMemo } from 'react'\n\nfunction Memo() {\n  const [memoOne, setMemoOne] = useState(0);\n  const incrementMemoOne = () => { setMemoOne(memoOne + 1) }\n  const isEven = useMemo(() => { \n    let i = 0 while (i < 2000000000) i++ return memoOne % 2 === 0\n  },\n  [memoOne]);\n  \n  const square = useMemo(()=> { \n    console.log(\"squared the number\"); for(var i=0; i < 200000000; i++);\n    return memoOne * memoOne;\n  },\n  [memoOne]);\n\n  return (\n    Memo One - \n    { memoOne }\n    { isEven ? 'Even' : 'Odd' } { square } \n  );\n}\nexport default Memo\n\n\nOutput\n\n\n\n\n\n\nuseMemo is a little like the useCallback hook, but the difference is that useMemo can store a memorized value from a function, where useCallback stores the memorized function itself.\n\n\nuseCallback\n\n\nThe useCallback hook is another interesting one and the last section was sort of a spoiler alert for what it does.\n\n\n\nAs we just saw, useCallback works like the useMemo hook in that they both use memoization to cache something for later use. While useMemo stores a function’s calculation as a cached value, useCallback stores and returns a function.\n\n\nUse cases\n\n\nLike useMemo, useCallback is a nice performance optimization in that it stores and returns a memoized callback and any of its dependencies without a re-render.\n\n\nSyntax\n\n\nconst getMemoizedCallback = useCallback (\n  () => { doSomething () }, []\n);\n\n\nExample\n\n\n\n{ useCallback, useState } from \"react\";\nimport CallbackChild from \"./UseCallback-Child\";\nimport \"./App.css\"\n\nexport default function App() {\n  const [toggle, setToggle] = useState(false);\n  const [data, setData] = useState(\"I am a data that would not change at every render, thanks to the useCallback\");\n  const returnFunction = useCallback(\n    (name) => \n    { return data + name; }, [data]\n  );\n  return (\n    onClick={() => {\n      setToggle(!toggle);\n    }}\n    >\n    {\" \"}\n\n    // Click To Toggle\n    { toggle && h1. Toggling me no longer affects any function } \n  ); \n}\n\n\n\n// The Child component\nimport React, { useEffect } from \"react\";\n\nfunction CallbackChild(\n  { returnFunction }\n) {\n  useEffect(() => \n    { console.log(\"FUNCTION WAS CALLED\"); },\n    [returnFunction]);\n  return { returnFunction(\" Hook!\") };\n}\nexport default CallbackChild;\n\n\nOutput\n\n\n\n\n\nFinal thoughts\n\n\nThere we go! We just looked at five super handy React hooks that I think often go overlooked. As with many roundups like this, we’re merely scratching the surface of these hooks. They each have their own nuances and considerations to take into account when you use them. But hopefully you have a nice high-level idea of what they are and when they might be a better fit than another hook you might reach for more often.\n\n\n\nThe best way to fully understand them is by practice. So I encourage you to practice using these hooks in your application for better understanding. For that, you can get way more in depth by checking out the following resources:\n\n\n\nIntro to React Hooks (Kingsley Silas)Hooks at a Glance (React documentation)Hooks Cheatsheet (Ohans Emmanuel)The Circle of a React Lifecycle (Kingsley Silas)Hooks of React Router (Agney Menon)Testing React Hooks With Enzyme and React Testing Library (Kingsley Silas)\n\nReact Hooks: The Deep Cuts originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366770",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-13T13:34:08.000Z",
      "date_modified": "2022-07-13T13:34:08.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366896",
      "url": "https://css-tricks.com/in-praise-of-shadows/",
      "title": "In Praise of Shadows",
      "summary": "Our dear friend Robin has a new essay called In Praise of Shadows. Now, before you hop over there looking for nuggets on CSS box shadows, text shadows, and shadow filters… this is not that. It’s an essay …\n\nIn Praise of Shadows originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>Our dear friend Robin has a new essay called <em><a href=\"https://www.robinrendle.com/essays/in-praise-of-shadows/\" rel=\"noopener\">In Praise of Shadows</a></em>. Now, before you hop over there looking for nuggets on CSS box shadows, text shadows, and shadow filters&#8230; this is <em>not that</em>. It&#8217;s an essay on photography and what Robin has learned about handing shadows with a camera.</p>\n\n\n\n<p>So, why share this? Because it&#8217;s cool as heck that he made an article directed page dedicated to one essay. And you&#8217;ll learn a lot about CSS if you crack open DevTools on it:</p>\n\n\n\n<span id=\"more-366896\"></span>\n\n\n\n<ul><li><strong>Centering techniques.</strong> Notice how CSS Grid is used on the <code>&lt;body&gt;</code> simply to <a href=\"https://css-tricks.com/centering-css-complete-guide/\">center the pamphlet</a>. Then Robin reaches for it again on each <code>.frame</code> of the essay to do the same thing with the content.</li><li><strong>&#8220;Faux&#8221; background images.</strong> Robin could have made a lot of work for himself by creating a CSS class for each <code>.frame</code> to get the background images. Instead, he uses <code>object-fit: cover</code> on inlined HTML <code>&lt;img&gt;</code>s to maintain the aspect ratio while filling the <code>.frame</code> container. (He&#8217;s actually <a href=\"https://css-tricks.com/on-object-fit-and-object-position/\">written about this</a> before.) That sure saves a lot of CSS&#8217;ing, but it also allows him to use alt text if needed. I sorta wonder if a <code>&lt;figure&gt;</code>/<code>&lt;figcaption&gt;</code> structure could&#8217;ve worked here instead but I doubt it would provide much additional benefit for what&#8217;s going on.</li><li><strong>Stacking contexts.</strong> Another perk of those faux background images? They use absolute positioning which creates a stacking context, allowing Robin to set a <code>z-index: 0</code> on the images. That way, the text stacks directly on top with <code>z-index: 1</code>. Again, CSS Grid is handling all the centering so things are nicely aligned.</li><li><strong>Scroll snapping.</strong> I always <em>love</em> it when I see CSS scroll snapping in the wild. Robin made a nice choice to use it here, as it really lends to the whole page-turning experience while scrolling through frames. Horizontal scrolling can be maddening, but also extremely elegant when executed well as it is here in how it enhances the narrow-column design. If you want a nice explanation of how it all works, Robin has also <a href=\"https://css-tricks.com/how-to-make-a-css-only-carousel/\">written about horizontal scroll snapping</a>.</li></ul>\n\n\n\n<p>If nothing else, Robin is an excellent writer and it&#8217;s worth reading anything he publishes, CSS and beyond.</p>\n<p><a href=\"https://www.robinrendle.com/essays/in-praise-of-shadows/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/in-praise-of-shadows/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/in-praise-of-shadows/\">In Praise of Shadows</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Our dear friend Robin has a new essay called In Praise of Shadows. Now, before you hop over there looking for nuggets on CSS box shadows, text shadows, and shadow filters… this is not that. It’s an essay on photography and what Robin has learned about handing shadows with a camera.\n\n\n\nSo, why share this? Because it’s cool as heck that he made an article directed page dedicated to one essay. And you’ll learn a lot about CSS if you crack open DevTools on it:\n\n\n\n\n\n\n\nCentering techniques. Notice how CSS Grid is used on the <body> simply to center the pamphlet. Then Robin reaches for it again on each .frame of the essay to do the same thing with the content.“Faux” background images. Robin could have made a lot of work for himself by creating a CSS class for each .frame to get the background images. Instead, he uses object-fit: cover on inlined HTML <img>s to maintain the aspect ratio while filling the .frame container. (He’s actually written about this before.) That sure saves a lot of CSS’ing, but it also allows him to use alt text if needed. I sorta wonder if a <figure>/<figcaption> structure could’ve worked here instead but I doubt it would provide much additional benefit for what’s going on.Stacking contexts. Another perk of those faux background images? They use absolute positioning which creates a stacking context, allowing Robin to set a z-index: 0 on the images. That way, the text stacks directly on top with z-index: 1. Again, CSS Grid is handling all the centering so things are nicely aligned.Scroll snapping. I always love it when I see CSS scroll snapping in the wild. Robin made a nice choice to use it here, as it really lends to the whole page-turning experience while scrolling through frames. Horizontal scrolling can be maddening, but also extremely elegant when executed well as it is here in how it enhances the narrow-column design. If you want a nice explanation of how it all works, Robin has also written about horizontal scroll snapping.\n\n\n\nIf nothing else, Robin is an excellent writer and it’s worth reading anything he publishes, CSS and beyond.\nTo Shared Link — Permalink on CSS-Tricks\nIn Praise of Shadows originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366896",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-12T17:08:49.000Z",
      "date_modified": "2022-07-12T17:08:49.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366609",
      "url": "https://css-tricks.com/technical-writing-for-developers/",
      "title": "Technical Writing for Developers",
      "summary": "HTML, CSS, JavaScript, Python, PHP, C++, Dart — there are so many programming languages out there and you may even be totally fluent in several of them! But as we aim to write more and better code, the way we …\n\nTechnical Writing for Developers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "content_html": "<p>HTML, CSS, JavaScript, Python, PHP, C++, Dart — there are so many programming languages out there and you may even be totally fluent in several of them! But as we aim to write more and better code, the way we write and communicate in everyday language becomes more and more important… and perhaps even overlooked.</p>\n\n\n\n<p>The way we write about and around code is arguably as important as the code itself. And despite where you fall on that line, we can all agree that our words have the potential to both help and hurt code&#8217;s effectiveness.</p>\n\n\n\n<p>In this article, I want to outline how these two seemingly distinct fields — programming and writing — can come together and take our developer skills to the next level.</p>\n\n\n\n<span id=\"more-366609\"></span>\n\n\n\n<p>Wait, technical writing? Yes, that&#8217;s exactly what I mean. I truly believe we are all writers in one sense or another. And I&#8217;m here to give you a primer with writing tips, advice, and examples for how it can make you both a better developer and communicator.</p>\n\n\n\n<div class=\"wp-container-28 wp-block-group ticss-6a8876d5\"><div class=\"wp-block-group__inner-container\"><h3 id=\"table-of-contents\">Table of contents</h3>\n\n<ul class=\"simpletoc-list\"   >\n<li>\n<a  href=\"#table-of-contents\">Table of contents</a></li><li>\n<a  href=\"#technical-writing-is-everywhere\">Technical writing is everywhere</a></li><li>\n<a  href=\"#what-is-good-grammar\">What is good grammar?</a></li><li>\n<a  href=\"#writing-code-comments\">Writing code comments</a></li><li>\n<a  href=\"#writing-pull-requestsnbsp\">Writing pull requests&nbsp;</a></li><li>\n<a  href=\"#reporting-bugs\">Reporting bugs</a></li><li>\n<a  href=\"#communicating-with-clients\">Communicating with clients</a></li><li>\n<a  href=\"#writing-microcopy\">Writing microcopy</a></li><li>\n<a  href=\"#writing-accessible-markup\">Writing accessible markup</a></li><li>\n<a  href=\"#conclusion\">Conclusion</a></li><li>\n<a  href=\"#technical-writing-resources\">Technical writing resources</a></li></ul></div></div>\n\n\n<h3 id=\"technical-writing-is-everywhere\">Technical writing is everywhere</h3>\n\n\n<p>Last year, the team behind the popular Mac Git client, Tower, <a href=\"https://www.git-tower.com/blog/mac-dev-survey-2021-results\" rel=\"noopener\">polled more than 4,000 developers</a> and found that nearly 50% of them spent between 3-6 hours a day writing code.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"763\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Screen-Shot-2022-05-13-at-7.51.37-AM.png?resize=1600%2C763&#038;ssl=1\" alt=\"Bar chart showing actual programming time per day.\" class=\"wp-image-366610\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Screen-Shot-2022-05-13-at-7.51.37-AM.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Screen-Shot-2022-05-13-at-7.51.37-AM.png?resize=300%2C143&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Screen-Shot-2022-05-13-at-7.51.37-AM.png?resize=1024%2C488&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Screen-Shot-2022-05-13-at-7.51.37-AM.png?resize=768%2C366&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Screen-Shot-2022-05-13-at-7.51.37-AM.png?resize=1536%2C732&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And yes, that&#8217;s one survey polling a pretty niche group, but I imagine many of us fall somewhere in that range. Whatever the case, a developer isn’t writing code 24/7, because as this poll suggests, we’re spending plenty of time doing other things.</p>\n\n\n\n<p>That might include:</p>\n\n\n\n<ul><li>demoing a new feature,</li><li>documenting that new feature,</li><li>updating a work ticket related to that new feature, or</li><li>backlogging work to support that new feature.</li></ul>\n\n\n\n<p>Of course, there&#8217;s always time for bathroom breaks and Wordle too.</p>\n\n\n\n<p>Anyway, most of the things we typically do involve communicating with people like your team, colleagues, clients, users, and other developers.</p>\n\n\n\n<p>So we do spend a good chunk of our time communicating with humans through <em>words</em> in addition to the communication we have with computers through <em>code</em>. Words are written language. And if we wrote our words better, we’d communicate better. When we communicate better, we’re more likely to get what we want.</p>\n\n\n\n<p>That’s Technical Writing 101.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"900\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Slide-16_9-1-1-1.png?resize=1600%2C900&#038;ssl=1\" alt=\"Venn diagram showing the overlap between technical writing and coding.\" class=\"wp-image-366612\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Slide-16_9-1-1-1.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Slide-16_9-1-1-1.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Slide-16_9-1-1-1.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Slide-16_9-1-1-1.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/Slide-16_9-1-1-1.png?resize=1536%2C864&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And it doesn’t even end here.. Some programmers also like to make their own products, which means they need to make marketing part of their job. Technical writing plays a huge role in that too. So, yeah. I think it’s pretty fair to say that technical writing is <em>indeed</em> everywhere.</p>\n\n\n<h3 id=\"what-is-good-grammar\">What is good grammar?</h3>\n\n\n<p>With so many programming languages out there, the last thing we want is to learn another one.</p>\n\n\n\n<p><dfn id=\"grammar\">Grammar</dfn> is an integral part of English, and it unlocks the full potential of communication. It makes us more formal, professional, and coherent.</p>\n\n\n\n<p>Let me give you a quick rundown on language.</p>\n\n\n<h4 id=\"the-english-syntax\">The English syntax</h4>\n\n\n<p>Just like programming languages, English has a well-defined syntax, and it starts with words.</p>\n\n\n\n<p>Words are the building blocks of English, and they fall into eight buckets:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1130\" height=\"138\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/sentence-structure.jpg?resize=1130%2C138&#038;ssl=1\" alt=\"Color coded sentence showing the English syntax.\" class=\"wp-image-366671\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/sentence-structure.jpg?w=1130&amp;ssl=1 1130w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/sentence-structure.jpg?resize=300%2C37&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/sentence-structure.jpg?resize=1024%2C125&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/sentence-structure.jpg?resize=768%2C94&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-container-33 wp-block-columns ticss-0b72bfdf\">\n<div class=\"wp-container-30 wp-block-column\">\n<div class=\"wp-container-29 wp-block-group ticss-24ba8631\"><div class=\"wp-block-group__inner-container\"><h5 id=\"nouns\">Nouns</h5>\n\n\n<p>These can be names of people, animals, places, concepts, and objects.<br></p>\n\n\n\n<p><strong>Example</strong>:<br><em>CSS</em> is one of the core languages of front-end development.</p>\n</div></div>\n</div>\n\n\n\n<div class=\"wp-container-32 wp-block-column\">\n<div class=\"wp-container-31 wp-block-group ticss-66881a59\"><div class=\"wp-block-group__inner-container\"><h5 id=\"verbs\">Verbs</h5>\n\n\n<p>Verbs convey action. Even &#8220;is&#8221; can be considered an action.</p>\n\n\n\n<p><strong>Example:</strong><br>Marcia <em>codes</em> in the morning and <em>answers</em> emails in the afternoon.</p>\n</div></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-container-38 wp-block-columns ticss-e4f8b41b\">\n<div class=\"wp-container-35 wp-block-column\">\n<div class=\"wp-container-34 wp-block-group ticss-fffde8ac\"><div class=\"wp-block-group__inner-container\"><h5 id=\"adjectives\">Adjectives</h5>\n\n\n<p>Adjectives are how we describe nouns. They&#8217;re like meta that adds more detail to a sentence to paint a vivid picture.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ul><li>CSS is an <em>elegant</em> and <em>poetic</em> language.</li><li>The HTML for tables is <em>complex</em> and <em>cumbersome</em>.</li><li>The Box Model is <em>important</em> to understand CSS.</li></ul>\n</div></div>\n</div>\n\n\n\n<div class=\"wp-container-37 wp-block-column\">\n<div class=\"wp-container-36 wp-block-group ticss-1c86492d\"><div class=\"wp-block-group__inner-container\"><h5 id=\"prepositions\">Prepositions</h5>\n\n\n<p>Prepositions create a relationship between a noun and other words, often indicating direction, time, location, and space.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ul><li>Did you commit your work <em>to</em> the repo?</li><li>What is the best approach <em>for</em> this component?</li><li>We conducted interviews <em>with</em> real users.</li></ul>\n</div></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-container-43 wp-block-columns ticss-369ad070\">\n<div class=\"wp-container-40 wp-block-column\">\n<div class=\"wp-container-39 wp-block-group ticss-1facf0ac\"><div class=\"wp-block-group__inner-container\"><h5 id=\"adverbs\">Adverbs</h5>\n\n\n<p>Sometimes actions need to be more specific, so we use adverbs such as “runs <em>fast</em>” and “compiles <em>slowly</em>.” They often end in &#8220;-ly.&#8221;</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ul><li>This is <em>easily</em> the best idea of them all.</li><li>Chip waited <em>patiently</em> for Dale&#8217;s feedback.</li><li>The team worked <em>diligently</em> on the project.</li></ul>\n</div></div>\n</div>\n\n\n\n<div class=\"wp-container-42 wp-block-column\">\n<div class=\"wp-container-41 wp-block-group ticss-416e3630\"><div class=\"wp-block-group__inner-container\"><h5 id=\"conjunctions\">Conjunctions</h5>\n\n\n<p>Conjunctions connect phrases in a sentence. <a href=\"https://schoolhouserock.fandom.com/wiki/Conjunction_Junction\" rel=\"noopener\">Remember this classic song</a> from the show <em>School House Rocks</em>?</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ul><li>CSS for styling <em>while</em> HTML is for markup.</li><li>Yes, I write code, <em>but </em>I also work on design.</li><li>That fixes the bug. <em>Yet</em> it introduced a new one.</li></ul>\n</div></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-container-48 wp-block-columns ticss-d349e3b1\">\n<div class=\"wp-container-45 wp-block-column\">\n<div class=\"wp-container-44 wp-block-group ticss-dd0482d7\"><div class=\"wp-block-group__inner-container\"><h5 id=\"transitions\">Transitions</h5>\n\n\n<p>Paragraphs are made of sentences that are connected to each other using transitions.</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ul><li>There are many programming languages. <em>However</em>, only a few are used in the web industry.</li><li><em>First</em>, clone the directory.</li><li>I like this approach but <em>on the other hand</em>, I know another one.</li></ul>\n</div></div>\n</div>\n\n\n\n<div class=\"wp-container-47 wp-block-column\">\n<div class=\"wp-container-46 wp-block-group ticss-86b4bb41\"><div class=\"wp-block-group__inner-container\"><h5 id=\"pronouns\">Pronouns</h5>\n\n\n<p>When nouns become repetitive, we replace them with pronouns such as: “he,&#8221; “it,&#8221; and “that.”</p>\n\n\n\n<p><strong>Examples:</strong></p>\n\n\n\n<ul><li>CSS is a stylesheet language. We use <em>it</em> to style websites.</li><li>Tony loves to code and <em>he</em> practices every day.</li><li>Our customers are tech-savvy because <em>they</em> know code.</li></ul>\n</div></div>\n</div>\n</div>\n\n\n\n<p>Think of these like <abbr>UI</abbr> components: they are modular pieces you can move around to construct a complete and robust sentence, the same way you might piece together a complete and robust <abbr>UI</abbr>. Do all of the components need to be there all of the time? Certainly not! Assemble a sentence with the pieces you need to complete the experience, just as you would with an interface.</p>\n\n\n<h4 id=\"voice-and-tone\">Voice and tone</h4>\n\n\n<p>Vocabulary, punctuation, sentence structure, and word choice. These are all the ingredients of English. We use them to share ideas, communicate with our friends and family, and send emails to our coworkers.</p>\n\n\n\n<p>But it&#8217;s crucial to consider the <em>sound</em> of our messages. It&#8217;s amazing how one exclamation point can completely shift the tone of a message:</p>\n\n\n\n<ol><li>I like programming.</li><li>I <em>like</em> programming! :)</li></ol>\n\n\n\n<p>It&#8217;s easy to confuse voice for tone, and vice versa.</p>\n\n\n\n<p><dfn id=\"voice\"><strong>Voice</strong></dfn> is what concerns our choice of words, which depends on context. For example, a tutorial for beginners is more likely to use slang and informal language to convey a friendly voice, whereas documentation might be written in a formal, serious, and professional manner in an effort to get straight to the point.</p>\n\n\n\n<p>The same message, written in two different voices:</p>\n\n\n\n<ul><li><strong>Fun: </strong>“Expand your social network and stay updated on what’s trending now.”</li><li><strong>Serious: </strong>“Find jobs on one of the largest social networking apps and online jobs market.”</li></ul>\n\n\n\n<p>It&#8217;s not unusual to accidentally write messages that come across as condescending, offensive, and unprofessional. This is where <strong><dfn id=\"tone\">tone</dfn></strong> comes into play. <a href=\"https://css-tricks.com/read-your-website/\">Read your messages out loud</a>, get other people to read them for you, and experiment with your punctuation and sentence structure. That&#8217;s how you hone your tone.</p>\n\n\n\n<p>Here&#8217;s another way to think of it: your voice never changes, but your tone does. Your voice is akin to who you are as a person, whereas tone is how you respond in a given situation.</p>\n\n\n<h4 id=\"active-and-passive-voice\">Active and passive voice</h4>\n\n\n<p>A sentence always contains an actor, a verb, and a target. The order in which these come determines if the sentence is written in an active or passive voice.</p>\n\n\n\n<p>The actor comes first in an <strong><dfn id=\"active-voice\">active voice</dfn></strong>. For example: “CSS paints the background.”</p>\n\n\n\n<p>Sentences that use an active voice are more straightforward than their counterparts. They&#8217;re clearer, shorter, and more understandable — perfect for a more professional voice that gets straight to the point.</p>\n\n\n\n<p>With a <strong><dfn id=\"passive-voice\">passive voice</dfn></strong>, the actor comes last. (See what I did there?) That means our actor — CSS in this case — comes at the end like this: “The background is painted by CSS.”</p>\n\n\n\n<p>Readers usually convert a passive voice to an active voice in their heads, resulting in more processing time. If you&#8217;ve ever heard that writing in an active voice is better, this is usually the reason why. Tech writers prefer the active voice most of the time, with very few exceptions such as citing research: “It has been suggested that …”</p>\n\n\n\n<p>But that doesn&#8217;t mean you should always strive for an active voice. Switching from one to the other — even in the same paragraph — can make your content flow more seamlessly from one sentence to another if used effectively.</p>\n\n\n<h4 id=\"avoiding-mistakes\">Avoiding mistakes</h4>\n\n\n<p>Grammar is all about the structure and correctness of language, and there&#8217;s nothing better to achieve that than a quick proofreading of your document. It&#8217;s very important to rid your writings of spelling mistakes, grammar issues, and semantic imperfections.</p>\n\n\n\n<p>At the end of this article, I&#8217;ll show you the invaluable tools that professionals use to avoid writing mistakes. Obviously, there are built-in spell checkers in just about everything these days; our code editors even have spell-checking and linting plugins to help prevent mistakes.&nbsp;</p>\n\n\n\n<p>But if you&#8217;re looking for a one-stop tool for all-things grammar, <a href=\"https://www.grammarly.com/\" rel=\"noopener\">Grammarly</a> is one of the most widely-used tools. I&#8217;m not getting a kickback for that or anything. It&#8217;s just a really great tool that many editors and writers use to write clean and clear content — similar to how you might use Emmet, eslint, or any other linter to write clean and clear code.</p>\n\n\n<h3 id=\"writing-code-comments\">Writing code comments</h3>\n\n\n<p>The things we write for other developers can have a big impact on the overall quality of our work, whether it&#8217;s what we write in the code, how we explain the code, or how we give feedback on a piece of code.</p>\n\n\n\n<p>It’s interesting that every programming language comes with a standard set of features to write a comment. They should explain what the code is doing. By that, I don’t mean vague comments like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">red *= 1.2 // Multiply `red` by 1.2 and re-assign it</code></pre>\n\n\n\n<p>Instead, use comments that provide more information:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">red *= 1.2 // Apply a 'reddish' effect to the image</code></pre>\n\n\n\n<p>It’s all about context. “What kind of program am I building?” is exactly the kind of question you should be asking yourself.</p>\n\n\n<h4 id=\"comments-should-add-value\">Comments should add value</h4>\n\n\n<p>Before we look at what makes a &#8220;good&#8221; code comment, here are two examples of lazy comments:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const age = 32 // Initialize `age` to 32</code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">filter: blur(32px); /* Create a blur effect with a 32px radius */</code></pre>\n\n\n\n<p>Remember that the purpose of a comment is to add value to a piece of code, not to repeat it. If you can’t do that, you’re better off just leaving the code as-is. What makes these examples &#8220;lazy&#8221; is that they merely restate what the code is obviously doing. In this case, the comments are redundant because they tell us what we already know — they aren&#8217;t adding value!</p>\n\n\n<h4 id=\"comments-should-reflect-the-current-code\">Comments should reflect the current code</h4>\n\n\n<p>Out-of-date comments are no rare sight in large projects; dare I say in <em>most</em> projects.</p>\n\n\n\n<p>Let’s imagine David, a programmer and an all-around cool guy to hang out with. David wants to sort a list of strings alphabetically from A to Z, so he does the obvious in JavaScript:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cities = sortWords(cities) // sort cities from A to Z</code></pre>\n\n\n\n<p>David then realizes that sortWords() actually sorts lists from Z to A. That’s not a problem, as he can simply reverse the output:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cities = sortWords(cities) // sort cities from A to Z\ncities = reverse(cities)</code></pre>\n\n\n\n<p>Unfortunately, David didn’t update his code comment.</p>\n\n\n\n<p>Now imagine that I didn’t tell you this story, and all you saw was the code above. You’d naturally think that after running that second line of code, `cities` would be sorted from Z to A! This whole confusion fiasco was caused by a stale comment.</p>\n\n\n\n<p>While this might be an exaggerated example, something similar can (and often does) happen if you’re racing against a close deadline. Thankfully, this can be prevented by following one simple rule… <strong>change your comments the same time you change the code.</strong></p>\n\n\n\n<p>That’s one simple rule that will save you and your team from a lot of <a href=\"https://css-tricks.com/defining-and-dealing-with-technical-debt/\">technical debt</a>.</p>\n\n\n\n<p>Now that we know what poorly written comments look like, let&#8217;s look at some good examples.</p>\n\n\n<h4 id=\"comments-should-explain-unidiomatic-code\">Comments should explain unidiomatic code</h4>\n\n\n<p>Sometimes, the <em>natural</em> way of doing things isn’t right. Programmers might have to “break” the standards a bit, but when they do, it’s advisable to leave a little comment explaining their rationale:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\"> function addSetEntry(set, value) {    \n  /* Don't return `set.add` because it's not chainable in IE 11. */  \n  set.add(value);\n  return set;\n}</code></pre>\n\n\n\n<p>That&#8217;s helpful, right? If you were responsible for reviewing this code, you may have been tempted to correct it without that comment there explaining what&#8217;s up.</p>\n\n\n<h4 id=\"comments-can-identify-future-tasks\">Comments can identify future tasks</h4>\n\n\n<p>Another useful thing to do with comments is to admit that there’s more work to be done.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// TODO: use a more efficient algorithm\nlinearSort(ids)</code></pre>\n\n\n\n<p>This way, you can stay focused on your flow. And at a later date, you (or someone else) can come back and fix it.</p>\n\n\n<h4 id=\"comments-can-link-back-to-the-source\">Comments can link back to the source</h4>\n\n\n<p>So, you just found a solution to your problem on StackOverflow. After copy-pasting that code, it’s sometimes a good thing to keep a link to the answer that helped you out so you can come back to it for future reference.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"705\" height=\"318\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/stackoverflow-answer-link.png?resize=705%2C318&#038;ssl=1\" alt=\"Screenshot of copying a link at StackOverflow.\" class=\"wp-image-366646\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/stackoverflow-answer-link.png?w=705&amp;ssl=1 705w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/stackoverflow-answer-link.png?resize=300%2C135&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Adds handling for legacy browsers\n// https://stackoverflow.com/a/XXXXXXX</code></pre>\n\n\n\n<p>This is important because solutions can change. It’s always good to know where your code came from in case it ever breaks.</p>\n\n\n<h3 id=\"writing-pull-requestsnbsp\">Writing pull requests </h3>\n\n\n<p><strong><dfn id=\"pr\">Pull requests</dfn></strong> (<abbr>PR</abbr>s) are a fundamental aspect of any project. They sit at the heart of code reviews. And code reviews can quickly become a bottleneck in your team’s performance without good wording.</p>\n\n\n\n<p>A good <abbr>PR</abbr> description summarizes <em>what</em> change is being made and <em>why</em> it’s being made. Large projects have a pull request template, like this one adapted from a <a href=\"https://github.com/appium/appium/issues/new\" rel=\"noopener\">real example</a>:</p>\n\n\n\n<pre rel=\"Markdown \" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">## Proposed changes\nDescribe the big picture of your changes here to communicate to the maintainers why we should accept this pull request.\n\n## Types of changes\nWhat types of changes does your code introduce to Appium?\n - [ ] Bugfix (non-breaking change which fixes an issue)\n - [ ] New feature (non-breaking change which adds functionality)\n - ...\n\n## Checklist\n - [ ] I have read the CONTRIBUTING doc\n - [ ] I have signed the CLA\n - [ ] Lint and unit tests pass locally with my changes\n\n## Further comments\nIf this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did and what alternatives you considered, etc…</code></pre>\n\n\n<h4 id=\"avoid-vague-pr-titles\">Avoid vague <abbr>PR</abbr> titles</h4>\n\n\n<p>Please avoid titles that look like this:</p>\n\n\n\n<ul><li>Fix build.</li><li>Fix bug.</li><li>Add patch.</li></ul>\n\n\n\n<p>These don’t even <em>attempt</em> to describe what build, bug, or patch it is we&#8217;re dealing with. A little extra detail on what part of the build was fixed, which bug was squashed, or what patch was added can go a long way to establishing better communication and collaboration with your colleagues. It level-sets and gets folks on the same page.</p>\n\n\n\n<p><abbr>PR</abbr> titles are traditionally written in <a href=\"https://www.grammarly.com/blog/imperative-sentences/\" rel=\"noopener\">imperative tense</a>. They’re a one-line summary of the entire <abbr>PR</abbr>, and they should describe <em>what</em> is being done by the <abbr>PR</abbr>.</p>\n\n\n\n<p>Here are some good examples:</p>\n\n\n\n<ul><li>Support custom srcset attributes in NgOptimizedImage</li><li>Default image config to 75% image quality</li><li>Add explicit selectors for all built-in ControlValueAccessors</li></ul>\n\n\n<h4 id=\"avoid-long-prs\">Avoid long <abbr>PR</abbr>s</h4>\n\n\n<p>A large <abbr>PR</abbr> means a huge description, and no one wants to review hundreds or thousands of lines of code, sometimes just to end-up dismissing the whole thing!</p>\n\n\n\n<p>Instead, you could:</p>\n\n\n\n<ul><li>communicate with your team through <a href=\"https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues\" rel=\"noopener\">Issues</a>,</li><li>make a plan,</li><li>break down the problem into smaller pieces, or</li><li>work on each piece separately with its own <abbr>PR</abbr>.</li></ul>\n\n\n\n<p>Isn’t it much cleaner now?</p>\n\n\n<h4 id=\"provide-details-in-the-pr-body\">Provide details in the <abbr>PR</abbr> body</h4>\n\n\n<p>Unlike the <abbr>PR</abbr> title, the body is <em>the</em> place for all the details, including:</p>\n\n\n\n<ul><li>Why is the <abbr>PR</abbr> being done?</li><li>Why is this the best approach?</li><li>Any shortcomings to the approach, and ideas to solve them if possible</li><li>The bug or ticket number, benchmark results, etc.</li></ul>\n\n\n<h3 id=\"reporting-bugs\">Reporting bugs</h3>\n\n\n<p>Bug reports are one of the most important aspects of any project. And all great projects are built on user feedback. Usually, even after countless tests, it’s the users that find most bugs. Users are also great idealists, and sometimes they have feature ideas; please listen to them!</p>\n\n\n\n<p>For technical projects, all of this stuff is done by reporting issues. A well-written issue is easy for another developer to find and respond to.</p>\n\n\n\n<p>For example, most big projects come with <a href=\"https://github.com/angular-translate/angular-translate/blob/1114534c064eddfb77fc4243b0deb61c37f5f41f/.github/ISSUE_TEMPLATE.md\" rel=\"noopener\">a template</a>:</p>\n\n\n\n<pre rel=\"Markdown\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\"> &lt;!-- Modified from angular-translate/angular-translate -->\n ### Subject of the issue\n Describe your issue here.\n\n ### Your environment\n * version of angular-translate\n * version of angular\n * which browser and its version\n\n ### Steps to reproduce\n Tell us how to reproduce this issue.\n\n ### Expected behavior\n Tell us what should happen.\n\n ### Actual behavior\n Tell us what happens instead.</code></pre>\n\n\n<h4 id=\"gather-screenshots\">Gather screenshots</h4>\n\n\n<p>Capture the issue using your <a href=\"https://www.take-a-screenshot.org/\" rel=\"noopener\">system’s screen-shooting utility</a>.</p>\n\n\n\n<p>If it’s a screenshot of a <abbr>CLI</abbr> program, make sure that the text is clear. If it’s a <abbr>UI</abbr> program, make sure the screenshot captures the right elements and states.</p>\n\n\n\n<p>You may need to capture an actual interaction to demonstrate the issue. If that&#8217;s the case, try to <a href=\"https://css-tricks.com/makin-gifs/\">record GIFs using a screen-recording tool</a>.</p>\n\n\n<h4 id=\"how-to-reproduce-the-problem\">How to reproduce the problem</h4>\n\n\n<p>It’s much easier for programmers to solve a bug when it’s live on their computer. That’s why a good commit message should come with the steps to precisely reproduce the problem.</p>\n\n\n\n<p>Here’s an example:</p>\n\n\n\n<pre rel=\"Markdown\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">Update: you can actually reproduce this error with objects:\n\n ```html\n &lt;div *ngFor=\"let value of objs; let i = index\">\n   &lt;input [ngModel]=\"objs[i].v\" (ngModelChange)=\"setObj(i, $event)\" />\n &lt;/div>\n ```\n\n ```js\n export class OneComponent {\n   obj = {v: '0'};\n   objs = [this.obj, this.obj, this.obj, this.obj];\n ​\n  setObj(i: number, value: string) {\n     this.objs[i] = {v: value};\n  }\n }\n ```\n\n The bug is reproducible as long as the trackBy function returns the same value for any two entries in the array. So weird behavior can occur with any duplicate values.\n</code></pre>\n\n\n<h4 id=\"suggest-a-cause\">Suggest a cause</h4>\n\n\n<p>You’re the one who caught the bug, so maybe you can suggest some potential causes for why it&#8217;s there. Maybe the bug only happens after you encounter a certain event, or maybe it only happens on mobile.</p>\n\n\n\n<p>It also can’t hurt to explore the codebase, and maybe identify what’s causing the problem. Then, your Issue will be closed much quicker and you’re likely to be assigned to the related <abbr>PR</abbr>.</p>\n\n\n<h3 id=\"communicating-with-clients\">Communicating with clients</h3>\n\n\n<p>You may work as a solo freelancer, or perhaps you&#8217;re the lead developer on a small team. In either case, let&#8217;s say you&#8217;re responsible for interfacing with clients on a project.&nbsp;</p>\n\n\n\n<p>Now, the programmer stereotype is that we&#8217;re poor communicators. We&#8217;ve been known to use overly technical jargon, tell others what is and is not possible, and even get defensive when someone questions our approach.</p>\n\n\n\n<p>So, how do we mitigate that stereotype? Ask clients what they want, and always listen to their feedback. Here&#8217;s how to do that.</p>\n\n\n<h4 id=\"ask-the-right-questions\">Ask the right questions</h4>\n\n\n<p>Start by making sure that you and the client are on the same page:</p>\n\n\n\n<ul><li>Who is your target audience?</li><li>What is the goal of the site?</li><li>Who is your closest competitor and what are they doing right?</li></ul>\n\n\n\n<p>Asking questions is also a good way to write positively, particularly in situations when you disagree with a client&#8217;s feedback or decision. Asking questions forces that person to support their own claims rather than you attacking them by defending your own position:</p>\n\n\n\n<ul><li>Are you OK with that even if it comes with an additional performance cost?</li><li>Does moving the component help us better accomplish our objective?</li><li>Great, who is responsible to maintain that after launch?&nbsp;</li><li>Do you know offhand if the contrast between those two colors passes WCAG AA standards?</li></ul>\n\n\n\n<p>Questions are a lot more innocent and promote curiosity over animosity.</p>\n\n\n<h4 id=\"sell-yourself\">Sell yourself</h4>\n\n\n<p>If you&#8217;re making a pitch to a prospective client, you&#8217;re going to need to convince them to hire you. Why should the client choose you? It&#8217;s important to specify the following:</p>\n\n\n\n<ul><li>Who you are</li><li>What you do</li><li>Why you&#8217;re a good fit for the job</li><li>Links to relevant work you&#8217;ve done</li></ul>\n\n\n\n<p>And once you get the job and need to write up a contract, remember that there&#8217;s no content more intimidating than a bunch of legalese. Even though it&#8217;s written for design projects, the <a href=\"https://stuffandnonsense.co.uk/projects/contract-killer/\" rel=\"noopener\">Contract Killer</a> can be a nice starting point for writing something much friendlier.</p>\n\n\n\n<p>Your attention to detail could be the difference between you and another developer trying to win the same project. In my experience, clients will just as easily hire a develop they think they will enjoy working with than the one who is technically the most competent or experienced for the job.</p>\n\n\n<h3 id=\"writing-microcopy\">Writing microcopy</h3>\n\n\n<p><dfn id=\"microcopy\">Microcopy</dfn> is the art of writing user-friendly <abbr>UI</abbr> messages, such as errors. I&#8217;ll bet there have been times where you as a developer had to write error messages because they were put on the backburner all the way to launch time.</p>\n\n\n\n<p>That may be why we sometimes see errors like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Error: Unexpected input (Code 693)</code></pre>\n\n\n\n<p>Errors are the last thing that you want your users to deal with. But they do happen, and there’s nothing we can do about it. Here are some tips to improve your microcopy skills.</p>\n\n\n<h4 id=\"avoid-technical-jargon\">Avoid technical jargon</h4>\n\n\n<p>Most people don’t know what a server is, while 100% of programmers do. That’s why it’s not unusual to see uncommon terms written in an error message, like <abbr>API</abbr> or &#8220;timeout execution.&#8221;</p>\n\n\n\n<p>Unless you&#8217;re dealing with a technical client or user base, It&#8217;s likely that most of your users didn’t take a computer science course, and don’t know how the Internet works, and why a particular thing doesn&#8217;’t work. Hence, the error.</p>\n\n\n\n<p>Therefore, a good error message shouldn&#8217;t explain <em>why</em> something went wrong, because such explanations might require using scary technical terms. That’s why it’s very important to avoid using technical jargon.</p>\n\n\n<h4 id=\"never-blame-the-user\">Never blame the user</h4>\n\n\n<p>Imagine this: I’m trying to log into your platform. So I open my browser, visit your website, and enter my details. Then I’m told: &#8220;Your email/password is incorrect.&#8221;</p>\n\n\n\n<p>Even though it seems dramatic to think that this message is hostile, it subconsciously makes me feel stupid. Microcopy says that it’s never okay to blame the user. Try changing your message to something less finger-pointy, like this this example adapted from Mailchimp&#8217;s login: &#8220;Sorry, that email-password combination isn’t right. We can help you recover your account.&#8221;</p>\n\n\n\n<p class=\"is-style-explanation\">I’d also like to add the importance of avoiding ALL CAPS and exclamation points! Sure, they can be used to convey excitement, but in microcopy they create a sense of hostility towards the user.</p>\n\n\n<h4 id=\"dont-overwhelm-the-user\">Don’t overwhelm the user</h4>\n\n\n<p>Using humor in your microcopy is a good idea! It can lighten up the mood, and it’s an easy way to curb the negativity caused by even the worst errors.</p>\n\n\n\n<p>But if you don’t use it <em>perfectly</em>, it can come across as condescending and insulting to the user. That’s just a <em>big</em> risk to take.</p>\n\n\n\n<p><a href=\"https://styleguide.mailchimp.com/voice-and-tone/\" rel=\"noopener\">Mailchimp says it well:</a></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[D]on’t go out of your way to make a joke — forced humor can be worse than none at all. <strong>If you’re unsure, keep a straight face</strong>.</p><cite>(Emphasis mine)</cite></blockquote>\n\n\n<h3 id=\"writing-accessible-markup\">Writing accessible markup</h3>\n\n\n<p>We could easily spend an entire article about accessibility and how it relates to technical writing. Heck, accessibility is often included in content style guides, including those for <a href=\"https://docs.microsoft.com/en-us/style-guide/accessibility/writing-all-abilities\" rel=\"noopener\">Microsoft</a> and <a href=\"https://styleguide.mailchimp.com/writing-for-accessibility/\" rel=\"noopener\">Mailchimp</a>.</p>\n\n\n\n<p>You&#8217;re a developer and probably already know so much about accessibility. You may even be one of the more diligent developers that makes accessibility a core part of your workflow. Still, it&#8217;s incredible how often accessibility considerations are put on the back burner, no matter how important we all know it is to make accessible online experiences that are inclusive of all abilities.</p>\n\n\n\n<p>So, if you find yourself implementing someone else&#8217;s copywriting into your code, writing documentation for other developers, or even writing <abbr>UI</abbr> copy yourself, be mindful of some fundamental accessibility best practices, as they round out all the other advice for technical writing.</p>\n\n\n\n<p>Things like:</p>\n\n\n\n<ul><li>Using <a href=\"https://css-tricks.com/why-how-and-when-to-use-semantic-html-and-aria/\">semantic tags</a> where possible (e.g. <code>&lt;nav&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;article&gt;</code>, etc.)</li><li>Following a logical <a href=\"https://css-tricks.com/document-outline-dilemma/\">heading structure</a></li><li>Adding <a href=\"https://css-tricks.com/just-how-long-should-alt-text-be/\">alt text</a> to images</li><li>Watching for inline semantics (Mandy Michael has an <a href=\"https://css-tricks.com/html-elements-unite-the-voltron-like-powers-of-combining-elements/\">exceptional article on this</a>)</li></ul>\n\n\n\n<p>Andy Bell offers some relatively <a href=\"https://css-tricks.com/small-tweaks-can-make-huge-impact-websites-accessibility/\">small things you can do to make content more accessible</a>, and it&#8217;s worth your time checking them out. And, just for kicks,<a href=\"https://css-tricks.com/copyediting-with-semantic-html/\"> John Rhea shows off some neat editing tricks</a> that are possible when we&#8217;re working with semantic HTML elements.</p>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>Those were six ways that demonstrate how technical writing and development coincide. While the examples and advice may not be rocket science, I hope that you found them useful, whether it&#8217;s collaborating with other developers, maintaining your own work, having to write your own copy in a pinch, or even drafting a project proposal, among other things.</p>\n\n\n\n<p>The bottom line: sharpening your writing skills and putting a little extra effort into your writing can actually make you a better developer.</p>\n\n\n<h3 id=\"technical-writing-resources\">Technical writing resources</h3>\n\n\n<p>If you&#8217;re interested in technical writing:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/advice-for-technical-writing/\">Advice for Technical Writing</a> (Chris Coyier)</li><li><a href=\"https://developers.google.com/tech-writing/overview\" rel=\"noopener\">Google&#8217;s Technical Writing Guide</a></li><li><a href=\"https://about.gitlab.com/handbook/engineering/ux/technical-writing/fundamentals/\" rel=\"noopener\">Technical Writing Fundamentals</a> (GitLab)</li><li><a href=\"https://www.nngroup.com/articles/ux-writing-study-guide/\" rel=\"noopener\">UX Writing: Study Guide</a> (Nielson Norman Group)</li><li><a href=\"https://www.writethedocs.org/\" rel=\"noopener\">Write the Docs</a> (Technical writing community)</li></ul>\n\n\n\n<p>If you&#8217;re interested in copywriting:</p>\n\n\n\n<ul><li><a href=\"https://copyblogger.com/copywriting-101/\" rel=\"noopener\">Copywriting 101</a> (Copyblogger)</li><li><a href=\"https://www.ionos.com/digitalguide/online-marketing/online-sales/what-is-copywriting/\" rel=\"noopener\">What is Copywriting?</a> (Ionos)</li><li><a href=\"https://www.semrush.com/blog/seo-copywriting/\" rel=\"noopener\">SEO Copywriting</a> Guide (Semrush)</li><li><a href=\"https://www.theguardian.com/books/booksblog/2008/jan/18/copywritingisstillwriting\" rel=\"noopener\">Copywriting is Still Writin</a>g (The Guardian)</li></ul>\n\n\n\n<p>If you&#8217;re interested in microcopy:</p>\n\n\n\n<ul><li><a href=\"https://uxplanet.org/microcopy-tiny-words-with-a-huge-ux-impact-90140acc6e42?gi=9a63f9a33e8\" rel=\"noopener\">Introduction to Microcopy</a> (UX Planet)</li><li><a href=\"https://developer.apple.com/design/human-interface-guidelines/guidelines/overview/\" rel=\"noopener\">Apple’s Human Interface Guidelines</a></li><li><a href=\"https://docs.microsoft.com/en-us/style-guide/welcome/\" rel=\"noopener\">Microsoft&#8217;s Writing Style Guide</a></li><li><a href=\"https://styleguide.mailchimp.com/\" rel=\"noopener\">Mailchimp Content Style Guide</a></li></ul>\n\n\n\n<p>If you&#8217;re interested in using a professional style guide to improve your writing:</p>\n\n\n\n<ul><li><a href=\"https://www.scribbr.com/mla/formatting/\" rel=\"noopener\">MLA Writing Style Guide</a></li><li><a href=\"https://writer.com/blog/a-comprehensive-guide-to-the-ap-style-of-writing/\" rel=\"noopener\">AP Writing Style Guide</a></li><li><a href=\"https://en.m.wikipedia.org/wiki/APA_style\" rel=\"noopener\">APA Writing Style Guide</a></li><li><a href=\"https://library.menloschool.org/chicago\" rel=\"noopener\">Chicago Writing Style Guide</a></li></ul>\n\n\n\n<p>If you&#8217;re interested in writing for accessibility:</p>\n\n\n\n<ul><li><a href=\"https://piccalil.li/tutorial/improve-the-readability-of-the-content-on-your-website/\" rel=\"noopener\">Improve the readability of the content on your website</a> (Andy Bell)</li><li><a href=\"https://websitesetup.org/web-accessibility-checklist/\" rel=\"noopener\">15 Practices to Improve Your Website Accessibility</a> (Bruce Lawson)</li><li><a href=\"https://css-tricks.com/accessibility-testing-tools/\">Accessibility Testing Tools</a> (Chris Coyier)</li><li><a href=\"https://css-tricks.com/why-dont-developers-take-accessibility-seriously/\">Why Don&#8217;t Developers Tke Accessibility Seriously?</a> (Melanie Sumner)</li><li><a href=\"https://hidde.blog/naming-things-to-improve-accessibility/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-360&amp;utm_medium=email\" rel=\"noopener\">Naming things to improve accessibility</a> (Hidde de Vries)</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/technical-writing-for-developers/\">Technical Writing for Developers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "HTML, CSS, JavaScript, Python, PHP, C++, Dart — there are so many programming languages out there and you may even be totally fluent in several of them! But as we aim to write more and better code, the way we write and communicate in everyday language becomes more and more important… and perhaps even overlooked.\n\n\n\nThe way we write about and around code is arguably as important as the code itself. And despite where you fall on that line, we can all agree that our words have the potential to both help and hurt code’s effectiveness.\n\n\n\nIn this article, I want to outline how these two seemingly distinct fields — programming and writing — can come together and take our developer skills to the next level.\n\n\n\n\n\n\n\nWait, technical writing? Yes, that’s exactly what I mean. I truly believe we are all writers in one sense or another. And I’m here to give you a primer with writing tips, advice, and examples for how it can make you both a better developer and communicator.\n\n\n\nTable of contents\n\n\n\nTable of contents\nTechnical writing is everywhere\nWhat is good grammar?\nWriting code comments\nWriting pull requests \nReporting bugs\nCommunicating with clients\nWriting microcopy\nWriting accessible markup\nConclusion\nTechnical writing resources\n\n\nTechnical writing is everywhere\n\n\nLast year, the team behind the popular Mac Git client, Tower, polled more than 4,000 developers and found that nearly 50% of them spent between 3-6 hours a day writing code.\n\n\n\n\n\n\n\nAnd yes, that’s one survey polling a pretty niche group, but I imagine many of us fall somewhere in that range. Whatever the case, a developer isn’t writing code 24/7, because as this poll suggests, we’re spending plenty of time doing other things.\n\n\n\nThat might include:\n\n\n\ndemoing a new feature,documenting that new feature,updating a work ticket related to that new feature, orbacklogging work to support that new feature.\n\n\n\nOf course, there’s always time for bathroom breaks and Wordle too.\n\n\n\nAnyway, most of the things we typically do involve communicating with people like your team, colleagues, clients, users, and other developers.\n\n\n\nSo we do spend a good chunk of our time communicating with humans through words in addition to the communication we have with computers through code. Words are written language. And if we wrote our words better, we’d communicate better. When we communicate better, we’re more likely to get what we want.\n\n\n\nThat’s Technical Writing 101.\n\n\n\n\n\n\n\nAnd it doesn’t even end here.. Some programmers also like to make their own products, which means they need to make marketing part of their job. Technical writing plays a huge role in that too. So, yeah. I think it’s pretty fair to say that technical writing is indeed everywhere.\n\n\nWhat is good grammar?\n\n\nWith so many programming languages out there, the last thing we want is to learn another one.\n\n\n\nGrammar is an integral part of English, and it unlocks the full potential of communication. It makes us more formal, professional, and coherent.\n\n\n\nLet me give you a quick rundown on language.\n\n\nThe English syntax\n\n\nJust like programming languages, English has a well-defined syntax, and it starts with words.\n\n\n\nWords are the building blocks of English, and they fall into eight buckets:\n\n\n\n\n\n\n\n\n\nNouns\n\n\nThese can be names of people, animals, places, concepts, and objects.\n\n\n\nExample:CSS is one of the core languages of front-end development.\n\n\n\n\n\n\nVerbs\n\n\nVerbs convey action. Even “is” can be considered an action.\n\n\n\nExample:Marcia codes in the morning and answers emails in the afternoon.\n\n\n\n\n\n\n\n\nAdjectives\n\n\nAdjectives are how we describe nouns. They’re like meta that adds more detail to a sentence to paint a vivid picture.\n\n\n\nExamples:\n\n\n\nCSS is an elegant and poetic language.The HTML for tables is complex and cumbersome.The Box Model is important to understand CSS.\n\n\n\n\n\n\nPrepositions\n\n\nPrepositions create a relationship between a noun and other words, often indicating direction, time, location, and space.\n\n\n\nExamples:\n\n\n\nDid you commit your work to the repo?What is the best approach for this component?We conducted interviews with real users.\n\n\n\n\n\n\n\n\nAdverbs\n\n\nSometimes actions need to be more specific, so we use adverbs such as “runs fast” and “compiles slowly.” They often end in “-ly.”\n\n\n\nExamples:\n\n\n\nThis is easily the best idea of them all.Chip waited patiently for Dale’s feedback.The team worked diligently on the project.\n\n\n\n\n\n\nConjunctions\n\n\nConjunctions connect phrases in a sentence. Remember this classic song from the show School House Rocks?\n\n\n\nExamples:\n\n\n\nCSS for styling while HTML is for markup.Yes, I write code, but I also work on design.That fixes the bug. Yet it introduced a new one.\n\n\n\n\n\n\n\n\nTransitions\n\n\nParagraphs are made of sentences that are connected to each other using transitions.\n\n\n\nExamples:\n\n\n\nThere are many programming languages. However, only a few are used in the web industry.First, clone the directory.I like this approach but on the other hand, I know another one.\n\n\n\n\n\n\nPronouns\n\n\nWhen nouns become repetitive, we replace them with pronouns such as: “he,” “it,” and “that.”\n\n\n\nExamples:\n\n\n\nCSS is a stylesheet language. We use it to style websites.Tony loves to code and he practices every day.Our customers are tech-savvy because they know code.\n\n\n\n\n\n\nThink of these like UI components: they are modular pieces you can move around to construct a complete and robust sentence, the same way you might piece together a complete and robust UI. Do all of the components need to be there all of the time? Certainly not! Assemble a sentence with the pieces you need to complete the experience, just as you would with an interface.\n\n\nVoice and tone\n\n\nVocabulary, punctuation, sentence structure, and word choice. These are all the ingredients of English. We use them to share ideas, communicate with our friends and family, and send emails to our coworkers.\n\n\n\nBut it’s crucial to consider the sound of our messages. It’s amazing how one exclamation point can completely shift the tone of a message:\n\n\n\nI like programming.I like programming! :)\n\n\n\nIt’s easy to confuse voice for tone, and vice versa.\n\n\n\nVoice is what concerns our choice of words, which depends on context. For example, a tutorial for beginners is more likely to use slang and informal language to convey a friendly voice, whereas documentation might be written in a formal, serious, and professional manner in an effort to get straight to the point.\n\n\n\nThe same message, written in two different voices:\n\n\n\nFun: “Expand your social network and stay updated on what’s trending now.”Serious: “Find jobs on one of the largest social networking apps and online jobs market.”\n\n\n\nIt’s not unusual to accidentally write messages that come across as condescending, offensive, and unprofessional. This is where tone comes into play. Read your messages out loud, get other people to read them for you, and experiment with your punctuation and sentence structure. That’s how you hone your tone.\n\n\n\nHere’s another way to think of it: your voice never changes, but your tone does. Your voice is akin to who you are as a person, whereas tone is how you respond in a given situation.\n\n\nActive and passive voice\n\n\nA sentence always contains an actor, a verb, and a target. The order in which these come determines if the sentence is written in an active or passive voice.\n\n\n\nThe actor comes first in an active voice. For example: “CSS paints the background.”\n\n\n\nSentences that use an active voice are more straightforward than their counterparts. They’re clearer, shorter, and more understandable — perfect for a more professional voice that gets straight to the point.\n\n\n\nWith a passive voice, the actor comes last. (See what I did there?) That means our actor — CSS in this case — comes at the end like this: “The background is painted by CSS.”\n\n\n\nReaders usually convert a passive voice to an active voice in their heads, resulting in more processing time. If you’ve ever heard that writing in an active voice is better, this is usually the reason why. Tech writers prefer the active voice most of the time, with very few exceptions such as citing research: “It has been suggested that …”\n\n\n\nBut that doesn’t mean you should always strive for an active voice. Switching from one to the other — even in the same paragraph — can make your content flow more seamlessly from one sentence to another if used effectively.\n\n\nAvoiding mistakes\n\n\nGrammar is all about the structure and correctness of language, and there’s nothing better to achieve that than a quick proofreading of your document. It’s very important to rid your writings of spelling mistakes, grammar issues, and semantic imperfections.\n\n\n\nAt the end of this article, I’ll show you the invaluable tools that professionals use to avoid writing mistakes. Obviously, there are built-in spell checkers in just about everything these days; our code editors even have spell-checking and linting plugins to help prevent mistakes. \n\n\n\nBut if you’re looking for a one-stop tool for all-things grammar, Grammarly is one of the most widely-used tools. I’m not getting a kickback for that or anything. It’s just a really great tool that many editors and writers use to write clean and clear content — similar to how you might use Emmet, eslint, or any other linter to write clean and clear code.\n\n\nWriting code comments\n\n\nThe things we write for other developers can have a big impact on the overall quality of our work, whether it’s what we write in the code, how we explain the code, or how we give feedback on a piece of code.\n\n\n\nIt’s interesting that every programming language comes with a standard set of features to write a comment. They should explain what the code is doing. By that, I don’t mean vague comments like this:\n\n\n\nred *= 1.2 // Multiply `red` by 1.2 and re-assign it\n\n\n\nInstead, use comments that provide more information:\n\n\n\nred *= 1.2 // Apply a 'reddish' effect to the image\n\n\n\nIt’s all about context. “What kind of program am I building?” is exactly the kind of question you should be asking yourself.\n\n\nComments should add value\n\n\nBefore we look at what makes a “good” code comment, here are two examples of lazy comments:\n\n\n\nconst age = 32 // Initialize `age` to 32\n\n\n\nfilter: blur(32px); /* Create a blur effect with a 32px radius */\n\n\n\nRemember that the purpose of a comment is to add value to a piece of code, not to repeat it. If you can’t do that, you’re better off just leaving the code as-is. What makes these examples “lazy” is that they merely restate what the code is obviously doing. In this case, the comments are redundant because they tell us what we already know — they aren’t adding value!\n\n\nComments should reflect the current code\n\n\nOut-of-date comments are no rare sight in large projects; dare I say in most projects.\n\n\n\nLet’s imagine David, a programmer and an all-around cool guy to hang out with. David wants to sort a list of strings alphabetically from A to Z, so he does the obvious in JavaScript:\n\n\n\ncities = sortWords(cities) // sort cities from A to Z\n\n\n\nDavid then realizes that sortWords() actually sorts lists from Z to A. That’s not a problem, as he can simply reverse the output:\n\n\n\ncities = sortWords(cities) // sort cities from A to Z\ncities = reverse(cities)\n\n\n\nUnfortunately, David didn’t update his code comment.\n\n\n\nNow imagine that I didn’t tell you this story, and all you saw was the code above. You’d naturally think that after running that second line of code, `cities` would be sorted from Z to A! This whole confusion fiasco was caused by a stale comment.\n\n\n\nWhile this might be an exaggerated example, something similar can (and often does) happen if you’re racing against a close deadline. Thankfully, this can be prevented by following one simple rule… change your comments the same time you change the code.\n\n\n\nThat’s one simple rule that will save you and your team from a lot of technical debt.\n\n\n\nNow that we know what poorly written comments look like, let’s look at some good examples.\n\n\nComments should explain unidiomatic code\n\n\nSometimes, the natural way of doing things isn’t right. Programmers might have to “break” the standards a bit, but when they do, it’s advisable to leave a little comment explaining their rationale:\n\n\n\n function addSetEntry(set, value) {    \n  /* Don't return `set.add` because it's not chainable in IE 11. */  \n  set.add(value);\n  return set;\n}\n\n\n\nThat’s helpful, right? If you were responsible for reviewing this code, you may have been tempted to correct it without that comment there explaining what’s up.\n\n\nComments can identify future tasks\n\n\nAnother useful thing to do with comments is to admit that there’s more work to be done.\n\n\n\n// TODO: use a more efficient algorithm\nlinearSort(ids)\n\n\n\nThis way, you can stay focused on your flow. And at a later date, you (or someone else) can come back and fix it.\n\n\nComments can link back to the source\n\n\nSo, you just found a solution to your problem on StackOverflow. After copy-pasting that code, it’s sometimes a good thing to keep a link to the answer that helped you out so you can come back to it for future reference.\n\n\n\n\n\n\n\n// Adds handling for legacy browsers\n// https://stackoverflow.com/a/XXXXXXX\n\n\n\nThis is important because solutions can change. It’s always good to know where your code came from in case it ever breaks.\n\n\nWriting pull requests \n\n\nPull requests (PRs) are a fundamental aspect of any project. They sit at the heart of code reviews. And code reviews can quickly become a bottleneck in your team’s performance without good wording.\n\n\n\nA good PR description summarizes what change is being made and why it’s being made. Large projects have a pull request template, like this one adapted from a real example:\n\n\n\n## Proposed changes\nDescribe the big picture of your changes here to communicate to the maintainers why we should accept this pull request.\n\n## Types of changes\nWhat types of changes does your code introduce to Appium?\n - [ ] Bugfix (non-breaking change which fixes an issue)\n - [ ] New feature (non-breaking change which adds functionality)\n - ...\n\n## Checklist\n - [ ] I have read the CONTRIBUTING doc\n - [ ] I have signed the CLA\n - [ ] Lint and unit tests pass locally with my changes\n\n## Further comments\nIf this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did and what alternatives you considered, etc…\n\n\nAvoid vague PR titles\n\n\nPlease avoid titles that look like this:\n\n\n\nFix build.Fix bug.Add patch.\n\n\n\nThese don’t even attempt to describe what build, bug, or patch it is we’re dealing with. A little extra detail on what part of the build was fixed, which bug was squashed, or what patch was added can go a long way to establishing better communication and collaboration with your colleagues. It level-sets and gets folks on the same page.\n\n\n\nPR titles are traditionally written in imperative tense. They’re a one-line summary of the entire PR, and they should describe what is being done by the PR.\n\n\n\nHere are some good examples:\n\n\n\nSupport custom srcset attributes in NgOptimizedImageDefault image config to 75% image qualityAdd explicit selectors for all built-in ControlValueAccessors\n\n\nAvoid long PRs\n\n\nA large PR means a huge description, and no one wants to review hundreds or thousands of lines of code, sometimes just to end-up dismissing the whole thing!\n\n\n\nInstead, you could:\n\n\n\ncommunicate with your team through Issues,make a plan,break down the problem into smaller pieces, orwork on each piece separately with its own PR.\n\n\n\nIsn’t it much cleaner now?\n\n\nProvide details in the PR body\n\n\nUnlike the PR title, the body is the place for all the details, including:\n\n\n\nWhy is the PR being done?Why is this the best approach?Any shortcomings to the approach, and ideas to solve them if possibleThe bug or ticket number, benchmark results, etc.\n\n\nReporting bugs\n\n\nBug reports are one of the most important aspects of any project. And all great projects are built on user feedback. Usually, even after countless tests, it’s the users that find most bugs. Users are also great idealists, and sometimes they have feature ideas; please listen to them!\n\n\n\nFor technical projects, all of this stuff is done by reporting issues. A well-written issue is easy for another developer to find and respond to.\n\n\n\nFor example, most big projects come with a template:\n\n\n\n <!-- Modified from angular-translate/angular-translate -->\n ### Subject of the issue\n Describe your issue here.\n\n ### Your environment\n * version of angular-translate\n * version of angular\n * which browser and its version\n\n ### Steps to reproduce\n Tell us how to reproduce this issue.\n\n ### Expected behavior\n Tell us what should happen.\n\n ### Actual behavior\n Tell us what happens instead.\n\n\nGather screenshots\n\n\nCapture the issue using your system’s screen-shooting utility.\n\n\n\nIf it’s a screenshot of a CLI program, make sure that the text is clear. If it’s a UI program, make sure the screenshot captures the right elements and states.\n\n\n\nYou may need to capture an actual interaction to demonstrate the issue. If that’s the case, try to record GIFs using a screen-recording tool.\n\n\nHow to reproduce the problem\n\n\nIt’s much easier for programmers to solve a bug when it’s live on their computer. That’s why a good commit message should come with the steps to precisely reproduce the problem.\n\n\n\nHere’s an example:\n\n\n\nUpdate: you can actually reproduce this error with objects:\n\n ```html\n <div *ngFor=\"let value of objs; let i = index\">\n   <input [ngModel]=\"objs[i].v\" (ngModelChange)=\"setObj(i, $event)\" />\n </div>\n ```\n\n ```js\n export class OneComponent {\n   obj = {v: '0'};\n   objs = [this.obj, this.obj, this.obj, this.obj];\n ​\n  setObj(i: number, value: string) {\n     this.objs[i] = {v: value};\n  }\n }\n ```\n\n The bug is reproducible as long as the trackBy function returns the same value for any two entries in the array. So weird behavior can occur with any duplicate values.\n\n\n\nSuggest a cause\n\n\nYou’re the one who caught the bug, so maybe you can suggest some potential causes for why it’s there. Maybe the bug only happens after you encounter a certain event, or maybe it only happens on mobile.\n\n\n\nIt also can’t hurt to explore the codebase, and maybe identify what’s causing the problem. Then, your Issue will be closed much quicker and you’re likely to be assigned to the related PR.\n\n\nCommunicating with clients\n\n\nYou may work as a solo freelancer, or perhaps you’re the lead developer on a small team. In either case, let’s say you’re responsible for interfacing with clients on a project. \n\n\n\nNow, the programmer stereotype is that we’re poor communicators. We’ve been known to use overly technical jargon, tell others what is and is not possible, and even get defensive when someone questions our approach.\n\n\n\nSo, how do we mitigate that stereotype? Ask clients what they want, and always listen to their feedback. Here’s how to do that.\n\n\nAsk the right questions\n\n\nStart by making sure that you and the client are on the same page:\n\n\n\nWho is your target audience?What is the goal of the site?Who is your closest competitor and what are they doing right?\n\n\n\nAsking questions is also a good way to write positively, particularly in situations when you disagree with a client’s feedback or decision. Asking questions forces that person to support their own claims rather than you attacking them by defending your own position:\n\n\n\nAre you OK with that even if it comes with an additional performance cost?Does moving the component help us better accomplish our objective?Great, who is responsible to maintain that after launch? Do you know offhand if the contrast between those two colors passes WCAG AA standards?\n\n\n\nQuestions are a lot more innocent and promote curiosity over animosity.\n\n\nSell yourself\n\n\nIf you’re making a pitch to a prospective client, you’re going to need to convince them to hire you. Why should the client choose you? It’s important to specify the following:\n\n\n\nWho you areWhat you doWhy you’re a good fit for the jobLinks to relevant work you’ve done\n\n\n\nAnd once you get the job and need to write up a contract, remember that there’s no content more intimidating than a bunch of legalese. Even though it’s written for design projects, the Contract Killer can be a nice starting point for writing something much friendlier.\n\n\n\nYour attention to detail could be the difference between you and another developer trying to win the same project. In my experience, clients will just as easily hire a develop they think they will enjoy working with than the one who is technically the most competent or experienced for the job.\n\n\nWriting microcopy\n\n\nMicrocopy is the art of writing user-friendly UI messages, such as errors. I’ll bet there have been times where you as a developer had to write error messages because they were put on the backburner all the way to launch time.\n\n\n\nThat may be why we sometimes see errors like this:\n\n\n\nError: Unexpected input (Code 693)\n\n\n\nErrors are the last thing that you want your users to deal with. But they do happen, and there’s nothing we can do about it. Here are some tips to improve your microcopy skills.\n\n\nAvoid technical jargon\n\n\nMost people don’t know what a server is, while 100% of programmers do. That’s why it’s not unusual to see uncommon terms written in an error message, like API or “timeout execution.”\n\n\n\nUnless you’re dealing with a technical client or user base, It’s likely that most of your users didn’t take a computer science course, and don’t know how the Internet works, and why a particular thing doesn’’t work. Hence, the error.\n\n\n\nTherefore, a good error message shouldn’t explain why something went wrong, because such explanations might require using scary technical terms. That’s why it’s very important to avoid using technical jargon.\n\n\nNever blame the user\n\n\nImagine this: I’m trying to log into your platform. So I open my browser, visit your website, and enter my details. Then I’m told: “Your email/password is incorrect.”\n\n\n\nEven though it seems dramatic to think that this message is hostile, it subconsciously makes me feel stupid. Microcopy says that it’s never okay to blame the user. Try changing your message to something less finger-pointy, like this this example adapted from Mailchimp’s login: “Sorry, that email-password combination isn’t right. We can help you recover your account.”\n\n\n\nI’d also like to add the importance of avoiding ALL CAPS and exclamation points! Sure, they can be used to convey excitement, but in microcopy they create a sense of hostility towards the user.\n\n\nDon’t overwhelm the user\n\n\nUsing humor in your microcopy is a good idea! It can lighten up the mood, and it’s an easy way to curb the negativity caused by even the worst errors.\n\n\n\nBut if you don’t use it perfectly, it can come across as condescending and insulting to the user. That’s just a big risk to take.\n\n\n\nMailchimp says it well:\n\n\n\n[D]on’t go out of your way to make a joke — forced humor can be worse than none at all. If you’re unsure, keep a straight face.(Emphasis mine)\n\n\nWriting accessible markup\n\n\nWe could easily spend an entire article about accessibility and how it relates to technical writing. Heck, accessibility is often included in content style guides, including those for Microsoft and Mailchimp.\n\n\n\nYou’re a developer and probably already know so much about accessibility. You may even be one of the more diligent developers that makes accessibility a core part of your workflow. Still, it’s incredible how often accessibility considerations are put on the back burner, no matter how important we all know it is to make accessible online experiences that are inclusive of all abilities.\n\n\n\nSo, if you find yourself implementing someone else’s copywriting into your code, writing documentation for other developers, or even writing UI copy yourself, be mindful of some fundamental accessibility best practices, as they round out all the other advice for technical writing.\n\n\n\nThings like:\n\n\n\nUsing semantic tags where possible (e.g. <nav>, <header>, <article>, etc.)Following a logical heading structureAdding alt text to imagesWatching for inline semantics (Mandy Michael has an exceptional article on this)\n\n\n\nAndy Bell offers some relatively small things you can do to make content more accessible, and it’s worth your time checking them out. And, just for kicks, John Rhea shows off some neat editing tricks that are possible when we’re working with semantic HTML elements.\n\n\nConclusion\n\n\nThose were six ways that demonstrate how technical writing and development coincide. While the examples and advice may not be rocket science, I hope that you found them useful, whether it’s collaborating with other developers, maintaining your own work, having to write your own copy in a pinch, or even drafting a project proposal, among other things.\n\n\n\nThe bottom line: sharpening your writing skills and putting a little extra effort into your writing can actually make you a better developer.\n\n\nTechnical writing resources\n\n\nIf you’re interested in technical writing:\n\n\n\nAdvice for Technical Writing (Chris Coyier)Google’s Technical Writing GuideTechnical Writing Fundamentals (GitLab)UX Writing: Study Guide (Nielson Norman Group)Write the Docs (Technical writing community)\n\n\n\nIf you’re interested in copywriting:\n\n\n\nCopywriting 101 (Copyblogger)What is Copywriting? (Ionos)SEO Copywriting Guide (Semrush)Copywriting is Still Writing (The Guardian)\n\n\n\nIf you’re interested in microcopy:\n\n\n\nIntroduction to Microcopy (UX Planet)Apple’s Human Interface GuidelinesMicrosoft’s Writing Style GuideMailchimp Content Style Guide\n\n\n\nIf you’re interested in using a professional style guide to improve your writing:\n\n\n\nMLA Writing Style GuideAP Writing Style GuideAPA Writing Style GuideChicago Writing Style Guide\n\n\n\nIf you’re interested in writing for accessibility:\n\n\n\nImprove the readability of the content on your website (Andy Bell)15 Practices to Improve Your Website Accessibility (Bruce Lawson)Accessibility Testing Tools (Chris Coyier)Why Don’t Developers Tke Accessibility Seriously? (Melanie Sumner)Naming things to improve accessibility (Hidde de Vries)\n\nTechnical Writing for Developers originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366609",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-11T12:50:13.000Z",
      "date_modified": "2022-07-11T12:50:13.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366689",
      "url": "https://css-tricks.com/collective-nouns-for-the-web/",
      "title": "Collective Nouns for the Web",
      "summary": "Melanie Sumner has this super-specific collection of web-related nouns for describing a group or set of something. You know how there’s a school or fish or a herd of cows? Same sort of thing, but for funny web jargon.\nThings …\n\nCollective Nouns for the Web originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://melanie.codes\" rel=\"noopener\">Melanie Sumner</a> has this super-specific <a href=\"https://collective-nouns.dev\" rel=\"noopener\">collection of web-related nouns</a> for describing a group or set of something. You know how there&#8217;s a <em>school</em> or fish or a <em>herd</em> of cows? Same sort of thing, but for funny web jargon.</p>\n\n\n\n<span id=\"more-366689\"></span>\n\n\n\n<p>Things like:</p>\n\n\n\n<ul><li>A&nbsp;<strong>vanity</strong>&nbsp;is ten (10) or more domains owned by a single person, where very few are in use.</li><li>A&nbsp;<strong>parade</strong>&nbsp;of RSS feeds is when you have so many RSS feeds that you have to scroll to see them all.</li></ul>\n\n\n\n<p>Don&#8217;t lie, Melanie — you&#8217;ve gotta vanity go domains, don&#8217;t ya? &#x1f602;</p>\n\n\n\n<p>A few off the top of my head:</p>\n\n\n\n<ul><li>A <strong>braintrust</strong> is a meeting of company bigwigs indirectly related to a project but with the power to <a href=\"https://css-tricks.com/the-impact-of-team-collaboration-and-communication-on-projects/\">&#8220;swoop and poop&#8221;</a> on your work.</li><li>A <strong>diatribe</strong> is a Pull Request with so many comments that the original scope of the work has changed.</li><li>A <strong>gommit</strong> is a group of commits (group + commit) submitted as a single commit.</li><li>A <strong>hot minute</strong> is the number of hours spent fixing a bug that winds up being a simple typo.</li><li>A <strong>roost</strong> is four (4) or more levels of nesting in Sass.</li><li>A <strong>tababyte</strong> is a unit that represents ten (10) open browser tabs in the same window. For example, two tababytes are equal to 20 open tabs.</li></ul>\n\n\n\n<p>Fun times! Anything you&#8217;d add to the list? You can <a href=\"https://github.com/MelSumner/collective-nouns\" rel=\"noopener\">submit ideas to the repo</a>. </p>\n<p><a href=\"https://collective-nouns.dev\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/collective-nouns-for-the-web/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/collective-nouns-for-the-web/\">Collective Nouns for the Web</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Melanie Sumner has this super-specific collection of web-related nouns for describing a group or set of something. You know how there’s a school or fish or a herd of cows? Same sort of thing, but for funny web jargon.\n\n\n\n\n\n\n\nThings like:\n\n\n\nA vanity is ten (10) or more domains owned by a single person, where very few are in use.A parade of RSS feeds is when you have so many RSS feeds that you have to scroll to see them all.\n\n\n\nDon’t lie, Melanie — you’ve gotta vanity go domains, don’t ya? 😂\n\n\n\nA few off the top of my head:\n\n\n\nA braintrust is a meeting of company bigwigs indirectly related to a project but with the power to “swoop and poop” on your work.A diatribe is a Pull Request with so many comments that the original scope of the work has changed.A gommit is a group of commits (group + commit) submitted as a single commit.A hot minute is the number of hours spent fixing a bug that winds up being a simple typo.A roost is four (4) or more levels of nesting in Sass.A tababyte is a unit that represents ten (10) open browser tabs in the same window. For example, two tababytes are equal to 20 open tabs.\n\n\n\nFun times! Anything you’d add to the list? You can submit ideas to the repo. \nTo Shared Link — Permalink on CSS-Tricks\nCollective Nouns for the Web originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366689",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-01T19:15:00.000Z",
      "date_modified": "2022-07-01T19:15:00.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366544",
      "url": "https://css-tricks.com/single-element-loaders-going-3d/",
      "title": "Single Element Loaders: Going 3D!",
      "summary": "For this fourth and final article of our little series on single-element loaders, we are going to explore 3D patterns. When creating a 3D element, it’s hard to imagine that just one HTML element is enough to simulate something like all six faces of a cube. But  maybe we can get away …\n\nSingle Element Loaders: Going 3D! originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>For this&nbsp;fourth and&nbsp;final&nbsp;article of our&nbsp;<a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\" target=\"_blank\" rel=\"noreferrer noopener\">little series&nbsp;on single-element loaders</a>, we are going to explore 3D patterns. When creating a 3D element, it’s hard to imagine that&nbsp;just&nbsp;one&nbsp;HTML&nbsp;element&nbsp;is&nbsp;enough to simulate&nbsp;something like all&nbsp;six&nbsp;faces of a cube. But &nbsp;maybe we can get away with something more cube-<em>like</em>&nbsp;instead by showing only the front three sides of the shape — it’s totally possible and that’s what we’re going to do together.</p>\n\n\n\n<span id=\"more-366544\"></span>\n\n\n\n<div class=\"wp-container-47 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\"><h4 id=\"article-series\">Article series</h4>\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li>Single Element Loaders: Going 3D — <em>you are here</em></li></ul>\n</div></div>\n\n\n<h3 id=\"the-split-cube-loader\">The split cube loader</h3>\n\n\n<p>Here is a 3D loader where a cube is split into two parts, but is only made with only a single element:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BawVzmx\" src=\"//codepen.io/anon/embed/BawVzmx?height=450&amp;theme-id=1&amp;slug-hash=BawVzmx&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BawVzmx\" title=\"CodePen Embed BawVzmx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Each half of the cube is made using a pseudo-element:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1032\" height=\"268\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651662116082_image.png?resize=1032%2C268&#038;ssl=1\" alt=\"\" class=\"wp-image-366545\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651662116082_image.png?w=1032&amp;ssl=1 1032w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651662116082_image.png?resize=300%2C78&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651662116082_image.png?resize=1024%2C266&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651662116082_image.png?resize=768%2C199&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Cool, right?! We can use a conic gradient with CSS <a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\"><code>clip-path</code></a> on the element’s <code>::before</code> and <code>::after</code> pseudos to simulate the three visible faces of a 3D cube. Negative margin is what pulls the two pseudos together to overlap and simulate a full cube. The rest of our work is mostly animating those two halves to get neat-looking loaders!</p>\n\n\n\n<p>Let’s check out a visual that explains the math behind the clip-path points used to create this cube-like element:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"727\" height=\"330\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_9ECD86875806C309CB49F8B7F67E643AAA9F5765A5BB414A6BF99C36B8B2AD15_1654638629737_image.png?resize=727%2C330&#038;ssl=1\" alt=\"\" class=\"wp-image-366546\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_9ECD86875806C309CB49F8B7F67E643AAA9F5765A5BB414A6BF99C36B8B2AD15_1654638629737_image.png?w=727&amp;ssl=1 727w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_9ECD86875806C309CB49F8B7F67E643AAA9F5765A5BB414A6BF99C36B8B2AD15_1654638629737_image.png?resize=300%2C136&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We have our variables and an equation, so let’s put those to work. First, we’ll establish our variables and set the sizing for the main <code>.loader</code> element:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  --s: 150px; /* control the size */\n  --_d: calc(0.353 * var(--s)); /* 0.353 = sin(45deg)/2 */\n\n  width: calc(var(--s) + var(--_d)); \n  aspect-ratio: 1;\n  display: flex;\n}</code></pre>\n\n\n\n<p>Nothing too crazy so far. We have a <code>150px</code> square that’s set up as a flexible container. Now we establish our pseudos:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::before,\n.loader::after {\n  content: \"\";\n  flex: 1;\n}</code></pre>\n\n\n\n<p>Those are two halves in the <code>.loader</code> container. We need to paint them in, so that’s where our <a href=\"http://\">conic gradient</a> kicks in:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"6-7\"><code markup=\"tt\">.loader::before,\n.loader::after {\n  content: \"\";\n  flex: 1;\n  background:\n    conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),\n    #fff 135deg, #666 0 270deg, #aaa 0);\n}</code></pre>\n\n\n\n<p>The gradient is there, but <a href=\"https://codepen.io/t_afif/pen/XWZLqpN/d03664aee9db90a47ae492f5be068840\" rel=\"noopener\">it looks weird</a>. We need to <a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\">clip it to the element</a>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::before,\n.loader::after {\n  content: \"\";\n  flex: 1;\n  background:\n    conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),\n    #fff 135deg, #666 0 270deg, #aaa 0);\n  clip-path:\n    polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));\n}</code></pre>\n\n\n\n<p>Let’s make sure the two halves overlap with a <a href=\"https://css-tricks.com/almanac/properties/m/margin/#aa-negative-margins\">negative margin</a>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::before {\n  margin-right: calc(var(--_d) / -2);\n}\n\n.loader::after {\n  margin-left: calc(var(--_d) / -2);\n}</code></pre>\n\n\n\n<p>Now let’s make ‘em move!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::before,\n.loader::after {\n  /* same as before */\n  animation: load 1.5s infinite cubic-bezier(0, .5, .5, 1.8) alternate;\n}\n\n.loader::after {\n  /* same as before */\n  animation-delay: -.75s\n}\n\n@keyframes load{\n  0%, 40%   { transform: translateY(calc(var(--s) / -4)) }\n  60%, 100% { transform: translateY(calc(var(--s) / 4)) }\n}</code></pre>\n\n\n\n<p>Here’s the final demo once again:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BawVzmx\" src=\"//codepen.io/anon/embed/BawVzmx?height=450&amp;theme-id=1&amp;slug-hash=BawVzmx&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BawVzmx\" title=\"CodePen Embed BawVzmx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-progress-cube-loader\">The progress cube loader</h3>\n\n\n<p>Let’s use the same technique to create a 3D progress loader. Yes, still only one element!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLvPvjJ\" src=\"//codepen.io/anon/embed/yLvPvjJ?height=450&amp;theme-id=1&amp;slug-hash=yLvPvjJ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLvPvjJ\" title=\"CodePen Embed yLvPvjJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We’re not changing a thing as far as simulating the cube the same way we did before, other than changing the loader’s height and aspect ratio. The animation we’re making relies on a surprisingly easy technique where we update the width of the left side while the right side fills the remaining space, thanks to <code>flex-grow: 1</code>.</p>\n\n\n\n<p>The first step is to add some transparency to the right side using <a href=\"https://css-tricks.com/almanac/properties/o/opacity/\"><code>opacity</code></a>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abqaRJY\" src=\"//codepen.io/anon/embed/abqaRJY?height=450&amp;theme-id=1&amp;slug-hash=abqaRJY&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abqaRJY\" title=\"CodePen Embed abqaRJY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This simulates the effect that one side of the cube is filled in while the other is empty. Then we update the color of the left side. To do that, we either update the three colors inside the conic gradient or we do it by adding a background color with a <a href=\"https://css-tricks.com/almanac/properties/b/background-blend-mode/\"><code>background-blend-mode</code></a>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::before {\n  background-color: #CC333F; /* control the color here */\n  background-blend-mode: multiply;\n}</code></pre>\n\n\n\n<p>This trick only allows us to update the color only once. The right side of the loader blends in with the three shades of white from the conic gradient to create three new shades of our color, even though we’re only using one color value. Color trickery!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKQxGqN\" src=\"//codepen.io/anon/embed/KKQxGqN?height=450&amp;theme-id=1&amp;slug-hash=KKQxGqN&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKQxGqN\" title=\"CodePen Embed KKQxGqN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Let’s animate the width of the loader’s left side:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNJZqzY\" src=\"//codepen.io/anon/embed/preview/rNJZqzY?height=450&amp;theme-id=1&amp;slug-hash=rNJZqzY&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNJZqzY\" title=\"CodePen Embed rNJZqzY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Oops, the animation is a bit strange at the beginning! Notice how it sort of starts outside of the cube? This is because we’re starting the animation at the <code>0%</code> width. But due to the <code>clip-path</code> and negative margin we’re using, what we need to do instead is start from our <code>--_d</code> variable, which we used to define the <code>clip-path</code> points and the negative margin:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"3\"><code markup=\"tt\">@keyframes load {\n  0%,\n  5% {width: var(--_d); }\n  95%,\n  100% {width: 100%; }\n}</code></pre>\n\n\n\n<p>That’s a little better:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYRJmER\" src=\"//codepen.io/anon/embed/preview/zYRJmER?height=450&amp;theme-id=1&amp;slug-hash=zYRJmER&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYRJmER\" title=\"CodePen Embed zYRJmER\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But we can make this animation even smoother. Did you notice we’re missing a little something? Let me show you a screenshot to compare what the final demo should look like with that last demo:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_9ECD86875806C309CB49F8B7F67E643AAA9F5765A5BB414A6BF99C36B8B2AD15_1654640494288_image.png\" alt=\"\"/></figure>\n\n\n\n<p>It’s the bottom face of the cube! Since the second element is transparent, we need to see the bottom face of that rectangle as you can see in the left example. It’s subtle, but should be there!</p>\n\n\n\n<p>We can add a gradient to the main element and clip it like we did with the pseudos:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;</code></pre>\n\n\n\n<p>Here’s the full code once everything is pulled together:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  --s: 100px; /* control the size */\n  --_d: calc(0.353*var(--s)); /* 0.353 = sin(45deg) / 2 */\n\n  height: var(--s); \n  aspect-ratio: 3;\n  display: flex;\n  background: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;\n  clip-path: polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));\n}\n.loader::before,\n.loader::after {\n  content: \"\";\n  clip-path: inherit;\n  background:\n    conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),\n     #fff 135deg, #666 0 270deg, #aaa 0);\n}\n.loader::before {\n  background-color: #CC333F; /* control the color here */\n  background-blend-mode: multiply;\n  margin-right: calc(var(--_d) / -2);\n  animation: load 2.5s infinite linear;\n}\n.loader:after {\n  flex: 1;\n  margin-left: calc(var(--_d) / -2);\n  opacity: 0.4;\n}\n\n@keyframes load {\n  0%,\n  5% { width: var(--_d); }\n  95%,\n  100% { width: 100%; }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLvPvjJ\" src=\"//codepen.io/anon/embed/preview/yLvPvjJ?height=450&amp;theme-id=1&amp;slug-hash=yLvPvjJ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLvPvjJ\" title=\"CodePen Embed yLvPvjJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That’s it! We just used a clever technique that uses pseudo-elements, conic gradients, clipping, background blending, and negative margins to get, not one, but <em>two</em> sweet-looking 3D loaders with nothing more than a single element in the markup.</p>\n\n\n<h3 id=\"more-3d\">More 3D</h3>\n\n\n<p>We can still go further and simulate an infinite number of 3D cubes using one element — yes, it’s possible! Here’s a grid of cubes:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJeqwN\" src=\"//codepen.io/anon/embed/preview/PoJeqwN?height=450&amp;theme-id=1&amp;slug-hash=PoJeqwN&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJeqwN\" title=\"CodePen Embed PoJeqwN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">This demo and the following demos are unsupported in Safari at the time of writing.</p>\n\n\n\n<p>Crazy, right? Now we’re creating a repeated pattern of cubes made using a single element… and no pseudos either! I won’t go into fine detail about the math we are using (there are very specific numbers in there) but here is a figure to visualize how we got here:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"794\" height=\"373\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651672139054_image.png?resize=794%2C373&#038;ssl=1\" alt=\"\" class=\"wp-image-366547\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651672139054_image.png?w=794&amp;ssl=1 794w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651672139054_image.png?resize=300%2C141&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651672139054_image.png?resize=768%2C361&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We first use a <code>conic-gradient</code> to create the repeating cube pattern. The repetition of the pattern is controlled by three variables:</p>\n\n\n\n<ul><li><code>--size</code>: True to its name, this controls the size of each cube.</li><li><code>--m</code>: This represents the number of columns.</li><li><code>--n</code>: This is the number of rows.</li><li><code>--gap</code>: this the gap or distance between the cubes</li></ul>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.cube {\n  --size: 40px; \n  --m: 4; \n  --n: 5;\n  --gap :10px;\n\n  aspect-ratio: var(--m) / var(--n);\n  width: calc(var(--m) * (1.353 * var(--size) + var(--gap)));\n  background:\n    conic-gradient(from -90deg at var(--size) calc(0.353 * var(--size)),\n      #249FAB 135deg, #81C5A3 0 270deg, #26609D 0) /* update the colors here */\n    0 0 / calc(100% / var(--m)) calc(100% / var(--n));\n}</code></pre>\n\n\n\n<p>Then we apply a mask layer using another pattern having the same size. This is the trickiest part of this idea. Using a combination of a <code>linear-gradient</code> and a <code>conic-gradient</code> we will cut a few parts of our element to keep only the cube shapes visible.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.cube {\n  /* etc. */\n  mask: \n    linear-gradient(to bottom right,\n       #0000 calc(0.25 * var(--size)),\n       #000 0 calc(100% - calc(0.25 * var(--size)) - 1.414 * var(--gap)),\n       #0000 0),\n    conic-gradient(from -90deg at right var(--gap) bottom var(--gap), #000 90deg, #0000 0);  \n  mask-size: calc(100% / var(--m)) calc(100% / var(--n));\n  mask-composite: intersect;\n}</code></pre>\n\n\n\n<p>The code may look a bit complex but thanks to CSS variables all we need to do is to update a few values to control our matrix of cubes. Need a 10⨉10 grid? Update the <code>--m</code> and <code>--n</code> variables to <code>10</code>. Need a wider gap between cubes? Update the <code>--gap</code> value. The color values are only used once, so update those for a new color palette!</p>\n\n\n\n<p>Now that we have another 3D technique, let’s use it to build variations of the loader by playing around with different animations. For example, how about a repeating pattern of cubes sliding infinitely from left to right?</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOvdQRg\" src=\"//codepen.io/anon/embed/preview/gOvdQRg?height=450&amp;theme-id=1&amp;slug-hash=gOvdQRg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOvdQRg\" title=\"CodePen Embed gOvdQRg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This loader defines four cubes in a single row. That means our <code>--n</code> value is <code>4</code> and <code>--m</code> is equal to <code>1</code> . In other words, we no longer need these!</p>\n\n\n\n<p>Instead, we can work with the <code>--size</code> and <code>--gap</code> variables in a grid container:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  --size: 70px;\n  --gap: 15px;  \n\n  width: calc(3 * (1.353 * var(--size) + var(--gap)));\n  display: grid;\n  aspect-ratio: 3;\n}</code></pre>\n\n\n\n<p>This is our container. We have four cubes, but only want to show three in the container at a time so that we always have one sliding in as one is sliding out. That’s why we are factoring the width by <code>3</code> and have the aspect ratio set to <code>3</code> as well.</p>\n\n\n\n<p>Let’s make sure that our cube pattern is set up for the width of four cubes. We’re going to do this on the container’s <code>::before</code> pseudo-element:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::before { \n  content: \"\";\n  width: calc(4 * 100% / 3);\n  /*\n     Code to create four cubes\n  */\n}</code></pre>\n\n\n\n<p>Now that we have four cubes in a three-cube container, we can justify the cube pattern to the end of the grid container to overflow it, showing the last three cubes:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  /* same as before */\n  justify-content: end;\n}</code></pre>\n\n\n\n<p>Here’s what we have so far, with a red outline to show the bounds of the grid container:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYQJXOE\" src=\"//codepen.io/anon/embed/LYQJXOE?height=450&amp;theme-id=1&amp;slug-hash=LYQJXOE&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYQJXOE\" title=\"CodePen Embed LYQJXOE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now all we have to do is to move the pseudo-element to the right by adding our animation:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@keyframes load {\n  to { transform: translate(calc(100% / 4)); }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZErMmaV\" src=\"//codepen.io/anon/embed/ZErMmaV?height=450&amp;theme-id=1&amp;slug-hash=ZErMmaV&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZErMmaV\" title=\"CodePen Embed ZErMmaV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Did you get the trick of the animation?&nbsp;Let’s finish this off by hiding&nbsp;the overflowing cube pattern&nbsp;and by adding a touch of masking to create that fading effect that the start and the end:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"9,10\"><code markup=\"tt\">.loader {\n  --size: 70px;\n  --gap: 15px;  \n  \n  width: calc(3*(1.353*var(--s) + var(--g)));\n  display: grid;\n  justify-items: end;\n  aspect-ratio: 3;\n  overflow: hidden;\n  mask: linear-gradient(90deg, #0000, #000 30px calc(100% - 30px), #0000);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWQqzrz\" src=\"//codepen.io/anon/embed/preview/MWQqzrz?height=450&amp;theme-id=1&amp;slug-hash=MWQqzrz&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWQqzrz\" title=\"CodePen Embed MWQqzrz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We can make this a lot more flexible by introducing a variable, <code>--n</code>, to set how many cubes are displayed in the container at once. And since the total number of cubes in the pattern should be one more than <code>--n</code>, we can express that as <code>calc(var(--n) + 1)</code>.</p>\n\n\n\n<p>Here’s the full thing:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWZPyZQ\" src=\"//codepen.io/anon/embed/preview/XWZPyZQ?height=450&amp;theme-id=1&amp;slug-hash=XWZPyZQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWZPyZQ\" title=\"CodePen Embed XWZPyZQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>OK, one more 3D loader that’s similar but has the cubes changing color in succession instead of sliding:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWZPyYw\" src=\"//codepen.io/anon/embed/preview/XWZPyYw?height=450&amp;theme-id=1&amp;slug-hash=XWZPyYw&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWZPyYw\" title=\"CodePen Embed XWZPyYw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We’re going to rely on an animated background with <code>background-blend-mode</code> for this one:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  /* ... */\n  background:\n    linear-gradient(#ff1818 0 0) 0% / calc(100% / 3) 100% no-repeat,\n    /* ... */;\n  background-blend-mode: multiply;\n  /* ... */\n  animation: load steps(3) 1.5s infinite;\n}\n@keyframes load {\n  to { background-position: 150%; }\n}</code></pre>\n\n\n\n<p>I’ve removed the superfluous code used to create the same layout as the last example, but with three cubes instead of four. What I am adding here is a gradient defined with a specific color that blends with the conic gradient, just as we did earlier for the progress bar 3D loader.</p>\n\n\n\n<p>From there, it’s animating the background gradient’s <code>background-position</code> as a three-step animation to make the cubes blink colors one at a time.</p>\n\n\n\n<p>If you are not familiar with the values I am using for <code>background-position</code> and the background syntax, I highly recommend <a href=\"https://css-tricks.com/cool-hover-effects-using-background-properties/\">one of my previous articles</a> and one of <a href=\"https://stackoverflow.com/a/51734530/8620333\" rel=\"noopener\">my Stack Overflow answers</a>. You will find a very detailed explanation there.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Can we update the number of cubes to make it variables?</p></blockquote>\n\n\n\n<p>Yes, I do have a <a href=\"https://codepen.io/t_afif/pen/VwQGVgm/f4762f093deceac628a8bfe0ce4bac9e\" rel=\"noopener\">solution for that</a>, but I’d like you to take a crack at it rather than embedding it here. Take what we have learned from the previous example and try to do the same with this one — then share your work in the comments!</p>\n\n\n<h3 id=\"variations-galore\">Variations galore!</h3>\n\n\n<p>Like the other three articles in this series, I’d like to leave you with some inspiration to go forth and create your own loaders. Here is a collection that includes the 3D loaders we made together, plus a few others to get your imagination going:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNGKBwr\" src=\"//codepen.io/anon/embed/preview/rNGKBwr?height=450&amp;theme-id=1&amp;slug-hash=rNGKBwr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNGKBwr\" title=\"CodePen Embed rNGKBwr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"thats-a-wrap\">That’s a wrap</h3>\n\n\n<p>I sure do hope you enjoyed spending time making single element loaders with me these past few weeks. It’s crazy that we started with seemingly simple spinner and then gradually added new pieces to work ourselves all the way up to 3D techniques that still only use a single element in the markup. This is exactly what CSS looks like when we harness its powers: scalable, flexible, and reusable.</p>\n\n\n\n<p>Thanks again for reading this little series! I’ll sign off by reminding you that I have a <a href=\"https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje\" rel=\"noopener\">collection of more than 500 loaders</a> if you’re looking for more ideas and inspiration.</p>\n\n\n\n<div class=\"wp-container-48 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\"><h4 id=\"article-series\">Article series</h4>\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li>Single Element Loaders: Going 3D — <em>you are here</em></li></ul>\n</div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/single-element-loaders-going-3d/\">Single Element Loaders: Going 3D!</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "For this fourth and final article of our little series on single-element loaders, we are going to explore 3D patterns. When creating a 3D element, it’s hard to imagine that just one HTML element is enough to simulate something like all six faces of a cube. But  maybe we can get away with something more cube-like instead by showing only the front three sides of the shape — it’s totally possible and that’s what we’re going to do together.\n\n\n\n\n\n\n\nArticle series\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — you are here\n\n\n\nThe split cube loader\n\n\nHere is a 3D loader where a cube is split into two parts, but is only made with only a single element:\n\n\n\nCodePen Embed Fallback\n\n\n\nEach half of the cube is made using a pseudo-element:\n\n\n\n\n\n\n\nCool, right?! We can use a conic gradient with CSS clip-path on the element’s ::before and ::after pseudos to simulate the three visible faces of a 3D cube. Negative margin is what pulls the two pseudos together to overlap and simulate a full cube. The rest of our work is mostly animating those two halves to get neat-looking loaders!\n\n\n\nLet’s check out a visual that explains the math behind the clip-path points used to create this cube-like element:\n\n\n\n\n\n\n\nWe have our variables and an equation, so let’s put those to work. First, we’ll establish our variables and set the sizing for the main .loader element:\n\n\n\n.loader {\n  --s: 150px; /* control the size */\n  --_d: calc(0.353 * var(--s)); /* 0.353 = sin(45deg)/2 */\n\n  width: calc(var(--s) + var(--_d)); \n  aspect-ratio: 1;\n  display: flex;\n}\n\n\n\nNothing too crazy so far. We have a 150px square that’s set up as a flexible container. Now we establish our pseudos:\n\n\n\n.loader::before,\n.loader::after {\n  content: \"\";\n  flex: 1;\n}\n\n\n\nThose are two halves in the .loader container. We need to paint them in, so that’s where our conic gradient kicks in:\n\n\n\n.loader::before,\n.loader::after {\n  content: \"\";\n  flex: 1;\n  background:\n    conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),\n    #fff 135deg, #666 0 270deg, #aaa 0);\n}\n\n\n\nThe gradient is there, but it looks weird. We need to clip it to the element:\n\n\n\n.loader::before,\n.loader::after {\n  content: \"\";\n  flex: 1;\n  background:\n    conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),\n    #fff 135deg, #666 0 270deg, #aaa 0);\n  clip-path:\n    polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));\n}\n\n\n\nLet’s make sure the two halves overlap with a negative margin:\n\n\n\n.loader::before {\n  margin-right: calc(var(--_d) / -2);\n}\n\n.loader::after {\n  margin-left: calc(var(--_d) / -2);\n}\n\n\n\nNow let’s make ‘em move!\n\n\n\n.loader::before,\n.loader::after {\n  /* same as before */\n  animation: load 1.5s infinite cubic-bezier(0, .5, .5, 1.8) alternate;\n}\n\n.loader::after {\n  /* same as before */\n  animation-delay: -.75s\n}\n\n@keyframes load{\n  0%, 40%   { transform: translateY(calc(var(--s) / -4)) }\n  60%, 100% { transform: translateY(calc(var(--s) / 4)) }\n}\n\n\n\nHere’s the final demo once again:\n\n\n\nCodePen Embed Fallback\n\n\nThe progress cube loader\n\n\nLet’s use the same technique to create a 3D progress loader. Yes, still only one element!\n\n\n\nCodePen Embed Fallback\n\n\n\nWe’re not changing a thing as far as simulating the cube the same way we did before, other than changing the loader’s height and aspect ratio. The animation we’re making relies on a surprisingly easy technique where we update the width of the left side while the right side fills the remaining space, thanks to flex-grow: 1.\n\n\n\nThe first step is to add some transparency to the right side using opacity:\n\n\n\nCodePen Embed Fallback\n\n\n\nThis simulates the effect that one side of the cube is filled in while the other is empty. Then we update the color of the left side. To do that, we either update the three colors inside the conic gradient or we do it by adding a background color with a background-blend-mode:\n\n\n\n.loader::before {\n  background-color: #CC333F; /* control the color here */\n  background-blend-mode: multiply;\n}\n\n\n\nThis trick only allows us to update the color only once. The right side of the loader blends in with the three shades of white from the conic gradient to create three new shades of our color, even though we’re only using one color value. Color trickery!\n\n\n\nCodePen Embed Fallback\n\n\n\nLet’s animate the width of the loader’s left side:\n\n\n\nCodePen Embed Fallback\n\n\n\nOops, the animation is a bit strange at the beginning! Notice how it sort of starts outside of the cube? This is because we’re starting the animation at the 0% width. But due to the clip-path and negative margin we’re using, what we need to do instead is start from our --_d variable, which we used to define the clip-path points and the negative margin:\n\n\n\n@keyframes load {\n  0%,\n  5% {width: var(--_d); }\n  95%,\n  100% {width: 100%; }\n}\n\n\n\nThat’s a little better:\n\n\n\nCodePen Embed Fallback\n\n\n\nBut we can make this animation even smoother. Did you notice we’re missing a little something? Let me show you a screenshot to compare what the final demo should look like with that last demo:\n\n\n\n\n\n\n\nIt’s the bottom face of the cube! Since the second element is transparent, we need to see the bottom face of that rectangle as you can see in the left example. It’s subtle, but should be there!\n\n\n\nWe can add a gradient to the main element and clip it like we did with the pseudos:\n\n\n\nbackground: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;\n\n\n\nHere’s the full code once everything is pulled together:\n\n\n\n.loader {\n  --s: 100px; /* control the size */\n  --_d: calc(0.353*var(--s)); /* 0.353 = sin(45deg) / 2 */\n\n  height: var(--s); \n  aspect-ratio: 3;\n  display: flex;\n  background: linear-gradient(#fff1 0 0) bottom / 100% var(--_d) no-repeat;\n  clip-path: polygon(var(--_d) 0, 100% 0, 100% calc(100% - var(--_d)), calc(100% - var(--_d)) 100%, 0 100%, 0 var(--_d));\n}\n.loader::before,\n.loader::after {\n  content: \"\";\n  clip-path: inherit;\n  background:\n    conic-gradient(from -90deg at calc(100% - var(--_d)) var(--_d),\n     #fff 135deg, #666 0 270deg, #aaa 0);\n}\n.loader::before {\n  background-color: #CC333F; /* control the color here */\n  background-blend-mode: multiply;\n  margin-right: calc(var(--_d) / -2);\n  animation: load 2.5s infinite linear;\n}\n.loader:after {\n  flex: 1;\n  margin-left: calc(var(--_d) / -2);\n  opacity: 0.4;\n}\n\n@keyframes load {\n  0%,\n  5% { width: var(--_d); }\n  95%,\n  100% { width: 100%; }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nThat’s it! We just used a clever technique that uses pseudo-elements, conic gradients, clipping, background blending, and negative margins to get, not one, but two sweet-looking 3D loaders with nothing more than a single element in the markup.\n\n\nMore 3D\n\n\nWe can still go further and simulate an infinite number of 3D cubes using one element — yes, it’s possible! Here’s a grid of cubes:\n\n\n\nCodePen Embed Fallback\n\n\n\nThis demo and the following demos are unsupported in Safari at the time of writing.\n\n\n\nCrazy, right? Now we’re creating a repeated pattern of cubes made using a single element… and no pseudos either! I won’t go into fine detail about the math we are using (there are very specific numbers in there) but here is a figure to visualize how we got here:\n\n\n\n\n\n\n\nWe first use a conic-gradient to create the repeating cube pattern. The repetition of the pattern is controlled by three variables:\n\n\n\n--size: True to its name, this controls the size of each cube.--m: This represents the number of columns.--n: This is the number of rows.--gap: this the gap or distance between the cubes\n\n\n\n.cube {\n  --size: 40px; \n  --m: 4; \n  --n: 5;\n  --gap :10px;\n\n  aspect-ratio: var(--m) / var(--n);\n  width: calc(var(--m) * (1.353 * var(--size) + var(--gap)));\n  background:\n    conic-gradient(from -90deg at var(--size) calc(0.353 * var(--size)),\n      #249FAB 135deg, #81C5A3 0 270deg, #26609D 0) /* update the colors here */\n    0 0 / calc(100% / var(--m)) calc(100% / var(--n));\n}\n\n\n\nThen we apply a mask layer using another pattern having the same size. This is the trickiest part of this idea. Using a combination of a linear-gradient and a conic-gradient we will cut a few parts of our element to keep only the cube shapes visible.\n\n\n\n.cube {\n  /* etc. */\n  mask: \n    linear-gradient(to bottom right,\n       #0000 calc(0.25 * var(--size)),\n       #000 0 calc(100% - calc(0.25 * var(--size)) - 1.414 * var(--gap)),\n       #0000 0),\n    conic-gradient(from -90deg at right var(--gap) bottom var(--gap), #000 90deg, #0000 0);  \n  mask-size: calc(100% / var(--m)) calc(100% / var(--n));\n  mask-composite: intersect;\n}\n\n\n\nThe code may look a bit complex but thanks to CSS variables all we need to do is to update a few values to control our matrix of cubes. Need a 10⨉10 grid? Update the --m and --n variables to 10. Need a wider gap between cubes? Update the --gap value. The color values are only used once, so update those for a new color palette!\n\n\n\nNow that we have another 3D technique, let’s use it to build variations of the loader by playing around with different animations. For example, how about a repeating pattern of cubes sliding infinitely from left to right?\n\n\n\nCodePen Embed Fallback\n\n\n\nThis loader defines four cubes in a single row. That means our --n value is 4 and --m is equal to 1 . In other words, we no longer need these!\n\n\n\nInstead, we can work with the --size and --gap variables in a grid container:\n\n\n\n.loader {\n  --size: 70px;\n  --gap: 15px;  \n\n  width: calc(3 * (1.353 * var(--size) + var(--gap)));\n  display: grid;\n  aspect-ratio: 3;\n}\n\n\n\nThis is our container. We have four cubes, but only want to show three in the container at a time so that we always have one sliding in as one is sliding out. That’s why we are factoring the width by 3 and have the aspect ratio set to 3 as well.\n\n\n\nLet’s make sure that our cube pattern is set up for the width of four cubes. We’re going to do this on the container’s ::before pseudo-element:\n\n\n\n.loader::before { \n  content: \"\";\n  width: calc(4 * 100% / 3);\n  /*\n     Code to create four cubes\n  */\n}\n\n\n\nNow that we have four cubes in a three-cube container, we can justify the cube pattern to the end of the grid container to overflow it, showing the last three cubes:\n\n\n\n.loader {\n  /* same as before */\n  justify-content: end;\n}\n\n\n\nHere’s what we have so far, with a red outline to show the bounds of the grid container:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow all we have to do is to move the pseudo-element to the right by adding our animation:\n\n\n\n@keyframes load {\n  to { transform: translate(calc(100% / 4)); }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nDid you get the trick of the animation? Let’s finish this off by hiding the overflowing cube pattern and by adding a touch of masking to create that fading effect that the start and the end:\n\n\n\n.loader {\n  --size: 70px;\n  --gap: 15px;  \n  \n  width: calc(3*(1.353*var(--s) + var(--g)));\n  display: grid;\n  justify-items: end;\n  aspect-ratio: 3;\n  overflow: hidden;\n  mask: linear-gradient(90deg, #0000, #000 30px calc(100% - 30px), #0000);\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nWe can make this a lot more flexible by introducing a variable, --n, to set how many cubes are displayed in the container at once. And since the total number of cubes in the pattern should be one more than --n, we can express that as calc(var(--n) + 1).\n\n\n\nHere’s the full thing:\n\n\n\nCodePen Embed Fallback\n\n\n\nOK, one more 3D loader that’s similar but has the cubes changing color in succession instead of sliding:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe’re going to rely on an animated background with background-blend-mode for this one:\n\n\n\n.loader {\n  /* ... */\n  background:\n    linear-gradient(#ff1818 0 0) 0% / calc(100% / 3) 100% no-repeat,\n    /* ... */;\n  background-blend-mode: multiply;\n  /* ... */\n  animation: load steps(3) 1.5s infinite;\n}\n@keyframes load {\n  to { background-position: 150%; }\n}\n\n\n\nI’ve removed the superfluous code used to create the same layout as the last example, but with three cubes instead of four. What I am adding here is a gradient defined with a specific color that blends with the conic gradient, just as we did earlier for the progress bar 3D loader.\n\n\n\nFrom there, it’s animating the background gradient’s background-position as a three-step animation to make the cubes blink colors one at a time.\n\n\n\nIf you are not familiar with the values I am using for background-position and the background syntax, I highly recommend one of my previous articles and one of my Stack Overflow answers. You will find a very detailed explanation there.\n\n\n\nCan we update the number of cubes to make it variables?\n\n\n\nYes, I do have a solution for that, but I’d like you to take a crack at it rather than embedding it here. Take what we have learned from the previous example and try to do the same with this one — then share your work in the comments!\n\n\nVariations galore!\n\n\nLike the other three articles in this series, I’d like to leave you with some inspiration to go forth and create your own loaders. Here is a collection that includes the 3D loaders we made together, plus a few others to get your imagination going:\n\n\n\nCodePen Embed Fallback\n\n\nThat’s a wrap\n\n\nI sure do hope you enjoyed spending time making single element loaders with me these past few weeks. It’s crazy that we started with seemingly simple spinner and then gradually added new pieces to work ourselves all the way up to 3D techniques that still only use a single element in the markup. This is exactly what CSS looks like when we harness its powers: scalable, flexible, and reusable.\n\n\n\nThanks again for reading this little series! I’ll sign off by reminding you that I have a collection of more than 500 loaders if you’re looking for more ideas and inspiration.\n\n\n\nArticle series\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — you are here\n\n\nSingle Element Loaders: Going 3D! originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366544",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-07-01T13:24:09.000Z",
      "date_modified": "2022-07-01T13:24:09.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366605",
      "url": "https://css-tricks.com/bunny-fonts/",
      "title": "Bunny Fonts",
      "summary": "Bunny Fonts bills itself as the “privacy-first web font platform designed to put privacy back into the internet.” According to its FAQ:\n\nWith a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user’s \n\n…\n\nBunny Fonts originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://fonts.bunny.net\" rel=\"noopener\">Bunny Fonts</a> bills itself as the &#8220;privacy-first web font platform designed to put privacy back into the internet.&#8221; According to its FAQ:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>With a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user&#8217;s personal data into their own hands.</p></blockquote>\n\n\n\n<p>Hard for my mind not to go straight to Google Fonts. Bunny Fonts even says they are a drop-in replacement for Google Fonts. It offers the same open source fonts and holds the same API structure used by Google Fonts. </p>\n\n\n\n<span id=\"more-366605\"></span>\n\n\n\n<p>Now, I&#8217;m no GDPR expert but the possibility of Google collecting data through its Fonts API is hardly unsurprising or even unexpected. I was curious to check out <a href=\"https://developers.google.com/fonts/faq\" rel=\"noopener\">Google&#8217;s privacy statement for Fonts</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The Google Fonts API logs the details of the HTTP request, which includes the timestamp, requested URL, and all HTTP headers (including referrer and user agent string) provided in connection with the use of our CSS API.</p><p>IP addresses are not logged.</p></blockquote>\n\n\n\n<p>Comparing that to what Bunny Fonts says in its FAQ:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>When using Bunny Fonts, no personal data or logs are stored. All the requests are processed completely anonymously.</p></blockquote>\n\n\n\n<p>Or perhaps more thoroughly explained on the <a href=\"https://bunny.net/gdpr\" rel=\"noopener\">bunny.net GDPR statement</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>In most cases, the data held and collected by bunny.net does not contain any user identifiable data. In some cases, which depend on how you are using bunny.net and how your website is structured, personal data may be collected from your users. Such information includes hosting user uploaded content as well as personal data that might be transmitted in the URL, User-Agent or Referer headers of the HTTP protocol.</p></blockquote>\n\n\n\n<p>Sounds pretty similar, right? Well, it may not have been that similar earlier this year when a <a href=\"https://www.theregister.com/2022/01/31/website_fine_google_fonts_gdpr/\" rel=\"noopener\">German court ruled that embedded Google Fonts violated GDPR compliance</a>. It appears that one line in the Google Fonts privacy statement about IP addresses came after the ruling, once the API scrubbed them from collected data.</p>\n\n\n\n<p>So, do you need to ditch Google Fonts to be GDPR compliant? I would imagine not if IP addresses were the sole concern, but I&#8217;ll leave that for folks who know the rules to comment on that.</p>\n\n\n\n<p>But if you are concerned about Google Font&#8217;s GDPR compliance, I guess Bunny Fonts is worth a look! And seeing that it&#8217;s powered by bunny.net&#8217;s CDN services, you should get pretty comparable performance marks.</p>\n<p><a href=\"https://fonts.bunny.net\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/bunny-fonts/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/bunny-fonts/\">Bunny Fonts</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Bunny Fonts bills itself as the “privacy-first web font platform designed to put privacy back into the internet.” According to its FAQ:\n\n\n\nWith a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user’s personal data into their own hands.\n\n\n\nHard for my mind not to go straight to Google Fonts. Bunny Fonts even says they are a drop-in replacement for Google Fonts. It offers the same open source fonts and holds the same API structure used by Google Fonts. \n\n\n\n\n\n\n\nNow, I’m no GDPR expert but the possibility of Google collecting data through its Fonts API is hardly unsurprising or even unexpected. I was curious to check out Google’s privacy statement for Fonts:\n\n\n\nThe Google Fonts API logs the details of the HTTP request, which includes the timestamp, requested URL, and all HTTP headers (including referrer and user agent string) provided in connection with the use of our CSS API.IP addresses are not logged.\n\n\n\nComparing that to what Bunny Fonts says in its FAQ:\n\n\n\nWhen using Bunny Fonts, no personal data or logs are stored. All the requests are processed completely anonymously.\n\n\n\nOr perhaps more thoroughly explained on the bunny.net GDPR statement:\n\n\n\nIn most cases, the data held and collected by bunny.net does not contain any user identifiable data. In some cases, which depend on how you are using bunny.net and how your website is structured, personal data may be collected from your users. Such information includes hosting user uploaded content as well as personal data that might be transmitted in the URL, User-Agent or Referer headers of the HTTP protocol.\n\n\n\nSounds pretty similar, right? Well, it may not have been that similar earlier this year when a German court ruled that embedded Google Fonts violated GDPR compliance. It appears that one line in the Google Fonts privacy statement about IP addresses came after the ruling, once the API scrubbed them from collected data.\n\n\n\nSo, do you need to ditch Google Fonts to be GDPR compliant? I would imagine not if IP addresses were the sole concern, but I’ll leave that for folks who know the rules to comment on that.\n\n\n\nBut if you are concerned about Google Font’s GDPR compliance, I guess Bunny Fonts is worth a look! And seeing that it’s powered by bunny.net’s CDN services, you should get pretty comparable performance marks.\nTo Shared Link — Permalink on CSS-Tricks\nBunny Fonts originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366605",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-30T17:28:57.000Z",
      "date_modified": "2022-06-30T17:28:57.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366557",
      "url": "https://css-tricks.com/text-overflow-ellipsis-considered-harmful/",
      "title": "Text-overflow: ellipsis considered harmful",
      "summary": "Eric Eggert:\n\nThere are a few legitimate use cases for this technique. For example, you might have a table with titles and descriptions. To preserve more space for the title, you constrain the description to one line on small \n\n…\n\nText-overflow: ellipsis considered harmful originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://yatil.net/blog/text-overflow-ellipsis-harmful\" rel=\"noopener\">Eric Eggert</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>There are a few legitimate use cases for this technique. For example, you might have a table with titles and descriptions. To preserve more space for the title, you constrain the description to one line on small viewports to the one-line and you repeat the description on the detail page for this item.</p><p>However, I often see it used on items like buttons or even form labels to make them look nicer(?) or when aligning them vertically. But once you change the viewport or resize the text, the end of the text disappears.</p></blockquote>\n\n\n\n<p>I think &#8220;&#8230; if used in certain situations&#8221; belongs there, but it certainly makes for a better blog post title without it. As Eric says, there are legitimate use cases for truncating text. Maybe only a few, but legitimate nonetheless.</p>\n\n\n\n<span id=\"more-366557\"></span>\n\n\n\n<p>The ultimate goal is to prevent &#8220;losing&#8221; data, something <a href=\"https://css-tricks.com/overflow-and-data-loss-in-css/\">that can certainly happen in CSS</a>. Text that inadvertently overflows a container is lost in the sense that it&#8217;s simply not there. And if that text is simply not there, users will miss it, even if it is the best and most well-crafted call to action ever published to the web.</p>\n\n\n\n<p>Eric points out that there is no way to make the text truncated by <code>text-overflow: ellipsis</code> visible. Once it&#8217;s gone, it&#8217;s gone (<a href=\"https://butterpep.com/line-clamp-overflow-ellipsis.html\" rel=\"noopener\">although screen readers seem to announce it</a>). It&#8217;s practically lost data. You might be OK with that. That&#8217;s cool as long as you know what&#8217;s happening and it&#8217;s intended.</p>\n\n\n\n<p>But here&#8217;s what Eric says that made me want to share this:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Don’t constrain the content to fit your design, make your CSS flexible to handle longer words gracefully.</p><p></p></blockquote>\n\n\n\n<p>Again, you <em>might</em> want to conform content to the design. But I&#8217;d probably argue, like Eric, that the <a href=\"https://css-tricks.com/read-your-website/\">design should adapt to the content</a> rather than the other way around. I have a hard time recalling any situation where the text on a page is unimportant or without purpose to the extent that I&#8217;d be cool cutting if off at any arbitrary point determined by a CSS property. Maybe an archive of blog posts where each post shows an excerpt of the post content before truncating, but that&#8217;s not exactly a use case for <code>text-overflow: ellipse</code>.</p>\n\n\n\n<p>CSS has the tools to make a flexible design that accounts for varying lengths of text. So maybe err on the side of <a href=\"https://css-tricks.com/defensive-css/\">writing defensive CSS</a>&#8230; CSS that anticipates issues and knows how to gracefully handle different content scenarios. <code>text-overflow: ellipsis</code> might be part of your CSS arsenal for that. But it might also be throwing the baby out with the bath water. Worth asking whether losing that data is worth the cost of what that content is supposed to do before giving giving it a haircut.</p>\n\n\n\n<p>While we&#8217;re talking about truncating text&#8230;</p>\n\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card article\" id=\"mini-post-366557\">\n\n  <time datetime=\"2013-05-07\" title=\"Originally published Jun 30, 2022\">\n    <strong>\n                \n        Link\n      </strong>\n\n    on\n\n    Oct 1, 2021  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/line-clampin/\">\n      Line Clampin&#8217; (Truncating Multiple Line Text)    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/data-loss/\" rel=\"tag\">data loss</a> <a href=\"https://css-tricks.com/tag/text-overflow/\" rel=\"tag\">text-overflow</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card link\" id=\"mini-post-366557\">\n\n  <time datetime=\"2021-09-20\" title=\"Originally published Jun 30, 2022\">\n    <strong>\n                \n        Link\n      </strong>\n\n    on\n\n    Sep 20, 2021  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/embracing-asymmetrical-design/\">\n      Embracing Asymmetrical Design    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/data-loss/\" rel=\"tag\">data loss</a> <a href=\"https://css-tricks.com/tag/text-overflow/\" rel=\"tag\">text-overflow</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card link\" id=\"mini-post-366557\">\n\n  <time datetime=\"2020-07-21\" title=\"Originally published Jun 30, 2022\">\n    <strong>\n                \n        Link\n      </strong>\n\n    on\n\n    Jul 21, 2020  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/using-flexbox-and-text-ellipsis-together/\">\n      Using Flexbox and text ellipsis together    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/data-loss/\" rel=\"tag\">data loss</a> <a href=\"https://css-tricks.com/tag/text-overflow/\" rel=\"tag\">text-overflow</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card link\" id=\"mini-post-366557\">\n\n  <time datetime=\"2019-09-04\" title=\"Originally published Jun 30, 2022\">\n    <strong>\n                \n        Link\n      </strong>\n\n    on\n\n    Sep 4, 2019  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/multiline-truncated-text-with-show-more-button/\">\n      Multiline truncated text with “show more” button    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/data-loss/\" rel=\"tag\">data loss</a> <a href=\"https://css-tricks.com/tag/text-overflow/\" rel=\"tag\">text-overflow</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n    </div>\n  \n<p><a href=\"https://yatil.net/blog/text-overflow-ellipsis-harmful\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/text-overflow-ellipsis-considered-harmful/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/text-overflow-ellipsis-considered-harmful/\">Text-overflow: ellipsis considered harmful</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Eric Eggert:\n\n\n\nThere are a few legitimate use cases for this technique. For example, you might have a table with titles and descriptions. To preserve more space for the title, you constrain the description to one line on small viewports to the one-line and you repeat the description on the detail page for this item.However, I often see it used on items like buttons or even form labels to make them look nicer(?) or when aligning them vertically. But once you change the viewport or resize the text, the end of the text disappears.\n\n\n\nI think “… if used in certain situations” belongs there, but it certainly makes for a better blog post title without it. As Eric says, there are legitimate use cases for truncating text. Maybe only a few, but legitimate nonetheless.\n\n\n\n\n\n\n\nThe ultimate goal is to prevent “losing” data, something that can certainly happen in CSS. Text that inadvertently overflows a container is lost in the sense that it’s simply not there. And if that text is simply not there, users will miss it, even if it is the best and most well-crafted call to action ever published to the web.\n\n\n\nEric points out that there is no way to make the text truncated by text-overflow: ellipsis visible. Once it’s gone, it’s gone (although screen readers seem to announce it). It’s practically lost data. You might be OK with that. That’s cool as long as you know what’s happening and it’s intended.\n\n\n\nBut here’s what Eric says that made me want to share this:\n\n\n\nDon’t constrain the content to fit your design, make your CSS flexible to handle longer words gracefully.\n\n\n\nAgain, you might want to conform content to the design. But I’d probably argue, like Eric, that the design should adapt to the content rather than the other way around. I have a hard time recalling any situation where the text on a page is unimportant or without purpose to the extent that I’d be cool cutting if off at any arbitrary point determined by a CSS property. Maybe an archive of blog posts where each post shows an excerpt of the post content before truncating, but that’s not exactly a use case for text-overflow: ellipse.\n\n\n\nCSS has the tools to make a flexible design that accounts for varying lengths of text. So maybe err on the side of writing defensive CSS… CSS that anticipates issues and knows how to gracefully handle different content scenarios. text-overflow: ellipsis might be part of your CSS arsenal for that. But it might also be throwing the baby out with the bath water. Worth asking whether losing that data is worth the cost of what that content is supposed to do before giving giving it a haircut.\n\n\n\nWhile we’re talking about truncating text…\n\n\n\n    \t\t\n    \n      \n\n  \n    \n                \n        Link\n      \n\n    on\n\n    Oct 1, 2021  \n\n  \n    \n      Line Clampin’ (Truncating Multiple Line Text)    \n  \n\n  \n      \n      data loss text-overflow    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n        Link\n      \n\n    on\n\n    Sep 20, 2021  \n\n  \n    \n      Embracing Asymmetrical Design    \n  \n\n  \n      \n      data loss text-overflow    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n        Link\n      \n\n    on\n\n    Jul 21, 2020  \n\n  \n    \n      Using Flexbox and text ellipsis together    \n  \n\n  \n      \n      data loss text-overflow    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n        Link\n      \n\n    on\n\n    Sep 4, 2019  \n\n  \n    \n      Multiline truncated text with “show more” button    \n  \n\n  \n      \n      data loss text-overflow    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n    \n  \nTo Shared Link — Permalink on CSS-Tricks\nText-overflow: ellipsis considered harmful originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366557",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-30T13:38:16.000Z",
      "date_modified": "2022-06-30T13:38:16.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366509",
      "url": "https://css-tricks.com/choosing-an-animation-library-for-solitaire/",
      "title": "How I Chose an Animation Library for My Solitaire Game",
      "summary": "There is an abundance of both CSS and JavaScript libraries for animation libraries out there. So many, in fact, that choosing the right one for your project can seem impossible. That’s the situation I faced when I decided to build …\n\nHow I Chose an Animation Library for My Solitaire Game originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>There is an abundance of both CSS and JavaScript libraries for animation libraries out there. So many, in fact, that choosing the right one for your project can seem impossible. That&#8217;s the situation I faced when I decided to build an <a href=\"https://online-solitaire.com/\" rel=\"noopener\">online Solitaire game</a>. I knew I&#8217;d need an animation library, but which was the right one to choose?</p>\n\n\n\n<p>In this article, I&#8217;ll go through which considerations I made, what to look out for and present you with some of the most popular libraries available. I&#8217;ll go through some real-world examples with you to illustrate my points, and in the end, hopefully, you&#8217;ll be better equipped than me when I first had to choose an animation library.</p>\n\n\n\n<span id=\"more-366509\"></span>\n\n\n\n<p>Your mileage with this advice may vary, of course. Everything I&#8217;m sharing here is specific to a thing I wanted to build. Your project may have completely different requirements and priorities and that&#8217;s OK. I think what&#8217;s important here is getting a first-hand account of <a href=\"https://css-tricks.com/how-to-think-like-a-front-end-developer/\">thinking like a front-end developer</a> with a particular goal.</p>\n\n\n\n<p>Speaking of which, I do consider myself a front-end developer but my background is super heavy in design. So I know code, but not to the extent of someone who is a JavaScript engineer. Just wanted to clear that up because experience can certainly impact the final decision.</p>\n\n\n<h3 id=\"heres-the-goal\"><strong>Here&#8217;s the goal</strong></h3>\n\n\n<p>Before we get into any decision-making let&#8217;s take a look at the sorts of animations I needed to make in this CSS-Tricks-ified version of the game:</p>\n\n\n\n<div id=\"solitaire_embed\" style=\"width:100%;margin-block-end: 1.5rem;\">\n  <style>\n    @media (max-width: 800px) {\n      #solitaire_embed > div {\n        padding-bottom: 90% !important; /* Change aspect ratio on mobile */\n      }\n    }\n    @media (max-width: 568px) {\n      #solitaire_embed > div {\n        padding-bottom: 100% !important; /* Change aspect ratio on mobile */\n      }\n    }\n    @media (max-width: 414px) {\n      #solitaire_embed > div {\n        padding-bottom: 120% !important; /* Change aspect ratio on mobile */\n      }\n    }\n  </style>\n  <div style=\"position:relative;padding-bottom:75%;border-radius:6px;overflow:hidden;\">\n    <iframe loading=\"lazy\" style=\"width:100%;height:100%;position:absolute;left:0px;top:0px;border:0px;\" frameborder=\"0\" width=\"100%\" height=\"100%\" allowfullscreen=\"false\" src=\"https://online-solitaire.com/css-tricks\" title=\"Play Klondike (Turn 3) and many more Solitaire games at online-solitaire.com\"></iframe>\n    <div style=\"position:absolute;width:100%;height:100%;top:0px;left:0px;pointer-events:none;box-shadow:inset 0px 0px 0px 1px rgba(0,0,0,0.25);border-radius:6px;\"></div>\n  </div>\n</div>\n\n\n\n<p>Pretty sweet, right? There&#8217;s nothing exactly trivial about these animations. There&#8217;s a lot going on — sometimes simultaneously — and a lot to orchestrate. Plus, a majority of the animations are triggered by user interactions. So, that left me with a few priorities heading into my decision:</p>\n\n\n\n<ul><li><strong>Smooth animations:</strong> The way animations are applied can have a big impact on whether they run smoothly, or display a little choppiness.</li><li><strong>Performance:</strong> Adopting any library is going to add weight to a project and I wanted my game to be as lean as possible.</li><li><strong>Convenience:</strong> I wanted a nice, clean syntax that makes it easier to write and manage the animations. I&#8217;d even trade a little extra convenience for a small performance cost if it allows me to write better, more maintainable code. Again, this bodes well for a designer-turned-developer.</li><li><strong>Browser support:</strong> Of course I wanted my game to work on any modern browser using some form of progressive enhancement to prevent completely borking legacy browsers. Plus, I definitely wanted&nbsp; some future-proofing.</li></ul>\n\n\n\n<p>That&#8217;s what I took with me as I went in search of the right tool for this particular job.</p>\n\n\n<h3 id=\"choosing-between-css-or-javascript-animation-libraries\"><strong>Choosing between CSS or JavaScript</strong> animation libraries</h3>\n\n\n<p>The first thing I considered when choosing an animation library was whether to go with a CSS or JavaScript-based library. There are lots of <a href=\"https://css-tricks.com/css-animation-libraries/\">great CSS libraries</a>, many of them with excellent performance which was a high priority for me. I was looking to do some heavy-duty animations, like the&nbsp; ability to sequence animations and get callbacks on animation completion. That&#8217;s all totally possible with pure CSS — still, it&#8217;s a lot less smooth than what most JavaScript libraries offer.</p>\n\n\n\n<p>Let&#8217;s see how a simple sequenced animation looks in CSS and compare it to jQuery, which has plenty of built-in animation helpers:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BaYbWJQ\" src=\"//codepen.io/anon/embed/BaYbWJQ?height=450&amp;theme-id=1&amp;slug-hash=BaYbWJQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BaYbWJQ\" title=\"CodePen Embed BaYbWJQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The animations look the same but are created differently. To make the CSS animation, first, we have to define the keyframe animation in our CSS and attach it to a class:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card.move {\n  animation : move 2s;\n}\n\n@keyframes move {\n  0% { left: 0 }\n  50% { left: 100px }\n  100% { left: 0 }\n}</code></pre>\n\n\n\n<p>We then execute the animation using JavaScript and listen for a CSS callback on the element:</p>\n\n\n\n<pre rel=\"jQuery\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">var cardElement = document.getElementsByClassName(\"card\")[0];\nvar statusElement = document.getElementsByClassName(\"status\")[0];\n\ncardElement.classList.add(\"move\");\nstatusElement.innerHTML = \"Animating\"\n\nvar animationEndCallback = function() {\n  cardElement.classList.remove(\"move\");\n  statusElement.innerHTML = \"Inactive\"\n}\n\ncardElement.addEventListener(\"webkitAnimationEnd\", animationEndCallback);\ncardElement.addEventListener(\"oAnimationEnd\", animationEndCallback); \ncardElement.addEventListener(\"antionend\", animationEndCallback);</code></pre>\n\n\n\n<p>Having things happen in different places might be fine in a simple example like this, but it can become very confusing once things get a bit more complex.&nbsp;</p>\n\n\n\n<p>Compare this to how the animation is done with jQuery:</p>\n\n\n\n<pre rel=\"jQuery\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$(\".status\").text(\"Animating\")\n$( \".card\" ).animate({\n  left: \"100px\"\n}, 1000);\n$( \".card\" ).animate({\n  left: 0\n}, 1000, function() {\n  $(\".status\").text(\"Inactive\")\n});</code></pre>\n\n\n\n<p>Here, everything happens in the same place, simplifying things should the animations grow more complex in the future.</p>\n\n\n\n<p>It seemed clear that a JavaScript library was the right way to go, but which was the right one to choose for my Solitaire game? I mean, jQuery is great and <a href=\"https://w3techs.com/technologies/details/js-jquery\" rel=\"noopener\">still widely used even today</a>, but that&#8217;s not something I want to hang my hat on. There are plenty of JavaScript animation libraries, so I wanted to consider something built specifically to handle the type of heavy animations I had in mind.</p>\n\n\n<h3 id=\"choosing-a-javascript-animation-library\"><strong>Choosing a JavaScript animation library</strong></h3>\n\n\n<p>It quickly became apparent to me that there&#8217;s no lack of JavaScript animation libraries and <a href=\"https://css-tricks.com/comparison-animation-technologies/\">new, exciting technologies</a>. They all have benefits and drawbacks, so let&#8217;s go through some of the ones I considered and why.</p>\n\n\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API\" rel=\"noopener\">Web Animations API </a>is one such case that might replace many JavaScript animation libraries in the future. With it, you&#8217;ll be able to create complex staggered animations without loading any external libraries and with the same performance as CSS animations. The only drawback is that <a href=\"https://caniuse.com/#feat=web-animation\" rel=\"noopener\">not all browsers support it yet</a>.&nbsp;</p>\n\n\n\n<p>The <code>&lt;canvas&gt;</code> element presents another exciting opportunity. In it, we can animate things with JavaScript, as we would with the DOM, but the animation is rendered as raster, which means we can make some high-performance animations. The only drawback is that the canvas element is essentially rendered as an image in the DOM, so if we&#8217;re looking for pixel-perfection, we might be out of luck. As someone acutely in tune with design, this was a dealbreaker for me.</p>\n\n\n\n<p>I needed something tried and tested, so I knew I probably had to go with one of the many JavaScript libraries. I started looking at libraries and narrowed my choices to <a href=\"https://animejs.com/\" rel=\"noopener\">Anime.js</a> and <a href=\"https://greensock.com/\" rel=\"noopener\">GSAP</a>. They both seemed to handle complex animations well and had excellent notes on performance. Anime is a well-maintained library with over 42.000 stars on GitHub, while GSAP is a super popular, battle-tested library with a thriving community.</p>\n\n\n\n<p>An active community was critical to me since I needed a place to ask for help, and I didn&#8217;t want to use a library that might later be abandoned. I considered this as part of my convenience requirements.</p>\n\n\n<h3 id=\"sequencing-animations-and-callbacks\"><strong>Sequencing animations and callbacks</strong></h3>\n\n\n<p>Once I had my choices narrowed down, the next step was to implement a complex animation using my two libraries. A recurrent animation in a solitaire game is that of a card moving somewhere and then turning over, so let&#8217;s see how that looks:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExQMXzQ\" src=\"//codepen.io/anon/embed/ExQMXzQ?height=450&amp;theme-id=1&amp;slug-hash=ExQMXzQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExQMXzQ\" title=\"CodePen Embed ExQMXzQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Both animations look great! They&#8217;re smooth, and implementing both of them was pretty straightforward. Both libraries had a <a href=\"https://animejs.com/documentation/#timelineBasics\" rel=\"noopener\">timeline function</a> that made creating sequences a breeze. This is how the implementation looks in AnimeJS:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">var timeline = anime.timeline({\n  begin: function() {\n    $(\".status\").text(\"Animating\")\n  },\n  complete: function() {\n    $(\".status\").text(\"Inactive\")\n  }\n});\n\ntimeline.add({\n  targets: '.card',\n  left: [0, 300],\n  easing: 'easeInOutSine',\n  duration: 500\n}).add({\n  targets: '.card .back',\n  rotateY: [0, 90],\n  easing: 'easeInSine',\n  duration: 200\n}).add({\n  targets: '.card .front',\n  rotateY: [-90, 0],\n  easing: 'easeOutSine',\n  duration: 200\n})</code></pre>\n\n\n\n<p>Anime&#8217;s <a href=\"https://animejs.com/documentation/#timelineBasics\" rel=\"noopener\"><code>timeline()</code> function</a> comes built-in with callbacks on beginning and ending the animation, and creating the sequence is as easy as appending the sequential animations. First, I move the card, then I turn my back-image 90 degrees, so it goes out of view, and then I turn my front-image 90 degrees, so it comes into view.</p>\n\n\n\n<p>The same implementation using GSAP&#8217;s <a href=\"https://greensock.com/get-started/#sequencing-with-timelines\" rel=\"noopener\"><code>timeline()</code> function</a> looks very similar:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">var timeline = gsap.timeline({\n  onStart: function() {\n    $(\".status\").text(\"Animating\")\n  },\n  onComplete: function() {\n    $(\".status\").text(\"Inactive\")\n  }\n});\n\ntimeline.fromTo(\".card\", {\n  left: 0\n}, {\n  duration: 0.5,\n  left: 300\n}).fromTo(\".card .back\", {\n  rotationY: 0\n}, {\n  rotationY: 90,\n  ease: \"power1.easeIn\",\n  duration: 0.2\n}).fromTo(\".card .front\", {\n  rotationY: -90\n}, {\n  rotationY: 0,\n  ease: \"power1.easeOut\",\n  duration: 0.2\n})</code></pre>\n\n\n<h3 id=\"decision-time\"><strong>Decision time</strong></h3>\n\n\n<p>The main difference between Anime and GSAP appears to be the syntax, where GSAP might be a little more elaborate. I was stuck with two great libraries that had very similar functionality, were able to deal with complex animation, and had a thriving community. It seemed like I had a tie race!</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Priority</strong></td><td><strong>Anime</strong></td><td><strong>GSAP</strong></td></tr><tr><td>Smooth animations</td><td>&#x2705;</td><td>&#x2705;</td></tr><tr><td>Performance</td><td>&#x2705;</td><td>&#x2705;</td></tr><tr><td>Convenience</td><td>&#x2705;</td><td>&#x2705;</td></tr><tr><td>Browser support</td><td>&#x2705;</td><td>&#x2705;</td></tr></tbody></table></figure>\n\n\n\n<p>So, what made me choose one library over the other?</p>\n\n\n\n<p>I was very concerned about how the library would act under pressure. Having laggy animations in a game like Solitaire can greatly impact how fun it is to play the game. I knew I wouldn&#8217;t be able to fully see how the library performed before I created the game. Luckily, GSAP had made a <a href=\"https://greensock.com/js/speed.html\" rel=\"noopener\">stress test</a> that compared different animation libraries to each other, including Anime.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_DrPzmR\" src=\"//codepen.io/anon/embed/DrPzmR?height=650&amp;theme-id=1&amp;slug-hash=DrPzmR&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed DrPzmR\" title=\"CodePen Embed DrPzmR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Looking at that, GSAP certainly looked to be the superior library for dealing with loads of complex animations. GSAP was giving me upwards of 26 frames per second on a heavy animation that Anime was only able to top out at 19.  After reading up on GSAP more and looking into their forums, it became clear that performance was of the highest priority to the guys behind GSAP.</p>\n\n\n\n<p>And even though both GSAP and Anime have been around a while, Anime&#8217;s repo has been sitting somewhat dormant a couple of years while GSAP had made commits in the past couple of months.</p>\n\n\n\n<p>I ended up using GSAP and haven&#8217;t regretted my decision!</p>\n\n\n\n<p>How about you? Does any of this square with how you evaluate and compare front-end tooling? Are there other priorities you might have considered (e.g. accessibility, etc.) in a project like this? Or do you have a project where you had to pare down your choices from a bunch of different options? Please share in the comments because I&#8217;d like to know!&nbsp;</p>\n\n\n\n<p>Oh, and if you want to see how it looks when animating a whole deck of cards, you can head over to my site and <a href=\"https://online-solitaire.com/\" rel=\"noopener\">play a game of Solitaire</a>. Have fun!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/choosing-an-animation-library-for-solitaire/\">How I Chose an Animation Library for My Solitaire Game</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "There is an abundance of both CSS and JavaScript libraries for animation libraries out there. So many, in fact, that choosing the right one for your project can seem impossible. That’s the situation I faced when I decided to build an online Solitaire game. I knew I’d need an animation library, but which was the right one to choose?\n\n\n\nIn this article, I’ll go through which considerations I made, what to look out for and present you with some of the most popular libraries available. I’ll go through some real-world examples with you to illustrate my points, and in the end, hopefully, you’ll be better equipped than me when I first had to choose an animation library.\n\n\n\n\n\n\n\nYour mileage with this advice may vary, of course. Everything I’m sharing here is specific to a thing I wanted to build. Your project may have completely different requirements and priorities and that’s OK. I think what’s important here is getting a first-hand account of thinking like a front-end developer with a particular goal.\n\n\n\nSpeaking of which, I do consider myself a front-end developer but my background is super heavy in design. So I know code, but not to the extent of someone who is a JavaScript engineer. Just wanted to clear that up because experience can certainly impact the final decision.\n\n\nHere’s the goal\n\n\nBefore we get into any decision-making let’s take a look at the sorts of animations I needed to make in this CSS-Tricks-ified version of the game:\n\n\n\n\n  \n    @media (max-width: 800px) {\n      #solitaire_embed > div {\n        padding-bottom: 90% !important; /* Change aspect ratio on mobile */\n      }\n    }\n    @media (max-width: 568px) {\n      #solitaire_embed > div {\n        padding-bottom: 100% !important; /* Change aspect ratio on mobile */\n      }\n    }\n    @media (max-width: 414px) {\n      #solitaire_embed > div {\n        padding-bottom: 120% !important; /* Change aspect ratio on mobile */\n      }\n    }\n  \n  \n    \n    \n  \n\n\n\n\nPretty sweet, right? There’s nothing exactly trivial about these animations. There’s a lot going on — sometimes simultaneously — and a lot to orchestrate. Plus, a majority of the animations are triggered by user interactions. So, that left me with a few priorities heading into my decision:\n\n\n\nSmooth animations: The way animations are applied can have a big impact on whether they run smoothly, or display a little choppiness.Performance: Adopting any library is going to add weight to a project and I wanted my game to be as lean as possible.Convenience: I wanted a nice, clean syntax that makes it easier to write and manage the animations. I’d even trade a little extra convenience for a small performance cost if it allows me to write better, more maintainable code. Again, this bodes well for a designer-turned-developer.Browser support: Of course I wanted my game to work on any modern browser using some form of progressive enhancement to prevent completely borking legacy browsers. Plus, I definitely wanted  some future-proofing.\n\n\n\nThat’s what I took with me as I went in search of the right tool for this particular job.\n\n\nChoosing between CSS or JavaScript animation libraries\n\n\nThe first thing I considered when choosing an animation library was whether to go with a CSS or JavaScript-based library. There are lots of great CSS libraries, many of them with excellent performance which was a high priority for me. I was looking to do some heavy-duty animations, like the  ability to sequence animations and get callbacks on animation completion. That’s all totally possible with pure CSS — still, it’s a lot less smooth than what most JavaScript libraries offer.\n\n\n\nLet’s see how a simple sequenced animation looks in CSS and compare it to jQuery, which has plenty of built-in animation helpers:\n\n\n\nCodePen Embed Fallback\n\n\n\nThe animations look the same but are created differently. To make the CSS animation, first, we have to define the keyframe animation in our CSS and attach it to a class:\n\n\n\n.card.move {\n  animation : move 2s;\n}\n\n@keyframes move {\n  0% { left: 0 }\n  50% { left: 100px }\n  100% { left: 0 }\n}\n\n\n\nWe then execute the animation using JavaScript and listen for a CSS callback on the element:\n\n\n\nvar cardElement = document.getElementsByClassName(\"card\")[0];\nvar statusElement = document.getElementsByClassName(\"status\")[0];\n\ncardElement.classList.add(\"move\");\nstatusElement.innerHTML = \"Animating\"\n\nvar animationEndCallback = function() {\n  cardElement.classList.remove(\"move\");\n  statusElement.innerHTML = \"Inactive\"\n}\n\ncardElement.addEventListener(\"webkitAnimationEnd\", animationEndCallback);\ncardElement.addEventListener(\"oAnimationEnd\", animationEndCallback); \ncardElement.addEventListener(\"antionend\", animationEndCallback);\n\n\n\nHaving things happen in different places might be fine in a simple example like this, but it can become very confusing once things get a bit more complex. \n\n\n\nCompare this to how the animation is done with jQuery:\n\n\n\n$(\".status\").text(\"Animating\")\n$( \".card\" ).animate({\n  left: \"100px\"\n}, 1000);\n$( \".card\" ).animate({\n  left: 0\n}, 1000, function() {\n  $(\".status\").text(\"Inactive\")\n});\n\n\n\nHere, everything happens in the same place, simplifying things should the animations grow more complex in the future.\n\n\n\nIt seemed clear that a JavaScript library was the right way to go, but which was the right one to choose for my Solitaire game? I mean, jQuery is great and still widely used even today, but that’s not something I want to hang my hat on. There are plenty of JavaScript animation libraries, so I wanted to consider something built specifically to handle the type of heavy animations I had in mind.\n\n\nChoosing a JavaScript animation library\n\n\nIt quickly became apparent to me that there’s no lack of JavaScript animation libraries and new, exciting technologies. They all have benefits and drawbacks, so let’s go through some of the ones I considered and why.\n\n\n\nThe Web Animations API is one such case that might replace many JavaScript animation libraries in the future. With it, you’ll be able to create complex staggered animations without loading any external libraries and with the same performance as CSS animations. The only drawback is that not all browsers support it yet. \n\n\n\nThe <canvas> element presents another exciting opportunity. In it, we can animate things with JavaScript, as we would with the DOM, but the animation is rendered as raster, which means we can make some high-performance animations. The only drawback is that the canvas element is essentially rendered as an image in the DOM, so if we’re looking for pixel-perfection, we might be out of luck. As someone acutely in tune with design, this was a dealbreaker for me.\n\n\n\nI needed something tried and tested, so I knew I probably had to go with one of the many JavaScript libraries. I started looking at libraries and narrowed my choices to Anime.js and GSAP. They both seemed to handle complex animations well and had excellent notes on performance. Anime is a well-maintained library with over 42.000 stars on GitHub, while GSAP is a super popular, battle-tested library with a thriving community.\n\n\n\nAn active community was critical to me since I needed a place to ask for help, and I didn’t want to use a library that might later be abandoned. I considered this as part of my convenience requirements.\n\n\nSequencing animations and callbacks\n\n\nOnce I had my choices narrowed down, the next step was to implement a complex animation using my two libraries. A recurrent animation in a solitaire game is that of a card moving somewhere and then turning over, so let’s see how that looks:\n\n\n\nCodePen Embed Fallback\n\n\n\nBoth animations look great! They’re smooth, and implementing both of them was pretty straightforward. Both libraries had a timeline function that made creating sequences a breeze. This is how the implementation looks in AnimeJS:\n\n\n\nvar timeline = anime.timeline({\n  begin: function() {\n    $(\".status\").text(\"Animating\")\n  },\n  complete: function() {\n    $(\".status\").text(\"Inactive\")\n  }\n});\n\ntimeline.add({\n  targets: '.card',\n  left: [0, 300],\n  easing: 'easeInOutSine',\n  duration: 500\n}).add({\n  targets: '.card .back',\n  rotateY: [0, 90],\n  easing: 'easeInSine',\n  duration: 200\n}).add({\n  targets: '.card .front',\n  rotateY: [-90, 0],\n  easing: 'easeOutSine',\n  duration: 200\n})\n\n\n\nAnime’s timeline() function comes built-in with callbacks on beginning and ending the animation, and creating the sequence is as easy as appending the sequential animations. First, I move the card, then I turn my back-image 90 degrees, so it goes out of view, and then I turn my front-image 90 degrees, so it comes into view.\n\n\n\nThe same implementation using GSAP’s timeline() function looks very similar:\n\n\n\nvar timeline = gsap.timeline({\n  onStart: function() {\n    $(\".status\").text(\"Animating\")\n  },\n  onComplete: function() {\n    $(\".status\").text(\"Inactive\")\n  }\n});\n\ntimeline.fromTo(\".card\", {\n  left: 0\n}, {\n  duration: 0.5,\n  left: 300\n}).fromTo(\".card .back\", {\n  rotationY: 0\n}, {\n  rotationY: 90,\n  ease: \"power1.easeIn\",\n  duration: 0.2\n}).fromTo(\".card .front\", {\n  rotationY: -90\n}, {\n  rotationY: 0,\n  ease: \"power1.easeOut\",\n  duration: 0.2\n})\n\n\nDecision time\n\n\nThe main difference between Anime and GSAP appears to be the syntax, where GSAP might be a little more elaborate. I was stuck with two great libraries that had very similar functionality, were able to deal with complex animation, and had a thriving community. It seemed like I had a tie race!\n\n\n\nPriorityAnimeGSAPSmooth animations✅✅Performance✅✅Convenience✅✅Browser support✅✅\n\n\n\nSo, what made me choose one library over the other?\n\n\n\nI was very concerned about how the library would act under pressure. Having laggy animations in a game like Solitaire can greatly impact how fun it is to play the game. I knew I wouldn’t be able to fully see how the library performed before I created the game. Luckily, GSAP had made a stress test that compared different animation libraries to each other, including Anime.\n\n\n\nCodePen Embed Fallback\n\n\n\nLooking at that, GSAP certainly looked to be the superior library for dealing with loads of complex animations. GSAP was giving me upwards of 26 frames per second on a heavy animation that Anime was only able to top out at 19.  After reading up on GSAP more and looking into their forums, it became clear that performance was of the highest priority to the guys behind GSAP.\n\n\n\nAnd even though both GSAP and Anime have been around a while, Anime’s repo has been sitting somewhat dormant a couple of years while GSAP had made commits in the past couple of months.\n\n\n\nI ended up using GSAP and haven’t regretted my decision!\n\n\n\nHow about you? Does any of this square with how you evaluate and compare front-end tooling? Are there other priorities you might have considered (e.g. accessibility, etc.) in a project like this? Or do you have a project where you had to pare down your choices from a bunch of different options? Please share in the comments because I’d like to know! \n\n\n\nOh, and if you want to see how it looks when animating a whole deck of cards, you can head over to my site and play a game of Solitaire. Have fun!\n\nHow I Chose an Animation Library for My Solitaire Game originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366509",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-29T12:55:44.000Z",
      "date_modified": "2022-06-29T12:55:44.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366554",
      "url": "https://css-tricks.com/help-shape-the-future-of-css-tricks/",
      "title": "Help Shape the Future of CSS-Tricks!",
      "summary": "Head’s up! The survey closed on July 12, 2022. We got tons of responses — thanks to everyone for helping us out!\nHey, so it’s been a minute since we announced that CSS-Tricks is now part of the DigitalOcean family. …\n\nHelp Shape the Future of CSS-Tricks! originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p class=\"is-style-explanation\"><strong>Head&#8217;s up!</strong> The survey closed on July 12, 2022. We got tons of responses — thanks to everyone for helping us out!</p>\n\n\n\n<p>Hey, so it&#8217;s been a minute since we <a href=\"https://css-tricks.com/css-tricks-is-joining-digitalocean/\">announced</a> that CSS-Tricks is now part of the DigitalOcean family. Things are pretty much business as usual and hopefully it feels that way to you, too. Now that we&#8217;re getting settled, we&#8217;re eager to start poking at the future of this site.</p>\n\n\n\n<p>What sort of things are we poking at? Well, that&#8217;s where you come in. You see, there&#8217;s no shortage of ideas for CSS-Tricks, but we only want to work on things that continue to make CSS-Tricks one of the spots you come to time and again for all things front-end (including actual CSS tricks).</p>\n\n\n\n<p>So, we put together a short little survey for you. Nothing intense, just a few questions to help us vet those ideas and ultimately shape the future of CSS-Tricks.</p>\n\n\n\n<span id=\"more-366554\"></span>\n\n\n\n<div class=\"wp-container-51 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://docs.google.com/forms/u/1/d/e/1FAIpQLScizuTQ0Pkg2gYoUCjVc_gUHb0UfAyjYMGDLcKzKd5U3yj7Bg/viewform?usp=sf_link\" rel=\"noopener\">Take the survey!</a></div>\n</div>\n\n\n\n<p>Thanks so much for your help! And while I have you, thanks for continuing to hang with us. In the seven years I&#8217;ve been working here at CSS-Tricks, I know this site wouldn&#8217;t even be here today without y&#8217;all. Here&#8217;s to the future of CSS-Tricks and learning together!</p>\n\n\n\n<div class=\"wp-container-52 wp-block-group ticss-1333c1a8\"><div class=\"wp-block-group__inner-container\"><h3 class=\"ticss-22a7c6ff\" id=\"csstricks-newsletter\">CSS-Tricks Newsletter</h3>\n\n\n<p>Oh, and one more update for all of you who miss the newsletter: <strong>it will be back!</strong> But we had to drop a ton of you off the list (seriously, like 80% of all subscribers) to be compliant with legal stuff that&#8217;s over my head. No worries, though, because you can <a href=\"#mktoForm_1402\">re-subscribe right down here</a> with your email address.</p>\n</div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/help-shape-the-future-of-css-tricks/\">Help Shape the Future of CSS-Tricks!</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Head’s up! The survey closed on July 12, 2022. We got tons of responses — thanks to everyone for helping us out!\n\n\n\nHey, so it’s been a minute since we announced that CSS-Tricks is now part of the DigitalOcean family. Things are pretty much business as usual and hopefully it feels that way to you, too. Now that we’re getting settled, we’re eager to start poking at the future of this site.\n\n\n\nWhat sort of things are we poking at? Well, that’s where you come in. You see, there’s no shortage of ideas for CSS-Tricks, but we only want to work on things that continue to make CSS-Tricks one of the spots you come to time and again for all things front-end (including actual CSS tricks).\n\n\n\nSo, we put together a short little survey for you. Nothing intense, just a few questions to help us vet those ideas and ultimately shape the future of CSS-Tricks.\n\n\n\n\n\n\n\n\nTake the survey!\n\n\n\n\nThanks so much for your help! And while I have you, thanks for continuing to hang with us. In the seven years I’ve been working here at CSS-Tricks, I know this site wouldn’t even be here today without y’all. Here’s to the future of CSS-Tricks and learning together!\n\n\n\nCSS-Tricks Newsletter\n\n\nOh, and one more update for all of you who miss the newsletter: it will be back! But we had to drop a ton of you off the list (seriously, like 80% of all subscribers) to be compliant with legal stuff that’s over my head. No worries, though, because you can re-subscribe right down here with your email address.\n\n\nHelp Shape the Future of CSS-Tricks! originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366554",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-28T19:52:48.000Z",
      "date_modified": "2022-06-28T19:52:48.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366484",
      "url": "https://css-tricks.com/my-dumbest-css-mistakes/",
      "title": "My Dumbest CSS Mistakes",
      "summary": "We all make mistakes in our code. It happens! I know if I had one of those “Days Since Last Mistake” signs hanging over my desk, a big ol’ goose egg would be hovering above me all the time. It …\n\nMy Dumbest CSS Mistakes originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>We all make mistakes in our code. It happens! I know if I had one of those &#8220;Days Since Last Mistake&#8221; signs hanging over my desk, a big ol&#8217; goose egg would be hovering above me all the time. It doesn&#8217;t have to be big mistakes, either. My clumsy self has committed small errors to repos ranging from typos all the way to complete npm module directories.</p>\n\n\n\n<p>Whooooooops.</p>\n\n\n\n<p>That&#8217;s one of the things I really love about CSS: it&#8217;s forgiving as heck. If it doesn&#8217;t understand a typo, it keeps looking up the cascade in search of a match. None of that stuff where one out of place characters breaks a site and takes no prisoners. But it&#8217;s still embarrassing when CSS mistakes pop up!</p>\n\n\n\n<span id=\"more-366484\"></span>\n\n\n\n<p>Like this one I find myself making way more times than I&#8217;d like to admit:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.element {\n  display: flexbox; /* &#x1f926;&#x200d;&#x2642;&#xfe0f; */\n}</code></pre>\n\n\n\n<p>Or when I try setting a gradient without a <code>background</code> property:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gradient {\n  linear-gradient(45deg, rgb(50% 100% 90%), rgb(62% 85% 93%));\n}</code></pre>\n\n\n\n<p>I hate how close <kbd>X</kbd> and <kbd>C</kbd> are on a keyboard because I can&#8217;t count how many times I&#8217;m blazing through something and mistake <code>px</code> for <code>pc</code> units.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.element {\n  font-size: 16pc; /* I meant pixels! */\n}</code></pre>\n\n\n\n<p>Another CSS mistake I catch every so often is one I know many other folks make because I spot it too often in blog posts with code snippets:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">// This is not a CSS comment.\n.element {\n  /* This is a CSS comment. */\n}</code></pre>\n\n\n\n<p>Have you ever forgotten to use <code>var()</code> around a CSS variable? I sure have.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.element {\n  color: --primary-color;\n}</code></pre>\n\n\n\n<p>Speaking of CSS variables, naming them is hard (<a href=\"https://css-tricks.com/what-do-you-name-color-variables/\">like everything else</a>) and I often use some incorrect version of a variable that I named!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --color-primary: #FF5722;\n  --color-secondary: #3E2723;\n}\n\n/* Much later on... */\n\n.element {\n  color: var(--primary-color); /* &#x1f643; */\n}</code></pre>\n\n\n\n<p>Yes, I have indeed copied a snippet of CSS before only to have fancy quotes get in the way of making it work:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.element::before {\n  content: “”; /* Should be \"\" */\n}</code></pre>\n\n\n\n<p>And, yes, I have spent way too long figuring out those quotes were the culprit.</p>\n\n\n\n<p>Looking at that last one reminds me that I sometimes forget to set the <code>content</code> property when I&#8217;m working with <code>::before</code> or <code>::after</code>. Which reminds me of how I&#8217;ve forgotten to set an element&#8217;s <code>position</code> before trying to offset it or change its <code>z-index</code>. Seriously, these things happen!</p>\n\n\n<h2 id=\"its-hard-talking-about-mistakes\">It&#8217;s hard talking about mistakes</h2>\n\n\n<p>Have you ever finished reading some blog post sharing some amazing trick and felt some sort of Imposter Syndrome? I think that&#8217;s largely because blog posts often mask the real work — and failures — that go into amazing tricks. As someone who reads posts like that for a living, I can tell you that many, if not the vast majority, go through many rounds of editing where potentially embarrassing mistakes are weeded out and smoothed over.</p>\n\n\n\n<p>Even those ridiculously awesome articles have to fail before they get all those <em>ooooos</em> and <em>ahhhhhs</em>.</p>\n\n\n\n<p>The same is true of any app, website, demo, or whatever you happen to come across. The chances any of them came out perfect the first time is next to nothin&#8217;.</p>\n\n\n\n<p>But if I&#8217;m being totally honest with you, I&#8217;m often more amazed (and interested) in the <em>journey</em> it takes to accomplish something, warts and all. The journey is a glimpse into what it&#8217;s like to <a href=\"https://css-tricks.com/video-screencasts/169-how-to-think-like-a-front-end-developer/\">think like a front-end developer</a>. That&#8217;s where real (and most valuable) learning happens.</p>\n\n\n\n<p>And all of this is merely building up to what I really want to ask&#8230;</p>\n\n\n<h2 id=\"what-are-your-dumbest-css-mistakes\">What are your dumbest CSS mistakes?</h2>\n\n\n<p>C&#8217;mon, we all know you&#8217;ve made some! Let us learn from them!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/my-dumbest-css-mistakes/\">My Dumbest CSS Mistakes</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "We all make mistakes in our code. It happens! I know if I had one of those “Days Since Last Mistake” signs hanging over my desk, a big ol’ goose egg would be hovering above me all the time. It doesn’t have to be big mistakes, either. My clumsy self has committed small errors to repos ranging from typos all the way to complete npm module directories.\n\n\n\nWhooooooops.\n\n\n\nThat’s one of the things I really love about CSS: it’s forgiving as heck. If it doesn’t understand a typo, it keeps looking up the cascade in search of a match. None of that stuff where one out of place characters breaks a site and takes no prisoners. But it’s still embarrassing when CSS mistakes pop up!\n\n\n\n\n\n\n\nLike this one I find myself making way more times than I’d like to admit:\n\n\n\n.element {\n  display: flexbox; /* 🤦‍♂️ */\n}\n\n\n\nOr when I try setting a gradient without a background property:\n\n\n\n.gradient {\n  linear-gradient(45deg, rgb(50% 100% 90%), rgb(62% 85% 93%));\n}\n\n\n\nI hate how close X and C are on a keyboard because I can’t count how many times I’m blazing through something and mistake px for pc units.\n\n\n\n.element {\n  font-size: 16pc; /* I meant pixels! */\n}\n\n\n\nAnother CSS mistake I catch every so often is one I know many other folks make because I spot it too often in blog posts with code snippets:\n\n\n\n// This is not a CSS comment.\n.element {\n  /* This is a CSS comment. */\n}\n\n\n\nHave you ever forgotten to use var() around a CSS variable? I sure have.\n\n\n\n.element {\n  color: --primary-color;\n}\n\n\n\nSpeaking of CSS variables, naming them is hard (like everything else) and I often use some incorrect version of a variable that I named!\n\n\n\n:root {\n  --color-primary: #FF5722;\n  --color-secondary: #3E2723;\n}\n\n/* Much later on... */\n\n.element {\n  color: var(--primary-color); /* 🙃 */\n}\n\n\n\nYes, I have indeed copied a snippet of CSS before only to have fancy quotes get in the way of making it work:\n\n\n\n.element::before {\n  content: “”; /* Should be \"\" */\n}\n\n\n\nAnd, yes, I have spent way too long figuring out those quotes were the culprit.\n\n\n\nLooking at that last one reminds me that I sometimes forget to set the content property when I’m working with ::before or ::after. Which reminds me of how I’ve forgotten to set an element’s position before trying to offset it or change its z-index. Seriously, these things happen!\n\n\nIt’s hard talking about mistakes\n\n\nHave you ever finished reading some blog post sharing some amazing trick and felt some sort of Imposter Syndrome? I think that’s largely because blog posts often mask the real work — and failures — that go into amazing tricks. As someone who reads posts like that for a living, I can tell you that many, if not the vast majority, go through many rounds of editing where potentially embarrassing mistakes are weeded out and smoothed over.\n\n\n\nEven those ridiculously awesome articles have to fail before they get all those ooooos and ahhhhhs.\n\n\n\nThe same is true of any app, website, demo, or whatever you happen to come across. The chances any of them came out perfect the first time is next to nothin’.\n\n\n\nBut if I’m being totally honest with you, I’m often more amazed (and interested) in the journey it takes to accomplish something, warts and all. The journey is a glimpse into what it’s like to think like a front-end developer. That’s where real (and most valuable) learning happens.\n\n\n\nAnd all of this is merely building up to what I really want to ask…\n\n\nWhat are your dumbest CSS mistakes?\n\n\nC’mon, we all know you’ve made some! Let us learn from them!\n\nMy Dumbest CSS Mistakes originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366484",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-28T15:10:31.000Z",
      "date_modified": "2022-06-28T15:10:31.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366468",
      "url": "https://css-tricks.com/web-development-books-you-can-get-for-free/",
      "title": "Great (and Free!) Web Development Books You Can Get Online",
      "summary": "Right after “Where is the best place to learn?” perhaps the most commonly asked question I hear from folks getting into code is “What web development books should I get to learn?” Well, consider this an answer to that question …\n\nGreat (and Free!) Web Development Books You Can Get Online originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Right after &#8220;Where is the best place to learn?&#8221; perhaps the most commonly asked question I hear from folks getting into code is &#8220;What web development books should I get to learn?&#8221; Well, consider this an answer to that question as I&#8217;ve curated a list of books that are not only great for getting into front-end development but also freely available.</p>\n\n\n\n<span id=\"more-366468\"></span>\n\n\n<div class=\"simpletoc ticss-7ec940ac\"><h2 class=\"simpletoc-title\">Table of Contents</h2><ol class=\"simpletoc-list\"   >\n<li>\n<a  href=\"#books-on-css\">Books on CSS</a></li><li>\n<a  href=\"#books-on-html-amp-css\">Books on HTML &amp; CSS</a></li><li>\n<a  href=\"#books-on-process\">Books on process</a></li><li>\n<a  href=\"#books-on-javascript\">Books on JavaScript</a></li><li>\n<a  href=\"#wrapping-up\">Wrapping up</a></li></ol></div>\n\n<h3 id=\"books-on-css\">Books on CSS</h3>\n\n\n<p>This is the bulk of where we&#8217;re going to hang out because, well, this is a site <em>mostly</em> about CSS!</p>\n\n\n<h4 id=\"the-magic-of-css-by-adam-schwartz\"><em>The Magic of CSS</em> by Adam Schwartz</h4>\n\n\n<ul class=\"ticss-e5d14e06 is-style-almanac-list\"><li><strong>Perfect for:</strong> Next steps in your CSS journey</li><li><strong>Learning level:</strong> Intermediate</li><li><strong>Requires:</strong> Some basic understanding of CSS</li></ul>\n\n\n\n<p><a href=\"https://twitter.com/adamfschwartz\" rel=\"noopener\">Adam Schwartz</a> covers six CSS concepts in this book, including the box model, layout, tables, color, typography, and transitions. These are things even stump some seasoned CSSers, some of these concepts might be confusing. Adam has gone to a great length to demystify each.</p>\n\n\n\n<p>In addition to the book being a great primer on complex CSS concepts, I love how each of the CSS properties mentioned throughout the book is clickable so you can always click on them to see how each is applied. There are many illustrative examples and recommendations for further reading, should you desire to learn more about each chapter.</p>\n\n\n\n<p>I found the chapter on colors very interesting not only because it gets into the best practices for using color accessibly, but also because there&#8217;s super practical applications, like when Adam gets into using CSS to support an organization&#8217;s branding.</p>\n\n\n\n<div class=\"wp-container-71 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://adamschwartz.co/magic-of-css/\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h4 id=\"resilient-web-design-by-jeremy-keith\"><em>Resilient Web Design</em> by Jeremy Keith</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Developing strategies for writing code</li><li><strong>Learning level:</strong> Intermediate</li><li><strong>Requires:</strong> Some basic understanding of CSS</li></ul>\n\n\n\n<p>Straight from the introduction:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>You won’t find any code in here to help you build better websites. But you will find ideas and approaches. Ideas are more resilient than code. I’ve tried to combine the most resilient ideas from the history of web design into an approach for building the websites of the future.</p></blockquote>\n\n\n\n<p>What Jeremy does so well is describing soft skills, like planning, outlining, and approaches for writing code. So, rather than dropping in code snippets throughout the book, what you&#8217;ll find are details about code strategies, such as progressive enhancement, deciding on what tooling to use, and the challenges of writing future-friendly code.</p>\n\n\n\n<p>And for those of you who have not had the pleasure of listening to Jeremy narrate content (like he does in the <a href=\"https://css-tricks.com/category/history/\">Web History series</a>), there&#8217;s an audio file available to download.</p>\n\n\n\n<div class=\"wp-container-72 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://resilientwebdesign.com/\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h4 id=\"beginning-css-web-development-from-novice-to-professional-by-simon-collison\"><em>Beginning CSS Web Development: From Novice to Professional</em> by Simon Collison</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> The fundamentals of CSS</li><li><strong>Learning level:</strong> Absolute beginners</li><li><strong>Requires:</strong> Nothing but time and motivation</li></ul>\n\n\n\n<p>It may be written in 2006, but Simon&#8217;s coverage of web standards and accessibility is timeless and relevant today. He provides an understanding of interoperability as well as approaches for building web applications, including the early planning phases that often go overlooked.</p>\n\n\n\n<p>The book has two broad parts which are further divided into 16 chapters. Part 1 covers CSS topics, like working with text, links, lists, backgrounds, images, tables, and forms. It really doesn&#8217;t skimp on the details either.</p>\n\n\n\n<p>Part 2 is all about layout, shedding light on usability and layout manipulation, plus a handy case study. The chapters are arranged in such a way that one chapter naturally flows into the next. Each chapter also contains a concluding section that highlights all the important concepts covered in the chapter.</p>\n\n\n\n<p>Indeed, the book provides novice developers a solid background in CSS and helps them gradually with more advanced concepts. It will make your CSS journey easier.</p>\n\n\n\n<div class=\"wp-container-73 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://archive.org/details/beginningcsswebd0000coll/page/n9/mode/2up\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h3 id=\"books-on-html-amp-css\">Books on HTML &amp; CSS</h3>\n\n\n<p>CSS and HTML are often taught together, which can be especially helpful when you&#8217;re writing your first lines of code and want to know how the two languages interact with one another.</p>\n\n\n<h4 id=\"learn-to-code-html-amp-css-by-shay-howe\"><em>Learn to Code HTML &amp; CSS</em> by Shay Howe</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Starting your front-end journey</li><li><strong>Learning level:</strong> Beginners</li><li><strong>Requires:</strong> No prior experience at all</li></ul>\n\n\n\n<p>Shay refers to this book as a <q>simple and comprehensive guide dedicated to helping beginners learn HTML and CSS.</q> He does this by focusing on common elements of front-end design and development. Some of the lessons covered are Box Model, Positioning, Typography, Background and Gradients, Lists, Media, Forms, and Tables. In the first chapter *Building Your First Web Page, Shay analyzed the contents of a typical website including elements, attributes and setting up the HTML document structure, code validation, selectors and CSS resets. I find the book very instructive especially as it went beyond the surface to address many key concepts with code samples, which you can follow along.</p>\n\n\n\n<p>One profound thing about this great book is that, Shay built a complete project from scratch throughout the 12 lessons and at the end of each lesson, he provided a summary and links to the current state of that website (so you can compare with yours if you follow along) and the source code at every stage of the lessons.</p>\n\n\n\n<p>If you&#8217;re a learner who learns by doing, you will find this material very useful and by the time you&#8217;re done, you will have developed a multi page functional website.</p>\n\n\n\n<p>An advanced sequel of the course is also available free via the same link.</p>\n\n\n\n<div class=\"wp-container-74 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://learn.shayhowe.com/html-css/\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h4 id=\"html-amp-css-learn-the-fundamentals-in-7-days-by-michael-knapp\"><em>HTML &amp; CSS: Learn the Fundamentals in 7 Days</em> by Michael Knapp</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Starting your front-end journey</li><li><strong>Learning level:</strong> Beginners</li><li><strong>Requires:</strong> No prior experience at all</li></ul>\n\n\n\n<p>Can you possibly learn everything there is to know about the HTML and CSS in seven days? Probably not, but that&#8217;s why this 2017 book by Michael Knapp is focused straight on the fundamentals. Michael delves into a brief history lesson before launching into HTML and CSS structure, logic, and presentation. You&#8217;re going to get all up to speed to the point where you should feel pretty confident about putting a basic webpage together, plus a few extras along the way as the book touches on SEO and analytics.</p>\n\n\n\n<p>The book is comprised of simple programs that you can run on your computer if you wish to follow along.</p>\n\n\n\n<p>The ebook version is available for free on Apple Books, but there is a Kindle version as well if you already have a subscription there.</p>\n\n\n\n<div class=\"wp-container-75 is-horizontal is-nowrap wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\">Apple Books</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\">Kindle</a></div>\n</div>\n\n\n<h4 id=\"the-greatest-css-tricks-vol-1-by-chris-coyier\"><em>The Greatest CSS Tricks Vol. 1</em> by Chris Coyier</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Marveling at what CSS can do</li><li><strong>Learning level:</strong> Intermediate</li><li><strong>Requires</strong>: Some CSS experience</li></ul>\n\n\n\n<p>Did you know that CSS-Tricks has a book on CSS too? It would be silly to leave that off this list because what you get is a collection of classic CSS trickery that&#8217;s explained by none other than Chris Coyier. In fact, Chris handpicked all of the examples covered in the book from his many, many (many!) years running this here site from the plentitude of tricks that have crossed his desk.</p>\n\n\n\n<p>Each trick solves a particular pain point. For instance, the first <a href=\"https://css-tricks.com/books/greatest-css-tricks/pin-scrolling-to-bottom/\">&#8220;Pin Scrolling to Bottom&#8221; trick</a>demonstrates how the <a href=\"https://css-tricks.com/almanac/properties/o/overflow-anchor/\"><code>overflow-anchor</code></a> CSS property can be used to create the same chat-like interface of a tool like Slack, where the screen is anchored at the bottom in a way that feels as though the page is scrolling for you as new items are added.</p>\n\n\n\n<div class=\"wp-container-76 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/books/greatest-css-tricks/\">Direct Link</a></div>\n</div>\n\n\n<h3 id=\"books-on-process\">Books on process</h3>\n\n\n<p>Code is just as much about <em>how</em> we write code and collaborate on projects with others as it is about the actual code we write. The following books are great starting points for everything from planning and project management to communicating and collaborating with others.</p>\n\n\n<h4 id=\"collaborate-bring-people-together-around-digital-projects-by-ellen-de-vries\"><em>Collaborate: Bring People Together Around Digital Projects</em> by Ellen De Vries</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Being a better collaborator</li><li><strong>Learning level:</strong> N/A</li><li><strong>Requires:</strong> An open mind to working well with others!</li></ul>\n\n\n\n<p>Ellen addresses something in this book that we all have to deal with: collaborating with others. And it&#8217;s no small deal — the book is divided into four parts that go super deep into things we can go to work well with others:</p>\n\n\n\n<ul><li>Know how to prepare the ground and create the right conditions for collaboration.</li><li>Nurture the group culture in the early stages of collaboration.</li><li>Maintain a healthy collaborative process.</li><li>Reap the rewards of a collaboration.</li></ul>\n\n\n\n<p>As a content strategist, Ellen has the right kind of experience to help anyone be part of a collaborative project, or get the most from a collaboration.</p>\n\n\n\n<div class=\"wp-container-77 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://books.gathercontent.com/collaborate\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h4 id=\"the-modern-web-design-process-by-webflow\"><em>The Modern Web Design Process</em> by webflow</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Senior designers, project managers</li><li><strong>Learning level:</strong> N/A</li><li><strong>Requires:</strong> Some basic understanding of CSS</li></ul>\n\n\n\n<p>This free ebook features a seven-step design process that&#8217;s meant to help define the workflow for today&#8217;s brand of web design.</p>\n\n\n\n<p>That includes:</p>\n\n\n\n<ul><li>Setting goals</li><li>Defining scope</li><li>Sitemaps and wireframes</li><li>Working with content</li><li>Handling visual elements</li><li>Testing</li><li>Shipping</li></ul>\n\n\n\n<p>Anyone starting a new design project or in the middle of a design project will find the invaluable insights throughout the book. And what&#8217;s most remarkable is how this is written in a way that almost feels as though you are being hand-held through an entire project from concept to completion.</p>\n\n\n\n<div class=\"wp-container-78 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://ebooks.webflow.com/ebook-download/the-modern-web-design-process\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h4 id=\"designing-for-the-web-by-mark-boulton\"><em>Designing for the Web</em> by Mark Boulton</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Learning to work with clients</li><li><strong>Learning level:</strong> Beginners</li><li><strong>Requires</strong>: A genuine interest in design</li></ul>\n\n\n\n<p>It seems many organizations tackle design differently. But author Mark Boulton documents a thorough design workflow in <em>Designing for the Web</em> that de-mystifies many challenges and covers everything you need to know.</p>\n\n\n\n<p>What&#8217;s unique about this book is that it&#8217;s really about work. Sure, there&#8217;s a bunch of hugely valuable information on design best practices for things like typography, color, and layout, but what you&#8217;re really going to take away from this book is <em>how</em> these fit into a design workflow. It teaches you how to research, the technologies we have to implement ideas, and ultimately, how to work with others as well as clients — perfect fodder for folks including design leads, project managers, freelancers, or anyone who&#8217;s involved in the project delivery process.</p>\n\n\n\n<div class=\"wp-container-79 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://designingfortheweb.co.uk/\" rel=\"noopener\">Direct Link</a></div>\n</div>\n\n\n<h4 id=\"learn-version-control-with-git-by-tower\"><em>Learn Version Control with Git</em> by Tower</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Mastering Git</li><li><strong>Learning level:</strong> All levels welcome</li><li><strong>Requires</strong>: No prior knowledge at all</li></ul>\n\n\n\n<p>In this book, the team behind the popular <a href=\"https://www.git-tower.com/\" rel=\"noopener\">Tower client for Git</a> introduce learners to the crux of version control system using Git. Developers who work in teams will particularly find this very useful, as it helps in effectively collaborating with team members building different features of a project even when you&#8217;re thousands of miles apart. That said, it&#8217;s still really great for anyone who might be shy of the command line and wants to build confidence there.</p>\n\n\n\n<p>And since the book is by the maker of an application that interacts with Git, you&#8217;re going to get a nice dose of using Tower as a GUI in addition to working directly on the command line.</p>\n\n\n\n<p>So, whether it&#8217;s committing, branching, merging, pull requests, forking work, or handling merge conflicts, you&#8217;re going to get a whole lot from this book.</p>\n\n\n\n<div class=\"wp-container-80 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://www.git-tower.com/learn/git/ebook\" rel=\"noopener\">Direct Link</a></div>\n</div>\n\n\n<h3 id=\"books-on-javascript\">Books on JavaScript</h3>\n\n\n<p>Learning JavaScript always seems to be en vogue. In fact, <a href=\"https://css-tricks.com/javascript-learning-landscape-2018/\">Jason Rodriguez wrote about the JavaScript learning landscape in 2018</a> and provided a nice list of free books. Not too much has cropped up since then, but here are my thoughts on the following books.</p>\n\n\n<h4 id=\"eloquent-javascript-by-marijn-haverbeke\"><em>Eloquent JavaScript</em> by Marijn Haverbeke</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Getting better at writing JavaScript</li><li><strong>Learning level:</strong> Intermediate to seasoned developers</li><li><strong>Requires:</strong> Prior JavaScript experience</li></ul>\n\n\n\n<p><em>Eloquent JavaScript</em> really lives up to its name. Personally, I consider this one of the best-written JavaScript books I have ever come across. Marjin&#8217;s writing style is engaging, especially with how he introduces programming concepts and carries the reader along. In his words, the book is simply about <q>instructing computers and making them do what you want them to do.</q></p>\n\n\n\n<p>The book is a deep dive into JavaScript spread across three parts and 21 chapters. You&#8217;re going to read a bunch about basic programming concepts, such as values, types, operators and functions, to advanced concepts like regular expressions, modules, the DOM, and asynchronous programming. He starts every chapter with a somewhat philosophical quote to prepare the reader for what lies ahead and then dives straight into the topic.</p>\n\n\n\n<p>Plus, there&#8217;s three projects to help you practice your newfound skills.</p>\n\n\n\n<div class=\"wp-container-81 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://eloquentjavascript.net/\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h4 id=\"understanding-javascript-promises-by-nicholas-c-zakas\"><em>Understanding JavaScript Promises</em> by Nicholas C. Zakas</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Those who want to learn all about asynchronous programming with promises in JavaScript.</li><li><strong>Learning level:</strong> Intermediate</li><li><strong>Requires:</strong> Basic JavaScript chops</li></ul>\n\n\n\n<p>JavaScript promises were introduced in 2015 as part of the ES6 specification to handle asynchronous functions in JavaScript. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\" rel=\"noopener\">According to MDN</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A promise is an object representing the eventual completion or failure of an asynchronous operation</p></blockquote>\n\n\n\n<p>In this 51-page book, Nicholas explains the concept of Promises over three chapters: Basics, Chaining Promises, and Working with Multiple Promises. Although the <a href=\"https://ebooks.humanwhocodes.com/promises\" rel=\"noopener\">link to the book we&#8217;re providing</a> is the free community version, the full version (<a href=\"https://www.amazon.com/dp/B09RTNGFZ1/ref=cm_sw_r_cp_api_glt_WN8VCYEZ5A5ZT6PCBHBA?tag=nczonline-20&amp;geniuslink=true\" rel=\"noopener\">available on Amazon</a>) has two more chapters on Async Functions and Unhandled Rejection Tracking. Nicholas simplified the concept of Promises with several illustrations and examples. You will learn how to use <code>then()</code>, <code>catch()</code>, and <code>finally()</code> and understand how to chain multiple promises together. Nicholas also covers the assignment of rejection and settlement handlers. You may want to give the book a read to solidify your understanding of the topic.</p>\n\n\n\n<p>Nicholas is a veteran JavaScript book author who has been writing about JavaScript for over 15 years. He brings his wealth of experience to bear in this book (just as he has in <a href=\"https://css-tricks.com/author/nicholaszakas/\">his work here at CSS-Tricks</a>).</p>\n\n\n\n<div class=\"wp-container-82 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://ebooks.humanwhocodes.com/promises\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h4 id=\"speaking-javascript-by-axel-rauschmayer\"><em>Speaking JavaScript</em> by Axel Rauschmayer</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Leveling up from beginning JavaScript</li><li><strong>Learning level:</strong> Intermediate</li><li><strong>Requires</strong>: Knowledge of object oriented programming</li></ul>\n\n\n\n<p>This book is presented in four chapters covering more than 30 topics. Here&#8217;s how it breaks down:</p>\n\n\n\n<ol><li>The first chapter is a nice refresher on syntax, variable types, functions and exception handling.</li><li>The second chapter offers historical perspective into JavaScript as a prelude for the types of features covered throughout the rest of the book.</li><li>Chapter 3 is presented as more or less a reference book with short, clean examples.</li><li>The final chapter outlines tips, tools and libraries to help write better JavaScript and follow best practices.</li></ol>\n\n\n\n<div class=\"wp-container-83 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"http://speakingjs.com/es5/\" rel=\"noopener\">Direct Link</a></div>\n</div>\n\n\n<h4 id=\"secrets-of-the-javascript-ninja-by-john-resig-and-bear-bibeault\"><em>Secrets of the JavaScript Ninja</em> by John Resig and Bear Bibeault</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Creating a cross-browser JavaScript library from the ground up</li><li><strong>Learning level:</strong> Intermediate</li><li><strong>Requires</strong>: Some prior programming experience</li></ul>\n\n\n\n<p>There&#8217;s actually a <a href=\"https://www.manning.com/books/secrets-of-the-javascript-ninja-second-edition\" rel=\"noopener\">newer edition of this book</a>, but <a href=\"https://www.manning.com/books/secrets-of-the-javascript-ninja\" rel=\"noopener\">the 2012 edition is the one that&#8217;s free</a>. Either way, it&#8217;s a good opportunity to learn from John Resig; you know, the guy who <em>created</em> jQuery.</p>\n\n\n\n<p>The techniques covered here include closures, functions, the DOM, object orientation with prototypes, and cross-browser strategies. One nice perk is that each chapter is followed by a brief recap that&#8217;s perfect for a reference once you&#8217;ve finished the book.</p>\n\n\n\n<div class=\"wp-container-84 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://www.manning.com/books/secrets-of-the-javascript-ninja\" rel=\"noopener\">Direct Link</a></div>\n</div>\n\n\n<h4 id=\"learning-javascript-design-patterns-by-addy-osmani\">Learning JavaScript Design Patterns by Addy Osmani</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Learning to write more efficient JavaScript</li><li><strong>Learning level:</strong> Intermediate</li><li><strong>Requires</strong>: A decent level of JavaScript experience</li></ul>\n\n\n\n<p>The concept of design pattern refers to a reusable solution to a commonly recurring problem in application development. In this book, Addy Osmani covers the implementation of common design patterns using ES6 and beyond, as well as React-specific design patterns, which can be super handy when working on complex React apps where maintainability is a primary goal.</p>\n\n\n\n<p>Some of the patterns covered include Singleton, Proxy, Provider, Prototype and Observer patterns. In some cases, Addy includes pros and cons of using some of these patterns and how they may affect the performance of your application.</p>\n\n\n\n<div class=\"wp-container-85 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://www.patterns.dev/posts/classic-design-patterns/\" rel=\"noopener\">Direct Link</a></div>\n</div>\n\n\n<h4 id=\"you-dont-know-js-by-kyle-simpson\"><em>You Don&#8217;t Know JS</em> by Kyle Simpson</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Mastering JavaScript</li><li><strong>Learning level:</strong> Beginner</li><li><strong>Requires</strong>: Little or no prior programming experience</li></ul>\n\n\n\n<p>While the title might be a bit provocative, what Kyle is implying here is that he writes this book assuming you have no prior JavaScript experience whatsoever.</p>\n\n\n\n<p>Kyle begins starts by going through the rudiments of programming as seen through the lens of JavaScript. He then proceeds, in subsequent chapters, to introduce more advanced concepts like scope and closure, the <code>this</code> keyword, object prototypes, <code>async</code>, and performance.</p>\n\n\n\n<p>There&#8217;s a lot of excellent details and explanations in here, and Kyle makes it super easy to understand by avoiding super technical jargon. There is also many exercises designed to reinforce your learning. This book will definitely get you up to speed with JavaScript. <a href=\"https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed\" rel=\"noopener\">There&#8217;s second edition of the book in the works</a> that you can track in GitHub.</p>\n\n\n\n<div class=\"wp-container-86 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md/\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h4 id=\"the-javascript-beginners-handbook-by-flavio-copes\"><em>The JavaScript Beginner&#8217;s Handbook</em> by Flavio Copes</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> A beginner&#8217;s reference</li><li><strong>Learning level:</strong> Just getting started</li><li><strong>Requires:</strong> Email sign-up, maybe some prior experience</li></ul>\n\n\n\n<p>Flavio has put together a very useful JavaScript reference for those just starting out. It&#8217;s more like a quick reference guide than a textbook, so those of you just starting out might want to consider this as something you keep on your desk rather than something you sit with for long periods of time.</p>\n\n\n\n<div class=\"wp-container-87 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://flaviocopes.com/page/javascript-handbook/\" rel=\"noopener\">Direct link</a></div>\n</div>\n\n\n<h4 id=\"javascript-for-data-science-by-gans-hodges-amp-wilson\"><em>JavaScript for Data Science</em> by Gans, Hodges &amp; Wilson</h4>\n\n\n<ul class=\"is-style-almanac-list\"><li><strong>Perfect for:</strong> Getting into data visualizations</li><li><strong>Learning level:</strong> Intermediate to advanced</li><li><strong>Requires:</strong> A decent handle on JavaScript</li></ul>\n\n\n\n<p>The authors cover core features of modern JavScript, including callbacks, promises, inheritance, objects and classes. They also get into testing using <a href=\"https://mochajs.org\" rel=\"noopener\">Mocha</a>, React, and data vizualization, all of which are great for anyone looking to level up their code and how its written. The book doesn&#8217;t get as deep into many the concepts as some of the other books, but it really shines when it gets into data science.</p>\n\n\n\n<p>The book uses Data-Forge; a JavaScript library designed for working with tabular data. There are numerous exercises to help readers keep up to speed with the subject of discussion. The last chapter also includes a capstone project that pulls everything together.</p>\n\n\n\n<div class=\"wp-container-88 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://js4ds.org\" rel=\"noopener\">Direct Link</a></div>\n</div>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>I sure hope this collection of books help you, whether you&#8217;re taking your first steps in front-end web development, have a dozen years under your belt, or you fall somewhere in between. I know how hard it is to get into something new for the first time and the feeling of not knowing where to look. I also know how it feels to hit a plateau and need something to level me up. There should be something for everyone here, regardless of where you are in your learning journey.</p>\n\n\n\n<p>And, hey, if you have any other books that are available to snag for free online, please share them in the comments! I bet we can get an even bigger list going.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/web-development-books-you-can-get-for-free/\">Great (and Free!) Web Development Books You Can Get Online</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Right after “Where is the best place to learn?” perhaps the most commonly asked question I hear from folks getting into code is “What web development books should I get to learn?” Well, consider this an answer to that question as I’ve curated a list of books that are not only great for getting into front-end development but also freely available.\n\n\n\n\n\n\nTable of Contents\n\nBooks on CSS\nBooks on HTML & CSS\nBooks on process\nBooks on JavaScript\nWrapping up\n\nBooks on CSS\n\n\nThis is the bulk of where we’re going to hang out because, well, this is a site mostly about CSS!\n\n\nThe Magic of CSS by Adam Schwartz\n\n\nPerfect for: Next steps in your CSS journeyLearning level: IntermediateRequires: Some basic understanding of CSS\n\n\n\nAdam Schwartz covers six CSS concepts in this book, including the box model, layout, tables, color, typography, and transitions. These are things even stump some seasoned CSSers, some of these concepts might be confusing. Adam has gone to a great length to demystify each.\n\n\n\nIn addition to the book being a great primer on complex CSS concepts, I love how each of the CSS properties mentioned throughout the book is clickable so you can always click on them to see how each is applied. There are many illustrative examples and recommendations for further reading, should you desire to learn more about each chapter.\n\n\n\nI found the chapter on colors very interesting not only because it gets into the best practices for using color accessibly, but also because there’s super practical applications, like when Adam gets into using CSS to support an organization’s branding.\n\n\n\n\nDirect link\n\n\n\nResilient Web Design by Jeremy Keith\n\n\nPerfect for: Developing strategies for writing codeLearning level: IntermediateRequires: Some basic understanding of CSS\n\n\n\nStraight from the introduction:\n\n\n\nYou won’t find any code in here to help you build better websites. But you will find ideas and approaches. Ideas are more resilient than code. I’ve tried to combine the most resilient ideas from the history of web design into an approach for building the websites of the future.\n\n\n\nWhat Jeremy does so well is describing soft skills, like planning, outlining, and approaches for writing code. So, rather than dropping in code snippets throughout the book, what you’ll find are details about code strategies, such as progressive enhancement, deciding on what tooling to use, and the challenges of writing future-friendly code.\n\n\n\nAnd for those of you who have not had the pleasure of listening to Jeremy narrate content (like he does in the Web History series), there’s an audio file available to download.\n\n\n\n\nDirect link\n\n\n\nBeginning CSS Web Development: From Novice to Professional by Simon Collison\n\n\nPerfect for: The fundamentals of CSSLearning level: Absolute beginnersRequires: Nothing but time and motivation\n\n\n\nIt may be written in 2006, but Simon’s coverage of web standards and accessibility is timeless and relevant today. He provides an understanding of interoperability as well as approaches for building web applications, including the early planning phases that often go overlooked.\n\n\n\nThe book has two broad parts which are further divided into 16 chapters. Part 1 covers CSS topics, like working with text, links, lists, backgrounds, images, tables, and forms. It really doesn’t skimp on the details either.\n\n\n\nPart 2 is all about layout, shedding light on usability and layout manipulation, plus a handy case study. The chapters are arranged in such a way that one chapter naturally flows into the next. Each chapter also contains a concluding section that highlights all the important concepts covered in the chapter.\n\n\n\nIndeed, the book provides novice developers a solid background in CSS and helps them gradually with more advanced concepts. It will make your CSS journey easier.\n\n\n\n\nDirect link\n\n\n\nBooks on HTML & CSS\n\n\nCSS and HTML are often taught together, which can be especially helpful when you’re writing your first lines of code and want to know how the two languages interact with one another.\n\n\nLearn to Code HTML & CSS by Shay Howe\n\n\nPerfect for: Starting your front-end journeyLearning level: BeginnersRequires: No prior experience at all\n\n\n\nShay refers to this book as a simple and comprehensive guide dedicated to helping beginners learn HTML and CSS. He does this by focusing on common elements of front-end design and development. Some of the lessons covered are Box Model, Positioning, Typography, Background and Gradients, Lists, Media, Forms, and Tables. In the first chapter *Building Your First Web Page, Shay analyzed the contents of a typical website including elements, attributes and setting up the HTML document structure, code validation, selectors and CSS resets. I find the book very instructive especially as it went beyond the surface to address many key concepts with code samples, which you can follow along.\n\n\n\nOne profound thing about this great book is that, Shay built a complete project from scratch throughout the 12 lessons and at the end of each lesson, he provided a summary and links to the current state of that website (so you can compare with yours if you follow along) and the source code at every stage of the lessons.\n\n\n\nIf you’re a learner who learns by doing, you will find this material very useful and by the time you’re done, you will have developed a multi page functional website.\n\n\n\nAn advanced sequel of the course is also available free via the same link.\n\n\n\n\nDirect link\n\n\n\nHTML & CSS: Learn the Fundamentals in 7 Days by Michael Knapp\n\n\nPerfect for: Starting your front-end journeyLearning level: BeginnersRequires: No prior experience at all\n\n\n\nCan you possibly learn everything there is to know about the HTML and CSS in seven days? Probably not, but that’s why this 2017 book by Michael Knapp is focused straight on the fundamentals. Michael delves into a brief history lesson before launching into HTML and CSS structure, logic, and presentation. You’re going to get all up to speed to the point where you should feel pretty confident about putting a basic webpage together, plus a few extras along the way as the book touches on SEO and analytics.\n\n\n\nThe book is comprised of simple programs that you can run on your computer if you wish to follow along.\n\n\n\nThe ebook version is available for free on Apple Books, but there is a Kindle version as well if you already have a subscription there.\n\n\n\n\nApple Books\n\n\n\nKindle\n\n\n\nThe Greatest CSS Tricks Vol. 1 by Chris Coyier\n\n\nPerfect for: Marveling at what CSS can doLearning level: IntermediateRequires: Some CSS experience\n\n\n\nDid you know that CSS-Tricks has a book on CSS too? It would be silly to leave that off this list because what you get is a collection of classic CSS trickery that’s explained by none other than Chris Coyier. In fact, Chris handpicked all of the examples covered in the book from his many, many (many!) years running this here site from the plentitude of tricks that have crossed his desk.\n\n\n\nEach trick solves a particular pain point. For instance, the first “Pin Scrolling to Bottom” trickdemonstrates how the overflow-anchor CSS property can be used to create the same chat-like interface of a tool like Slack, where the screen is anchored at the bottom in a way that feels as though the page is scrolling for you as new items are added.\n\n\n\n\nDirect Link\n\n\n\nBooks on process\n\n\nCode is just as much about how we write code and collaborate on projects with others as it is about the actual code we write. The following books are great starting points for everything from planning and project management to communicating and collaborating with others.\n\n\nCollaborate: Bring People Together Around Digital Projects by Ellen De Vries\n\n\nPerfect for: Being a better collaboratorLearning level: N/ARequires: An open mind to working well with others!\n\n\n\nEllen addresses something in this book that we all have to deal with: collaborating with others. And it’s no small deal — the book is divided into four parts that go super deep into things we can go to work well with others:\n\n\n\nKnow how to prepare the ground and create the right conditions for collaboration.Nurture the group culture in the early stages of collaboration.Maintain a healthy collaborative process.Reap the rewards of a collaboration.\n\n\n\nAs a content strategist, Ellen has the right kind of experience to help anyone be part of a collaborative project, or get the most from a collaboration.\n\n\n\n\nDirect link\n\n\n\nThe Modern Web Design Process by webflow\n\n\nPerfect for: Senior designers, project managersLearning level: N/ARequires: Some basic understanding of CSS\n\n\n\nThis free ebook features a seven-step design process that’s meant to help define the workflow for today’s brand of web design.\n\n\n\nThat includes:\n\n\n\nSetting goalsDefining scopeSitemaps and wireframesWorking with contentHandling visual elementsTestingShipping\n\n\n\nAnyone starting a new design project or in the middle of a design project will find the invaluable insights throughout the book. And what’s most remarkable is how this is written in a way that almost feels as though you are being hand-held through an entire project from concept to completion.\n\n\n\n\nDirect link\n\n\n\nDesigning for the Web by Mark Boulton\n\n\nPerfect for: Learning to work with clientsLearning level: BeginnersRequires: A genuine interest in design\n\n\n\nIt seems many organizations tackle design differently. But author Mark Boulton documents a thorough design workflow in Designing for the Web that de-mystifies many challenges and covers everything you need to know.\n\n\n\nWhat’s unique about this book is that it’s really about work. Sure, there’s a bunch of hugely valuable information on design best practices for things like typography, color, and layout, but what you’re really going to take away from this book is how these fit into a design workflow. It teaches you how to research, the technologies we have to implement ideas, and ultimately, how to work with others as well as clients — perfect fodder for folks including design leads, project managers, freelancers, or anyone who’s involved in the project delivery process.\n\n\n\n\nDirect Link\n\n\n\nLearn Version Control with Git by Tower\n\n\nPerfect for: Mastering GitLearning level: All levels welcomeRequires: No prior knowledge at all\n\n\n\nIn this book, the team behind the popular Tower client for Git introduce learners to the crux of version control system using Git. Developers who work in teams will particularly find this very useful, as it helps in effectively collaborating with team members building different features of a project even when you’re thousands of miles apart. That said, it’s still really great for anyone who might be shy of the command line and wants to build confidence there.\n\n\n\nAnd since the book is by the maker of an application that interacts with Git, you’re going to get a nice dose of using Tower as a GUI in addition to working directly on the command line.\n\n\n\nSo, whether it’s committing, branching, merging, pull requests, forking work, or handling merge conflicts, you’re going to get a whole lot from this book.\n\n\n\n\nDirect Link\n\n\n\nBooks on JavaScript\n\n\nLearning JavaScript always seems to be en vogue. In fact, Jason Rodriguez wrote about the JavaScript learning landscape in 2018 and provided a nice list of free books. Not too much has cropped up since then, but here are my thoughts on the following books.\n\n\nEloquent JavaScript by Marijn Haverbeke\n\n\nPerfect for: Getting better at writing JavaScriptLearning level: Intermediate to seasoned developersRequires: Prior JavaScript experience\n\n\n\nEloquent JavaScript really lives up to its name. Personally, I consider this one of the best-written JavaScript books I have ever come across. Marjin’s writing style is engaging, especially with how he introduces programming concepts and carries the reader along. In his words, the book is simply about instructing computers and making them do what you want them to do.\n\n\n\nThe book is a deep dive into JavaScript spread across three parts and 21 chapters. You’re going to read a bunch about basic programming concepts, such as values, types, operators and functions, to advanced concepts like regular expressions, modules, the DOM, and asynchronous programming. He starts every chapter with a somewhat philosophical quote to prepare the reader for what lies ahead and then dives straight into the topic.\n\n\n\nPlus, there’s three projects to help you practice your newfound skills.\n\n\n\n\nDirect link\n\n\n\nUnderstanding JavaScript Promises by Nicholas C. Zakas\n\n\nPerfect for: Those who want to learn all about asynchronous programming with promises in JavaScript.Learning level: IntermediateRequires: Basic JavaScript chops\n\n\n\nJavaScript promises were introduced in 2015 as part of the ES6 specification to handle asynchronous functions in JavaScript. According to MDN:\n\n\n\nA promise is an object representing the eventual completion or failure of an asynchronous operation\n\n\n\nIn this 51-page book, Nicholas explains the concept of Promises over three chapters: Basics, Chaining Promises, and Working with Multiple Promises. Although the link to the book we’re providing is the free community version, the full version (available on Amazon) has two more chapters on Async Functions and Unhandled Rejection Tracking. Nicholas simplified the concept of Promises with several illustrations and examples. You will learn how to use then(), catch(), and finally() and understand how to chain multiple promises together. Nicholas also covers the assignment of rejection and settlement handlers. You may want to give the book a read to solidify your understanding of the topic.\n\n\n\nNicholas is a veteran JavaScript book author who has been writing about JavaScript for over 15 years. He brings his wealth of experience to bear in this book (just as he has in his work here at CSS-Tricks).\n\n\n\n\nDirect link\n\n\n\nSpeaking JavaScript by Axel Rauschmayer\n\n\nPerfect for: Leveling up from beginning JavaScriptLearning level: IntermediateRequires: Knowledge of object oriented programming\n\n\n\nThis book is presented in four chapters covering more than 30 topics. Here’s how it breaks down:\n\n\n\nThe first chapter is a nice refresher on syntax, variable types, functions and exception handling.The second chapter offers historical perspective into JavaScript as a prelude for the types of features covered throughout the rest of the book.Chapter 3 is presented as more or less a reference book with short, clean examples.The final chapter outlines tips, tools and libraries to help write better JavaScript and follow best practices.\n\n\n\n\nDirect Link\n\n\n\nSecrets of the JavaScript Ninja by John Resig and Bear Bibeault\n\n\nPerfect for: Creating a cross-browser JavaScript library from the ground upLearning level: IntermediateRequires: Some prior programming experience\n\n\n\nThere’s actually a newer edition of this book, but the 2012 edition is the one that’s free. Either way, it’s a good opportunity to learn from John Resig; you know, the guy who created jQuery.\n\n\n\nThe techniques covered here include closures, functions, the DOM, object orientation with prototypes, and cross-browser strategies. One nice perk is that each chapter is followed by a brief recap that’s perfect for a reference once you’ve finished the book.\n\n\n\n\nDirect Link\n\n\n\nLearning JavaScript Design Patterns by Addy Osmani\n\n\nPerfect for: Learning to write more efficient JavaScriptLearning level: IntermediateRequires: A decent level of JavaScript experience\n\n\n\nThe concept of design pattern refers to a reusable solution to a commonly recurring problem in application development. In this book, Addy Osmani covers the implementation of common design patterns using ES6 and beyond, as well as React-specific design patterns, which can be super handy when working on complex React apps where maintainability is a primary goal.\n\n\n\nSome of the patterns covered include Singleton, Proxy, Provider, Prototype and Observer patterns. In some cases, Addy includes pros and cons of using some of these patterns and how they may affect the performance of your application.\n\n\n\n\nDirect Link\n\n\n\nYou Don’t Know JS by Kyle Simpson\n\n\nPerfect for: Mastering JavaScriptLearning level: BeginnerRequires: Little or no prior programming experience\n\n\n\nWhile the title might be a bit provocative, what Kyle is implying here is that he writes this book assuming you have no prior JavaScript experience whatsoever.\n\n\n\nKyle begins starts by going through the rudiments of programming as seen through the lens of JavaScript. He then proceeds, in subsequent chapters, to introduce more advanced concepts like scope and closure, the this keyword, object prototypes, async, and performance.\n\n\n\nThere’s a lot of excellent details and explanations in here, and Kyle makes it super easy to understand by avoiding super technical jargon. There is also many exercises designed to reinforce your learning. This book will definitely get you up to speed with JavaScript. There’s second edition of the book in the works that you can track in GitHub.\n\n\n\n\nDirect link\n\n\n\nThe JavaScript Beginner’s Handbook by Flavio Copes\n\n\nPerfect for: A beginner’s referenceLearning level: Just getting startedRequires: Email sign-up, maybe some prior experience\n\n\n\nFlavio has put together a very useful JavaScript reference for those just starting out. It’s more like a quick reference guide than a textbook, so those of you just starting out might want to consider this as something you keep on your desk rather than something you sit with for long periods of time.\n\n\n\n\nDirect link\n\n\n\nJavaScript for Data Science by Gans, Hodges & Wilson\n\n\nPerfect for: Getting into data visualizationsLearning level: Intermediate to advancedRequires: A decent handle on JavaScript\n\n\n\nThe authors cover core features of modern JavScript, including callbacks, promises, inheritance, objects and classes. They also get into testing using Mocha, React, and data vizualization, all of which are great for anyone looking to level up their code and how its written. The book doesn’t get as deep into many the concepts as some of the other books, but it really shines when it gets into data science.\n\n\n\nThe book uses Data-Forge; a JavaScript library designed for working with tabular data. There are numerous exercises to help readers keep up to speed with the subject of discussion. The last chapter also includes a capstone project that pulls everything together.\n\n\n\n\nDirect Link\n\n\n\nWrapping up\n\n\nI sure hope this collection of books help you, whether you’re taking your first steps in front-end web development, have a dozen years under your belt, or you fall somewhere in between. I know how hard it is to get into something new for the first time and the feeling of not knowing where to look. I also know how it feels to hit a plateau and need something to level me up. There should be something for everyone here, regardless of where you are in your learning journey.\n\n\n\nAnd, hey, if you have any other books that are available to snag for free online, please share them in the comments! I bet we can get an even bigger list going.\n\nGreat (and Free!) Web Development Books You Can Get Online originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366468",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-27T13:27:49.000Z",
      "date_modified": "2022-06-27T13:27:49.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366526",
      "url": "https://css-tricks.com/single-element-loaders-the-bars/",
      "title": "Single Element Loaders: The Bars",
      "summary": "We’ve looked at spinners. We’ve looked at dots. Now we’re going to tackle another common pattern for loaders: bars. And we’re going to do the same thing in this third article of the series as we have the others …\n\nSingle Element Loaders: The Bars originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">We’ve looked at spinners.</a> <a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">We’ve looked at dots.</a> Now we’re going to tackle another common pattern for loaders: <strong>bars</strong>. And we’re going to do the same thing in this third article of the series as we have the others by making it with only one element and with flexible CSS that makes it easy to create variations.</p>\n\n\n\n<span id=\"more-366526\"></span>\n\n\n\n<div class=\"wp-container-91 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\"><h4 id=\"article-series\">Article series</h4>\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li>Single Element Loaders: The Bars — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-going-3d/\">Single Element Loaders: Going 3D</a></li></ul>\n</div></div>\n\n\n\n<p>Let’s start with not one, not two, but 20 examples of bar loaders.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdWVOrR\" src=\"//codepen.io/anon/embed/preview/mdWVOrR?height=450&amp;theme-id=1&amp;slug-hash=mdWVOrR&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdWVOrR\" title=\"CodePen Embed mdWVOrR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYZppdN\" src=\"//codepen.io/anon/embed/preview/zYZppdN?height=450&amp;theme-id=1&amp;slug-hash=zYZppdN&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYZppdN\" title=\"CodePen Embed zYZppdN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What?! Are you going to detail each one of them? That’s too much for an article!</p></blockquote>\n\n\n\n<p>It might seem like that at first glance! But all of them rely on the same code structure and we only update a few values to create variations. That’s all the power of CSS. We don’t learn how to create one loader, but we learn different techniques that allow us to create as much loader as we want using merely the same code structure.</p>\n\n\n<h3 id=\"lets-make-some-bars\">Let’s make some bars!</h3>\n\n\n<p>We start by defining the dimensions for them using <code>width</code> (or <code>height</code>) with <a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\"><code>aspect-ratio</code></a> to maintain proportion:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.bars {\n  width: 45px;\n  aspect-ratio: 1;\n}</code></pre>\n\n\n\n<p>We sort of “fake” three bars with a linear gradient on the background — very similar to how we created dot loaders in Part 2 of this series.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.bars {\n  width: 45px;\n  aspect-ratio: 1;\n  --c: no-repeat linear-gradient(#000 0 0); /* we define the color here */\n  background: \n    var(--c) 0%   50%,\n    var(--c) 50%  50%,\n    var(--c) 100% 50%;\n  background-size: 20% 100%; /* 20% * (3 bars + 2 spaces) = 100% */\n}</code></pre>\n\n\n\n<p>The above code will give us the following result:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"486\" height=\"424\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651523850750_image.png?resize=486%2C424&#038;ssl=1\" alt=\"\" class=\"wp-image-366527\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651523850750_image.png?w=486&amp;ssl=1 486w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651523850750_image.png?resize=300%2C262&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Like the other articles in this series, we are going to deal with a lot of <code>background</code> trickery. So, if you ever feel like we’re jumping around too fast or feel you need a little more detail, please do check those out. You can also read my <a href=\"https://stackoverflow.com/a/51734530/8620333\" rel=\"noopener\">Stack Overflow answer where I give</a> <a href=\"https://stackoverflow.com/a/51734530/8620333\" rel=\"noopener\">a detailed explanation</a> on how all this works.</p>\n\n\n<h3 id=\"animating-the-bars\">Animating the bars</h3>\n\n\n<p>We either animate the element’s size or position to create the bar loader. Let’s animate the size by defining the following animation keyframes:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@keyframes load {\n  0%   { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 1 */\n  33%  { background-size: 20% 10% , 20% 100%, 20% 100%; }  /* 2 */\n  50%  { background-size: 20% 100%, 20% 10% , 20% 100%; }  /* 3 */\n  66%  { background-size: 20% 100%, 20% 100%, 20% 10%;  }  /* 4 */\n  100% { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 5 */\n}</code></pre>\n\n\n\n<p>See what’s happening there? Between 0% and 100%, the animation changes the <code>background-size</code> of the element’s background gradient. Each keyframe sets three background sizes (one for each gradient).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"911\" height=\"176\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651524284295_image.png?resize=911%2C176&#038;ssl=1\" alt=\"\" class=\"wp-image-366528\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651524284295_image.png?w=911&amp;ssl=1 911w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651524284295_image.png?resize=300%2C58&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651524284295_image.png?resize=768%2C148&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And here’s what we get:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZErYBPd\" src=\"//codepen.io/anon/embed/ZErYBPd?height=450&amp;theme-id=1&amp;slug-hash=ZErYBPd&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZErYBPd\" title=\"CodePen Embed ZErYBPd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Can you start to imagine all the possible variations we can get by playing with different animation configurations for the sizes or the positions?</p>\n\n\n\n<p>Let’s fix the size to <code>20% 50%</code> and update the positions this time:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 45px;\n  aspect-ratio: .75;\n  --c: no-repeat linear-gradient(#000 0 0);\n  background: \n    var(--c),\n    var(--c),\n    var(--c);\n  background-size: 20% 50%;\n  animation: load 1s infinite linear;\n}\n@keyframes load {\n  0%   { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 1 */\n  20%  { background-position: 0% 50% , 50% 100%, 100% 100%; } /* 2 */\n  40%  { background-position: 0% 0%  , 50% 50% , 100% 100%; } /* 3 */\n  60%  { background-position: 0% 100%, 50% 0%  , 100% 50%;  } /* 4 */\n  80%  { background-position: 0% 100%, 50% 100%, 100% 0%;   } /* 5 */ \n  100% { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 6 */\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"923\" height=\"215\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651525274479_image.png?resize=923%2C215&#038;ssl=1\" alt=\"\" class=\"wp-image-366529\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651525274479_image.png?w=923&amp;ssl=1 923w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651525274479_image.png?resize=300%2C70&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651525274479_image.png?resize=768%2C179&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>…which gets us another loader!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOvbgpe\" src=\"//codepen.io/anon/embed/gOvbgpe?height=450&amp;theme-id=1&amp;slug-hash=gOvbgpe&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOvbgpe\" title=\"CodePen Embed gOvbgpe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>You’ve probably got the trick by now. All you need is to define a timeline that you translate into a keyframe. By animating the size, the position — or both! — there’s an infinite number of loader possibilities at our fingertips.</p>\n\n\n\n<p>And once we get comfortable with such a technique we can go further and use a more complex gradient to create even <em>more</em> loaders.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYxvxrV\" src=\"//codepen.io/anon/embed/preview/vYxvxrV?height=450&amp;theme-id=1&amp;slug-hash=vYxvxrV&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYxvxrV\" title=\"CodePen Embed vYxvxrV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Expect for the last two examples in that demo, all of the bar loaders use the same underlying markup and styles and different combinations of animations. Open the code and try to visualize each frame independently; you’ll see how relatively trivial it is to make dozens — <a href=\"https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje\" rel=\"noopener\">if not hundreds</a> — of variations.</p>\n\n\n<h3 id=\"getting-fancy\">Getting fancy</h3>\n\n\n<p>Did you remember the mask trick we did with the dot loaders in <a href=\"https://css-tricks.com/single-element-loaders-the-dots\">the second article of this series</a>? We can do the same here!</p>\n\n\n\n<p>If we apply all the above logic inside the <code>mask</code> property we can use any background configuration to add a fancy coloration to our loaders.</p>\n\n\n\n<p>Let’s take one demo and update it:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BaYqggw\" src=\"//codepen.io/anon/embed/BaYqggw?height=450&amp;theme-id=1&amp;slug-hash=BaYqggw&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BaYqggw\" title=\"CodePen Embed BaYqggw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>All I did is updating all the <code>background-*</code> with <code>mask-*</code> and I added a gradient coloration. As simple as that and yet we get another cool loader.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>So there is no difference between the dots and the bars?</p></blockquote>\n\n\n\n<p>No difference! I wrote two different articles to cover as many examples as possible but in both, I am relying on the same techniques:</p>\n\n\n\n<ol><li>Gradients to create the shapes (dots or bars or maybe something else)</li><li>Animating <code>background-size</code> and/or <code>background-position</code> to create the loader animation</li><li>Adding mask to add a touch of colors</li></ol>\n\n\n<h3 id=\"rounding-the-bars\">Rounding the bars</h3>\n\n\n<p>Let’s try something different this time where we can round the edges of our bars.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoEeMYO\" src=\"//codepen.io/anon/embed/preview/PoEeMYO?height=450&amp;theme-id=1&amp;slug-hash=PoEeMYO&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoEeMYO\" title=\"CodePen Embed PoEeMYO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Using one element and its <code>::before</code> and <code>::after</code> pseudos, we define three identical bars:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  --s: 100px; /* control the size */\n\n  display: grid;\n  place-items: center;\n  place-content: center;\n  margin: 0 calc(var(--s) / 2); /* 50px */\n}\n.loader::before,\n.loader::after {\n  content: \"\";\n  grid-area: 1/1;\n}\n.loader,\n.loader::before,\n.loader::after {\n  height: var(--s);\n  width: calc(var(--s) / 5); /* 20px */\n  border-radius: var(--s);\n  transform: translate(calc(var(--_i, 0) * 200%));\n}\n.loader::before { --_i: -1; }\n.loader::after { --_i:  1; }</code></pre>\n\n\n\n<p>That gives us three bars, this time without relying on a linear gradient:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"448\" height=\"553\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651609226578_image.png?resize=448%2C553&#038;ssl=1\" alt=\"\" class=\"wp-image-366530\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651609226578_image.png?w=448&amp;ssl=1 448w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651609226578_image.png?resize=243%2C300&amp;ssl=1 243w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now the trick is to fill in those bars with a lovely gradient. To simulate a continuous gradient, we need to play with <code>background</code> properties. In the above figure, the green area defines the area covered by the loader. That area should be the size of the gradient and, if we do the math, it’s equal to multiplying both sides labeled <code>S</code> in the diagram, or <code>background-size: var(--s) var(--s)</code>.</p>\n\n\n\n<p>Since our elements are individually placed, we need to update the position of the gradient inside each one to make sure all of them overlap. This way, we’re simulating one continuous gradient even though it’s really three of them.</p>\n\n\n\n<p>For the main element (placed at the center), the background needs to be at the center. We use the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  /* etc. */\n  background: linear-gradient() 50% / var(--s) var(--s);\n}</code></pre>\n\n\n\n<p>For the pseudo-element on the left, we need the background on the left</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::before {\n  /* etc. */\n  background: linear-gradient() 0% / var(--s) var(--s);\n}</code></pre>\n\n\n\n<p>And for the pseudo on the right, the background needs to be positioned to the right:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::after {\n  background: linear-gradient() 100% / var(--s) var(--s);\n}</code></pre>\n\n\n\n<p>Using the same CSS variable, <code>--_i</code>, that we used for the translate, we can write the code like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"3,20\"><code markup=\"tt\">.loader {\n  --s: 100px; /* control the size */\n  --c: linear-gradient(/* etc. */); /* control the coloration */\n\n  display: grid;\n  place-items: center;\n  place-content: center;\n}\n.loader::before,\n.loader::after{\n  content: \"\";\n  grid-area: 1/1;\n}\n.loader,\n.loader::before,\n.loader::after{\n  height: var(--s);\n  width: calc(var(--s) / 5);\n  border-radius: var(--s);\n  background: var(--c) calc(50% + var(--_i, 0) * 50%) / var(--s) var(--s);\n  transform: translate(calc(var(--_i, 0) * 200%));\n}\n.loader::before { --_i: -1; }\n.loader::after  { --_i:  1; }</code></pre>\n\n\n\n<p>Now, all we have to do is to animate the height and add some delays! Here are three examples where all that’s different are the colors and sizes:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBxEzeV/bdae7decca2724c24e7dc97c534d7847\" src=\"//codepen.io/anon/embed/preview/qBxEzeV/bdae7decca2724c24e7dc97c534d7847?height=450&amp;theme-id=1&amp;slug-hash=qBxEzeV/bdae7decca2724c24e7dc97c534d7847&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBxEzeV/bdae7decca2724c24e7dc97c534d7847\" title=\"CodePen Embed qBxEzeV/bdae7decca2724c24e7dc97c534d7847\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>I hope so far you are feeling super encouraged by all the powers you have to make complex-looking loading animations. All we need is one element, either gradients or pseudos to draw the bars, then some keyframes to move things around. That’s the entire recipe for getting an endless number of possibilities, so go out and starting cooking up some neat stuff!</p>\n\n\n\n<p>Until the next article, I will leave you with a funny collection of loaders where I am combining <strong>the dots</strong> and <strong>the bars</strong>!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOmooGQ\" src=\"//codepen.io/anon/embed/preview/gOmooGQ?height=450&amp;theme-id=1&amp;slug-hash=gOmooGQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOmooGQ\" title=\"CodePen Embed gOmooGQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBrLrMo\" src=\"//codepen.io/anon/embed/preview/qBrLrMo?height=450&amp;theme-id=1&amp;slug-hash=qBrLrMo&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBrLrMo\" title=\"CodePen Embed qBrLrMo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-container-92 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\"><h4 id=\"article-series\">Article series</h4>\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li>Single Element Loaders: The Bars — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-going-3d/\">Single Element Loaders: Going 3D</a></li></ul>\n</div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "We’ve looked at spinners. We’ve looked at dots. Now we’re going to tackle another common pattern for loaders: bars. And we’re going to do the same thing in this third article of the series as we have the others by making it with only one element and with flexible CSS that makes it easy to create variations.\n\n\n\n\n\n\n\nArticle series\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D\n\n\n\n\nLet’s start with not one, not two, but 20 examples of bar loaders.\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nWhat?! Are you going to detail each one of them? That’s too much for an article!\n\n\n\nIt might seem like that at first glance! But all of them rely on the same code structure and we only update a few values to create variations. That’s all the power of CSS. We don’t learn how to create one loader, but we learn different techniques that allow us to create as much loader as we want using merely the same code structure.\n\n\nLet’s make some bars!\n\n\nWe start by defining the dimensions for them using width (or height) with aspect-ratio to maintain proportion:\n\n\n\n.bars {\n  width: 45px;\n  aspect-ratio: 1;\n}\n\n\n\nWe sort of “fake” three bars with a linear gradient on the background — very similar to how we created dot loaders in Part 2 of this series.\n\n\n\n.bars {\n  width: 45px;\n  aspect-ratio: 1;\n  --c: no-repeat linear-gradient(#000 0 0); /* we define the color here */\n  background: \n    var(--c) 0%   50%,\n    var(--c) 50%  50%,\n    var(--c) 100% 50%;\n  background-size: 20% 100%; /* 20% * (3 bars + 2 spaces) = 100% */\n}\n\n\n\nThe above code will give us the following result:\n\n\n\n\n\n\n\nLike the other articles in this series, we are going to deal with a lot of background trickery. So, if you ever feel like we’re jumping around too fast or feel you need a little more detail, please do check those out. You can also read my Stack Overflow answer where I give a detailed explanation on how all this works.\n\n\nAnimating the bars\n\n\nWe either animate the element’s size or position to create the bar loader. Let’s animate the size by defining the following animation keyframes:\n\n\n\n@keyframes load {\n  0%   { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 1 */\n  33%  { background-size: 20% 10% , 20% 100%, 20% 100%; }  /* 2 */\n  50%  { background-size: 20% 100%, 20% 10% , 20% 100%; }  /* 3 */\n  66%  { background-size: 20% 100%, 20% 100%, 20% 10%;  }  /* 4 */\n  100% { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 5 */\n}\n\n\n\nSee what’s happening there? Between 0% and 100%, the animation changes the background-size of the element’s background gradient. Each keyframe sets three background sizes (one for each gradient).\n\n\n\n\n\n\n\nAnd here’s what we get:\n\n\n\nCodePen Embed Fallback\n\n\n\nCan you start to imagine all the possible variations we can get by playing with different animation configurations for the sizes or the positions?\n\n\n\nLet’s fix the size to 20% 50% and update the positions this time:\n\n\n\n.loader {\n  width: 45px;\n  aspect-ratio: .75;\n  --c: no-repeat linear-gradient(#000 0 0);\n  background: \n    var(--c),\n    var(--c),\n    var(--c);\n  background-size: 20% 50%;\n  animation: load 1s infinite linear;\n}\n@keyframes load {\n  0%   { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 1 */\n  20%  { background-position: 0% 50% , 50% 100%, 100% 100%; } /* 2 */\n  40%  { background-position: 0% 0%  , 50% 50% , 100% 100%; } /* 3 */\n  60%  { background-position: 0% 100%, 50% 0%  , 100% 50%;  } /* 4 */\n  80%  { background-position: 0% 100%, 50% 100%, 100% 0%;   } /* 5 */ \n  100% { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 6 */\n}\n\n\n\n\n\n\n\n…which gets us another loader!\n\n\n\nCodePen Embed Fallback\n\n\n\nYou’ve probably got the trick by now. All you need is to define a timeline that you translate into a keyframe. By animating the size, the position — or both! — there’s an infinite number of loader possibilities at our fingertips.\n\n\n\nAnd once we get comfortable with such a technique we can go further and use a more complex gradient to create even more loaders.\n\n\n\nCodePen Embed Fallback\n\n\n\nExpect for the last two examples in that demo, all of the bar loaders use the same underlying markup and styles and different combinations of animations. Open the code and try to visualize each frame independently; you’ll see how relatively trivial it is to make dozens — if not hundreds — of variations.\n\n\nGetting fancy\n\n\nDid you remember the mask trick we did with the dot loaders in the second article of this series? We can do the same here!\n\n\n\nIf we apply all the above logic inside the mask property we can use any background configuration to add a fancy coloration to our loaders.\n\n\n\nLet’s take one demo and update it:\n\n\n\nCodePen Embed Fallback\n\n\n\nAll I did is updating all the background-* with mask-* and I added a gradient coloration. As simple as that and yet we get another cool loader.\n\n\n\nSo there is no difference between the dots and the bars?\n\n\n\nNo difference! I wrote two different articles to cover as many examples as possible but in both, I am relying on the same techniques:\n\n\n\nGradients to create the shapes (dots or bars or maybe something else)Animating background-size and/or background-position to create the loader animationAdding mask to add a touch of colors\n\n\nRounding the bars\n\n\nLet’s try something different this time where we can round the edges of our bars.\n\n\n\nCodePen Embed Fallback\n\n\n\nUsing one element and its ::before and ::after pseudos, we define three identical bars:\n\n\n\n.loader {\n  --s: 100px; /* control the size */\n\n  display: grid;\n  place-items: center;\n  place-content: center;\n  margin: 0 calc(var(--s) / 2); /* 50px */\n}\n.loader::before,\n.loader::after {\n  content: \"\";\n  grid-area: 1/1;\n}\n.loader,\n.loader::before,\n.loader::after {\n  height: var(--s);\n  width: calc(var(--s) / 5); /* 20px */\n  border-radius: var(--s);\n  transform: translate(calc(var(--_i, 0) * 200%));\n}\n.loader::before { --_i: -1; }\n.loader::after { --_i:  1; }\n\n\n\nThat gives us three bars, this time without relying on a linear gradient:\n\n\n\n\n\n\n\nNow the trick is to fill in those bars with a lovely gradient. To simulate a continuous gradient, we need to play with background properties. In the above figure, the green area defines the area covered by the loader. That area should be the size of the gradient and, if we do the math, it’s equal to multiplying both sides labeled S in the diagram, or background-size: var(--s) var(--s).\n\n\n\nSince our elements are individually placed, we need to update the position of the gradient inside each one to make sure all of them overlap. This way, we’re simulating one continuous gradient even though it’s really three of them.\n\n\n\nFor the main element (placed at the center), the background needs to be at the center. We use the following:\n\n\n\n.loader {\n  /* etc. */\n  background: linear-gradient() 50% / var(--s) var(--s);\n}\n\n\n\nFor the pseudo-element on the left, we need the background on the left\n\n\n\n.loader::before {\n  /* etc. */\n  background: linear-gradient() 0% / var(--s) var(--s);\n}\n\n\n\nAnd for the pseudo on the right, the background needs to be positioned to the right:\n\n\n\n.loader::after {\n  background: linear-gradient() 100% / var(--s) var(--s);\n}\n\n\n\nUsing the same CSS variable, --_i, that we used for the translate, we can write the code like this:\n\n\n\n.loader {\n  --s: 100px; /* control the size */\n  --c: linear-gradient(/* etc. */); /* control the coloration */\n\n  display: grid;\n  place-items: center;\n  place-content: center;\n}\n.loader::before,\n.loader::after{\n  content: \"\";\n  grid-area: 1/1;\n}\n.loader,\n.loader::before,\n.loader::after{\n  height: var(--s);\n  width: calc(var(--s) / 5);\n  border-radius: var(--s);\n  background: var(--c) calc(50% + var(--_i, 0) * 50%) / var(--s) var(--s);\n  transform: translate(calc(var(--_i, 0) * 200%));\n}\n.loader::before { --_i: -1; }\n.loader::after  { --_i:  1; }\n\n\n\nNow, all we have to do is to animate the height and add some delays! Here are three examples where all that’s different are the colors and sizes:\n\n\n\nCodePen Embed Fallback\n\n\nWrapping up\n\n\nI hope so far you are feeling super encouraged by all the powers you have to make complex-looking loading animations. All we need is one element, either gradients or pseudos to draw the bars, then some keyframes to move things around. That’s the entire recipe for getting an endless number of possibilities, so go out and starting cooking up some neat stuff!\n\n\n\nUntil the next article, I will leave you with a funny collection of loaders where I am combining the dots and the bars!\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nArticle series\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D\n\n\nSingle Element Loaders: The Bars originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366526",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-24T20:00:29.000Z",
      "date_modified": "2022-06-24T20:00:29.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366452",
      "url": "https://css-tricks.com/different-ways-to-write-css-in-react/",
      "title": "Different Ways to Write CSS in React",
      "summary": "We’re all familiar with the standard way of linking up a stylesheet to the <head> of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things …\n\nDifferent Ways to Write CSS in React originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>We’re all familiar with the standard way of <a href=\"https://css-tricks.com/css-basics-second-s-css/\">linking up a stylesheet</a> to the <code>&lt;head&gt;</code> of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things in a single-page application (SPA), say in a React project?</p>\n\n\n\n<p>Turns out there are several ways to go about styling a React application. Some overlap with traditional styling, others not so much. But let’s count all the ways we can do it.</p>\n\n\n\n<span id=\"more-366452\"></span>\n\n\n\n<h3>Importing external stylesheets</h3>\n\n\n\n<p>As the name suggests, React can import CSS files. The process is similar to how we link up CSS file in the HTML <code>&lt;head&gt;</code>:</p>\n\n\n\n<ol><li>Create a new CSS file in your project directory.</li><li>Write CSS.</li><li>Import it into the React file.</li></ol>\n\n\n\n<p>Like this:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">import \"./style.css\";</code></pre>\n\n\n\n<p>That usually goes at the top of the file where other imports happen:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"1\"><code markup=\"tt\">import { React } from \"react\";\nimport \"./Components/css/App.css\";\nfunction App() {\n  return (\n    &lt;div className=\"main\">\n    &lt;/div>\n  );\n}\nexport default App;</code></pre>\n\n\n\n<p>In this example, a CSS file is imported into an <code>App.js</code> from the <code>/Components/css</code> folder.</p>\n\n\n\n<h3>Write inline styles</h3>\n\n\n\n<p>You may be used to hearing that inline styling isn’t all that great for maintainability and whatnot, but there are definitely situations (<a href=\"https://css-tricks.com/want-to-write-a-hover-effect-with-inline-css-use-css-variables/\">here’s one!</a>) where it makes sense. And maintainability is less of an issue in React, as the CSS often already sits inside the same file anyway.</p>\n\n\n\n<p>This is a super simple example of inline styling in React:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">&lt;div className=\"main\" style={{color:\"red\"}}></code></pre>\n\n\n\n<p>A better approach, though, is to use objects:</p>\n\n\n\n<ol><li>First, create an object that contains styles for different elements.</li><li>Then add it to an element using the <code>style</code> attribute and then select the property to style.</li></ol>\n\n\n\n<p>Let’s see that in context:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"3,14,15,16\"><code markup=\"tt\">import { React } from \"react\";\nfunction App() {\n  const styles = {\n    main: {\n      backgroundColor: \"#f1f1f1\",\n      width: \"100%\",\n    },\n    inputText: {\n      padding: \"10px\",\n      color: \"red\",\n    },\n  };\n  return (\n    &lt;div className=\"main\" style={styles.main}>\n      &lt;input type=\"text\" style={styles.inputText}>&lt;/input>\n    &lt;/div>\n  );\n}\nexport default App;</code></pre>\n\n\n\n<p>This example contains a <code>styles</code> object containing two more objects, one for the <code>.main</code> class and the other for a text input, which contain style rules similar to what we’d expect to see in an external stylesheet. Those objects are then applied to the <code>style</code> attribute of elements that are in the returned markup.</p>\n\n\n\n<p>Note that curly brackets are used when referencing styles rather than the quotation marks we’d normally use in plain HTML.</p>\n\n\n\n<h3>Use CSS Modules</h3>\n\n\n\n<p><a href=\"https://css-tricks.com/css-modules-part-1-need/\">CSS Modules</a>… what the heck happened to those, right? They have the benefit of locally scoped variables and can be used right alongside React. But what are they, again, exactly?</p>\n\n\n\n<p>Quoting the <a href=\"https://github.com/css-modules/css-modules/blob/master/docs/get-started.md\" rel=\"noopener\">repo’s documentation</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>CSS Modules works by compiling individual CSS files into both CSS and data. The CSS output is normal, global CSS, which can be injected directly into the browser or concatenated together and written to a file for production use. The data is used to map the human-readable names you&#8217;ve used in the files to the globally-safe output CSS.</p></blockquote>\n\n\n\n<p>In simpler terms, CSS Modules allows us to use the same class name in multiple files without clashes since each class name is given a unique programmatic name. This is especially useful in larger applications. Every class name is scoped locally to the specific component in which it is being imported.</p>\n\n\n\n<p>A CSS Module stylesheet is similar to a regular stylesheet, only with a different extension (e.g. <code>styles.module.css</code>). Here’s how they’re set up:</p>\n\n\n\n<ol><li>Create a file with <code>.module.css</code> as the extension.</li><li>Import that module into the React app (like we saw earlier)</li><li>Add a <code>className</code> to an element or component and reference the particular style from the imported styles.</li></ol>\n\n\n\n<p>Super simple example:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">/* styles.module.css */\n.font {\n  color: #f00;\n  font-size: 20px;\n}\n\nimport { React } from \"react\";\nimport styles from \"./styles.module.css\";\nfunction App() {\n  return (\n    &lt;h1 className={styles.heading}>Hello World&lt;/h1>\n  );\n}\nexport default App;</code></pre>\n\n\n\n<h3>Use styled-components</h3>\n\n\n\n<p>Have you used <a href=\"https://styled-components.com/docs/basics\" rel=\"noopener\">styled-components</a>? It’s quite popular and allows you to build custom components using actual CSS in your JavaScript. A styled-component is basically a React component with — get ready for it — styles. Some of the features include unique class names, dynamic styling and better management of the CSS as each component has its own separate styles.</p>\n\n\n\n<p>Install the styled-components npm package in the command line:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm install styled-components</code></pre>\n\n\n\n<p>Next up, import it into the React app:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">import styled from 'styled-components'</code></pre>\n\n\n\n<p>Create a component and assign a styled property to it. Note the use of template literals denoted by backticks in the <code>Wrapper</code> object:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">import { React } from \"react\";\nimport styled from \"styled-components\";\nfunction App() {\n  const Wrapper = styled.div`\n    width: 100%;\n    height: 100px;\n    background-color: red;\n    display: block;\n  `;\n  return &lt;Wrapper />;\n}\nexport default App;</code></pre>\n\n\n\n<p>The above <code>Wrapper</code> component will be rendered as a div that contains those styles.</p>\n\n\n\n<h3>Conditional styling</h3>\n\n\n\n<p>One of the advantages of styled-components is that the components themselves are functional, as in you can use props within the CSS. This opens the door up to conditional statements and changing styles based on a state or prop.</p>\n\n\n\n<p>Here’s a demo showing that off:</p>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/conditional-styling-158h7n?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:300px; border:0; border-radius: 4px; overflow:hidden; margin-block-end: 1.5rem;\" title=\"Conditional Styling\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p>Here, we are manipulating the div’s <code>display</code> property on the display state. This state is controlled by a button that toggles the div’s state when clicked. This, in turn, toggles between the styles of two different states.</p>\n\n\n\n<p>In inline <code>if</code> statements, we use a <code>?</code> instead of the usual <code>if</code>/<code>else</code> syntax. The <code>else</code> part is after the semicolon. And remember to always call or use the state after it has been initialized. In that last demo, for example, the state should be above the <code>Wrapper</code> component’s styles.</p>\n\n\n\n<h3>Happy React styling!</h3>\n\n\n\n<p>That’s a wrap, folks! We looked at a handful of different ways to write styles in a React application. And it’s not like one is any better than the rest; the approach you use depends on the situation, of course. Hopefully now you’ve got a good understanding of them and know that you have a bunch of tools in your React styling arsenal.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/different-ways-to-write-css-in-react/\">Different Ways to Write CSS in React</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "We’re all familiar with the standard way of linking up a stylesheet to the <head> of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things in a single-page application (SPA), say in a React project?\n\n\n\nTurns out there are several ways to go about styling a React application. Some overlap with traditional styling, others not so much. But let’s count all the ways we can do it.\n\n\n\n\n\n\n\nImporting external stylesheets\n\n\n\nAs the name suggests, React can import CSS files. The process is similar to how we link up CSS file in the HTML <head>:\n\n\n\nCreate a new CSS file in your project directory.Write CSS.Import it into the React file.\n\n\n\nLike this:\n\n\n\nimport \"./style.css\";\n\n\n\nThat usually goes at the top of the file where other imports happen:\n\n\n\nimport { React } from \"react\";\nimport \"./Components/css/App.css\";\nfunction App() {\n  return (\n    <div className=\"main\">\n    </div>\n  );\n}\nexport default App;\n\n\n\nIn this example, a CSS file is imported into an App.js from the /Components/css folder.\n\n\n\nWrite inline styles\n\n\n\nYou may be used to hearing that inline styling isn’t all that great for maintainability and whatnot, but there are definitely situations (here’s one!) where it makes sense. And maintainability is less of an issue in React, as the CSS often already sits inside the same file anyway.\n\n\n\nThis is a super simple example of inline styling in React:\n\n\n\n<div className=\"main\" style={{color:\"red\"}}>\n\n\n\nA better approach, though, is to use objects:\n\n\n\nFirst, create an object that contains styles for different elements.Then add it to an element using the style attribute and then select the property to style.\n\n\n\nLet’s see that in context:\n\n\n\nimport { React } from \"react\";\nfunction App() {\n  const styles = {\n    main: {\n      backgroundColor: \"#f1f1f1\",\n      width: \"100%\",\n    },\n    inputText: {\n      padding: \"10px\",\n      color: \"red\",\n    },\n  };\n  return (\n    <div className=\"main\" style={styles.main}>\n      <input type=\"text\" style={styles.inputText}></input>\n    </div>\n  );\n}\nexport default App;\n\n\n\nThis example contains a styles object containing two more objects, one for the .main class and the other for a text input, which contain style rules similar to what we’d expect to see in an external stylesheet. Those objects are then applied to the style attribute of elements that are in the returned markup.\n\n\n\nNote that curly brackets are used when referencing styles rather than the quotation marks we’d normally use in plain HTML.\n\n\n\nUse CSS Modules\n\n\n\nCSS Modules… what the heck happened to those, right? They have the benefit of locally scoped variables and can be used right alongside React. But what are they, again, exactly?\n\n\n\nQuoting the repo’s documentation:\n\n\n\nCSS Modules works by compiling individual CSS files into both CSS and data. The CSS output is normal, global CSS, which can be injected directly into the browser or concatenated together and written to a file for production use. The data is used to map the human-readable names you’ve used in the files to the globally-safe output CSS.\n\n\n\nIn simpler terms, CSS Modules allows us to use the same class name in multiple files without clashes since each class name is given a unique programmatic name. This is especially useful in larger applications. Every class name is scoped locally to the specific component in which it is being imported.\n\n\n\nA CSS Module stylesheet is similar to a regular stylesheet, only with a different extension (e.g. styles.module.css). Here’s how they’re set up:\n\n\n\nCreate a file with .module.css as the extension.Import that module into the React app (like we saw earlier)Add a className to an element or component and reference the particular style from the imported styles.\n\n\n\nSuper simple example:\n\n\n\n/* styles.module.css */\n.font {\n  color: #f00;\n  font-size: 20px;\n}\n\nimport { React } from \"react\";\nimport styles from \"./styles.module.css\";\nfunction App() {\n  return (\n    <h1 className={styles.heading}>Hello World</h1>\n  );\n}\nexport default App;\n\n\n\nUse styled-components\n\n\n\nHave you used styled-components? It’s quite popular and allows you to build custom components using actual CSS in your JavaScript. A styled-component is basically a React component with — get ready for it — styles. Some of the features include unique class names, dynamic styling and better management of the CSS as each component has its own separate styles.\n\n\n\nInstall the styled-components npm package in the command line:\n\n\n\nnpm install styled-components\n\n\n\nNext up, import it into the React app:\n\n\n\nimport styled from 'styled-components'\n\n\n\nCreate a component and assign a styled property to it. Note the use of template literals denoted by backticks in the Wrapper object:\n\n\n\nimport { React } from \"react\";\nimport styled from \"styled-components\";\nfunction App() {\n  const Wrapper = styled.div`\n    width: 100%;\n    height: 100px;\n    background-color: red;\n    display: block;\n  `;\n  return <Wrapper />;\n}\nexport default App;\n\n\n\nThe above Wrapper component will be rendered as a div that contains those styles.\n\n\n\nConditional styling\n\n\n\nOne of the advantages of styled-components is that the components themselves are functional, as in you can use props within the CSS. This opens the door up to conditional statements and changing styles based on a state or prop.\n\n\n\nHere’s a demo showing that off:\n\n\n\n\n\n\n\nHere, we are manipulating the div’s display property on the display state. This state is controlled by a button that toggles the div’s state when clicked. This, in turn, toggles between the styles of two different states.\n\n\n\nIn inline if statements, we use a ? instead of the usual if/else syntax. The else part is after the semicolon. And remember to always call or use the state after it has been initialized. In that last demo, for example, the state should be above the Wrapper component’s styles.\n\n\n\nHappy React styling!\n\n\n\nThat’s a wrap, folks! We looked at a handful of different ways to write styles in a React application. And it’s not like one is any better than the rest; the approach you use depends on the situation, of course. Hopefully now you’ve got a good understanding of them and know that you have a bunch of tools in your React styling arsenal.\n\nDifferent Ways to Write CSS in React originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366452",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-22T14:24:37.000Z",
      "date_modified": "2022-06-22T14:24:37.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366342",
      "url": "https://css-tricks.com/single-element-loaders-the-dots/",
      "title": "Single Element Loaders: The Dots",
      "summary": "We’re looking at loaders in this series. More than that, we’re breaking down some common loader patterns and how to re-create them with nothing more than a single div. So far, we’ve picked apart the classic spinning loader. Now, …\n\nSingle Element Loaders: The Dots originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>We’re looking at loaders in this series. More than that, we’re breaking down some common loader patterns and how to re-create them with nothing more than a single div. So far, we’ve picked apart <a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">the classic spinning loader</a>. Now, let’s look at another one you’re likely well aware of: <strong>the dots.</strong></p>\n\n\n\n<p>Dot loaders are all over the place. They’re neat because they usually consist of three dots that sort of look like a text ellipsis (…) that dances around.</p>\n\n\n\n<span id=\"more-366342\"></span>\n\n\n\n<div class=\"wp-container-71 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\">\n<h4>Article series</h4>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li>Single Element Loaders: The Dots — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-going-3d/\">Single Element Loaders: Going 3D</a></li></ul>\n</div></div>\n\n\n\n<p>Our goal here is to make this same thing out of a single div element. In other words, there is no one div per dot or individual animations for each dot.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxpyoqL\" src=\"//codepen.io/anon/embed/xxpyoqL?height=450&amp;theme-id=1&amp;slug-hash=xxpyoqL&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxpyoqL\" title=\"CodePen Embed xxpyoqL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That example of a loader up above is made with a single div element, a few CSS declarations, and no pseudo-elements. I am combining two techniques using CSS <code>background</code> and <code>mask</code>. And when we’re done, we’ll see how animating a background gradient helps create the illusion of each dot changing colors as they move up and down in succession.</p>\n\n\n\n<h3>The background animation</h3>\n\n\n\n<p>Let’s start with the background animation:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 180px; /* this controls the size */\n  aspect-ratio: 8/5; /* maintain the scale */\n  background: \n    conic-gradient(red   50%, blue   0) no-repeat, /* top colors */\n    conic-gradient(green 50%, purple 0) no-repeat; /* bottom colors */\n  background-size: 200% 50%; \n  animation: back 4s infinite linear; /* applies the animation */\n}\n\n/* define the animation */\n@keyframes back {\n  0%,                       /* X   Y , X     Y */\n  100% { background-position: 0%   0%, 0%   100%; }\n  25%  { background-position: 100% 0%, 0%   100%; }\n  50%  { background-position: 100% 0%, 100% 100%; }\n  75%  { background-position: 0%   0%, 100% 100%; }\n}</code></pre>\n\n\n\n<p>I hope this looks pretty straightforward. What we’ve got is a <code>180px</code>-wide <code>.loader</code> element that shows two conic gradients sporting hard color stops between two colors each — the first gradient is red and blue along the top half of the <code>.loader</code>, and the second gradient is green and purple along the bottom half.</p>\n\n\n\n<p>The way the loader’s background is sized (<code>200%</code> wide), we only see one of those colors in each half at a time. Then we have this little animation that pushes the position of those background gradients left, right, and back again forever and ever.</p>\n\n\n\n<p>When dealing with background properties — especially <code>background-position</code> — I always refer to my <a href=\"https://stackoverflow.com/a/51734530/8620333\" rel=\"noopener\">Stack Overflow answer where I am giving a detailed explanation</a> on how all this works. If you are uncomfortable with CSS background trickery, I highly recommend reading that answer to help with what comes next.</p>\n\n\n\n<p>In the animation, notice that the first layer is <code>Y=0%</code> (placed at the top) while <code>X</code> is changes from <code>0%</code> to <code>100%.</code> For the second layer, we have the same for <code>X</code> but <code>Y=100%</code> (placed at the bottom).</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOvOjZy\" src=\"//codepen.io/anon/embed/gOvOjZy?height=450&amp;theme-id=1&amp;slug-hash=gOvOjZy&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOvOjZy\" title=\"CodePen Embed gOvOjZy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Why using a <code>conic-gradient()</code> instead of <code>linear-gradient()</code>?</p></blockquote>\n\n\n\n<p>Good question! Intuitively, we should use a linear gradient to create a two-color gradients like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">linear-gradient(90deg, red 50%, blue 0)</code></pre>\n\n\n\n<p>But we can also reach for the same using a <code>conic-gradient()</code> — and with less of code. We reduce the code and also learn a new trick in the process!</p>\n\n\n\n<p>Sliding the colors left and right is a nice way to make it look like we’re changing colors, but it might be better if we instantly change colors instead — that way, there’s no chance of a loader dot flashing two colors at the same time. To do this, let&#8217;s change the <code>animation</code>&#8216;s timing function from <code>linear</code> to <code>steps(1)</code></p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKQKBYM\" src=\"//codepen.io/anon/embed/KKQKBYM?height=450&amp;theme-id=1&amp;slug-hash=KKQKBYM&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKQKBYM\" title=\"CodePen Embed KKQKBYM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>The loader dots</h3>\n\n\n\n<p>If you followed along with the <a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">first article in this series</a>, I bet you know what comes next: <strong>CSS masks!</strong> What makes masks so great is that they let us sort of <a href=\"https://css-tricks.com/clipping-masking-css/\">“cut out” parts of a background</a> in the shape of another element. So, in this case, we want to make a few dots, show the background gradients through the dots, and cut out any parts of the background that are not part of a dot.</p>\n\n\n\n<p>We are going to use <code>radial-gradient()</code> for this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4,5,6,7,8,9\"><code markup=\"tt\">.loader {\n  width: 180px;\n  aspect-ratio: 8/5;\n  mask:\n    radial-gradient(#000 68%, #0000 71%) no-repeat,\n    radial-gradient(#000 68%, #0000 71%) no-repeat,\n    radial-gradient(#000 68%, #0000 71%) no-repeat;\n  mask-size: 25% 40%; /* the size of our dots */\n}</code></pre>\n\n\n\n<p>There&#8217;s some duplicated code in there, so let&#8217;s make a CSS variable to slim things down:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4\"><code markup=\"tt\">.loader {\n  width: 180px;\n  aspect-ratio: 8/5;\n  --_g: radial-gradient(#000 68%, #0000 71%) no-repeat;\n  mask: var(--_g),var(--_g),var(--_g);\n  mask-size: 25% 40%;\n}</code></pre>\n\n\n\n<p>Cool cool. But now we need a new animation that helps move the dots up and down between the animated gradients.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  /* same as before */\n  animation: load 2s infinite;\n}\n\n@keyframes load {      /* X  Y,     X   Y,    X   Y */\n  0%     { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */\n  16.67% { mask-position: 0% 100%, 50% 0%  , 100% 0%; }\n  33.33% { mask-position: 0% 100%, 50% 100%, 100% 0%; }\n  50%    { mask-position: 0% 100%, 50% 100%, 100% 100%; } /* all of them at the bottom */\n  66.67% { mask-position: 0% 0%  , 50% 100%, 100% 100%; }\n  83.33% { mask-position: 0% 0%  , 50% 0%  , 100% 100%; }\n  100%   { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */\n}</code></pre>\n\n\n\n<p>Yes, that’s a total of three radial gradients in there, all with the same configuration and the same size — the animation will update the position of each one. Note that the <code>X</code> coordinate of each dot is fixed. The <code>mask-position</code> is defined such that the first dot is at the left (<code>0%</code>), the second one at the center (<code>50%</code>), and the third one at the right (<code>100%</code>). We only update the <code>Y</code> coordinate from <code>0%</code> to <code>100%</code> to make the dots dance.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"523\" height=\"362\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651441844341_image.png?resize=523%2C362&#038;ssl=1\" alt=\"Dot loader dots with labels showing their changing positions.\" class=\"wp-image-366345\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651441844341_image.png?w=523&amp;ssl=1 523w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651441844341_image.png?resize=300%2C208&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Here’s what we get:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abqbamK\" src=\"//codepen.io/anon/embed/abqbamK?height=450&amp;theme-id=1&amp;slug-hash=abqbamK&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abqbamK\" title=\"CodePen Embed abqbamK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, combine this with our gradient animation and magic starts to happen:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYdYzxq\" src=\"//codepen.io/anon/embed/vYdYzxq?height=450&amp;theme-id=1&amp;slug-hash=vYdYzxq&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYdYzxq\" title=\"CodePen Embed vYdYzxq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Dot loader variations</h3>\n\n\n\n<p>The CSS variable we made in the last example makes it all that much easier to swap in new colors and create more variations of the same loader. For example, different colors and sizes:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poaoOww\" src=\"//codepen.io/anon/embed/poaoOww?height=450&amp;theme-id=1&amp;slug-hash=poaoOww&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poaoOww\" title=\"CodePen Embed poaoOww\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>What about another movement for our dots?</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoQLQXe\" src=\"//codepen.io/anon/embed/PoQLQXe?height=450&amp;theme-id=1&amp;slug-hash=PoQLQXe&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoQLQXe\" title=\"CodePen Embed PoQLQXe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here, all I did was update the animation to consider different positions, and we get another loader with the same code structure!</p>\n\n\n\n<p>The animation technique I used for the mask layers can also be used with background layers to create a lot of different loaders with a single color. <a href=\"https://dev.to/afif/build-your-css-loader-with-only-one-div-the-dots-3882\" rel=\"noopener\">I wrote a detailed article about this.</a> You will see that from the same code structure we can create different variations by simply changing a few values. I am sharing a few examples at the end of the article.</p>\n\n\n\n<p>Why not a loader with one dot?</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjpWdoQ\" src=\"//codepen.io/anon/embed/preview/JjpWdoQ?height=450&amp;theme-id=1&amp;slug-hash=JjpWdoQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjpWdoQ\" title=\"CodePen Embed JjpWdoQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This one should be fairly easy to grok as I am using the same technique but with a more simple logic:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWyOdgv\" src=\"//codepen.io/anon/embed/preview/NWyOdgv?height=450&amp;theme-id=1&amp;slug-hash=NWyOdgv&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWyOdgv\" title=\"CodePen Embed NWyOdgv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here is another example of loader where I am also animating <code>radial-gradient</code> combined with <a href=\"https://css-tricks.com/almanac/properties/f/filter/\">CSS filters</a> and <a href=\"https://css-tricks.com/almanac/properties/m/mix-blend-mode/\"><code>mix-blend-mode</code></a> to create a blobby effect:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWrXvMa\" src=\"//codepen.io/anon/embed/preview/MWrXvMa?height=450&amp;theme-id=1&amp;slug-hash=MWrXvMa&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWrXvMa\" title=\"CodePen Embed MWrXvMa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you check the code, you will see that all I am really doing there is animating the <code>background-position</code>, exactly like we did with the previous loader, but adding a dash of <code>background-size</code> to make it look like the blob gets bigger as it absorbs dots.</p>\n\n\n\n<p class=\"is-style-explanation\">If you want to understand the magic behind that blob effect, you can refer to <a href=\"https://codepen.io/thebabydino/project/full/ZjwjBe\" rel=\"noopener\">these interactive slides</a> (Chrome only) by <a href=\"https://twitter.com/anatudor\" rel=\"noopener\">Ana Tudor</a> because she covers the topic so well!</p>\n\n\n\n<p>Here is another dot loader idea, this time using a different technique:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwrWLVb\" src=\"//codepen.io/anon/embed/VwrWLVb?height=450&amp;theme-id=1&amp;slug-hash=VwrWLVb&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwrWLVb\" title=\"CodePen Embed VwrWLVb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This one is only 10 CSS declarations and a keyframe. The main element and its two pseudo-elements have the same background configuration with one radial gradient. Each one creates one dot, for a total of three. The animation moves the gradient from top to bottom by using different delays for each dot..</p>\n\n\n\n<p>Oh, and take note how this demo uses CSS Grid. This allows us to leverage the grid’s default <code>stretch</code> alignment so that both pseudo-elements cover the whole area of their parent. No need for sizing! Push the around a little with <code>translate()</code> and we’re all set.</p>\n\n\n\n<h3>More examples!</h3>\n\n\n\n<p>Just to drive the point home, I want to leave you with a bunch of additional examples that are really variations of what we’ve looked at. As you view the demos, you’ll see that the approaches we’ve covered here are super flexible and open up tons of design possibilities.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWpKbez\" src=\"//codepen.io/anon/embed/preview/MWpKbez?height=450&amp;theme-id=1&amp;slug-hash=MWpKbez&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWpKbez\" title=\"CodePen Embed MWpKbez\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwpWZBr\" src=\"//codepen.io/anon/embed/preview/VwpWZBr?height=450&amp;theme-id=1&amp;slug-hash=VwpWZBr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwpWZBr\" title=\"CodePen Embed VwpWZBr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdWppmj\" src=\"//codepen.io/anon/embed/preview/mdWppmj?height=450&amp;theme-id=1&amp;slug-hash=mdWppmj&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdWppmj\" title=\"CodePen Embed mdWppmj\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBrLrox\" src=\"//codepen.io/anon/embed/preview/qBrLrox?height=450&amp;theme-id=1&amp;slug-hash=qBrLrox&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBrLrox\" title=\"CodePen Embed qBrLrox\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNmNqwr\" src=\"//codepen.io/anon/embed/preview/rNmNqwr?height=450&amp;theme-id=1&amp;slug-hash=rNmNqwr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNmNqwr\" title=\"CodePen Embed rNmNqwr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Next up…</h3>\n\n\n\n<p>OK, so we covered dot loaders in this article and spinners in the last one. In the next article of this four-part series, we’ll turn our attention to another common type of loader: <strong>the bars.</strong> We’ll take a lot of what we learned so far and see how we can extend them to create yet another single element loader with as little code and as much flexibility as possible.</p>\n\n\n\n<div class=\"wp-container-72 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\">\n<h4>Article series</h4>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li>Single Element Loaders: The Dots — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-going-3d/\">Single Element Loaders: Going 3D</a></li></ul>\n</div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "We’re looking at loaders in this series. More than that, we’re breaking down some common loader patterns and how to re-create them with nothing more than a single div. So far, we’ve picked apart the classic spinning loader. Now, let’s look at another one you’re likely well aware of: the dots.\n\n\n\nDot loaders are all over the place. They’re neat because they usually consist of three dots that sort of look like a text ellipsis (…) that dances around.\n\n\n\n\n\n\n\n\nArticle series\n\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D\n\n\n\n\nOur goal here is to make this same thing out of a single div element. In other words, there is no one div per dot or individual animations for each dot.\n\n\n\nCodePen Embed Fallback\n\n\n\nThat example of a loader up above is made with a single div element, a few CSS declarations, and no pseudo-elements. I am combining two techniques using CSS background and mask. And when we’re done, we’ll see how animating a background gradient helps create the illusion of each dot changing colors as they move up and down in succession.\n\n\n\nThe background animation\n\n\n\nLet’s start with the background animation:\n\n\n\n.loader {\n  width: 180px; /* this controls the size */\n  aspect-ratio: 8/5; /* maintain the scale */\n  background: \n    conic-gradient(red   50%, blue   0) no-repeat, /* top colors */\n    conic-gradient(green 50%, purple 0) no-repeat; /* bottom colors */\n  background-size: 200% 50%; \n  animation: back 4s infinite linear; /* applies the animation */\n}\n\n/* define the animation */\n@keyframes back {\n  0%,                       /* X   Y , X     Y */\n  100% { background-position: 0%   0%, 0%   100%; }\n  25%  { background-position: 100% 0%, 0%   100%; }\n  50%  { background-position: 100% 0%, 100% 100%; }\n  75%  { background-position: 0%   0%, 100% 100%; }\n}\n\n\n\nI hope this looks pretty straightforward. What we’ve got is a 180px-wide .loader element that shows two conic gradients sporting hard color stops between two colors each — the first gradient is red and blue along the top half of the .loader, and the second gradient is green and purple along the bottom half.\n\n\n\nThe way the loader’s background is sized (200% wide), we only see one of those colors in each half at a time. Then we have this little animation that pushes the position of those background gradients left, right, and back again forever and ever.\n\n\n\nWhen dealing with background properties — especially background-position — I always refer to my Stack Overflow answer where I am giving a detailed explanation on how all this works. If you are uncomfortable with CSS background trickery, I highly recommend reading that answer to help with what comes next.\n\n\n\nIn the animation, notice that the first layer is Y=0% (placed at the top) while X is changes from 0% to 100%. For the second layer, we have the same for X but Y=100% (placed at the bottom).\n\n\n\nCodePen Embed Fallback\n\n\n\nWhy using a conic-gradient() instead of linear-gradient()?\n\n\n\nGood question! Intuitively, we should use a linear gradient to create a two-color gradients like this:\n\n\n\nlinear-gradient(90deg, red 50%, blue 0)\n\n\n\nBut we can also reach for the same using a conic-gradient() — and with less of code. We reduce the code and also learn a new trick in the process!\n\n\n\nSliding the colors left and right is a nice way to make it look like we’re changing colors, but it might be better if we instantly change colors instead — that way, there’s no chance of a loader dot flashing two colors at the same time. To do this, let’s change the animation‘s timing function from linear to steps(1)\n\n\n\nCodePen Embed Fallback\n\n\n\nThe loader dots\n\n\n\nIf you followed along with the first article in this series, I bet you know what comes next: CSS masks! What makes masks so great is that they let us sort of “cut out” parts of a background in the shape of another element. So, in this case, we want to make a few dots, show the background gradients through the dots, and cut out any parts of the background that are not part of a dot.\n\n\n\nWe are going to use radial-gradient() for this:\n\n\n\n.loader {\n  width: 180px;\n  aspect-ratio: 8/5;\n  mask:\n    radial-gradient(#000 68%, #0000 71%) no-repeat,\n    radial-gradient(#000 68%, #0000 71%) no-repeat,\n    radial-gradient(#000 68%, #0000 71%) no-repeat;\n  mask-size: 25% 40%; /* the size of our dots */\n}\n\n\n\nThere’s some duplicated code in there, so let’s make a CSS variable to slim things down:\n\n\n\n.loader {\n  width: 180px;\n  aspect-ratio: 8/5;\n  --_g: radial-gradient(#000 68%, #0000 71%) no-repeat;\n  mask: var(--_g),var(--_g),var(--_g);\n  mask-size: 25% 40%;\n}\n\n\n\nCool cool. But now we need a new animation that helps move the dots up and down between the animated gradients.\n\n\n\n.loader {\n  /* same as before */\n  animation: load 2s infinite;\n}\n\n@keyframes load {      /* X  Y,     X   Y,    X   Y */\n  0%     { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */\n  16.67% { mask-position: 0% 100%, 50% 0%  , 100% 0%; }\n  33.33% { mask-position: 0% 100%, 50% 100%, 100% 0%; }\n  50%    { mask-position: 0% 100%, 50% 100%, 100% 100%; } /* all of them at the bottom */\n  66.67% { mask-position: 0% 0%  , 50% 100%, 100% 100%; }\n  83.33% { mask-position: 0% 0%  , 50% 0%  , 100% 100%; }\n  100%   { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */\n}\n\n\n\nYes, that’s a total of three radial gradients in there, all with the same configuration and the same size — the animation will update the position of each one. Note that the X coordinate of each dot is fixed. The mask-position is defined such that the first dot is at the left (0%), the second one at the center (50%), and the third one at the right (100%). We only update the Y coordinate from 0% to 100% to make the dots dance.\n\n\n\n\n\n\n\nHere’s what we get:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow, combine this with our gradient animation and magic starts to happen:\n\n\n\nCodePen Embed Fallback\n\n\n\nDot loader variations\n\n\n\nThe CSS variable we made in the last example makes it all that much easier to swap in new colors and create more variations of the same loader. For example, different colors and sizes:\n\n\n\nCodePen Embed Fallback\n\n\n\nWhat about another movement for our dots?\n\n\n\nCodePen Embed Fallback\n\n\n\nHere, all I did was update the animation to consider different positions, and we get another loader with the same code structure!\n\n\n\nThe animation technique I used for the mask layers can also be used with background layers to create a lot of different loaders with a single color. I wrote a detailed article about this. You will see that from the same code structure we can create different variations by simply changing a few values. I am sharing a few examples at the end of the article.\n\n\n\nWhy not a loader with one dot?\n\n\n\nCodePen Embed Fallback\n\n\n\nThis one should be fairly easy to grok as I am using the same technique but with a more simple logic:\n\n\n\nCodePen Embed Fallback\n\n\n\nHere is another example of loader where I am also animating radial-gradient combined with CSS filters and mix-blend-mode to create a blobby effect:\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you check the code, you will see that all I am really doing there is animating the background-position, exactly like we did with the previous loader, but adding a dash of background-size to make it look like the blob gets bigger as it absorbs dots.\n\n\n\nIf you want to understand the magic behind that blob effect, you can refer to these interactive slides (Chrome only) by Ana Tudor because she covers the topic so well!\n\n\n\nHere is another dot loader idea, this time using a different technique:\n\n\n\nCodePen Embed Fallback\n\n\n\nThis one is only 10 CSS declarations and a keyframe. The main element and its two pseudo-elements have the same background configuration with one radial gradient. Each one creates one dot, for a total of three. The animation moves the gradient from top to bottom by using different delays for each dot..\n\n\n\nOh, and take note how this demo uses CSS Grid. This allows us to leverage the grid’s default stretch alignment so that both pseudo-elements cover the whole area of their parent. No need for sizing! Push the around a little with translate() and we’re all set.\n\n\n\nMore examples!\n\n\n\nJust to drive the point home, I want to leave you with a bunch of additional examples that are really variations of what we’ve looked at. As you view the demos, you’ll see that the approaches we’ve covered here are super flexible and open up tons of design possibilities.\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nNext up…\n\n\n\nOK, so we covered dot loaders in this article and spinners in the last one. In the next article of this four-part series, we’ll turn our attention to another common type of loader: the bars. We’ll take a lot of what we learned so far and see how we can extend them to create yet another single element loader with as little code and as much flexibility as possible.\n\n\n\n\nArticle series\n\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D\n\n\nSingle Element Loaders: The Dots originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366342",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-17T14:47:55.000Z",
      "date_modified": "2022-06-17T14:47:55.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366252",
      "url": "https://css-tricks.com/conditionally-styling-selected-elements-in-a-grid-container/",
      "title": "Conditionally Styling Selected Elements in a Grid Container",
      "summary": "Calendars, shopping carts, galleries, file explorers, and online libraries are some situations where selectable items are shown in grids (i.e. square lattices). You know, even those security checks that ask you to select all images with crosswalks or whatever.\n🧐…\n\nConditionally Styling Selected Elements in a Grid Container originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Calendars, shopping carts, galleries, file explorers, and online libraries are some situations where selectable items are shown in grids (i.e. square lattices). You know, even those security checks that ask you to select all images with crosswalks or whatever.</p>\n\n\n\n<span id=\"more-366252\"></span>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/catpcha-crosswalks.png?resize=302%2C461&#038;ssl=1\" alt=\"\" class=\"wp-image-366253\" width=\"302\" height=\"461\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/catpcha-crosswalks.png?w=402&amp;ssl=1 402w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/catpcha-crosswalks.png?resize=196%2C300&amp;ssl=1 196w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>&#x1f9d0;</figcaption></figure>\n\n\n\n<p>I found a neat way to display selectable options in a grid. No, not recreating that reCAPTCHA, but simply being able to select multiple items. And when two or more adjoining items are selected, we can use clever <code>:nth-of-type</code> combinators, pseudo elements, and the <code>:checked</code> pseudo-class to style them in a way where they look grouped together.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwQzWqP\" src=\"//codepen.io/anon/embed/VwQzWqP?height=550&amp;theme-id=1&amp;slug-hash=VwQzWqP&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwQzWqP\" title=\"CodePen Embed VwQzWqP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The whole idea of combinators and pseudos to get the rounded checkboxes came from a <a href=\"https://css-tricks.com/fun-times-styling-checkbox-states/\">previous article I wrote</a>. It was a simple single-column design:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdwbXga\" src=\"//codepen.io/anon/embed/mdwbXga?height=550&amp;theme-id=1&amp;slug-hash=mdwbXga&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdwbXga\" title=\"CodePen Embed mdwbXga\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This time, however, the rounding effect is applied to elements along both the vertical and horizontal axes on a grid. You don’t have to have read my last article on checkbox styling for this since I’m going to cover everything you need to know here. But if you’re interested in a slimmed down take on what we’re doing in this article, then that one is worth checking out.</p>\n\n\n\n<h3>Before we start…</h3>\n\n\n\n<p>It’ll be useful for you to take note of a few things. For example, I’m using static HTML and CSS in my demo for the sake of simplicity. Depending on your application you might have to generate the grid and the items in it dynamically. I’m leaving out practical checks for accessibility in order to focus on the effect, but you would definitely want to consider that sort of thing in a production environment.</p>\n\n\n\n<p>Also, I’m using CSS Grid for the layout. I’d recommend the same but, of course, it’s only a personal preference and your mileage may vary. For me, using grid allows me to easily use sibling-selectors to target an item’s <code>::before</code> and <code>::after</code> pseudos.</p>\n\n\n\n<p>Hence, whatever layout standard you might want to use in your application, make sure the pseudos can still be targeted in CSS and ensure the layout stays in tact across different browsers and screens.</p>\n\n\n\n<h3>Let’s get started now</h3>\n\n\n\n<p>As you may have noticed in the earlier demo, checking and unchecking a checkbox element modifies the design of the boxes, depending on the selection state of the other checkboxes around it. This is possible because I styled each box using the pseudo-elements of its adjacent elements instead of its own element.</p>\n\n\n\n<p>The following figure shows how the <code>::before</code> pseudo-elements of boxes in each <em>column</em> (except the first column) overlap the boxes to their left, and how the <code>::after</code> pseudo-elements of boxes in each <em>row</em> (except the first row) overlap the boxes above.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1360\" height=\"994\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?resize=1360%2C994&#038;ssl=1\" alt=\"Two grids of checkboxes showing the placement of before and after pseudos.\" class=\"wp-image-366254\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?w=1360&amp;ssl=1 1360w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?resize=300%2C219&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?resize=1024%2C748&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?resize=768%2C561&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>Here’s the base code</h3>\n\n\n\n<p>The markup is pretty straightforward:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;input type=checkbox> \n  &lt;input type=checkbox> \n  &lt;input type=checkbox>\n  &lt;!-- more boxes -->\n&lt;/main></code></pre>\n\n\n\n<p>There’s a little more going on in the initial CSS. But, first, the grid itself:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* The grid */\nmain {\n  display: grid;\n  grid:  repeat(5, 60px) / repeat(4, 85px);\n  align-items: center;\n  justify-items: center;\n  margin: 0;\n}</code></pre>\n\n\n\n<p>That’s a grid of five rows and four columns that contain checkboxes. I decided to wipe out the default appearance of the checkboxes, then give them my own light gray background and super rounded borders:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* all checkboxes */\ninput {\n  -webkit-appearance: none;\n  appearance: none;\n  background: #ddd;\n  border-radius: 20px;\n  cursor: pointer;\n  display: grid;\n  height: 40px;\n  width: 60px;\n  margin: 0;\n}</code></pre>\n\n\n\n<p>Notice, too, that the checkboxes themselves are grids. That’s key for placing their <code>::before</code> and <code>::after</code> pseudo-elements. Speaking of which, let’s do that now:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* pseudo-elements except for the first column and first row */\ninput:not(:nth-of-type(4n+1))::before,\ninput:nth-of-type(n+5)::after {\n  content: '';        \n  border-radius: 20px;\n  grid-area: 1 / 1;\n  pointer-events: none;\n}</code></pre>\n\n\n\n<p>We’re only selecting the pseudo-elements of checkboxes that are not in the first column or the first row of the grid. <code>input:not(:nth-of-type(4n+1))</code> starts at the first checkbox, then selects the <code>::before</code> of every fourth item from there. But notice we’re saying <code>:not()</code>, so really what we’re doing is <em>skipping</em> the <code>::before</code> pseudo-element of every fourth checkbox, starting at the first. Then we’re applying styles to the <code>::after</code> pseudo of every checkbox from the fifth one.</p>\n\n\n\n<p>Now we can style both the <code>::before</code> and <code>::after</code> pseudos for each checkbox that is not in the first column or row of the grid, so that they are moved left or up, respectively, hiding them by default.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* pseudo-elements other than the first column */\ninput:not(:nth-of-type(4n+1))::before { \n  transform: translatex(-85px);\n}\n\n/* pseudo-elements other than the first row */\ninput:nth-of-type(n+5)::after {\n transform: translatey(-60px); \n}</code></pre>\n\n\n\n<h3>Styling the <code>:checked</code> state</h3>\n\n\n\n<p>Now comes styling the checkboxes when they are in a <code>:checked</code> state. First, let’s give them a color, say a <code>limegreen</code> background:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">input:checked { background: limegreen; }</code></pre>\n\n\n\n<p>A checked box should be able to re-style all of its adjacent checked boxes. In other words, if we select the eleventh checkbox in the grid, we should also be able to style the boxes surrounding it at the top, bottom, left, and right.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1242\" height=\"694\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?resize=1242%2C694&#038;ssl=1\" alt=\"A four-by-five grid of squares numbered one through 20. 11 is selected and 7, 10, 12, and 15 are highlighted.\" class=\"wp-image-366255\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?w=1242&amp;ssl=1 1242w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?resize=300%2C168&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?resize=1024%2C572&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?resize=768%2C429&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This is done by targeting the correct pseudo-elements. How do we do that? Well, it depends on the actual number of columns in the grid. Here’s the CSS if two adjacent boxes are checked in a 5⨉4 grid:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* a checked box's right borders (if the element to its right is checked) */\ninput:not(:nth-of-type(4n)):checked + input:checked::before { \n  border-top-right-radius: 0; \n  border-bottom-right-radius: 0; \n  background: limegreen;\n}\n/* a checked box's bottom borders (if the element below is checked) */\ninput:nth-last-of-type(n+5):checked + * + * + * + input:checked::after {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n  background: limegreen;\n}\n/* a checked box's adjacent (right side) checked box's left borders */\ninput:not(:nth-of-type(4n)):checked + input:checked + input::before {         \n  border-top-left-radius: 0; \n  border-bottom-left-radius: 0; \n  background: limegreen;\n}\n/* a checked box's adjacent (below) checked box's top borders */\ninput:not(:nth-of-type(4n)):checked + * + * + * +  input:checked + input::before { \n  border-top-left-radius: 0; \n  border-top-right-radius: 0; \n  background: limegreen;\n}</code></pre>\n\n\n\n<p>If you prefer you can generate the above code dynamically. However, a typical grid, say an image gallery, the number of columns will be small and likely a fixed number of items, whereas the rows might keep increasing. Especially if designed for mobile screens. That’s why this approach is still an efficient way to go. If for some reason your application happens to have limited rows and expanding columns, then consider rotating the grid sideways because, with a stream of items, CSS Grid arranges them left-to-right and top-to-bottom (i.e. row by row).</p>\n\n\n\n<p>We also need to add styling for the last checkboxes in the grid — they’re not all covered by pseudo-elements as they are the last items in each axis.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* a checked box's (in last column) left borders */\ninput:nth-of-type(4n-1):checked + input:checked {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n/* a checked box's (in last column) adjacent (below) checked box's top borders */\ninput:nth-of-type(4n):checked + * + * + * + input:checked {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}</code></pre>\n\n\n\n<p>Those are some tricky selectors! The first one…</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">input:nth-of-type(4n-1):checked + input:checked</code></pre>\n\n\n\n<p>…is basically saying this:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A checked <code>&lt;input&gt;</code> element next to a checked <code>&lt;input&gt;</code> in the second last column.</p></blockquote>\n\n\n\n<p>And the <code>nth-of-type</code> is calculated like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">4(0) - 1 = no match\n4(1) - 1 = 3rd item\n4(2) - 1 = 7th item\n4(3) - 1 = 11th item\netc.</code></pre>\n\n\n\n<p>So, we’re starting at the third checkbox and selecting every fourth one from there. And if a checkbox in that sequence is checked, then we style the checkboxes adjacent, too, if they are also checked.</p>\n\n\n\n<p>And this line:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">input:nth-of-type(4n):checked + * + * + * + input:checked</code></pre>\n\n\n\n<p>Is saying this:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>An <code>&lt;input&gt;</code> element provided that is checked, is directly adjacent to an element, which is directly adjacent to another element, which is also directly adjacent to another element, which, in turn, is directly adjacent to an <code>&lt;input&gt;</code> element that is in a checked state.</p></blockquote>\n\n\n\n<p>What that means is we’re selecting every fourth checkbox that is checked. And if a checkbox in that sequence is checked, then we style the next fourth checkbox from that checkbox if it, too, is checked.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwQzWqP\" src=\"//codepen.io/anon/embed/VwQzWqP?height=550&amp;theme-id=1&amp;slug-hash=VwQzWqP&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwQzWqP\" title=\"CodePen Embed VwQzWqP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Putting it to use</h3>\n\n\n\n<p>What we just looked at is the general principle and logic behind the design. Again, how useful it is in your application will depend on the grid design.</p>\n\n\n\n<p>I used rounded borders, but you can try other shapes or even experiment with background effects (<a href=\"https://css-tricks.com/css-hover-effects-background-masks-3d/\">Temani has you covered for ideas</a>). Now that you know how the formula works, the rest is totally up to your imagination.</p>\n\n\n\n<p>Here’s an instance of how it might look in a simple calendar:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poaZQNx\" src=\"//codepen.io/anon/embed/poaZQNx?height=550&amp;theme-id=1&amp;slug-hash=poaZQNx&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poaZQNx\" title=\"CodePen Embed poaZQNx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Again, this is merely a rough prototype using static markup. And, there would be lots and lots of accessibility considerations to consider in a calendar feature.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>That’s a wrap! Pretty neat, right? I mean, there’s nothing exactly “new” about what’s happening. But it’s a good example of <em>selecting things</em> in CSS. If we have a handle on more advanced selecting techniques that use combinators and pseudos, then our styling powers can reach far beyond the styling one item — as we saw, we can conditionally style items based on the state of another element.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/conditionally-styling-selected-elements-in-a-grid-container/\">Conditionally Styling Selected Elements in a Grid Container</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Calendars, shopping carts, galleries, file explorers, and online libraries are some situations where selectable items are shown in grids (i.e. square lattices). You know, even those security checks that ask you to select all images with crosswalks or whatever.\n\n\n\n\n\n\n\n🧐\n\n\n\nI found a neat way to display selectable options in a grid. No, not recreating that reCAPTCHA, but simply being able to select multiple items. And when two or more adjoining items are selected, we can use clever :nth-of-type combinators, pseudo elements, and the :checked pseudo-class to style them in a way where they look grouped together.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe whole idea of combinators and pseudos to get the rounded checkboxes came from a previous article I wrote. It was a simple single-column design:\n\n\n\nCodePen Embed Fallback\n\n\n\nThis time, however, the rounding effect is applied to elements along both the vertical and horizontal axes on a grid. You don’t have to have read my last article on checkbox styling for this since I’m going to cover everything you need to know here. But if you’re interested in a slimmed down take on what we’re doing in this article, then that one is worth checking out.\n\n\n\nBefore we start…\n\n\n\nIt’ll be useful for you to take note of a few things. For example, I’m using static HTML and CSS in my demo for the sake of simplicity. Depending on your application you might have to generate the grid and the items in it dynamically. I’m leaving out practical checks for accessibility in order to focus on the effect, but you would definitely want to consider that sort of thing in a production environment.\n\n\n\nAlso, I’m using CSS Grid for the layout. I’d recommend the same but, of course, it’s only a personal preference and your mileage may vary. For me, using grid allows me to easily use sibling-selectors to target an item’s ::before and ::after pseudos.\n\n\n\nHence, whatever layout standard you might want to use in your application, make sure the pseudos can still be targeted in CSS and ensure the layout stays in tact across different browsers and screens.\n\n\n\nLet’s get started now\n\n\n\nAs you may have noticed in the earlier demo, checking and unchecking a checkbox element modifies the design of the boxes, depending on the selection state of the other checkboxes around it. This is possible because I styled each box using the pseudo-elements of its adjacent elements instead of its own element.\n\n\n\nThe following figure shows how the ::before pseudo-elements of boxes in each column (except the first column) overlap the boxes to their left, and how the ::after pseudo-elements of boxes in each row (except the first row) overlap the boxes above.\n\n\n\n\n\n\n\nHere’s the base code\n\n\n\nThe markup is pretty straightforward:\n\n\n\n<main>\n  <input type=checkbox> \n  <input type=checkbox> \n  <input type=checkbox>\n  <!-- more boxes -->\n</main>\n\n\n\nThere’s a little more going on in the initial CSS. But, first, the grid itself:\n\n\n\n/* The grid */\nmain {\n  display: grid;\n  grid:  repeat(5, 60px) / repeat(4, 85px);\n  align-items: center;\n  justify-items: center;\n  margin: 0;\n}\n\n\n\nThat’s a grid of five rows and four columns that contain checkboxes. I decided to wipe out the default appearance of the checkboxes, then give them my own light gray background and super rounded borders:\n\n\n\n/* all checkboxes */\ninput {\n  -webkit-appearance: none;\n  appearance: none;\n  background: #ddd;\n  border-radius: 20px;\n  cursor: pointer;\n  display: grid;\n  height: 40px;\n  width: 60px;\n  margin: 0;\n}\n\n\n\nNotice, too, that the checkboxes themselves are grids. That’s key for placing their ::before and ::after pseudo-elements. Speaking of which, let’s do that now:\n\n\n\n/* pseudo-elements except for the first column and first row */\ninput:not(:nth-of-type(4n+1))::before,\ninput:nth-of-type(n+5)::after {\n  content: '';        \n  border-radius: 20px;\n  grid-area: 1 / 1;\n  pointer-events: none;\n}\n\n\n\nWe’re only selecting the pseudo-elements of checkboxes that are not in the first column or the first row of the grid. input:not(:nth-of-type(4n+1)) starts at the first checkbox, then selects the ::before of every fourth item from there. But notice we’re saying :not(), so really what we’re doing is skipping the ::before pseudo-element of every fourth checkbox, starting at the first. Then we’re applying styles to the ::after pseudo of every checkbox from the fifth one.\n\n\n\nNow we can style both the ::before and ::after pseudos for each checkbox that is not in the first column or row of the grid, so that they are moved left or up, respectively, hiding them by default.\n\n\n\n/* pseudo-elements other than the first column */\ninput:not(:nth-of-type(4n+1))::before { \n  transform: translatex(-85px);\n}\n\n/* pseudo-elements other than the first row */\ninput:nth-of-type(n+5)::after {\n transform: translatey(-60px); \n}\n\n\n\nStyling the :checked state\n\n\n\nNow comes styling the checkboxes when they are in a :checked state. First, let’s give them a color, say a limegreen background:\n\n\n\ninput:checked { background: limegreen; }\n\n\n\nA checked box should be able to re-style all of its adjacent checked boxes. In other words, if we select the eleventh checkbox in the grid, we should also be able to style the boxes surrounding it at the top, bottom, left, and right.\n\n\n\n\n\n\n\nThis is done by targeting the correct pseudo-elements. How do we do that? Well, it depends on the actual number of columns in the grid. Here’s the CSS if two adjacent boxes are checked in a 5⨉4 grid:\n\n\n\n/* a checked box's right borders (if the element to its right is checked) */\ninput:not(:nth-of-type(4n)):checked + input:checked::before { \n  border-top-right-radius: 0; \n  border-bottom-right-radius: 0; \n  background: limegreen;\n}\n/* a checked box's bottom borders (if the element below is checked) */\ninput:nth-last-of-type(n+5):checked + * + * + * + input:checked::after {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n  background: limegreen;\n}\n/* a checked box's adjacent (right side) checked box's left borders */\ninput:not(:nth-of-type(4n)):checked + input:checked + input::before {         \n  border-top-left-radius: 0; \n  border-bottom-left-radius: 0; \n  background: limegreen;\n}\n/* a checked box's adjacent (below) checked box's top borders */\ninput:not(:nth-of-type(4n)):checked + * + * + * +  input:checked + input::before { \n  border-top-left-radius: 0; \n  border-top-right-radius: 0; \n  background: limegreen;\n}\n\n\n\nIf you prefer you can generate the above code dynamically. However, a typical grid, say an image gallery, the number of columns will be small and likely a fixed number of items, whereas the rows might keep increasing. Especially if designed for mobile screens. That’s why this approach is still an efficient way to go. If for some reason your application happens to have limited rows and expanding columns, then consider rotating the grid sideways because, with a stream of items, CSS Grid arranges them left-to-right and top-to-bottom (i.e. row by row).\n\n\n\nWe also need to add styling for the last checkboxes in the grid — they’re not all covered by pseudo-elements as they are the last items in each axis.\n\n\n\n/* a checked box's (in last column) left borders */\ninput:nth-of-type(4n-1):checked + input:checked {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n/* a checked box's (in last column) adjacent (below) checked box's top borders */\ninput:nth-of-type(4n):checked + * + * + * + input:checked {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n\n\nThose are some tricky selectors! The first one…\n\n\n\ninput:nth-of-type(4n-1):checked + input:checked\n\n\n\n…is basically saying this:\n\n\n\nA checked <input> element next to a checked <input> in the second last column.\n\n\n\nAnd the nth-of-type is calculated like this:\n\n\n\n4(0) - 1 = no match\n4(1) - 1 = 3rd item\n4(2) - 1 = 7th item\n4(3) - 1 = 11th item\netc.\n\n\n\nSo, we’re starting at the third checkbox and selecting every fourth one from there. And if a checkbox in that sequence is checked, then we style the checkboxes adjacent, too, if they are also checked.\n\n\n\nAnd this line:\n\n\n\ninput:nth-of-type(4n):checked + * + * + * + input:checked\n\n\n\nIs saying this:\n\n\n\nAn <input> element provided that is checked, is directly adjacent to an element, which is directly adjacent to another element, which is also directly adjacent to another element, which, in turn, is directly adjacent to an <input> element that is in a checked state.\n\n\n\nWhat that means is we’re selecting every fourth checkbox that is checked. And if a checkbox in that sequence is checked, then we style the next fourth checkbox from that checkbox if it, too, is checked.\n\n\n\nCodePen Embed Fallback\n\n\n\nPutting it to use\n\n\n\nWhat we just looked at is the general principle and logic behind the design. Again, how useful it is in your application will depend on the grid design.\n\n\n\nI used rounded borders, but you can try other shapes or even experiment with background effects (Temani has you covered for ideas). Now that you know how the formula works, the rest is totally up to your imagination.\n\n\n\nHere’s an instance of how it might look in a simple calendar:\n\n\n\nCodePen Embed Fallback\n\n\n\nAgain, this is merely a rough prototype using static markup. And, there would be lots and lots of accessibility considerations to consider in a calendar feature.\n\n\n\n\n\n\n\nThat’s a wrap! Pretty neat, right? I mean, there’s nothing exactly “new” about what’s happening. But it’s a good example of selecting things in CSS. If we have a handle on more advanced selecting techniques that use combinators and pseudos, then our styling powers can reach far beyond the styling one item — as we saw, we can conditionally style items based on the state of another element.\n\nConditionally Styling Selected Elements in a Grid Container originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366252",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-15T14:15:50.000Z",
      "date_modified": "2022-06-15T14:15:50.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366388",
      "url": "https://css-tricks.com/de-mystifying-indieweb-on-a-wordpress-site/",
      "title": "De-Mystifying IndieWeb on a WordPress Site",
      "summary": "Well, sheesh. I opened a little can of worms when sharing Miriam’s “Am I on the IndieWeb yet?” with a short post bemoaning my own trouble getting on the IndieWeb train. But it’s a good can of worms.\nI think …\n\nDe-Mystifying IndieWeb on a WordPress Site originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Well, sheesh. I opened a little can of worms when sharing Miriam&#8217;s <a href=\"https://www.miriamsuzanne.com/2022/06/04/indiweb/\" rel=\"noopener\">&#8220;Am I on the IndieWeb yet?&#8221;</a> with a <a href=\"https://css-tricks.com/am-i-on-the-indieweb-yet/\">short post bemoaning my own trouble</a> getting on the IndieWeb train. But it&#8217;s a good can of worms.</p>\n\n\n\n<p>I think it was something like the next day after publishing that short post that <a href=\"https://david.shanske.com\" rel=\"noopener\">David Shanske</a> reached out and offered to help wrap my head around IndieWeb and the components that it comprises. And gosh dang if it wasn&#8217;t ridiculously helpful! So much so that I&#8217;d like to <a href=\"https://david.shanske.com/2022/06/12/indiewebifying-a-wordpress-site-2022-edition/\" rel=\"noopener\">link you up to a new post David wrote after we talked</a>, then summarize things here as best as I can because (1) it&#8217;s helpful to write things down and (2) have a reference for later.</p>\n\n\n\n<span id=\"more-366388\"></span>\n\n\n\n<h3>Yes, IndieWeb is confusing.</h3>\n\n\n\n<p>David had actually helped someone get their WordPress site all set up with IndieWeb powers. That person, too, was struggling to understand how the various pieces fit together. So, David already had this top of mind when Miriam and I were writing.</p>\n\n\n\n<p>&#8220;IndieWeb&#8221; is a new term for many folks and that&#8217;s where a lot of confusion breeds. Is it a framework? A philosophy? A set of standards? Depending on which one it is, the expectations shift as far as what it looks like to be a part of it.</p>\n\n\n\n<p>It&#8217;s sort of all of the above. And that needs to be solidified a bit. There&#8217;s nothing inherently confusing about IndieWeb itself once you view it through those different lenses. After reading David&#8217;s post my understanding is that IndieWeb is more of a set of protocols. Sorta like working with structured data or OpenGraph in markup. There&#8217;s nothing to install per se, but there are standards for how to integrate them into your work.</p>\n\n\n\n<p>Your identity powers IndieWeb. In other words, your site establishes your identity and can be used to do lots of things, like:</p>\n\n\n\n<ul><li>Notify other IndieWeb-supported sites when they are mentioned</li><li>Receive notifications from other IndieWeb sites when you are mentioned</li><li>Fetch information from a mention and format it for display</li><li>Authenticate your identity through your own website (a là a Google sign-in button but connected to your site)</li><li>&#8230;among other things.</li></ul>\n\n\n\n<p>If that sorta sounds like pingbacks, well, it sorta is. But much more robust and maintained.</p>\n\n\n\n<h3>It&#8217;s different (and perhaps easier) to implement IndieWeb features on WordPress than it is a static site.</h3>\n\n\n\n<p>The big difference is that WordPress provides a lot of the requirements needed to do IndieWeb-y things. I like how David explains it:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The IndieWeb implementation on WordPress is a [series] of building blocks that you can or cannot choose to use, which is what makes it wonderful, but sometimes confusing. WordPress has a philosophy of decisions, not options. But the IndieWeb is all about options…about building the features that are right for you.</p></blockquote>\n\n\n\n<p>Those building blocks are plugins that you install to add IndieWeb protocols and technologies to WordPress. It&#8217;s awesome those are readily available because that takes a a lot of the work out of things. Running a static site, though, you&#8217;re on the hook for establishing most of that yourself.</p>\n\n\n\n<p>David&#8217;s post is 100% focused on the WordPress implementation. Your mileage may vary, but you will certainly walk away with a better idea of what protocols are available and how they fit together after reading his post — and hopefully this one as well.</p>\n\n\n\n<h3>The IndieWeb WordPress plugin establishes your identity.</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"332\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=1024%2C332&#038;ssl=1\" alt=\"\" class=\"wp-image-366396\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=1024%2C332&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=768%2C249&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=1536%2C497&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?w=1544&amp;ssl=1 1544w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I thought it was doing so much stuff behind the scenes, but it&#8217;s a lot more simple than that:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The plugin by itself handles establishing your identity as the IndieWeb sees it. It offers an h-card template and widget. H-Card is the markup for marking up information about a person or place. So, this is an element many people opt to put on their site anyway.</p></blockquote>\n\n\n\n<p>So, really, it&#8217;s possible to get the same sort of thing by correctly marking up a WordPress theme. The convenience here is that you get a handy little template that&#8217;s marked up to support the <a href=\"https://microformats.org/wiki/h-card\" rel=\"noopener\"><code>h-card</code> open format</a> and a widget to drop it into a theme&#8217;s widget area.</p>\n\n\n\n<p>Here&#8217;s a super detailed example of the <code>h-card</code> markup pulled from the <a href=\"https://microformats.org/wiki/h-card#Example\" rel=\"noopener\">documentation for Microformats2</a>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"h-card\">\n  &lt;img class=\"u-photo\" alt=\"photo of Mitchell\"\n       src=\"https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg\"/>\n  &lt;a class=\"p-name u-url\"\n     href=\"http://blog.lizardwrangler.com/\" \n    >Mitchell Baker&lt;/a>\n (&lt;a class=\"u-url\" \n     href=\"https://twitter.com/MitchellBaker\"\n    >@MitchellBaker&lt;/a>)\n  &lt;span class=\"p-org\">Mozilla Foundation&lt;/span>\n  &lt;p class=\"p-note\">\n    Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.\n  &lt;/p>\n  &lt;span class=\"p-category\">Strategy&lt;/span>\n  &lt;span class=\"p-category\">Leadership&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>See those class names? Classes like <code>.h-card</code>, <code>u-photo</code>, <code>p-name</code>, etc. all provide contextual meaning for a person&#8217;s identity which it then parsed as JSON:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"items\": [{ \n    \"type\": [\"h-card\"],\n    \"properties\": {\n      \"photo\": [\"https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg\"],\n      \"name\": [\"Mitchell Baker\"],\n      \"url\": [\n        \"http://blog.lizardwrangler.com/\",\n        \"https://twitter.com/MitchellBaker\"\n      ],\n      \"org\": [\"Mozilla Foundation\"],\n      \"note\": [\"Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.\"],\n      \"category\": [\n        \"Strategy\",\n        \"Leadership\"\n      ]\n    }\n  }]\n}</code></pre>\n\n\n\n<p>The plugin isn&#8217;t doing the sending, receiving, or parsing. Instead, it provides a WordPress site with a way to verify your identity in the markup.</p>\n\n\n\n<h3>Not all WordPress themes support Microformats</h3>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1544\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=1544%2C500&#038;ssl=1\" alt=\"\" class=\"wp-image-366397\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?w=1544&amp;ssl=1 1544w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=1024%2C332&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=768%2C249&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=1536%2C497&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you scratched your head first time you saw &#8220;Microformats&#8221; like I did, David defines it nicely:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[&#8230;] Microformats…a way of marking up HTML to allow elements to be identified. It is one of several ways of doing this, but is a very simple and readable one, which is why it is popular in the IndieWeb community.</p></blockquote>\n\n\n\n<p>The problem, as David continues, is that many themes aren&#8217;t marked up in a Microformats-friendly way — which is what the <a href=\"https://wordpress.org/plugins/wp-uf2/\" rel=\"noopener\">Microformats2 plugin</a> is designed to fix.  That said, David is quick to call out that the plugin is extremely limited in how it accomplishes this, and he recommends instead marking up a theme by hand.</p>\n\n\n\n<p>According to David, the next major release of the Webmention plugin will likely include smarter ways of detecting content and images it can use and formatting them for Microformats2 support.</p>\n\n\n\n<h2>Webmentions send and receive notifications.</h2>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"772\" height=\"250\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.jpg?resize=772%2C250&#038;ssl=1\" alt=\"\" class=\"wp-image-366400\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.jpg?w=772&amp;ssl=1 772w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.jpg?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.jpg?resize=768%2C249&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>OK, so if you&#8217;ve established your identity through your site so you are discoverable, and your site is marked up for <code>h-card</code> support using Microformats2. Great! You still need something in the middle working as an operator that sends and receives notifications. In other words, when another site mentions you — called a Webmention — the site mentioning you needs a way to support sending that mention to you, and your site needs a way to accept it (or vice versa).</p>\n\n\n\n<p>That&#8217;s what the <a href=\"https://wordpress.org/plugins/webmention/\" rel=\"noopener\">Webmention plugin</a> is for. It&#8217;s also probably the source of most of my IndieWeb confusion. I thought it was formatting data and needed an additional service to send and receive it. Nope! It&#8217;s actually sending and receiving the data rather than creating the mention. Back to David:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Back when it was built, the plugin handled only the business of receiving and sending webmentions, not handling display to any degree. Semantic Linkbacks, a separate plugin handled that for not only webmentions, but the older pingback and trackback protocols.</p></blockquote>\n\n\n\n<p>So, the Webmention plugin is communicating notifications. Meanwhile, another plugin called Semantic Linkbacks is what handles the data. And what the heck are Semantic Linkbacks?</p>\n\n\n\n<h2>Semantic Linkbacks fetch and handle data.</h2>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"772\" height=\"250\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.png?resize=772%2C250&#038;ssl=1\" alt=\"\" class=\"wp-image-366402\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.png?w=772&amp;ssl=1 772w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.png?resize=768%2C249&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><a href=\"https://wordpress.org/plugins/semantic-linkbacks/\" rel=\"noopener\">Semantic Linkbacks</a> is another plugin that handles another piece of the process. There&#8217;s no way I can explain it better than David already does:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Semantic Linkbacks takes a webmention, which is a notification that another site has linked to something on your site, fetches the other site, and tries to render a display of the information. How that is done can vary from just a profile photo (if it can find one), to interpreting it as a full comment.</p><p>It does this using Microformats.</p></blockquote>\n\n\n\n<p>I expected that the main IndieWeb plugin was already doing this since it handles other markup. But it only provides the template and widget to get your identity on your site. Once the Semantic Linkbacks plugin fetches an incoming webmention, it takes the data, formats it, then attempts to display it.</p>\n\n\n\n<p>Sounds like the plugin will be somewhat merged with (or replaced by) an upcoming version of the Webmention plugin:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Since many people are not inclined, or not comfortable modifying a theme, the new version of Webmentions will include several different alternative ways to try to find an image or summary to display…from OpenGraph (which Facebook and Twitter use to display URLs provided to it) to detecting the WordPress REST API version of a page and using that to get the author name and profile image. None of them will provided as much context as Microformats, but the experience will still be something worth installing.</p></blockquote>\n\n\n\n<p>That&#8217;s certainly nice as it taps into the WordPress REST API for the JSON response and formats that for display.</p>\n\n\n\n<h3>Brid.gy is a service to help display interactions.</h3>\n\n\n\n<p>A Webmention can be an interaction, say someone likes your post on Twitter or retweets it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1690\" height=\"998\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=1690%2C998&#038;ssl=1\" alt=\"\" class=\"wp-image-366405\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?w=1690&amp;ssl=1 1690w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=300%2C177&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=1024%2C605&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=768%2C454&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=1536%2C907&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Differentiating a like from a repost from a comment from a whatever needs to happen, and you&#8217;d need to implement the Twitter (or whatever) API to draw those distinctions.</p>\n\n\n\n<p>That&#8217;s something you can certainly do! But if you&#8217;d rather plug and play, one of the IndieWeb community members made a service called <a href=\"https://brid.gy\" rel=\"noopener\">Brid.gy</a>. You create an account, hook up your site, and give app permissions to the service&#8230; then you&#8217;re done!</p>\n\n\n\n<p>What Brid.gy has done is essentially implement the APIs for Twitter, Facebook, Instagram, and others, so that when it detects that a post in those services that interacts with your syndicated post, a Webmention is sent to your site and goes through the process of publishing on your own site.</p>\n\n\n\n<h2>There&#8217;s so much more!</h2>\n\n\n\n<p>Quick hits:</p>\n\n\n\n<ul><li><strong>IndieAuth:</strong> This is a protocol based on OAuth 2. <a href=\"https://wordpress.org/plugins/indieauth/\" rel=\"noopener\">The plugin</a> establishes an endpoint in the WordPress REST API that can be used to authenticate your identity through your own self-hosted site — essentially your own Google sign-in button but without establishing that endpoint yourself or needing to rely on a separate hosted API.</li><li><strong>Micropub:</strong> For those who use WordPress but prefer a different editor can install the <a href=\"https://wordpress.org/plugins/micropub/\" rel=\"noopener\">Micropub plugin</a>. This <a href=\"https://micropub.spec.indieweb.org\" rel=\"noopener\">adds an endpoint</a> that allows you to publish content to your site and using a Micropub-supported editor create items in a Microformats2 feed, giving you way more options for writing content outside of the WordPress Block Editor.</li><li><strong>Simple Location:</strong> <a href=\"https://wordpress.org/plugins/simple-location/\" rel=\"noopener\">David wrote this plugin</a> and I was super impressed when he demoed it for me. The idea is it pulls in data from your current location that can used for everything from displaying the weather at the time you wrote a post, to creating an entire archive of posts on an embedded map based on the post location. I&#8217;d honestly love to see something like this baked directly into WordPress.</li></ul>\n\n\n\n<h3>The updated flow</h3>\n\n\n\n<p>I attempted to make an illustration that outlines the various pieces in my last post, but let&#8217;s try again with an updated understanding of what&#8217;s happening:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2478\" height=\"1048\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=2478%2C1048&#038;ssl=1\" alt=\"Outlining the flow between an IndieWeb enabled site and a site that mentions it.\" class=\"wp-image-366419\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?w=2478&amp;ssl=1 2478w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=300%2C127&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=1024%2C433&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=768%2C325&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=1536%2C650&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=2048%2C866&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>(<a href=\"https://css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg\">Full size</a>)</figcaption></figure>\n\n\n\n<h2>Is this all making sense?</h2>\n\n\n\n<p>High fives to David for both reaching out and taking the time to show me what it looks like to implement IndieWeb on WordPress. I can&#8217;t claim I fully understand all the nuances, but I at least feel like I have a decent grasp of the pieces — the philosophy, protocols, and tech — that are required to make it happen.</p>\n\n\n\n<p>I&#8217;d like to turn it around to you! Does this help clarify things for you? Is there anything you&#8217;re struggling to understand? Think you&#8217;re able to configure a WordPress site with IndieWeb features now? Let&#8217;s take it to the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/de-mystifying-indieweb-on-a-wordpress-site/\">De-Mystifying IndieWeb on a WordPress Site</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Well, sheesh. I opened a little can of worms when sharing Miriam’s “Am I on the IndieWeb yet?” with a short post bemoaning my own trouble getting on the IndieWeb train. But it’s a good can of worms.\n\n\n\nI think it was something like the next day after publishing that short post that David Shanske reached out and offered to help wrap my head around IndieWeb and the components that it comprises. And gosh dang if it wasn’t ridiculously helpful! So much so that I’d like to link you up to a new post David wrote after we talked, then summarize things here as best as I can because (1) it’s helpful to write things down and (2) have a reference for later.\n\n\n\n\n\n\n\nYes, IndieWeb is confusing.\n\n\n\nDavid had actually helped someone get their WordPress site all set up with IndieWeb powers. That person, too, was struggling to understand how the various pieces fit together. So, David already had this top of mind when Miriam and I were writing.\n\n\n\n“IndieWeb” is a new term for many folks and that’s where a lot of confusion breeds. Is it a framework? A philosophy? A set of standards? Depending on which one it is, the expectations shift as far as what it looks like to be a part of it.\n\n\n\nIt’s sort of all of the above. And that needs to be solidified a bit. There’s nothing inherently confusing about IndieWeb itself once you view it through those different lenses. After reading David’s post my understanding is that IndieWeb is more of a set of protocols. Sorta like working with structured data or OpenGraph in markup. There’s nothing to install per se, but there are standards for how to integrate them into your work.\n\n\n\nYour identity powers IndieWeb. In other words, your site establishes your identity and can be used to do lots of things, like:\n\n\n\nNotify other IndieWeb-supported sites when they are mentionedReceive notifications from other IndieWeb sites when you are mentionedFetch information from a mention and format it for displayAuthenticate your identity through your own website (a là a Google sign-in button but connected to your site)…among other things.\n\n\n\nIf that sorta sounds like pingbacks, well, it sorta is. But much more robust and maintained.\n\n\n\nIt’s different (and perhaps easier) to implement IndieWeb features on WordPress than it is a static site.\n\n\n\nThe big difference is that WordPress provides a lot of the requirements needed to do IndieWeb-y things. I like how David explains it:\n\n\n\nThe IndieWeb implementation on WordPress is a [series] of building blocks that you can or cannot choose to use, which is what makes it wonderful, but sometimes confusing. WordPress has a philosophy of decisions, not options. But the IndieWeb is all about options…about building the features that are right for you.\n\n\n\nThose building blocks are plugins that you install to add IndieWeb protocols and technologies to WordPress. It’s awesome those are readily available because that takes a a lot of the work out of things. Running a static site, though, you’re on the hook for establishing most of that yourself.\n\n\n\nDavid’s post is 100% focused on the WordPress implementation. Your mileage may vary, but you will certainly walk away with a better idea of what protocols are available and how they fit together after reading his post — and hopefully this one as well.\n\n\n\nThe IndieWeb WordPress plugin establishes your identity.\n\n\n\n\n\n\n\nI thought it was doing so much stuff behind the scenes, but it’s a lot more simple than that:\n\n\n\nThe plugin by itself handles establishing your identity as the IndieWeb sees it. It offers an h-card template and widget. H-Card is the markup for marking up information about a person or place. So, this is an element many people opt to put on their site anyway.\n\n\n\nSo, really, it’s possible to get the same sort of thing by correctly marking up a WordPress theme. The convenience here is that you get a handy little template that’s marked up to support the h-card open format and a widget to drop it into a theme’s widget area.\n\n\n\nHere’s a super detailed example of the h-card markup pulled from the documentation for Microformats2:\n\n\n\n<div class=\"h-card\">\n  <img class=\"u-photo\" alt=\"photo of Mitchell\"\n       src=\"https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg\"/>\n  <a class=\"p-name u-url\"\n     href=\"http://blog.lizardwrangler.com/\" \n    >Mitchell Baker</a>\n (<a class=\"u-url\" \n     href=\"https://twitter.com/MitchellBaker\"\n    >@MitchellBaker</a>)\n  <span class=\"p-org\">Mozilla Foundation</span>\n  <p class=\"p-note\">\n    Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.\n  </p>\n  <span class=\"p-category\">Strategy</span>\n  <span class=\"p-category\">Leadership</span>\n</div>\n\n\n\nSee those class names? Classes like .h-card, u-photo, p-name, etc. all provide contextual meaning for a person’s identity which it then parsed as JSON:\n\n\n\n{\n  \"items\": [{ \n    \"type\": [\"h-card\"],\n    \"properties\": {\n      \"photo\": [\"https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg\"],\n      \"name\": [\"Mitchell Baker\"],\n      \"url\": [\n        \"http://blog.lizardwrangler.com/\",\n        \"https://twitter.com/MitchellBaker\"\n      ],\n      \"org\": [\"Mozilla Foundation\"],\n      \"note\": [\"Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.\"],\n      \"category\": [\n        \"Strategy\",\n        \"Leadership\"\n      ]\n    }\n  }]\n}\n\n\n\nThe plugin isn’t doing the sending, receiving, or parsing. Instead, it provides a WordPress site with a way to verify your identity in the markup.\n\n\n\nNot all WordPress themes support Microformats\n\n\n\n\n\n\n\nIf you scratched your head first time you saw “Microformats” like I did, David defines it nicely:\n\n\n\n[…] Microformats…a way of marking up HTML to allow elements to be identified. It is one of several ways of doing this, but is a very simple and readable one, which is why it is popular in the IndieWeb community.\n\n\n\nThe problem, as David continues, is that many themes aren’t marked up in a Microformats-friendly way — which is what the Microformats2 plugin is designed to fix.  That said, David is quick to call out that the plugin is extremely limited in how it accomplishes this, and he recommends instead marking up a theme by hand.\n\n\n\nAccording to David, the next major release of the Webmention plugin will likely include smarter ways of detecting content and images it can use and formatting them for Microformats2 support.\n\n\n\nWebmentions send and receive notifications.\n\n\n\n\n\n\n\nOK, so if you’ve established your identity through your site so you are discoverable, and your site is marked up for h-card support using Microformats2. Great! You still need something in the middle working as an operator that sends and receives notifications. In other words, when another site mentions you — called a Webmention — the site mentioning you needs a way to support sending that mention to you, and your site needs a way to accept it (or vice versa).\n\n\n\nThat’s what the Webmention plugin is for. It’s also probably the source of most of my IndieWeb confusion. I thought it was formatting data and needed an additional service to send and receive it. Nope! It’s actually sending and receiving the data rather than creating the mention. Back to David:\n\n\n\nBack when it was built, the plugin handled only the business of receiving and sending webmentions, not handling display to any degree. Semantic Linkbacks, a separate plugin handled that for not only webmentions, but the older pingback and trackback protocols.\n\n\n\nSo, the Webmention plugin is communicating notifications. Meanwhile, another plugin called Semantic Linkbacks is what handles the data. And what the heck are Semantic Linkbacks?\n\n\n\nSemantic Linkbacks fetch and handle data.\n\n\n\n\n\n\n\nSemantic Linkbacks is another plugin that handles another piece of the process. There’s no way I can explain it better than David already does:\n\n\n\nSemantic Linkbacks takes a webmention, which is a notification that another site has linked to something on your site, fetches the other site, and tries to render a display of the information. How that is done can vary from just a profile photo (if it can find one), to interpreting it as a full comment.It does this using Microformats.\n\n\n\nI expected that the main IndieWeb plugin was already doing this since it handles other markup. But it only provides the template and widget to get your identity on your site. Once the Semantic Linkbacks plugin fetches an incoming webmention, it takes the data, formats it, then attempts to display it.\n\n\n\nSounds like the plugin will be somewhat merged with (or replaced by) an upcoming version of the Webmention plugin:\n\n\n\nSince many people are not inclined, or not comfortable modifying a theme, the new version of Webmentions will include several different alternative ways to try to find an image or summary to display…from OpenGraph (which Facebook and Twitter use to display URLs provided to it) to detecting the WordPress REST API version of a page and using that to get the author name and profile image. None of them will provided as much context as Microformats, but the experience will still be something worth installing.\n\n\n\nThat’s certainly nice as it taps into the WordPress REST API for the JSON response and formats that for display.\n\n\n\nBrid.gy is a service to help display interactions.\n\n\n\nA Webmention can be an interaction, say someone likes your post on Twitter or retweets it.\n\n\n\n\n\n\n\nDifferentiating a like from a repost from a comment from a whatever needs to happen, and you’d need to implement the Twitter (or whatever) API to draw those distinctions.\n\n\n\nThat’s something you can certainly do! But if you’d rather plug and play, one of the IndieWeb community members made a service called Brid.gy. You create an account, hook up your site, and give app permissions to the service… then you’re done!\n\n\n\nWhat Brid.gy has done is essentially implement the APIs for Twitter, Facebook, Instagram, and others, so that when it detects that a post in those services that interacts with your syndicated post, a Webmention is sent to your site and goes through the process of publishing on your own site.\n\n\n\nThere’s so much more!\n\n\n\nQuick hits:\n\n\n\nIndieAuth: This is a protocol based on OAuth 2. The plugin establishes an endpoint in the WordPress REST API that can be used to authenticate your identity through your own self-hosted site — essentially your own Google sign-in button but without establishing that endpoint yourself or needing to rely on a separate hosted API.Micropub: For those who use WordPress but prefer a different editor can install the Micropub plugin. This adds an endpoint that allows you to publish content to your site and using a Micropub-supported editor create items in a Microformats2 feed, giving you way more options for writing content outside of the WordPress Block Editor.Simple Location: David wrote this plugin and I was super impressed when he demoed it for me. The idea is it pulls in data from your current location that can used for everything from displaying the weather at the time you wrote a post, to creating an entire archive of posts on an embedded map based on the post location. I’d honestly love to see something like this baked directly into WordPress.\n\n\n\nThe updated flow\n\n\n\nI attempted to make an illustration that outlines the various pieces in my last post, but let’s try again with an updated understanding of what’s happening:\n\n\n\n(Full size)\n\n\n\nIs this all making sense?\n\n\n\nHigh fives to David for both reaching out and taking the time to show me what it looks like to implement IndieWeb on WordPress. I can’t claim I fully understand all the nuances, but I at least feel like I have a decent grasp of the pieces — the philosophy, protocols, and tech — that are required to make it happen.\n\n\n\nI’d like to turn it around to you! Does this help clarify things for you? Is there anything you’re struggling to understand? Think you’re able to configure a WordPress site with IndieWeb features now? Let’s take it to the comments!\n\nDe-Mystifying IndieWeb on a WordPress Site originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366388",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-14T16:48:34.000Z",
      "date_modified": "2022-06-14T16:48:34.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366260",
      "url": "https://css-tricks.com/useful-tools-for-visualizing-databases-on-a-budget/",
      "title": "Useful Tools for Visualizing Databases on a Budget",
      "summary": "A diagram is a graphical representation of information that depicts the structure, relationship, or operation of anything. Diagrams enable your audience to visually grasp hidden information and engage with them in ways that words alone cannot. Depending on the type …\n\nUseful Tools for Visualizing Databases on a Budget originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>A diagram is a graphical representation of information that depicts the structure, relationship, or operation of anything. Diagrams enable your audience to visually grasp hidden information and engage with them in ways that words alone cannot. Depending on the type of project, there are numerous ways to use diagrams. For example, if you want to depict the relationship between distinct pieces, we usually use an Entity Relationship Diagram (ERD). There are many great tools that can help you sketch out your database designs beautifully.</p>\n\n\n\n<p>In this article, I will be sharing some of my favorite tools that I use to curate my data structures and bring my ideas to life.</p>\n\n\n\n<span id=\"more-366260\"></span>\n\n\n\n<h3><strong>Google Docs Draw</strong>ing</h3>\n\n\n\n<p>The drawing function in <a href=\"https://docs.google.com/\" rel=\"noopener\">Google Docs</a> allows you to add illustrations to your pages. You can add custom shapes, charts, graphs, infographics, and text boxes to your document with the built-in drawing tool.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"801\" height=\"400\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs.png?resize=801%2C400&#038;ssl=1\" alt=\"Screenshot of database entity relationships using Google Docs.\" class=\"wp-image-366302\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs.png?w=801&amp;ssl=1 801w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs.png?resize=768%2C384&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h4><strong>Sketching with Google Docs</strong></h4>\n\n\n\n<p>Although it is simple to add a graphic to your Google Docs, the procedure is not totally visible. Here&#8217;s how:</p>\n\n\n\n<p>1 . Open a new document on Google Docs.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"403\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-1.jpg?resize=1000%2C403&#038;ssl=1\" alt=\"Screenshot of a new document in Google Docs.\" class=\"wp-image-366323\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-1.jpg?w=1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-1.jpg?resize=300%2C121&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-1.jpg?resize=768%2C310&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>2 . Click on the insert button and select <strong>Drawing</strong> . Then, from the drop-down option, choose <strong>New</strong> to open the drawing screen.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"414\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-2.jpg?resize=1000%2C414&#038;ssl=1\" alt=\"Screenshot of adding a new Drawing in Google Docs.\" class=\"wp-image-366324\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-2.jpg?w=1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-2.jpg?resize=300%2C124&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-2.jpg?resize=768%2C318&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>3 . You can use the toolbox on this screen to add text boxes, select lines, and shapes, and modify the colors of your drawing.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"429\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-3.jpg?resize=1000%2C429&#038;ssl=1\" alt=\"Screenshot of selecting an Arrow in Google Docs.\" class=\"wp-image-366325\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-3.jpg?w=1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-3.jpg?resize=300%2C129&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-3.jpg?resize=768%2C329&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>4 . You may also use the cursor to adjust the size of your drawings and the color of your designs by using the toolbox at the top of your screen.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"432\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-4.jpg?resize=1000%2C432&#038;ssl=1\" alt=\"Screenshot of customizing a drawing in Google Docs.\" class=\"wp-image-366326\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-4.jpg?w=1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-4.jpg?resize=300%2C130&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-4.jpg?resize=768%2C332&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>5 . When finished, click the <strong>Save</strong> and close button. You can click on the &#8220;<strong>File</strong>&#8221; toolbar displayed on the top of your screen to download your document.</p>\n\n\n\n<h4>Features</h4>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Cost</td><td>Free.</td></tr><tr><td>CLI? GUI? Online?</td><td>Online.</td></tr><tr><td>Requires an Account?</td><td>Yes, a Google account is required.</td></tr><tr><td>Collaborative Editing?</td><td>Yes, with Google Drive sharing.</td></tr><tr><td>Import SQL</td><td>Not Applicable.</td></tr><tr><td>Export SQL</td><td>Not Applicable.</td></tr><tr><td>Export Formats</td><td>.doc, .pdf, .rtf, .odt, .txt, .html, .epub</td></tr><tr><td>Generate Shareable URL</td><td>Yes.</td></tr></tbody></table></figure>\n\n\n\n<p>Google Docs offers amazing convenience. However, diagramming databases is not something it was intended for. You may find yourself frustrated with redrawing arrows and relationships if you are making frequent edits to your model.</p>\n\n\n\n<h3>Graphviz</h3>\n\n\n\n<p><a href=\"https://graphviz.org/\" rel=\"noopener\">Graphviz</a> is a free graph visualization software that allows us to express information diagrammatically.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"683\" height=\"422\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-graphviz.png?resize=683%2C422&#038;ssl=1\" alt=\"Screenshot of database entity relationships using Graphviz.\" class=\"wp-image-366301\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-graphviz.png?w=683&amp;ssl=1 683w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-graphviz.png?resize=300%2C185&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Graphviz implements the DOT language. The DOT language is an abstract grammar that makes use of terminals, non terminals, parentheses, square brackets, and vertical bars. More information about the DOT language can be found in its <a href=\"https://graphviz.org/doc/info/lang.html\" rel=\"noopener\">documentation</a>.</p>\n\n\n\n<h4>Features</h4>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Cost</td><td>Free.</td></tr><tr><td>CLI? GUI? Online?</td><td>CLI.<br><a href=\"https://graphviz.org/resources/#editor-plugins\" rel=\"noopener\">Visual Studio Code, Eclipse, and Notepad++</a>.<br><a href=\"https://graphviz.org/resources/#graphical-interfaces\" rel=\"noopener\">Graphical Interfaces</a>.</td></tr><tr><td>Requires an Account?</td><td>No.</td></tr><tr><td>Collaborative Editing?</td><td>Not Applicable.</td></tr><tr><td>Import SQL</td><td>Yes, using SQL Graphviz.</td></tr><tr><td>Export SQL</td><td>Yes, using SQL Graphviz.</td></tr><tr><td>Export Formats</td><td><a href=\"https://graphviz.org/docs/outputs/\" rel=\"noopener\">.gif, .png, .jpeg, .json, .pdf</a> and more</td></tr><tr><td>Generate Shareable URL</td><td>Not Applicable.</td></tr></tbody></table></figure>\n\n\n\n<p>Graphviz has an impressive and supportive community. However, a high level of SQL support is only available when you install additional third-party software. This overhead may make it less approachable to users that are not comfortable setting up their computer to support these tools.</p>\n\n\n\n<h2>ERDPlus</h2>\n\n\n\n<p><a href=\"https://erdplus.com/\" rel=\"noopener\">ERDPlus</a> is a database modeling tool that allows you to create Entity Relationship Diagrams, Relational Schemas, Star Schemas, and SQL DDL statements.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-erdplus.png?resize=800%2C500&#038;ssl=1\" alt=\"Screenshot of database entity relationships using ERDPlus.\" class=\"wp-image-366300\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-erdplus.png?w=800&amp;ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-erdplus.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-erdplus.png?resize=768%2C480&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It includes a brief guide on how to create your ER diagrams, which is especially useful for beginners. You can also easily convert your created ER diagrams to relation schemas.</p>\n\n\n\n<h4>Features</h4>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Cost</td><td>Free.</td></tr><tr><td>CLI? GUI? Online?</td><td>Online.</td></tr><tr><td>Requires an Account?</td><td>Not required, but recommended for saving.</td></tr><tr><td>Collaborative Editing?</td><td>Not Applicable.</td></tr><tr><td>Import SQL</td><td>No.</td></tr><tr><td>Export SQL</td><td>Yes, with the support of SQL DDL statements.</td></tr><tr><td>Export Formats</td><td>.png</td></tr><tr><td>Generate Shareable URL</td><td>Not Applicable.</td></tr></tbody></table></figure>\n\n\n\n<p>ERDPlus is suited for SQL. It does lack additional export formats and ability to share with teams, but these features are not necessary with import and export.</p>\n\n\n\n<h3>Diagrams.net</h3>\n\n\n\n<p><a href=\"https://www.diagrams.net/\" rel=\"noopener\">Diagrams.net</a> (previously Draw.io) is a free online diagramming tool that can be used to create flowcharts, UML diagrams, database models, and other types of diagrams.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"486\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?resize=1024%2C486&#038;ssl=1\" alt=\"Screenshot of database entity relationships using Diagrams.net.\" class=\"wp-image-366299\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?resize=1024%2C486&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?resize=300%2C142&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?resize=768%2C364&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?w=1136&amp;ssl=1 1136w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h4>Features</h4>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Cost</td><td>Free.</td></tr><tr><td>CLI? GUI? Online?</td><td>Desktop and Online.</td></tr><tr><td>Requires an Account?</td><td>Not required, but recommended for saving.</td></tr><tr><td>Collaborative Editing?</td><td>Sharing requires Google Drive or OneDrive.</td></tr><tr><td>Import SQL</td><td><a href=\"https://www.diagrams.net/doc/faq/sql-plugin\" rel=\"noopener\">Yes</a>.</td></tr><tr><td>Export SQL</td><td>No.</td></tr><tr><td>Export Formats</td><td><a href=\"https://www.diagrams.net/doc/faq/export-diagram\" rel=\"noopener\">.png, .jpeg, .svg, .pdf, .html</a> and more.</td></tr><tr><td>Generate Shareable URL</td><td><a href=\"https://www.diagrams.net/doc/faq/publish-diagram-as-link\" rel=\"noopener\">Yes, export as URL an option</a>.</td></tr></tbody></table></figure>\n\n\n\n<p>Diagrams.net is designed to support many different workflows. Its ability to easily integrate with third-party integrations such as Trello, Quip, Notion, and others distinguishes it from the other options. The ability to share and collaborate may make it work well for collaborative teams.</p>\n\n\n\n<h3>Conclusion</h3>\n\n\n\n<p>This article is based on using free database tools that could help visualize your ideas and their capabilities with limitations to great details on how to use these tools.</p>\n\n\n\n<p>In my research, I also came across other excellent tools with free trials available for creating database diagrams like Lucidchart, EDrawMax, and, DrawSQL. However, these free trials have limitations which may make them less suited for developers working on multiple projects.</p>\n\n\n\n<p>I strongly recommend that you read the documentation for each of these tools to determine what works best for you and, most importantly, to avoid any difficulties in using these tools.</p>\n\n\n\n<p>Thank you for taking the time to read this far, and I hope you found what you were looking for. Have a wonderful day!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/useful-tools-for-visualizing-databases-on-a-budget/\">Useful Tools for Visualizing Databases on a Budget</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "A diagram is a graphical representation of information that depicts the structure, relationship, or operation of anything. Diagrams enable your audience to visually grasp hidden information and engage with them in ways that words alone cannot. Depending on the type of project, there are numerous ways to use diagrams. For example, if you want to depict the relationship between distinct pieces, we usually use an Entity Relationship Diagram (ERD). There are many great tools that can help you sketch out your database designs beautifully.\n\n\n\nIn this article, I will be sharing some of my favorite tools that I use to curate my data structures and bring my ideas to life.\n\n\n\n\n\n\n\nGoogle Docs Drawing\n\n\n\nThe drawing function in Google Docs allows you to add illustrations to your pages. You can add custom shapes, charts, graphs, infographics, and text boxes to your document with the built-in drawing tool.\n\n\n\n\n\n\n\nSketching with Google Docs\n\n\n\nAlthough it is simple to add a graphic to your Google Docs, the procedure is not totally visible. Here’s how:\n\n\n\n1 . Open a new document on Google Docs.\n\n\n\n\n\n\n\n2 . Click on the insert button and select Drawing . Then, from the drop-down option, choose New to open the drawing screen.\n\n\n\n\n\n\n\n3 . You can use the toolbox on this screen to add text boxes, select lines, and shapes, and modify the colors of your drawing.\n\n\n\n\n\n\n\n4 . You may also use the cursor to adjust the size of your drawings and the color of your designs by using the toolbox at the top of your screen.\n\n\n\n\n\n\n\n5 . When finished, click the Save and close button. You can click on the “File” toolbar displayed on the top of your screen to download your document.\n\n\n\nFeatures\n\n\n\nCostFree.CLI? GUI? Online?Online.Requires an Account?Yes, a Google account is required.Collaborative Editing?Yes, with Google Drive sharing.Import SQLNot Applicable.Export SQLNot Applicable.Export Formats.doc, .pdf, .rtf, .odt, .txt, .html, .epubGenerate Shareable URLYes.\n\n\n\nGoogle Docs offers amazing convenience. However, diagramming databases is not something it was intended for. You may find yourself frustrated with redrawing arrows and relationships if you are making frequent edits to your model.\n\n\n\nGraphviz\n\n\n\nGraphviz is a free graph visualization software that allows us to express information diagrammatically.\n\n\n\n\n\n\n\nGraphviz implements the DOT language. The DOT language is an abstract grammar that makes use of terminals, non terminals, parentheses, square brackets, and vertical bars. More information about the DOT language can be found in its documentation.\n\n\n\nFeatures\n\n\n\nCostFree.CLI? GUI? Online?CLI.Visual Studio Code, Eclipse, and Notepad++.Graphical Interfaces.Requires an Account?No.Collaborative Editing?Not Applicable.Import SQLYes, using SQL Graphviz.Export SQLYes, using SQL Graphviz.Export Formats.gif, .png, .jpeg, .json, .pdf and moreGenerate Shareable URLNot Applicable.\n\n\n\nGraphviz has an impressive and supportive community. However, a high level of SQL support is only available when you install additional third-party software. This overhead may make it less approachable to users that are not comfortable setting up their computer to support these tools.\n\n\n\nERDPlus\n\n\n\nERDPlus is a database modeling tool that allows you to create Entity Relationship Diagrams, Relational Schemas, Star Schemas, and SQL DDL statements.\n\n\n\n\n\n\n\nIt includes a brief guide on how to create your ER diagrams, which is especially useful for beginners. You can also easily convert your created ER diagrams to relation schemas.\n\n\n\nFeatures\n\n\n\nCostFree.CLI? GUI? Online?Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Not Applicable.Import SQLNo.Export SQLYes, with the support of SQL DDL statements.Export Formats.pngGenerate Shareable URLNot Applicable.\n\n\n\nERDPlus is suited for SQL. It does lack additional export formats and ability to share with teams, but these features are not necessary with import and export.\n\n\n\nDiagrams.net\n\n\n\nDiagrams.net (previously Draw.io) is a free online diagramming tool that can be used to create flowcharts, UML diagrams, database models, and other types of diagrams.\n\n\n\n\n\n\n\nFeatures\n\n\n\nCostFree.CLI? GUI? Online?Desktop and Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Sharing requires Google Drive or OneDrive.Import SQLYes.Export SQLNo.Export Formats.png, .jpeg, .svg, .pdf, .html and more.Generate Shareable URLYes, export as URL an option.\n\n\n\nDiagrams.net is designed to support many different workflows. Its ability to easily integrate with third-party integrations such as Trello, Quip, Notion, and others distinguishes it from the other options. The ability to share and collaborate may make it work well for collaborative teams.\n\n\n\nConclusion\n\n\n\nThis article is based on using free database tools that could help visualize your ideas and their capabilities with limitations to great details on how to use these tools.\n\n\n\nIn my research, I also came across other excellent tools with free trials available for creating database diagrams like Lucidchart, EDrawMax, and, DrawSQL. However, these free trials have limitations which may make them less suited for developers working on multiple projects.\n\n\n\nI strongly recommend that you read the documentation for each of these tools to determine what works best for you and, most importantly, to avoid any difficulties in using these tools.\n\n\n\nThank you for taking the time to read this far, and I hope you found what you were looking for. Have a wonderful day!\n\nUseful Tools for Visualizing Databases on a Budget originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366260",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-13T19:15:26.000Z",
      "date_modified": "2022-06-13T19:15:26.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366266",
      "url": "https://css-tricks.com/single-element-loaders-the-spinner/",
      "title": "Single Element Loaders: The Spinner",
      "summary": "Making CSS-only loaders is one of my favorite tasks. It’s always satisfying to look at those infinite animations. And, of course, there are lots of techniques and approaches to make them — no need to look further than CodePen to …\n\nSingle Element Loaders: The Spinner originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Making CSS-only loaders is one of my favorite tasks. It’s always satisfying to look at those infinite animations. And, of course, there are <em>lots</em> of techniques and approaches to make them — no need to <a href=\"https://codepen.io/collection/KLDEaD\" rel=\"noopener\">look further than CodePen</a> to see just how many. In this article, though, we will see how to make a single element loader writing as little code as possible.</p>\n\n\n\n<span id=\"more-366266\"></span>\n\n\n\n<p>I have <a href=\"https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje\" rel=\"noopener\">made a collection of more than 500 single div loaders</a> and in this four-part series, I am going to share the tricks I used to create many of them. We will cover a huge number of examples, showing how small adjustments can lead to fun variations, and how little code we need to write to make it all happen!</p>\n\n\n\n<div class=\"wp-container-55 wp-block-group ticss-c35bb282\"><div class=\"wp-block-group__inner-container\">\n<h4 id=\"h-advanced-git-series\">Single-Element Loaders series:</h4>\n\n\n\n<ol><li>Single Element Loaders: The Spinner — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-going-3d/\">Single Element Loaders: Going 3D</a></li></ol>\n</div></div>\n\n\n\n<p>For this first article, we are going to create a one of the more common loader patterns: spinning bars:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNpbMvM\" src=\"//codepen.io/anon/embed/rNpbMvM?height=450&amp;theme-id=1&amp;slug-hash=rNpbMvM&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNpbMvM\" title=\"CodePen Embed rNpbMvM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Here’s the approach</h3>\n\n\n\n<p>A trivial implementation for this loader is to create one element for each bar wrapped inside a parent element (for nine total elements), then play with <code>opacity</code> and <code>transform</code> to get the spinning effect.</p>\n\n\n\n<p>My implementation, though, requires only one element:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"loader\">&lt;/div></code></pre>\n\n\n\n<p>&#8230;and 10 CSS declarations:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1;\n  display: grid;\n  mask: conic-gradient(from 22deg, #0003, #000);\n  animation: load 1s steps(8) infinite;\n}\n.loader,\n.loader:before {\n  --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\n  background: \n    var(--_g)/34% 8%  space no-repeat,\n    var(--_g)/8%  34% no-repeat space;\n}\n.loader:before {\n  content: \"\";\n  transform: rotate(45deg);\n}\n@keyframes load {\n  to { transform: rotate(1turn); }\n}</code></pre>\n\n\n\n<h3>Let’s break that down</h3>\n\n\n\n<p>At first glance, the code may look strange but you will see that it’s more simple than what you might think. The first step is to define the dimension of the element. In our case, it’s a <code>150px</code> square. We can put <a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\"><code>aspect-ratio</code></a> to use so the element stays square no matter what.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1; /* make height equal to width */\n}</code></pre>\n\n\n\n<p>When building CSS loaders, I always try to have one value for controlling the overall size. In this case, it’s the <code>width</code> and all the calculations we cover will refer to that value. This allows me to change a single value to control the loader. It’s always important to be able to easily adjust the size of our loaders without the need to adjust a lot of additional values.</p>\n\n\n\n<p>Next, we will use gradients to create the bars. This is the trickiest part! Let’s use <em>one</em> gradient to create <em>two</em> bars like the below:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background: linear-gradient(#17177c 0 0) 50%/34% 8% space no-repeat;</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"577\" height=\"340\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651414613507_image.png?resize=577%2C340&#038;ssl=1\" alt=\"Showing a space between two gradient lines for a single element loader.\" class=\"wp-image-366269\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651414613507_image.png?w=577&amp;ssl=1 577w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651414613507_image.png?resize=300%2C177&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Our gradient is defined with one color and two color stops. The result is a solid color with no fading or transitions. The size is equal to <code>34%</code> wide and <code>8%</code> tall. It’s also placed in the center (<code>50%</code>). The trick is the use of the keyword value <code>space</code> — this duplicates the gradient, giving us two total bars.</p>\n\n\n\n<p>From <a href=\"https://www.w3.org/TR/css-backgrounds-3/#valdef-background-repeat-space\" rel=\"noopener\">the specification</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area.</p></blockquote>\n\n\n\n<p>I am using a width equal to <code>34%</code> which means we cannot have more than two bars (<code>3*34%</code> is greater than <code>100%</code>) but with two bars we will have empty spaces (<code>100% - 2 * 34% = 32%</code>). That space is placed in the center between the two bars. In other words, we use a width for the gradient that is between <code>33%</code> and <code>50%</code> to make sure we have at least two bars with a little bit of space between them. The value <code>space</code> is what correctly places them for us.</p>\n\n\n\n<p>We do the same and make a second similar gradient to get two more bars at the top and bottom, which give us a <code>background</code> property value of:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background: \n linear-gradient(#17177c 0 0) 50%/34% 8%  space no-repeat,\n linear-gradient(#17177c 0 0) 50%/8%  34% no-repeat space;</code></pre>\n\n\n\n<p>We can optimize that using a CSS variable to avoid repetition:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\nbackground: \n var(--_g)/34% 8%  space no-repeat,\n var(--_g)/8%  34% no-repeat space;</code></pre>\n\n\n\n<p>So, now we have four bars and, thanks to CSS variables, we can write the color value once which makes it easy to update later (like we did with the size of the loader).</p>\n\n\n\n<p>To create the remaining bars, let’s tap into the <code>.loader</code> element and its <code>::before</code> pseudo-element to get four more bars for a grand total of eight in all.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1;\n  display: grid;\n}\n.loader,\n.loader::before {\n  --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\n  background: \n    var(--_g)/34% 8%  space no-repeat,\n    var(--_g)/8%  34% no-repeat space;\n}\n.loader::before {\n  content: \"\";\n  transform: rotate(45deg);\n}</code></pre>\n\n\n\n<p>Note the use of <code>display: grid</code>. This allows us to rely on the grid’s default <code>stretch</code> alignment to make the pseudo-element cover the whole area of its parent; thus there’s no need to specify a dimension on it — another trick that reduces the code and avoid us to deal with a lot of values!</p>\n\n\n\n<p>Now let’s rotate the pseudo-element by <code>45deg</code> to position the remaining bars. Hover the following demo to see the trick:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWQWQOV\" src=\"//codepen.io/anon/embed/QWQWQOV?height=450&amp;theme-id=1&amp;slug-hash=QWQWQOV&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWQWQOV\" title=\"CodePen Embed QWQWQOV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Setting opacity</h3>\n\n\n\n<p>What we’re trying to do is create the impression that there is one bar that leaves a trail of fading bars behind it as it travels a circular path. What we need now is to play with the transparency of our bars to make that trail, which we are going to do with CSS <code>mask</code> combined with a conic-gradient as follows:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask: conic-gradient(from 22deg,#0003,#000);</code></pre>\n\n\n\n<p>To better see the trick, let’s apply this to a full-colored box:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYQYQdZ\" src=\"//codepen.io/anon/embed/LYQYQdZ?height=450&amp;theme-id=1&amp;slug-hash=LYQYQdZ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYQYQdZ\" title=\"CodePen Embed LYQYQdZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The transparency of the red color is gradually increasing clockwise. We apply this to our loader and we have the bars with different opacity:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"827\" height=\"278\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651416594508_image.png?resize=827%2C278&#038;ssl=1\" alt=\"Radial gradient plus, spinner bars equals spinner bars with gradients.\" class=\"wp-image-366270\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651416594508_image.png?w=827&amp;ssl=1 827w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651416594508_image.png?resize=300%2C101&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651416594508_image.png?resize=768%2C258&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In reality, each bar appears to fade because it’s masked by a gradient and falls between two semi-transparent colors. It’s hardly noticeable when this runs, so it’s sort of like being able to say that all the bars have the same color with a different level of opacity.</p>\n\n\n\n<h3>The rotation</h3>\n\n\n\n<p>Let’s apply a rotation animation to get our loader. Note, that we need a stepped animation and not a continuous one that’s why I am using <code>steps(8)</code>. <code>8</code> is nothing but the number of the bars, so that value can be changed depending on how many bars are in use.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  animation: load 3s steps(8) infinite;\n}\n\n/* Same as before: */\n@keyframes load {\n  to { transform: rotate(1turn) }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_Yzezemr\" src=\"//codepen.io/anon/embed/preview/Yzezemr?height=450&amp;theme-id=1&amp;slug-hash=Yzezemr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed Yzezemr\" title=\"CodePen Embed Yzezemr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That’s it! We have our loader with only one element and a few lines of CSS. We can easily control its size and color by adjusting one value.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYRYWOq\" src=\"//codepen.io/anon/embed/preview/zYRYWOq?height=450&amp;theme-id=1&amp;slug-hash=zYRYWOq&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYRYWOq\" title=\"CodePen Embed zYRYWOq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Since we only used the <code>::before</code> pseudo-element, we can add four more bars by using <code>::after</code> to end with 12 bars in total and almost the same code:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWQWmWP\" src=\"//codepen.io/anon/embed/preview/QWQWmWP?height=450&amp;theme-id=1&amp;slug-hash=QWQWmWP&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWQWmWP\" title=\"CodePen Embed QWQWmWP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We update the rotation of our pseudo-elements to consider <code>30deg</code> and <code>60deg</code> instead of <code>45deg</code> while using an twelve-step animation, rather than eight. I also decreased the height to <code>5%</code> instead of <code>8%</code> to make the bars a little thinner.</p>\n\n\n\n<p>Notice, too, that we have <code>grid-area: 1/1</code> on the pseudo-elements. This allows us to place them in the same area as one another, stacked on top of each other.</p>\n\n\n\n<p>Guess what? We can reach for the same loader using another implementation:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJQzbzr\" src=\"//codepen.io/anon/embed/preview/OJQzbzr?height=450&amp;theme-id=1&amp;slug-hash=OJQzbzr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJQzbzr\" title=\"CodePen Embed OJQzbzr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Can you figure out the logic behind the code? Here is a hint: the opacity is no longer handled with a CSS <code>mask</code> but inside the gradient and is also using the <code>opacity</code> property.</p>\n\n\n\n<h3>Why not dots instead?</h3>\n\n\n\n<p>We can totally do that:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwQyzmY\" src=\"//codepen.io/anon/embed/RwQyzmY?height=450&amp;theme-id=1&amp;slug-hash=RwQyzmY&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwQyzmY\" title=\"CodePen Embed RwQyzmY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you check the code, you will see that we’re now working with a radial gradient instead of a linear one. Otherwise, the concept is exactly the same where the mask creates the impression of opacity, but we made the shapes as circles instead of lines.</p>\n\n\n\n<p>Below is a figure to illustrate the new gradient configuration:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"693\" height=\"293\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1654551247592_image.png?resize=693%2C293&#038;ssl=1\" alt=\"Showing placement of dots in the single-element loader.\" class=\"wp-image-366271\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1654551247592_image.png?w=693&amp;ssl=1 693w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1654551247592_image.png?resize=300%2C127&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you&#8217;re using Safari, note that the demo may be buggy. That&#8217;s because Safari currently lacks support for the <code>at</code> syntax in radial gradients. But we can reconfigure the gradient a bit to overcome that:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"6,12\"><code markup=\"tt\">.loader,\n.loader:before,\n.loader:after {\n  background:\n    radial-gradient(\n      circle closest-side,\n      currentColor 90%,\n      #0000 98%\n    ) \n    50% -150%/20% 80% repeat-y,\n    radial-gradient(\n      circle closest-side,\n      currentColor 90%,\n      #0000 98%\n    ) \n    -150% 50%/80% 20% repeat-x;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYVLKOv/555436ef8e29838fff4872caa1dcf8d9\" src=\"//codepen.io/anon/embed/preview/eYVLKOv/555436ef8e29838fff4872caa1dcf8d9?height=450&amp;theme-id=1&amp;slug-hash=eYVLKOv/555436ef8e29838fff4872caa1dcf8d9&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYVLKOv/555436ef8e29838fff4872caa1dcf8d9\" title=\"CodePen Embed eYVLKOv/555436ef8e29838fff4872caa1dcf8d9\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>More loader examples</h3>\n\n\n\n<p>Here is another idea for a spinner loader similar to the previous one.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJyaNy\" src=\"//codepen.io/anon/embed/PoJyaNy?height=450&amp;theme-id=1&amp;slug-hash=PoJyaNy&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJyaNy\" title=\"CodePen Embed PoJyaNy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>For this one, I am only relying on <code>background</code> and <code>mask</code> to create the shape (no pseudo-elements needed). I am also defining the configuration with CSS variables to be able to create a lot of variations from the same code — another example of just the powers of CSS variables. <a href=\"https://www.freecodecamp.org/news/how-to-create-a-css-only-loader/\" rel=\"noopener\">I wrote another article about this technique</a> if you want to more details.</p>\n\n\n\n<p class=\"is-style-explanation\">Note that some browsers still rely on a <code>-webkit-</code> prefix for <code>mask-composite</code> with its own set of values, and will not display the spinner in the demo. <a href=\"https://codepen.io/t_afif/pen/wvyYLpJ\" rel=\"noopener\">Here is a way to do it</a> without <code>mast-composite</code> for more browser support.</p>\n\n\n\n<p>I have another one for you:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYPqMgq\" src=\"//codepen.io/anon/embed/preview/zYPqMgq?height=450&amp;theme-id=1&amp;slug-hash=zYPqMgq&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYPqMgq\" title=\"CodePen Embed zYPqMgq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>For this one, I am using a <code>background-color</code> to control the color, and use <code>mask</code> and <code>mask-composite</code> to create the final shape:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1653920041342_image.png?resize=858%2C312&#038;ssl=1\" alt=\"Different steps for applying a master to a element in the shape of a circle.\" class=\"wp-image-366272\" width=\"858\" height=\"312\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1653920041342_image.png?w=858&amp;ssl=1 858w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1653920041342_image.png?resize=300%2C109&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1653920041342_image.png?resize=768%2C279&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Before we end, here are some more spinning loaders I made a while back. I am relying on different techniques but still using gradients, masks, pseudo-element, etc. It could be a good exercise to figure out the logic of each one and learn new tricks at the same time. This said, if you have any question about them, the comment section is down below.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poegNEO\" src=\"//codepen.io/anon/embed/preview/poegNEO?height=450&amp;theme-id=1&amp;slug-hash=poegNEO&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poegNEO\" title=\"CodePen Embed poegNEO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLMXBRL\" src=\"//codepen.io/anon/embed/preview/yLMXBRL?height=450&amp;theme-id=1&amp;slug-hash=yLMXBRL&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLMXBRL\" title=\"CodePen Embed yLMXBRL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZEevvXW\" src=\"//codepen.io/anon/embed/preview/ZEevvXW?height=450&amp;theme-id=1&amp;slug-hash=ZEevvXW&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZEevvXW\" title=\"CodePen Embed ZEevvXW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Wrapping up</h3>\n\n\n\n<p>See, there’s so much we can do in CSS with nothing but a single div, a couple of gradients, pseudo-elements, variables. It seems like we created a whole bunch of different spinning loaders, but they’re all basically the same thing with slight modifications.</p>\n\n\n\n<p>This is only the the beginning. In this series, we will be looking at more ideas and advanced concepts for creating CSS loaders.</p>\n\n\n\n<div class=\"wp-container-56 wp-block-group ticss-c35bb282\"><div class=\"wp-block-group__inner-container\">\n<h4 id=\"h-advanced-git-series\">Single-Element Loaders series:</h4>\n\n\n\n<ol><li>Single Element Loaders: The Spinner — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-going-3d/\">Single Element Loaders: Going 3D</a></li></ol>\n</div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Making CSS-only loaders is one of my favorite tasks. It’s always satisfying to look at those infinite animations. And, of course, there are lots of techniques and approaches to make them — no need to look further than CodePen to see just how many. In this article, though, we will see how to make a single element loader writing as little code as possible.\n\n\n\n\n\n\n\nI have made a collection of more than 500 single div loaders and in this four-part series, I am going to share the tricks I used to create many of them. We will cover a huge number of examples, showing how small adjustments can lead to fun variations, and how little code we need to write to make it all happen!\n\n\n\n\nSingle-Element Loaders series:\n\n\n\nSingle Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D\n\n\n\n\nFor this first article, we are going to create a one of the more common loader patterns: spinning bars:\n\n\n\nCodePen Embed Fallback\n\n\n\nHere’s the approach\n\n\n\nA trivial implementation for this loader is to create one element for each bar wrapped inside a parent element (for nine total elements), then play with opacity and transform to get the spinning effect.\n\n\n\nMy implementation, though, requires only one element:\n\n\n\n<div class=\"loader\"></div>\n\n\n\n…and 10 CSS declarations:\n\n\n\n.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1;\n  display: grid;\n  mask: conic-gradient(from 22deg, #0003, #000);\n  animation: load 1s steps(8) infinite;\n}\n.loader,\n.loader:before {\n  --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\n  background: \n    var(--_g)/34% 8%  space no-repeat,\n    var(--_g)/8%  34% no-repeat space;\n}\n.loader:before {\n  content: \"\";\n  transform: rotate(45deg);\n}\n@keyframes load {\n  to { transform: rotate(1turn); }\n}\n\n\n\nLet’s break that down\n\n\n\nAt first glance, the code may look strange but you will see that it’s more simple than what you might think. The first step is to define the dimension of the element. In our case, it’s a 150px square. We can put aspect-ratio to use so the element stays square no matter what.\n\n\n\n.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1; /* make height equal to width */\n}\n\n\n\nWhen building CSS loaders, I always try to have one value for controlling the overall size. In this case, it’s the width and all the calculations we cover will refer to that value. This allows me to change a single value to control the loader. It’s always important to be able to easily adjust the size of our loaders without the need to adjust a lot of additional values.\n\n\n\nNext, we will use gradients to create the bars. This is the trickiest part! Let’s use one gradient to create two bars like the below:\n\n\n\nbackground: linear-gradient(#17177c 0 0) 50%/34% 8% space no-repeat;\n\n\n\n\n\n\n\nOur gradient is defined with one color and two color stops. The result is a solid color with no fading or transitions. The size is equal to 34% wide and 8% tall. It’s also placed in the center (50%). The trick is the use of the keyword value space — this duplicates the gradient, giving us two total bars.\n\n\n\nFrom the specification:\n\n\n\nThe image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area.\n\n\n\nI am using a width equal to 34% which means we cannot have more than two bars (3*34% is greater than 100%) but with two bars we will have empty spaces (100% - 2 * 34% = 32%). That space is placed in the center between the two bars. In other words, we use a width for the gradient that is between 33% and 50% to make sure we have at least two bars with a little bit of space between them. The value space is what correctly places them for us.\n\n\n\nWe do the same and make a second similar gradient to get two more bars at the top and bottom, which give us a background property value of:\n\n\n\nbackground: \n linear-gradient(#17177c 0 0) 50%/34% 8%  space no-repeat,\n linear-gradient(#17177c 0 0) 50%/8%  34% no-repeat space;\n\n\n\nWe can optimize that using a CSS variable to avoid repetition:\n\n\n\n--_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\nbackground: \n var(--_g)/34% 8%  space no-repeat,\n var(--_g)/8%  34% no-repeat space;\n\n\n\nSo, now we have four bars and, thanks to CSS variables, we can write the color value once which makes it easy to update later (like we did with the size of the loader).\n\n\n\nTo create the remaining bars, let’s tap into the .loader element and its ::before pseudo-element to get four more bars for a grand total of eight in all.\n\n\n\n.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1;\n  display: grid;\n}\n.loader,\n.loader::before {\n  --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\n  background: \n    var(--_g)/34% 8%  space no-repeat,\n    var(--_g)/8%  34% no-repeat space;\n}\n.loader::before {\n  content: \"\";\n  transform: rotate(45deg);\n}\n\n\n\nNote the use of display: grid. This allows us to rely on the grid’s default stretch alignment to make the pseudo-element cover the whole area of its parent; thus there’s no need to specify a dimension on it — another trick that reduces the code and avoid us to deal with a lot of values!\n\n\n\nNow let’s rotate the pseudo-element by 45deg to position the remaining bars. Hover the following demo to see the trick:\n\n\n\nCodePen Embed Fallback\n\n\n\nSetting opacity\n\n\n\nWhat we’re trying to do is create the impression that there is one bar that leaves a trail of fading bars behind it as it travels a circular path. What we need now is to play with the transparency of our bars to make that trail, which we are going to do with CSS mask combined with a conic-gradient as follows:\n\n\n\nmask: conic-gradient(from 22deg,#0003,#000);\n\n\n\nTo better see the trick, let’s apply this to a full-colored box:\n\n\n\nCodePen Embed Fallback\n\n\n\nThe transparency of the red color is gradually increasing clockwise. We apply this to our loader and we have the bars with different opacity:\n\n\n\n\n\n\n\nIn reality, each bar appears to fade because it’s masked by a gradient and falls between two semi-transparent colors. It’s hardly noticeable when this runs, so it’s sort of like being able to say that all the bars have the same color with a different level of opacity.\n\n\n\nThe rotation\n\n\n\nLet’s apply a rotation animation to get our loader. Note, that we need a stepped animation and not a continuous one that’s why I am using steps(8). 8 is nothing but the number of the bars, so that value can be changed depending on how many bars are in use.\n\n\n\n.loader {\n  animation: load 3s steps(8) infinite;\n}\n\n/* Same as before: */\n@keyframes load {\n  to { transform: rotate(1turn) }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nThat’s it! We have our loader with only one element and a few lines of CSS. We can easily control its size and color by adjusting one value.\n\n\n\nCodePen Embed Fallback\n\n\n\nSince we only used the ::before pseudo-element, we can add four more bars by using ::after to end with 12 bars in total and almost the same code:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe update the rotation of our pseudo-elements to consider 30deg and 60deg instead of 45deg while using an twelve-step animation, rather than eight. I also decreased the height to 5% instead of 8% to make the bars a little thinner.\n\n\n\nNotice, too, that we have grid-area: 1/1 on the pseudo-elements. This allows us to place them in the same area as one another, stacked on top of each other.\n\n\n\nGuess what? We can reach for the same loader using another implementation:\n\n\n\nCodePen Embed Fallback\n\n\n\nCan you figure out the logic behind the code? Here is a hint: the opacity is no longer handled with a CSS mask but inside the gradient and is also using the opacity property.\n\n\n\nWhy not dots instead?\n\n\n\nWe can totally do that:\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you check the code, you will see that we’re now working with a radial gradient instead of a linear one. Otherwise, the concept is exactly the same where the mask creates the impression of opacity, but we made the shapes as circles instead of lines.\n\n\n\nBelow is a figure to illustrate the new gradient configuration:\n\n\n\n\n\n\n\nIf you’re using Safari, note that the demo may be buggy. That’s because Safari currently lacks support for the at syntax in radial gradients. But we can reconfigure the gradient a bit to overcome that:\n\n\n\n.loader,\n.loader:before,\n.loader:after {\n  background:\n    radial-gradient(\n      circle closest-side,\n      currentColor 90%,\n      #0000 98%\n    ) \n    50% -150%/20% 80% repeat-y,\n    radial-gradient(\n      circle closest-side,\n      currentColor 90%,\n      #0000 98%\n    ) \n    -150% 50%/80% 20% repeat-x;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nMore loader examples\n\n\n\nHere is another idea for a spinner loader similar to the previous one.\n\n\n\nCodePen Embed Fallback\n\n\n\nFor this one, I am only relying on background and mask to create the shape (no pseudo-elements needed). I am also defining the configuration with CSS variables to be able to create a lot of variations from the same code — another example of just the powers of CSS variables. I wrote another article about this technique if you want to more details.\n\n\n\nNote that some browsers still rely on a -webkit- prefix for mask-composite with its own set of values, and will not display the spinner in the demo. Here is a way to do it without mast-composite for more browser support.\n\n\n\nI have another one for you:\n\n\n\nCodePen Embed Fallback\n\n\n\nFor this one, I am using a background-color to control the color, and use mask and mask-composite to create the final shape:\n\n\n\n\n\n\n\nBefore we end, here are some more spinning loaders I made a while back. I am relying on different techniques but still using gradients, masks, pseudo-element, etc. It could be a good exercise to figure out the logic of each one and learn new tricks at the same time. This said, if you have any question about them, the comment section is down below.\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nWrapping up\n\n\n\nSee, there’s so much we can do in CSS with nothing but a single div, a couple of gradients, pseudo-elements, variables. It seems like we created a whole bunch of different spinning loaders, but they’re all basically the same thing with slight modifications.\n\n\n\nThis is only the the beginning. In this series, we will be looking at more ideas and advanced concepts for creating CSS loaders.\n\n\n\n\nSingle-Element Loaders series:\n\n\n\nSingle Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D\n\n\nSingle Element Loaders: The Spinner originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366266",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-10T14:26:06.000Z",
      "date_modified": "2022-06-10T14:26:06.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366286",
      "url": "https://css-tricks.com/am-i-on-the-indieweb-yet/",
      "title": "Am I on the IndieWeb yet?",
      "summary": "Can’t smash the Like button hard enough for what Miriam Suzanne has to say on the challenging technical hurdles of implementing Webmentions:\n\nThe first round required several online services along with HTML & JS changes to my static site, just to verify my \n\n…\n\nAm I on the IndieWeb yet? originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Can&#8217;t smash the Like button hard enough for what <a href=\"https://www.miriamsuzanne.com/2022/06/04/indiweb/\" rel=\"noopener\">Miriam Suzanne has to say</a> on the challenging technical hurdles of implementing Webmentions:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The first round required several online services along with&nbsp;HTML&nbsp;&amp;&nbsp;JS changes to my static site, just to verify my indieweb identity. Then more changes to the site and more online services to help fetch any mentions&nbsp;<s>(so far, nothing to see, but that’s probably expected)</s>. It seems the only way to test the setup is to launch all those changes publicly, and then ask for other devs to send you&nbsp;mentions.</p><p>[&#8230;]</p><p>I’m an experienced web developer, and I can figure it out. But the steps aren’t simple, and most of my friends&nbsp;<em>are not web developers</em>. So, to me, this all feels like the prototype of an idea – a proof of&nbsp;concept.</p></blockquote>\n\n\n\n<p>A proof of concept for sure. And one that has been around for quite some time. The <a href=\"https://indieweb.org\" rel=\"noopener\">IndieWeb</a> idea of owning your own data and using your website as a social hub is right up my alley — and likely yours, too, as someone working on the front end.</p>\n\n\n\n<span id=\"more-366286\"></span>\n\n\n\n<p class=\"is-style-explanation\"><strong>Update!</strong> David Shanske is one of the developers of the WordPress plugins that support IndieWeb features and he not only published a wonderful explanation of <a href=\"https://david.shanske.com/2022/06/12/indiewebifying-a-wordpress-site-2022-edition/\" rel=\"noopener\">how everything fits together</a>, but also reached out directly and <a href=\"https://css-tricks.com/de-mystifying-indieweb-on-a-wordpress-site/\">helped me wrap it all around my head</a>.</p>\n\n\n\n<p>Yet, I&#8217;ve tinkered on and off with it — specifically <a href=\"https://indieweb.org/Webmention\" rel=\"noopener\">Webmentions</a> — over the past like three years with little to show for it. The problem isn&#8217;t so much the documentation of getting started because <a href=\"https://indieweb.org/Getting_Started\" rel=\"noopener\">it&#8217;s all there</a>. It&#8217;s more a combination of things&#8230;</p>\n\n\n\n<ul><li><strong>The wiki is confusing.</strong> Wikis are super cool in general, but the non-linear nature of it makes it tough to know where to start and where to end.</li><li><strong>The plugin ecosystem is complex.</strong> My personal site is on WordPress and there&#8217;s a plugin designed to make it easy to integrate IndieWeb features on it. Except that it&#8217;s really one plugin that steers you to install several others, each one introducing a technology that I honestly struggle to understand.</li><li><strong>There&#8217;s a bunch of terms to learn.</strong> I mean, &#8220;IndieWeb&#8221; and &#8220;Webmention&#8221; are already difficult to grok. Toss in things like &#8220;Micropub,&#8221; &#8220;Microformats,&#8221; &#8220;IndieAuth,&#8221; and &#8220;Semantic Linkbacks,&#8221; and suddenly it feels like a bunch of puzzle pieces from different puzzles trying to fit together.</li><li><strong>Some middleware seems necessary?</strong> For example, I had to give a service called <a href=\"https://brid.gy\" rel=\"noopener\">Bridgy</a> access to my Twitter to get that activity going. It <a href=\"https://indieweb.org/rel-me#Twitter\" rel=\"noopener\">apparently</a> has something to do with Twitter&#8217;s shortened <code>t.co</code> URLs and making them play well with microformats.</li></ul>\n\n\n\n<p>But, like Miriam, I struggled my way through it and got something working in the end. This is the sort of visual I wish I had when I was first getting started, and maybe it&#8217;ll help you too.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1670\" height=\"1092\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=1670%2C1092&#038;ssl=1\" alt=\"Diagram of IndieWeb integration on a WordPress site.\" class=\"wp-image-366287\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?w=1670&amp;ssl=1 1670w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=300%2C196&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=1024%2C670&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=768%2C502&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=1536%2C1004&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Feels like a lot to get Webmentions going, but maybe that&#8217;s only because I have such a light grasp of the tech and how it all fits together. All the pieces are there, though, and even with the initial struggle, I love the IndieWeb concept, er prototype.</p>\n<p><a href=\"https://www.miriamsuzanne.com/2022/06/04/indiweb/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/am-i-on-the-indieweb-yet/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/am-i-on-the-indieweb-yet/\">Am I on the IndieWeb yet?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Can’t smash the Like button hard enough for what Miriam Suzanne has to say on the challenging technical hurdles of implementing Webmentions:\n\n\n\nThe first round required several online services along with HTML & JS changes to my static site, just to verify my indieweb identity. Then more changes to the site and more online services to help fetch any mentions (so far, nothing to see, but that’s probably expected). It seems the only way to test the setup is to launch all those changes publicly, and then ask for other devs to send you mentions.[…]I’m an experienced web developer, and I can figure it out. But the steps aren’t simple, and most of my friends are not web developers. So, to me, this all feels like the prototype of an idea – a proof of concept.\n\n\n\nA proof of concept for sure. And one that has been around for quite some time. The IndieWeb idea of owning your own data and using your website as a social hub is right up my alley — and likely yours, too, as someone working on the front end.\n\n\n\n\n\n\n\nUpdate! David Shanske is one of the developers of the WordPress plugins that support IndieWeb features and he not only published a wonderful explanation of how everything fits together, but also reached out directly and helped me wrap it all around my head.\n\n\n\nYet, I’ve tinkered on and off with it — specifically Webmentions — over the past like three years with little to show for it. The problem isn’t so much the documentation of getting started because it’s all there. It’s more a combination of things…\n\n\n\nThe wiki is confusing. Wikis are super cool in general, but the non-linear nature of it makes it tough to know where to start and where to end.The plugin ecosystem is complex. My personal site is on WordPress and there’s a plugin designed to make it easy to integrate IndieWeb features on it. Except that it’s really one plugin that steers you to install several others, each one introducing a technology that I honestly struggle to understand.There’s a bunch of terms to learn. I mean, “IndieWeb” and “Webmention” are already difficult to grok. Toss in things like “Micropub,” “Microformats,” “IndieAuth,” and “Semantic Linkbacks,” and suddenly it feels like a bunch of puzzle pieces from different puzzles trying to fit together.Some middleware seems necessary? For example, I had to give a service called Bridgy access to my Twitter to get that activity going. It apparently has something to do with Twitter’s shortened t.co URLs and making them play well with microformats.\n\n\n\nBut, like Miriam, I struggled my way through it and got something working in the end. This is the sort of visual I wish I had when I was first getting started, and maybe it’ll help you too.\n\n\n\n\n\n\n\nFeels like a lot to get Webmentions going, but maybe that’s only because I have such a light grasp of the tech and how it all fits together. All the pieces are there, though, and even with the initial struggle, I love the IndieWeb concept, er prototype.\nTo Shared Link — Permalink on CSS-Tricks\nAm I on the IndieWeb yet? originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/366286",
      "_extIcon": "https://icons.duckduckgo.com/ip2/css-tricks.com.ico",
      "date_published": "2022-06-09T15:32:50.000Z",
      "date_modified": "2022-06-09T15:32:50.000Z"
    }
  ],
  "description": "Tips, Tricks, and Techniques on using Cascading Style Sheets.",
  "home_page_url": "https://css-tricks.com",
  "icon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=32%2C32&ssl=1"
}